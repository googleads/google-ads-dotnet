// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: google/ads/googleads/v10/errors/experiment_arm_error.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Google.Ads.GoogleAds.V10.Errors {

  /// <summary>Holder for reflection information generated from google/ads/googleads/v10/errors/experiment_arm_error.proto</summary>
  public static partial class ExperimentArmErrorReflection {

    #region Descriptor
    /// <summary>File descriptor for google/ads/googleads/v10/errors/experiment_arm_error.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static ExperimentArmErrorReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Cjpnb29nbGUvYWRzL2dvb2dsZWFkcy92MTAvZXJyb3JzL2V4cGVyaW1lbnRf",
            "YXJtX2Vycm9yLnByb3RvEh9nb29nbGUuYWRzLmdvb2dsZWFkcy52MTAuZXJy",
            "b3JzIrEFChZFeHBlcmltZW50QXJtRXJyb3JFbnVtIpYFChJFeHBlcmltZW50",
            "QXJtRXJyb3ISDwoLVU5TUEVDSUZJRUQQABILCgdVTktOT1dOEAESJwojRVhQ",
            "RVJJTUVOVF9BUk1fQ09VTlRfTElNSVRfRVhDRUVERUQQAhIbChdJTlZBTElE",
            "X0NBTVBBSUdOX1NUQVRVUxADEiEKHURVUExJQ0FURV9FWFBFUklNRU5UX0FS",
            "TV9OQU1FEAQSJQohQ0FOTk9UX1NFVF9UUkVBVE1FTlRfQVJNX0NBTVBBSUdO",
            "EAUSHgoaQ0FOTk9UX01PRElGWV9DQU1QQUlHTl9JRFMQBhItCilDQU5OT1Rf",
            "TU9ESUZZX0NBTVBBSUdOX1dJVEhPVVRfU1VGRklYX1NFVBAHEisKJ0NBTk5P",
            "VF9NVVRBVEVfVFJBRkZJQ19TUExJVF9BRlRFUl9TVEFSVBAIEioKJkNBTk5P",
            "VF9BRERfQ0FNUEFJR05fV0lUSF9TSEFSRURfQlVER0VUEAkSKgomQ0FOTk9U",
            "X0FERF9DQU1QQUlHTl9XSVRIX0NVU1RPTV9CVURHRVQQChI0CjBDQU5OT1Rf",
            "QUREX0NBTVBBSUdOU19XSVRIX0RZTkFNSUNfQVNTRVRTX0VOQUJMRUQQCxI1",
            "CjFVTlNVUFBPUlRFRF9DQU1QQUlHTl9BRFZFUlRJU0lOR19DSEFOTkVMX1NV",
            "Ql9UWVBFEAwSLAooQ0FOTk9UX0FERF9CQVNFX0NBTVBBSUdOX1dJVEhfREFU",
            "RV9SQU5HRRANEjEKLUJJRERJTkdfU1RSQVRFR1lfTk9UX1NVUFBPUlRFRF9J",
            "Tl9FWFBFUklNRU5UUxAOEjAKLFRSQUZGSUNfU1BMSVRfTk9UX1NVUFBPUlRF",
            "RF9GT1JfQ0hBTk5FTF9UWVBFEA9C9wEKI2NvbS5nb29nbGUuYWRzLmdvb2ds",
            "ZWFkcy52MTAuZXJyb3JzQhdFeHBlcmltZW50QXJtRXJyb3JQcm90b1ABWkVn",
            "b29nbGUuZ29sYW5nLm9yZy9nZW5wcm90by9nb29nbGVhcGlzL2Fkcy9nb29n",
            "bGVhZHMvdjEwL2Vycm9ycztlcnJvcnOiAgNHQUGqAh9Hb29nbGUuQWRzLkdv",
            "b2dsZUFkcy5WMTAuRXJyb3JzygIfR29vZ2xlXEFkc1xHb29nbGVBZHNcVjEw",
            "XEVycm9yc+oCI0dvb2dsZTo6QWRzOjpHb29nbGVBZHM6OlYxMDo6RXJyb3Jz",
            "YgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Ads.GoogleAds.V10.Errors.ExperimentArmErrorEnum), global::Google.Ads.GoogleAds.V10.Errors.ExperimentArmErrorEnum.Parser, null, null, new[]{ typeof(global::Google.Ads.GoogleAds.V10.Errors.ExperimentArmErrorEnum.Types.ExperimentArmError) }, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  /// <summary>
  /// Container for enum describing possible experiment arm error.
  /// </summary>
  public sealed partial class ExperimentArmErrorEnum : pb::IMessage<ExperimentArmErrorEnum>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<ExperimentArmErrorEnum> _parser = new pb::MessageParser<ExperimentArmErrorEnum>(() => new ExperimentArmErrorEnum());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<ExperimentArmErrorEnum> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Ads.GoogleAds.V10.Errors.ExperimentArmErrorReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ExperimentArmErrorEnum() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ExperimentArmErrorEnum(ExperimentArmErrorEnum other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ExperimentArmErrorEnum Clone() {
      return new ExperimentArmErrorEnum(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as ExperimentArmErrorEnum);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(ExperimentArmErrorEnum other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(ExperimentArmErrorEnum other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
        }
      }
    }
    #endif

    #region Nested types
    /// <summary>Container for nested types declared in the ExperimentArmErrorEnum message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static partial class Types {
      /// <summary>
      /// Enum describing possible experiment arm errors.
      /// </summary>
      public enum ExperimentArmError {
        /// <summary>
        /// Enum unspecified.
        /// </summary>
        [pbr::OriginalName("UNSPECIFIED")] Unspecified = 0,
        /// <summary>
        /// The received error code is not known in this version.
        /// </summary>
        [pbr::OriginalName("UNKNOWN")] Unknown = 1,
        /// <summary>
        /// Number of experiment arms is above limit.
        /// </summary>
        [pbr::OriginalName("EXPERIMENT_ARM_COUNT_LIMIT_EXCEEDED")] ExperimentArmCountLimitExceeded = 2,
        /// <summary>
        /// Cannot add campaign with invalid status to the experiment arm.
        /// </summary>
        [pbr::OriginalName("INVALID_CAMPAIGN_STATUS")] InvalidCampaignStatus = 3,
        /// <summary>
        /// Cannot add duplicate experiment arm name in one experiment.
        /// </summary>
        [pbr::OriginalName("DUPLICATE_EXPERIMENT_ARM_NAME")] DuplicateExperimentArmName = 4,
        /// <summary>
        /// Cannot set campaigns of treatment experiment arm.
        /// </summary>
        [pbr::OriginalName("CANNOT_SET_TREATMENT_ARM_CAMPAIGN")] CannotSetTreatmentArmCampaign = 5,
        /// <summary>
        /// Cannot edit campaign ids in trial arms in non SETUP experiment.
        /// </summary>
        [pbr::OriginalName("CANNOT_MODIFY_CAMPAIGN_IDS")] CannotModifyCampaignIds = 6,
        /// <summary>
        /// Cannot modify the campaigns in the control arm
        /// if there is not a suffix set in the trial.
        /// </summary>
        [pbr::OriginalName("CANNOT_MODIFY_CAMPAIGN_WITHOUT_SUFFIX_SET")] CannotModifyCampaignWithoutSuffixSet = 7,
        /// <summary>
        /// Traffic split related settings (like traffic share bounds) can't be
        /// modified after the trial has started.
        /// </summary>
        [pbr::OriginalName("CANNOT_MUTATE_TRAFFIC_SPLIT_AFTER_START")] CannotMutateTrafficSplitAfterStart = 8,
        /// <summary>
        /// Cannot use shared budget on experiment's control campaign.
        /// </summary>
        [pbr::OriginalName("CANNOT_ADD_CAMPAIGN_WITH_SHARED_BUDGET")] CannotAddCampaignWithSharedBudget = 9,
        /// <summary>
        /// Cannot use custom budget on experiment's control campaigns.
        /// </summary>
        [pbr::OriginalName("CANNOT_ADD_CAMPAIGN_WITH_CUSTOM_BUDGET")] CannotAddCampaignWithCustomBudget = 10,
        /// <summary>
        /// Cannot have enable_dynamic_assets turned on in experiment's campaigns.
        /// </summary>
        [pbr::OriginalName("CANNOT_ADD_CAMPAIGNS_WITH_DYNAMIC_ASSETS_ENABLED")] CannotAddCampaignsWithDynamicAssetsEnabled = 11,
        /// <summary>
        /// Cannot use campaign's advertising channel sub type in experiment.
        /// </summary>
        [pbr::OriginalName("UNSUPPORTED_CAMPAIGN_ADVERTISING_CHANNEL_SUB_TYPE")] UnsupportedCampaignAdvertisingChannelSubType = 12,
        /// <summary>
        /// Experiment date range must be within base campaign's date range.
        /// </summary>
        [pbr::OriginalName("CANNOT_ADD_BASE_CAMPAIGN_WITH_DATE_RANGE")] CannotAddBaseCampaignWithDateRange = 13,
        /// <summary>
        /// Bidding strategy is not supported in experiments.
        /// </summary>
        [pbr::OriginalName("BIDDING_STRATEGY_NOT_SUPPORTED_IN_EXPERIMENTS")] BiddingStrategyNotSupportedInExperiments = 14,
        /// <summary>
        /// Traffic split is not supported for some channel types.
        /// </summary>
        [pbr::OriginalName("TRAFFIC_SPLIT_NOT_SUPPORTED_FOR_CHANNEL_TYPE")] TrafficSplitNotSupportedForChannelType = 15,
      }

    }
    #endregion

  }

  #endregion

}

#endregion Designer generated code
