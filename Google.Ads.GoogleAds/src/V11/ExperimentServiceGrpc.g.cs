// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: google/ads/googleads/v11/services/experiment_service.proto
// </auto-generated>
// Original file comments:
// Copyright 2022 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
#pragma warning disable 0414, 1591
#region Designer generated code

using grpc = global::Grpc.Core;

namespace Google.Ads.GoogleAds.V11.Services {
  /// <summary>
  /// Service to manage experiments.
  /// </summary>
  public static partial class ExperimentService
  {
    static readonly string __ServiceName = "google.ads.googleads.v11.services.ExperimentService";

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static void __Helper_SerializeMessage(global::Google.Protobuf.IMessage message, grpc::SerializationContext context)
    {
      #if !GRPC_DISABLE_PROTOBUF_BUFFER_SERIALIZATION
      if (message is global::Google.Protobuf.IBufferMessage)
      {
        context.SetPayloadLength(message.CalculateSize());
        global::Google.Protobuf.MessageExtensions.WriteTo(message, context.GetBufferWriter());
        context.Complete();
        return;
      }
      #endif
      context.Complete(global::Google.Protobuf.MessageExtensions.ToByteArray(message));
    }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static class __Helper_MessageCache<T>
    {
      public static readonly bool IsBufferMessage = global::System.Reflection.IntrospectionExtensions.GetTypeInfo(typeof(global::Google.Protobuf.IBufferMessage)).IsAssignableFrom(typeof(T));
    }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static T __Helper_DeserializeMessage<T>(grpc::DeserializationContext context, global::Google.Protobuf.MessageParser<T> parser) where T : global::Google.Protobuf.IMessage<T>
    {
      #if !GRPC_DISABLE_PROTOBUF_BUFFER_SERIALIZATION
      if (__Helper_MessageCache<T>.IsBufferMessage)
      {
        return parser.ParseFrom(context.PayloadAsReadOnlySequence());
      }
      #endif
      return parser.ParseFrom(context.PayloadAsNewBuffer());
    }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Ads.GoogleAds.V11.Services.MutateExperimentsRequest> __Marshaller_google_ads_googleads_v11_services_MutateExperimentsRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Ads.GoogleAds.V11.Services.MutateExperimentsRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Ads.GoogleAds.V11.Services.MutateExperimentsResponse> __Marshaller_google_ads_googleads_v11_services_MutateExperimentsResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Ads.GoogleAds.V11.Services.MutateExperimentsResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Ads.GoogleAds.V11.Services.EndExperimentRequest> __Marshaller_google_ads_googleads_v11_services_EndExperimentRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Ads.GoogleAds.V11.Services.EndExperimentRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Protobuf.WellKnownTypes.Empty> __Marshaller_google_protobuf_Empty = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Protobuf.WellKnownTypes.Empty.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Ads.GoogleAds.V11.Services.ListExperimentAsyncErrorsRequest> __Marshaller_google_ads_googleads_v11_services_ListExperimentAsyncErrorsRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Ads.GoogleAds.V11.Services.ListExperimentAsyncErrorsRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Ads.GoogleAds.V11.Services.ListExperimentAsyncErrorsResponse> __Marshaller_google_ads_googleads_v11_services_ListExperimentAsyncErrorsResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Ads.GoogleAds.V11.Services.ListExperimentAsyncErrorsResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Ads.GoogleAds.V11.Services.GraduateExperimentRequest> __Marshaller_google_ads_googleads_v11_services_GraduateExperimentRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Ads.GoogleAds.V11.Services.GraduateExperimentRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Ads.GoogleAds.V11.Services.ScheduleExperimentRequest> __Marshaller_google_ads_googleads_v11_services_ScheduleExperimentRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Ads.GoogleAds.V11.Services.ScheduleExperimentRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.LongRunning.Operation> __Marshaller_google_longrunning_Operation = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.LongRunning.Operation.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Ads.GoogleAds.V11.Services.PromoteExperimentRequest> __Marshaller_google_ads_googleads_v11_services_PromoteExperimentRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Ads.GoogleAds.V11.Services.PromoteExperimentRequest.Parser));

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Ads.GoogleAds.V11.Services.MutateExperimentsRequest, global::Google.Ads.GoogleAds.V11.Services.MutateExperimentsResponse> __Method_MutateExperiments = new grpc::Method<global::Google.Ads.GoogleAds.V11.Services.MutateExperimentsRequest, global::Google.Ads.GoogleAds.V11.Services.MutateExperimentsResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "MutateExperiments",
        __Marshaller_google_ads_googleads_v11_services_MutateExperimentsRequest,
        __Marshaller_google_ads_googleads_v11_services_MutateExperimentsResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Ads.GoogleAds.V11.Services.EndExperimentRequest, global::Google.Protobuf.WellKnownTypes.Empty> __Method_EndExperiment = new grpc::Method<global::Google.Ads.GoogleAds.V11.Services.EndExperimentRequest, global::Google.Protobuf.WellKnownTypes.Empty>(
        grpc::MethodType.Unary,
        __ServiceName,
        "EndExperiment",
        __Marshaller_google_ads_googleads_v11_services_EndExperimentRequest,
        __Marshaller_google_protobuf_Empty);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Ads.GoogleAds.V11.Services.ListExperimentAsyncErrorsRequest, global::Google.Ads.GoogleAds.V11.Services.ListExperimentAsyncErrorsResponse> __Method_ListExperimentAsyncErrors = new grpc::Method<global::Google.Ads.GoogleAds.V11.Services.ListExperimentAsyncErrorsRequest, global::Google.Ads.GoogleAds.V11.Services.ListExperimentAsyncErrorsResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ListExperimentAsyncErrors",
        __Marshaller_google_ads_googleads_v11_services_ListExperimentAsyncErrorsRequest,
        __Marshaller_google_ads_googleads_v11_services_ListExperimentAsyncErrorsResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Ads.GoogleAds.V11.Services.GraduateExperimentRequest, global::Google.Protobuf.WellKnownTypes.Empty> __Method_GraduateExperiment = new grpc::Method<global::Google.Ads.GoogleAds.V11.Services.GraduateExperimentRequest, global::Google.Protobuf.WellKnownTypes.Empty>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GraduateExperiment",
        __Marshaller_google_ads_googleads_v11_services_GraduateExperimentRequest,
        __Marshaller_google_protobuf_Empty);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Ads.GoogleAds.V11.Services.ScheduleExperimentRequest, global::Google.LongRunning.Operation> __Method_ScheduleExperiment = new grpc::Method<global::Google.Ads.GoogleAds.V11.Services.ScheduleExperimentRequest, global::Google.LongRunning.Operation>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ScheduleExperiment",
        __Marshaller_google_ads_googleads_v11_services_ScheduleExperimentRequest,
        __Marshaller_google_longrunning_Operation);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Ads.GoogleAds.V11.Services.PromoteExperimentRequest, global::Google.LongRunning.Operation> __Method_PromoteExperiment = new grpc::Method<global::Google.Ads.GoogleAds.V11.Services.PromoteExperimentRequest, global::Google.LongRunning.Operation>(
        grpc::MethodType.Unary,
        __ServiceName,
        "PromoteExperiment",
        __Marshaller_google_ads_googleads_v11_services_PromoteExperimentRequest,
        __Marshaller_google_longrunning_Operation);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::Google.Ads.GoogleAds.V11.Services.ExperimentServiceReflection.Descriptor.Services[0]; }
    }

    /// <summary>Base class for server-side implementations of ExperimentService</summary>
    [grpc::BindServiceMethod(typeof(ExperimentService), "BindService")]
    public abstract partial class ExperimentServiceBase
    {
      /// <summary>
      /// Creates, updates, or removes experiments. Operation statuses are returned.
      ///
      /// List of thrown errors:
      ///   [AuthenticationError]()
      ///   [AuthorizationError]()
      ///   [ExperimentError]()
      ///   [HeaderError]()
      ///   [InternalError]()
      ///   [QuotaError]()
      ///   [RequestError]()
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Ads.GoogleAds.V11.Services.MutateExperimentsResponse> MutateExperiments(global::Google.Ads.GoogleAds.V11.Services.MutateExperimentsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Immediately ends an experiment, changing the experiment's scheduled
      /// end date and without waiting for end of day. End date is updated to be the
      /// time of the request.
      ///
      /// List of thrown errors:
      ///   [AuthenticationError]()
      ///   [AuthorizationError]()
      ///   [ExperimentError]()
      ///   [HeaderError]()
      ///   [InternalError]()
      ///   [QuotaError]()
      ///   [RequestError]()
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Protobuf.WellKnownTypes.Empty> EndExperiment(global::Google.Ads.GoogleAds.V11.Services.EndExperimentRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Returns all errors that occurred during the last Experiment update (either
      /// scheduling or promotion).
      /// Supports standard list paging.
      ///
      /// List of thrown errors:
      ///   [AuthenticationError]()
      ///   [AuthorizationError]()
      ///   [HeaderError]()
      ///   [InternalError]()
      ///   [QuotaError]()
      ///   [RequestError]()
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Ads.GoogleAds.V11.Services.ListExperimentAsyncErrorsResponse> ListExperimentAsyncErrors(global::Google.Ads.GoogleAds.V11.Services.ListExperimentAsyncErrorsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Graduates an experiment to a full campaign.
      ///
      /// List of thrown errors:
      ///   [AuthenticationError]()
      ///   [AuthorizationError]()
      ///   [ExperimentError]()
      ///   [HeaderError]()
      ///   [InternalError]()
      ///   [MutateError]()
      ///   [QuotaError]()
      ///   [RequestError]()
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Protobuf.WellKnownTypes.Empty> GraduateExperiment(global::Google.Ads.GoogleAds.V11.Services.GraduateExperimentRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Schedule an experiment. The in design campaign
      /// will be converted into a real campaign (called the experiment campaign)
      /// that will begin serving ads if successfully created.
      ///
      /// The experiment is scheduled immediately with status INITIALIZING.
      /// This method returns a long running operation that tracks the forking of the
      /// in design campaign. If the forking fails, a list of errors can be retrieved
      /// using the ListExperimentAsyncErrors method. The operation's
      /// metadata will be a string containing the resource name of the created
      /// experiment.
      ///
      /// List of thrown errors:
      ///   [AuthenticationError]()
      ///   [AuthorizationError]()
      ///   [ExperimentError]()
      ///   [DatabaseError]()
      ///   [DateError]()
      ///   [DateRangeError]()
      ///   [FieldError]()
      ///   [HeaderError]()
      ///   [InternalError]()
      ///   [QuotaError]()
      ///   [RangeError]()
      ///   [RequestError]()
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.LongRunning.Operation> ScheduleExperiment(global::Google.Ads.GoogleAds.V11.Services.ScheduleExperimentRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Promotes the trial campaign thus applying changes in the trial campaign
      /// to the base campaign.
      /// This method returns a long running operation that tracks the promotion of
      /// the experiment campaign. If it fails, a list of errors can be retrieved
      /// using the ListExperimentAsyncErrors method. The operation's
      /// metadata will be a string containing the resource name of the created
      /// experiment.
      ///
      /// List of thrown errors:
      ///   [AuthenticationError]()
      ///   [AuthorizationError]()
      ///   [ExperimentError]()
      ///   [HeaderError]()
      ///   [InternalError]()
      ///   [QuotaError]()
      ///   [RequestError]()
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.LongRunning.Operation> PromoteExperiment(global::Google.Ads.GoogleAds.V11.Services.PromoteExperimentRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for ExperimentService</summary>
    public partial class ExperimentServiceClient : grpc::ClientBase<ExperimentServiceClient>
    {
      /// <summary>Creates a new client for ExperimentService</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public ExperimentServiceClient(grpc::ChannelBase channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for ExperimentService that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public ExperimentServiceClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      protected ExperimentServiceClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      protected ExperimentServiceClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      /// <summary>
      /// Creates, updates, or removes experiments. Operation statuses are returned.
      ///
      /// List of thrown errors:
      ///   [AuthenticationError]()
      ///   [AuthorizationError]()
      ///   [ExperimentError]()
      ///   [HeaderError]()
      ///   [InternalError]()
      ///   [QuotaError]()
      ///   [RequestError]()
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Ads.GoogleAds.V11.Services.MutateExperimentsResponse MutateExperiments(global::Google.Ads.GoogleAds.V11.Services.MutateExperimentsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return MutateExperiments(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Creates, updates, or removes experiments. Operation statuses are returned.
      ///
      /// List of thrown errors:
      ///   [AuthenticationError]()
      ///   [AuthorizationError]()
      ///   [ExperimentError]()
      ///   [HeaderError]()
      ///   [InternalError]()
      ///   [QuotaError]()
      ///   [RequestError]()
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Ads.GoogleAds.V11.Services.MutateExperimentsResponse MutateExperiments(global::Google.Ads.GoogleAds.V11.Services.MutateExperimentsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_MutateExperiments, null, options, request);
      }
      /// <summary>
      /// Creates, updates, or removes experiments. Operation statuses are returned.
      ///
      /// List of thrown errors:
      ///   [AuthenticationError]()
      ///   [AuthorizationError]()
      ///   [ExperimentError]()
      ///   [HeaderError]()
      ///   [InternalError]()
      ///   [QuotaError]()
      ///   [RequestError]()
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Ads.GoogleAds.V11.Services.MutateExperimentsResponse> MutateExperimentsAsync(global::Google.Ads.GoogleAds.V11.Services.MutateExperimentsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return MutateExperimentsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Creates, updates, or removes experiments. Operation statuses are returned.
      ///
      /// List of thrown errors:
      ///   [AuthenticationError]()
      ///   [AuthorizationError]()
      ///   [ExperimentError]()
      ///   [HeaderError]()
      ///   [InternalError]()
      ///   [QuotaError]()
      ///   [RequestError]()
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Ads.GoogleAds.V11.Services.MutateExperimentsResponse> MutateExperimentsAsync(global::Google.Ads.GoogleAds.V11.Services.MutateExperimentsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_MutateExperiments, null, options, request);
      }
      /// <summary>
      /// Immediately ends an experiment, changing the experiment's scheduled
      /// end date and without waiting for end of day. End date is updated to be the
      /// time of the request.
      ///
      /// List of thrown errors:
      ///   [AuthenticationError]()
      ///   [AuthorizationError]()
      ///   [ExperimentError]()
      ///   [HeaderError]()
      ///   [InternalError]()
      ///   [QuotaError]()
      ///   [RequestError]()
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Protobuf.WellKnownTypes.Empty EndExperiment(global::Google.Ads.GoogleAds.V11.Services.EndExperimentRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return EndExperiment(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Immediately ends an experiment, changing the experiment's scheduled
      /// end date and without waiting for end of day. End date is updated to be the
      /// time of the request.
      ///
      /// List of thrown errors:
      ///   [AuthenticationError]()
      ///   [AuthorizationError]()
      ///   [ExperimentError]()
      ///   [HeaderError]()
      ///   [InternalError]()
      ///   [QuotaError]()
      ///   [RequestError]()
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Protobuf.WellKnownTypes.Empty EndExperiment(global::Google.Ads.GoogleAds.V11.Services.EndExperimentRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_EndExperiment, null, options, request);
      }
      /// <summary>
      /// Immediately ends an experiment, changing the experiment's scheduled
      /// end date and without waiting for end of day. End date is updated to be the
      /// time of the request.
      ///
      /// List of thrown errors:
      ///   [AuthenticationError]()
      ///   [AuthorizationError]()
      ///   [ExperimentError]()
      ///   [HeaderError]()
      ///   [InternalError]()
      ///   [QuotaError]()
      ///   [RequestError]()
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Protobuf.WellKnownTypes.Empty> EndExperimentAsync(global::Google.Ads.GoogleAds.V11.Services.EndExperimentRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return EndExperimentAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Immediately ends an experiment, changing the experiment's scheduled
      /// end date and without waiting for end of day. End date is updated to be the
      /// time of the request.
      ///
      /// List of thrown errors:
      ///   [AuthenticationError]()
      ///   [AuthorizationError]()
      ///   [ExperimentError]()
      ///   [HeaderError]()
      ///   [InternalError]()
      ///   [QuotaError]()
      ///   [RequestError]()
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Protobuf.WellKnownTypes.Empty> EndExperimentAsync(global::Google.Ads.GoogleAds.V11.Services.EndExperimentRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_EndExperiment, null, options, request);
      }
      /// <summary>
      /// Returns all errors that occurred during the last Experiment update (either
      /// scheduling or promotion).
      /// Supports standard list paging.
      ///
      /// List of thrown errors:
      ///   [AuthenticationError]()
      ///   [AuthorizationError]()
      ///   [HeaderError]()
      ///   [InternalError]()
      ///   [QuotaError]()
      ///   [RequestError]()
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Ads.GoogleAds.V11.Services.ListExperimentAsyncErrorsResponse ListExperimentAsyncErrors(global::Google.Ads.GoogleAds.V11.Services.ListExperimentAsyncErrorsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListExperimentAsyncErrors(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Returns all errors that occurred during the last Experiment update (either
      /// scheduling or promotion).
      /// Supports standard list paging.
      ///
      /// List of thrown errors:
      ///   [AuthenticationError]()
      ///   [AuthorizationError]()
      ///   [HeaderError]()
      ///   [InternalError]()
      ///   [QuotaError]()
      ///   [RequestError]()
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Ads.GoogleAds.V11.Services.ListExperimentAsyncErrorsResponse ListExperimentAsyncErrors(global::Google.Ads.GoogleAds.V11.Services.ListExperimentAsyncErrorsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ListExperimentAsyncErrors, null, options, request);
      }
      /// <summary>
      /// Returns all errors that occurred during the last Experiment update (either
      /// scheduling or promotion).
      /// Supports standard list paging.
      ///
      /// List of thrown errors:
      ///   [AuthenticationError]()
      ///   [AuthorizationError]()
      ///   [HeaderError]()
      ///   [InternalError]()
      ///   [QuotaError]()
      ///   [RequestError]()
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Ads.GoogleAds.V11.Services.ListExperimentAsyncErrorsResponse> ListExperimentAsyncErrorsAsync(global::Google.Ads.GoogleAds.V11.Services.ListExperimentAsyncErrorsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListExperimentAsyncErrorsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Returns all errors that occurred during the last Experiment update (either
      /// scheduling or promotion).
      /// Supports standard list paging.
      ///
      /// List of thrown errors:
      ///   [AuthenticationError]()
      ///   [AuthorizationError]()
      ///   [HeaderError]()
      ///   [InternalError]()
      ///   [QuotaError]()
      ///   [RequestError]()
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Ads.GoogleAds.V11.Services.ListExperimentAsyncErrorsResponse> ListExperimentAsyncErrorsAsync(global::Google.Ads.GoogleAds.V11.Services.ListExperimentAsyncErrorsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ListExperimentAsyncErrors, null, options, request);
      }
      /// <summary>
      /// Graduates an experiment to a full campaign.
      ///
      /// List of thrown errors:
      ///   [AuthenticationError]()
      ///   [AuthorizationError]()
      ///   [ExperimentError]()
      ///   [HeaderError]()
      ///   [InternalError]()
      ///   [MutateError]()
      ///   [QuotaError]()
      ///   [RequestError]()
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Protobuf.WellKnownTypes.Empty GraduateExperiment(global::Google.Ads.GoogleAds.V11.Services.GraduateExperimentRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GraduateExperiment(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Graduates an experiment to a full campaign.
      ///
      /// List of thrown errors:
      ///   [AuthenticationError]()
      ///   [AuthorizationError]()
      ///   [ExperimentError]()
      ///   [HeaderError]()
      ///   [InternalError]()
      ///   [MutateError]()
      ///   [QuotaError]()
      ///   [RequestError]()
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Protobuf.WellKnownTypes.Empty GraduateExperiment(global::Google.Ads.GoogleAds.V11.Services.GraduateExperimentRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GraduateExperiment, null, options, request);
      }
      /// <summary>
      /// Graduates an experiment to a full campaign.
      ///
      /// List of thrown errors:
      ///   [AuthenticationError]()
      ///   [AuthorizationError]()
      ///   [ExperimentError]()
      ///   [HeaderError]()
      ///   [InternalError]()
      ///   [MutateError]()
      ///   [QuotaError]()
      ///   [RequestError]()
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Protobuf.WellKnownTypes.Empty> GraduateExperimentAsync(global::Google.Ads.GoogleAds.V11.Services.GraduateExperimentRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GraduateExperimentAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Graduates an experiment to a full campaign.
      ///
      /// List of thrown errors:
      ///   [AuthenticationError]()
      ///   [AuthorizationError]()
      ///   [ExperimentError]()
      ///   [HeaderError]()
      ///   [InternalError]()
      ///   [MutateError]()
      ///   [QuotaError]()
      ///   [RequestError]()
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Protobuf.WellKnownTypes.Empty> GraduateExperimentAsync(global::Google.Ads.GoogleAds.V11.Services.GraduateExperimentRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GraduateExperiment, null, options, request);
      }
      /// <summary>
      /// Schedule an experiment. The in design campaign
      /// will be converted into a real campaign (called the experiment campaign)
      /// that will begin serving ads if successfully created.
      ///
      /// The experiment is scheduled immediately with status INITIALIZING.
      /// This method returns a long running operation that tracks the forking of the
      /// in design campaign. If the forking fails, a list of errors can be retrieved
      /// using the ListExperimentAsyncErrors method. The operation's
      /// metadata will be a string containing the resource name of the created
      /// experiment.
      ///
      /// List of thrown errors:
      ///   [AuthenticationError]()
      ///   [AuthorizationError]()
      ///   [ExperimentError]()
      ///   [DatabaseError]()
      ///   [DateError]()
      ///   [DateRangeError]()
      ///   [FieldError]()
      ///   [HeaderError]()
      ///   [InternalError]()
      ///   [QuotaError]()
      ///   [RangeError]()
      ///   [RequestError]()
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.LongRunning.Operation ScheduleExperiment(global::Google.Ads.GoogleAds.V11.Services.ScheduleExperimentRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ScheduleExperiment(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Schedule an experiment. The in design campaign
      /// will be converted into a real campaign (called the experiment campaign)
      /// that will begin serving ads if successfully created.
      ///
      /// The experiment is scheduled immediately with status INITIALIZING.
      /// This method returns a long running operation that tracks the forking of the
      /// in design campaign. If the forking fails, a list of errors can be retrieved
      /// using the ListExperimentAsyncErrors method. The operation's
      /// metadata will be a string containing the resource name of the created
      /// experiment.
      ///
      /// List of thrown errors:
      ///   [AuthenticationError]()
      ///   [AuthorizationError]()
      ///   [ExperimentError]()
      ///   [DatabaseError]()
      ///   [DateError]()
      ///   [DateRangeError]()
      ///   [FieldError]()
      ///   [HeaderError]()
      ///   [InternalError]()
      ///   [QuotaError]()
      ///   [RangeError]()
      ///   [RequestError]()
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.LongRunning.Operation ScheduleExperiment(global::Google.Ads.GoogleAds.V11.Services.ScheduleExperimentRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ScheduleExperiment, null, options, request);
      }
      /// <summary>
      /// Schedule an experiment. The in design campaign
      /// will be converted into a real campaign (called the experiment campaign)
      /// that will begin serving ads if successfully created.
      ///
      /// The experiment is scheduled immediately with status INITIALIZING.
      /// This method returns a long running operation that tracks the forking of the
      /// in design campaign. If the forking fails, a list of errors can be retrieved
      /// using the ListExperimentAsyncErrors method. The operation's
      /// metadata will be a string containing the resource name of the created
      /// experiment.
      ///
      /// List of thrown errors:
      ///   [AuthenticationError]()
      ///   [AuthorizationError]()
      ///   [ExperimentError]()
      ///   [DatabaseError]()
      ///   [DateError]()
      ///   [DateRangeError]()
      ///   [FieldError]()
      ///   [HeaderError]()
      ///   [InternalError]()
      ///   [QuotaError]()
      ///   [RangeError]()
      ///   [RequestError]()
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.LongRunning.Operation> ScheduleExperimentAsync(global::Google.Ads.GoogleAds.V11.Services.ScheduleExperimentRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ScheduleExperimentAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Schedule an experiment. The in design campaign
      /// will be converted into a real campaign (called the experiment campaign)
      /// that will begin serving ads if successfully created.
      ///
      /// The experiment is scheduled immediately with status INITIALIZING.
      /// This method returns a long running operation that tracks the forking of the
      /// in design campaign. If the forking fails, a list of errors can be retrieved
      /// using the ListExperimentAsyncErrors method. The operation's
      /// metadata will be a string containing the resource name of the created
      /// experiment.
      ///
      /// List of thrown errors:
      ///   [AuthenticationError]()
      ///   [AuthorizationError]()
      ///   [ExperimentError]()
      ///   [DatabaseError]()
      ///   [DateError]()
      ///   [DateRangeError]()
      ///   [FieldError]()
      ///   [HeaderError]()
      ///   [InternalError]()
      ///   [QuotaError]()
      ///   [RangeError]()
      ///   [RequestError]()
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.LongRunning.Operation> ScheduleExperimentAsync(global::Google.Ads.GoogleAds.V11.Services.ScheduleExperimentRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ScheduleExperiment, null, options, request);
      }
      /// <summary>
      /// Promotes the trial campaign thus applying changes in the trial campaign
      /// to the base campaign.
      /// This method returns a long running operation that tracks the promotion of
      /// the experiment campaign. If it fails, a list of errors can be retrieved
      /// using the ListExperimentAsyncErrors method. The operation's
      /// metadata will be a string containing the resource name of the created
      /// experiment.
      ///
      /// List of thrown errors:
      ///   [AuthenticationError]()
      ///   [AuthorizationError]()
      ///   [ExperimentError]()
      ///   [HeaderError]()
      ///   [InternalError]()
      ///   [QuotaError]()
      ///   [RequestError]()
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.LongRunning.Operation PromoteExperiment(global::Google.Ads.GoogleAds.V11.Services.PromoteExperimentRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PromoteExperiment(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Promotes the trial campaign thus applying changes in the trial campaign
      /// to the base campaign.
      /// This method returns a long running operation that tracks the promotion of
      /// the experiment campaign. If it fails, a list of errors can be retrieved
      /// using the ListExperimentAsyncErrors method. The operation's
      /// metadata will be a string containing the resource name of the created
      /// experiment.
      ///
      /// List of thrown errors:
      ///   [AuthenticationError]()
      ///   [AuthorizationError]()
      ///   [ExperimentError]()
      ///   [HeaderError]()
      ///   [InternalError]()
      ///   [QuotaError]()
      ///   [RequestError]()
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.LongRunning.Operation PromoteExperiment(global::Google.Ads.GoogleAds.V11.Services.PromoteExperimentRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_PromoteExperiment, null, options, request);
      }
      /// <summary>
      /// Promotes the trial campaign thus applying changes in the trial campaign
      /// to the base campaign.
      /// This method returns a long running operation that tracks the promotion of
      /// the experiment campaign. If it fails, a list of errors can be retrieved
      /// using the ListExperimentAsyncErrors method. The operation's
      /// metadata will be a string containing the resource name of the created
      /// experiment.
      ///
      /// List of thrown errors:
      ///   [AuthenticationError]()
      ///   [AuthorizationError]()
      ///   [ExperimentError]()
      ///   [HeaderError]()
      ///   [InternalError]()
      ///   [QuotaError]()
      ///   [RequestError]()
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.LongRunning.Operation> PromoteExperimentAsync(global::Google.Ads.GoogleAds.V11.Services.PromoteExperimentRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PromoteExperimentAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Promotes the trial campaign thus applying changes in the trial campaign
      /// to the base campaign.
      /// This method returns a long running operation that tracks the promotion of
      /// the experiment campaign. If it fails, a list of errors can be retrieved
      /// using the ListExperimentAsyncErrors method. The operation's
      /// metadata will be a string containing the resource name of the created
      /// experiment.
      ///
      /// List of thrown errors:
      ///   [AuthenticationError]()
      ///   [AuthorizationError]()
      ///   [ExperimentError]()
      ///   [HeaderError]()
      ///   [InternalError]()
      ///   [QuotaError]()
      ///   [RequestError]()
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.LongRunning.Operation> PromoteExperimentAsync(global::Google.Ads.GoogleAds.V11.Services.PromoteExperimentRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_PromoteExperiment, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      protected override ExperimentServiceClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new ExperimentServiceClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    public static grpc::ServerServiceDefinition BindService(ExperimentServiceBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_MutateExperiments, serviceImpl.MutateExperiments)
          .AddMethod(__Method_EndExperiment, serviceImpl.EndExperiment)
          .AddMethod(__Method_ListExperimentAsyncErrors, serviceImpl.ListExperimentAsyncErrors)
          .AddMethod(__Method_GraduateExperiment, serviceImpl.GraduateExperiment)
          .AddMethod(__Method_ScheduleExperiment, serviceImpl.ScheduleExperiment)
          .AddMethod(__Method_PromoteExperiment, serviceImpl.PromoteExperiment).Build();
    }

    /// <summary>Register service method with a service binder with or without implementation. Useful when customizing the  service binding logic.
    /// Note: this method is part of an experimental API that can change or be removed without any prior notice.</summary>
    /// <param name="serviceBinder">Service methods will be bound by calling <c>AddMethod</c> on this object.</param>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    public static void BindService(grpc::ServiceBinderBase serviceBinder, ExperimentServiceBase serviceImpl)
    {
      serviceBinder.AddMethod(__Method_MutateExperiments, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Ads.GoogleAds.V11.Services.MutateExperimentsRequest, global::Google.Ads.GoogleAds.V11.Services.MutateExperimentsResponse>(serviceImpl.MutateExperiments));
      serviceBinder.AddMethod(__Method_EndExperiment, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Ads.GoogleAds.V11.Services.EndExperimentRequest, global::Google.Protobuf.WellKnownTypes.Empty>(serviceImpl.EndExperiment));
      serviceBinder.AddMethod(__Method_ListExperimentAsyncErrors, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Ads.GoogleAds.V11.Services.ListExperimentAsyncErrorsRequest, global::Google.Ads.GoogleAds.V11.Services.ListExperimentAsyncErrorsResponse>(serviceImpl.ListExperimentAsyncErrors));
      serviceBinder.AddMethod(__Method_GraduateExperiment, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Ads.GoogleAds.V11.Services.GraduateExperimentRequest, global::Google.Protobuf.WellKnownTypes.Empty>(serviceImpl.GraduateExperiment));
      serviceBinder.AddMethod(__Method_ScheduleExperiment, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Ads.GoogleAds.V11.Services.ScheduleExperimentRequest, global::Google.LongRunning.Operation>(serviceImpl.ScheduleExperiment));
      serviceBinder.AddMethod(__Method_PromoteExperiment, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Ads.GoogleAds.V11.Services.PromoteExperimentRequest, global::Google.LongRunning.Operation>(serviceImpl.PromoteExperiment));
    }

  }
}
#endregion
