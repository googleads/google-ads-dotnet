// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: google/ads/googleads/v11/common/metrics.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Google.Ads.GoogleAds.V11.Common {

  /// <summary>Holder for reflection information generated from google/ads/googleads/v11/common/metrics.proto</summary>
  public static partial class MetricsReflection {

    #region Descriptor
    /// <summary>File descriptor for google/ads/googleads/v11/common/metrics.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static MetricsReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Ci1nb29nbGUvYWRzL2dvb2dsZWFkcy92MTEvY29tbW9uL21ldHJpY3MucHJv",
            "dG8SH2dvb2dsZS5hZHMuZ29vZ2xlYWRzLnYxMS5jb21tb24aO2dvb2dsZS9h",
            "ZHMvZ29vZ2xlYWRzL3YxMS9lbnVtcy9pbnRlcmFjdGlvbl9ldmVudF90eXBl",
            "LnByb3RvGjlnb29nbGUvYWRzL2dvb2dsZWFkcy92MTEvZW51bXMvcXVhbGl0",
            "eV9zY29yZV9idWNrZXQucHJvdG8ii0wKB01ldHJpY3MSMAoiYWJzb2x1dGVf",
            "dG9wX2ltcHJlc3Npb25fcGVyY2VudGFnZRi3ASABKAFIAIgBARIdCg9hY3Rp",
            "dmVfdmlld19jcG0YuAEgASgBSAGIAQESHQoPYWN0aXZlX3ZpZXdfY3RyGLkB",
            "IAEoAUgCiAEBEiUKF2FjdGl2ZV92aWV3X2ltcHJlc3Npb25zGLoBIAEoA0gD",
            "iAEBEicKGWFjdGl2ZV92aWV3X21lYXN1cmFiaWxpdHkYuwEgASgBSASIAQES",
            "MAoiYWN0aXZlX3ZpZXdfbWVhc3VyYWJsZV9jb3N0X21pY3Jvcxi8ASABKANI",
            "BYgBARIwCiJhY3RpdmVfdmlld19tZWFzdXJhYmxlX2ltcHJlc3Npb25zGL0B",
            "IAEoA0gGiAEBEiUKF2FjdGl2ZV92aWV3X3ZpZXdhYmlsaXR5GL4BIAEoAUgH",
            "iAEBEjQKJmFsbF9jb252ZXJzaW9uc19mcm9tX2ludGVyYWN0aW9uc19yYXRl",
            "GL8BIAEoAUgIiAEBEiMKFWFsbF9jb252ZXJzaW9uc192YWx1ZRjAASABKAFI",
            "CYgBARIxCihhbGxfY29udmVyc2lvbnNfdmFsdWVfYnlfY29udmVyc2lvbl9k",
            "YXRlGPABIAEoARIdCg9hbGxfY29udmVyc2lvbnMYwQEgASgBSAqIAQESKwoi",
            "YWxsX2NvbnZlcnNpb25zX2J5X2NvbnZlcnNpb25fZGF0ZRjxASABKAESLAoe",
            "YWxsX2NvbnZlcnNpb25zX3ZhbHVlX3Blcl9jb3N0GMIBIAEoAUgLiAEBEjAK",
            "ImFsbF9jb252ZXJzaW9uc19mcm9tX2NsaWNrX3RvX2NhbGwYwwEgASgBSAyI",
            "AQESLQofYWxsX2NvbnZlcnNpb25zX2Zyb21fZGlyZWN0aW9ucxjEASABKAFI",
            "DYgBARJFCjdhbGxfY29udmVyc2lvbnNfZnJvbV9pbnRlcmFjdGlvbnNfdmFs",
            "dWVfcGVyX2ludGVyYWN0aW9uGMUBIAEoAUgOiAEBEicKGWFsbF9jb252ZXJz",
            "aW9uc19mcm9tX21lbnUYxgEgASgBSA+IAQESKAoaYWxsX2NvbnZlcnNpb25z",
            "X2Zyb21fb3JkZXIYxwEgASgBSBCIAQESMwolYWxsX2NvbnZlcnNpb25zX2Zy",
            "b21fb3RoZXJfZW5nYWdlbWVudBjIASABKAFIEYgBARIuCiBhbGxfY29udmVy",
            "c2lvbnNfZnJvbV9zdG9yZV92aXNpdBjJASABKAFIEogBARIwCiJhbGxfY29u",
            "dmVyc2lvbnNfZnJvbV9zdG9yZV93ZWJzaXRlGMoBIAEoAUgTiAEBEkcKOWF1",
            "Y3Rpb25faW5zaWdodF9zZWFyY2hfYWJzb2x1dGVfdG9wX2ltcHJlc3Npb25f",
            "cGVyY2VudGFnZRiCAiABKAFIFIgBARI1CidhdWN0aW9uX2luc2lnaHRfc2Vh",
            "cmNoX2ltcHJlc3Npb25fc2hhcmUYgwIgASgBSBWIAQESNQonYXVjdGlvbl9p",
            "bnNpZ2h0X3NlYXJjaF9vdXRyYW5raW5nX3NoYXJlGIQCIAEoAUgWiAEBEjEK",
            "I2F1Y3Rpb25faW5zaWdodF9zZWFyY2hfb3ZlcmxhcF9yYXRlGIUCIAEoAUgX",
            "iAEBEjgKKmF1Y3Rpb25faW5zaWdodF9zZWFyY2hfcG9zaXRpb25fYWJvdmVf",
            "cmF0ZRiGAiABKAFIGIgBARI+CjBhdWN0aW9uX2luc2lnaHRfc2VhcmNoX3Rv",
            "cF9pbXByZXNzaW9uX3BlcmNlbnRhZ2UYhwIgASgBSBmIAQESGgoMYXZlcmFn",
            "ZV9jb3N0GMsBIAEoAUgaiAEBEhkKC2F2ZXJhZ2VfY3BjGMwBIAEoAUgbiAEB",
            "EhkKC2F2ZXJhZ2VfY3BlGM0BIAEoAUgciAEBEhkKC2F2ZXJhZ2VfY3BtGM4B",
            "IAEoAUgdiAEBEhkKC2F2ZXJhZ2VfY3B2GM8BIAEoAUgeiAEBEiAKEmF2ZXJh",
            "Z2VfcGFnZV92aWV3cxjQASABKAFIH4gBARIiChRhdmVyYWdlX3RpbWVfb25f",
            "c2l0ZRjRASABKAFIIIgBARInChliZW5jaG1hcmtfYXZlcmFnZV9tYXhfY3Bj",
            "GNIBIAEoAUghiAEBEi4KIGJpZGRhYmxlX2FwcF9pbnN0YWxsX2NvbnZlcnNp",
            "b25zGP4BIAEoAUgiiAEBEjMKJWJpZGRhYmxlX2FwcF9wb3N0X2luc3RhbGxf",
            "Y29udmVyc2lvbnMY/wEgASgBSCOIAQESGwoNYmVuY2htYXJrX2N0chjTASAB",
            "KAFIJIgBARIZCgtib3VuY2VfcmF0ZRjUASABKAFIJYgBARIUCgZjbGlja3MY",
            "gwEgASgDSCaIAQESHQoPY29tYmluZWRfY2xpY2tzGJwBIAEoA0gniAEBEicK",
            "GWNvbWJpbmVkX2NsaWNrc19wZXJfcXVlcnkYnQEgASgBSCiIAQESHgoQY29t",
            "YmluZWRfcXVlcmllcxieASABKANIKYgBARIyCiRjb250ZW50X2J1ZGdldF9s",
            "b3N0X2ltcHJlc3Npb25fc2hhcmUYnwEgASgBSCqIAQESJgoYY29udGVudF9p",
            "bXByZXNzaW9uX3NoYXJlGKABIAEoAUgriAEBEjgKKmNvbnZlcnNpb25fbGFz",
            "dF9yZWNlaXZlZF9yZXF1ZXN0X2RhdGVfdGltZRihASABKAlILIgBARItCh9j",
            "b252ZXJzaW9uX2xhc3RfY29udmVyc2lvbl9kYXRlGKIBIAEoCUgtiAEBEjAK",
            "ImNvbnRlbnRfcmFua19sb3N0X2ltcHJlc3Npb25fc2hhcmUYowEgASgBSC6I",
            "AQESMAoiY29udmVyc2lvbnNfZnJvbV9pbnRlcmFjdGlvbnNfcmF0ZRikASAB",
            "KAFIL4gBARIfChFjb252ZXJzaW9uc192YWx1ZRilASABKAFIMIgBARItCiRj",
            "b252ZXJzaW9uc192YWx1ZV9ieV9jb252ZXJzaW9uX2RhdGUY8gEgASgBEigK",
            "GmNvbnZlcnNpb25zX3ZhbHVlX3Blcl9jb3N0GKYBIAEoAUgxiAEBEkEKM2Nv",
            "bnZlcnNpb25zX2Zyb21faW50ZXJhY3Rpb25zX3ZhbHVlX3Blcl9pbnRlcmFj",
            "dGlvbhinASABKAFIMogBARIZCgtjb252ZXJzaW9ucxioASABKAFIM4gBARIn",
            "Ch5jb252ZXJzaW9uc19ieV9jb252ZXJzaW9uX2RhdGUY8wEgASgBEhkKC2Nv",
            "c3RfbWljcm9zGKkBIAEoA0g0iAEBEiYKGGNvc3RfcGVyX2FsbF9jb252ZXJz",
            "aW9ucxiqASABKAFINYgBARIhChNjb3N0X3Blcl9jb252ZXJzaW9uGKsBIAEo",
            "AUg2iAEBEjoKLGNvc3RfcGVyX2N1cnJlbnRfbW9kZWxfYXR0cmlidXRlZF9j",
            "b252ZXJzaW9uGKwBIAEoAUg3iAEBEiYKGGNyb3NzX2RldmljZV9jb252ZXJz",
            "aW9ucxitASABKAFIOIgBARIRCgNjdHIYrgEgASgBSDmIAQESMgokY3VycmVu",
            "dF9tb2RlbF9hdHRyaWJ1dGVkX2NvbnZlcnNpb25zGK8BIAEoAUg6iAEBEkkK",
            "O2N1cnJlbnRfbW9kZWxfYXR0cmlidXRlZF9jb252ZXJzaW9uc19mcm9tX2lu",
            "dGVyYWN0aW9uc19yYXRlGLABIAEoAUg7iAEBEloKTGN1cnJlbnRfbW9kZWxf",
            "YXR0cmlidXRlZF9jb252ZXJzaW9uc19mcm9tX2ludGVyYWN0aW9uc192YWx1",
            "ZV9wZXJfaW50ZXJhY3Rpb24YsQEgASgBSDyIAQESOAoqY3VycmVudF9tb2Rl",
            "bF9hdHRyaWJ1dGVkX2NvbnZlcnNpb25zX3ZhbHVlGLIBIAEoAUg9iAEBEkEK",
            "M2N1cnJlbnRfbW9kZWxfYXR0cmlidXRlZF9jb252ZXJzaW9uc192YWx1ZV9w",
            "ZXJfY29zdBizASABKAFIPogBARIdCg9lbmdhZ2VtZW50X3JhdGUYtAEgASgB",
            "SD+IAQESGQoLZW5nYWdlbWVudHMYtQEgASgDSECIAQESLQofaG90ZWxfYXZl",
            "cmFnZV9sZWFkX3ZhbHVlX21pY3JvcxjVASABKAFIQYgBARIqChxob3RlbF9j",
            "b21taXNzaW9uX3JhdGVfbWljcm9zGIACIAEoA0hCiAEBEiwKHmhvdGVsX2V4",
            "cGVjdGVkX2NvbW1pc3Npb25fY29zdBiBAiABKAFIQ4gBARIvCiFob3RlbF9w",
            "cmljZV9kaWZmZXJlbmNlX3BlcmNlbnRhZ2UY1gEgASgBSESIAQESKAoaaG90",
            "ZWxfZWxpZ2libGVfaW1wcmVzc2lvbnMY1wEgASgDSEWIAQESdAohaGlzdG9y",
            "aWNhbF9jcmVhdGl2ZV9xdWFsaXR5X3Njb3JlGFAgASgOMkkuZ29vZ2xlLmFk",
            "cy5nb29nbGVhZHMudjExLmVudW1zLlF1YWxpdHlTY29yZUJ1Y2tldEVudW0u",
            "UXVhbGl0eVNjb3JlQnVja2V0EngKJWhpc3RvcmljYWxfbGFuZGluZ19wYWdl",
            "X3F1YWxpdHlfc2NvcmUYUSABKA4ySS5nb29nbGUuYWRzLmdvb2dsZWFkcy52",
            "MTEuZW51bXMuUXVhbGl0eVNjb3JlQnVja2V0RW51bS5RdWFsaXR5U2NvcmVC",
            "dWNrZXQSJgoYaGlzdG9yaWNhbF9xdWFsaXR5X3Njb3JlGNgBIAEoA0hGiAEB",
            "EnIKH2hpc3RvcmljYWxfc2VhcmNoX3ByZWRpY3RlZF9jdHIYUyABKA4ySS5n",
            "b29nbGUuYWRzLmdvb2dsZWFkcy52MTEuZW51bXMuUXVhbGl0eVNjb3JlQnVj",
            "a2V0RW51bS5RdWFsaXR5U2NvcmVCdWNrZXQSHAoOZ21haWxfZm9yd2FyZHMY",
            "2QEgASgDSEeIAQESGQoLZ21haWxfc2F2ZXMY2gEgASgDSEiIAQESJAoWZ21h",
            "aWxfc2Vjb25kYXJ5X2NsaWNrcxjbASABKANISYgBARIqChxpbXByZXNzaW9u",
            "c19mcm9tX3N0b3JlX3JlYWNoGNwBIAEoA0hKiAEBEhkKC2ltcHJlc3Npb25z",
            "GN0BIAEoA0hLiAEBEh4KEGludGVyYWN0aW9uX3JhdGUY3gEgASgBSEyIAQES",
            "GgoMaW50ZXJhY3Rpb25zGN8BIAEoA0hNiAEBEm4KF2ludGVyYWN0aW9uX2V2",
            "ZW50X3R5cGVzGGQgAygOMk0uZ29vZ2xlLmFkcy5nb29nbGVhZHMudjExLmVu",
            "dW1zLkludGVyYWN0aW9uRXZlbnRUeXBlRW51bS5JbnRlcmFjdGlvbkV2ZW50",
            "VHlwZRIgChJpbnZhbGlkX2NsaWNrX3JhdGUY4AEgASgBSE6IAQESHAoOaW52",
            "YWxpZF9jbGlja3MY4QEgASgDSE+IAQESGwoNbWVzc2FnZV9jaGF0cxjiASAB",
            "KANIUIgBARIhChNtZXNzYWdlX2ltcHJlc3Npb25zGOMBIAEoA0hRiAEBEh8K",
            "EW1lc3NhZ2VfY2hhdF9yYXRlGOQBIAEoAUhSiAEBEi8KIW1vYmlsZV9mcmll",
            "bmRseV9jbGlja3NfcGVyY2VudGFnZRjlASABKAFIU4gBARInChlvcHRpbWl6",
            "YXRpb25fc2NvcmVfdXBsaWZ0GPcBIAEoAUhUiAEBEiQKFm9wdGltaXphdGlv",
            "bl9zY29yZV91cmwY+AEgASgJSFWIAQESHAoOb3JnYW5pY19jbGlja3MY5gEg",
            "ASgDSFaIAQESJgoYb3JnYW5pY19jbGlja3NfcGVyX3F1ZXJ5GOcBIAEoAUhX",
            "iAEBEiEKE29yZ2FuaWNfaW1wcmVzc2lvbnMY6AEgASgDSFiIAQESKwodb3Jn",
            "YW5pY19pbXByZXNzaW9uc19wZXJfcXVlcnkY6QEgASgBSFmIAQESHQoPb3Jn",
            "YW5pY19xdWVyaWVzGOoBIAEoA0haiAEBEiIKFHBlcmNlbnRfbmV3X3Zpc2l0",
            "b3JzGOsBIAEoAUhbiAEBEhkKC3Bob25lX2NhbGxzGOwBIAEoA0hciAEBEh8K",
            "EXBob25lX2ltcHJlc3Npb25zGO0BIAEoA0hdiAEBEiAKEnBob25lX3Rocm91",
            "Z2hfcmF0ZRjuASABKAFIXogBARIaCgxyZWxhdGl2ZV9jdHIY7wEgASgBSF+I",
            "AQESMgokc2VhcmNoX2Fic29sdXRlX3RvcF9pbXByZXNzaW9uX3NoYXJlGIgB",
            "IAEoAUhgiAEBEj4KMHNlYXJjaF9idWRnZXRfbG9zdF9hYnNvbHV0ZV90b3Bf",
            "aW1wcmVzc2lvbl9zaGFyZRiJASABKAFIYYgBARIxCiNzZWFyY2hfYnVkZ2V0",
            "X2xvc3RfaW1wcmVzc2lvbl9zaGFyZRiKASABKAFIYogBARI1CidzZWFyY2hf",
            "YnVkZ2V0X2xvc3RfdG9wX2ltcHJlc3Npb25fc2hhcmUYiwEgASgBSGOIAQES",
            "IAoSc2VhcmNoX2NsaWNrX3NoYXJlGIwBIAEoAUhkiAEBEjEKI3NlYXJjaF9l",
            "eGFjdF9tYXRjaF9pbXByZXNzaW9uX3NoYXJlGI0BIAEoAUhliAEBEiUKF3Nl",
            "YXJjaF9pbXByZXNzaW9uX3NoYXJlGI4BIAEoAUhmiAEBEjwKLnNlYXJjaF9y",
            "YW5rX2xvc3RfYWJzb2x1dGVfdG9wX2ltcHJlc3Npb25fc2hhcmUYjwEgASgB",
            "SGeIAQESLwohc2VhcmNoX3JhbmtfbG9zdF9pbXByZXNzaW9uX3NoYXJlGJAB",
            "IAEoAUhoiAEBEjMKJXNlYXJjaF9yYW5rX2xvc3RfdG9wX2ltcHJlc3Npb25f",
            "c2hhcmUYkQEgASgBSGmIAQESKQobc2VhcmNoX3RvcF9pbXByZXNzaW9uX3No",
            "YXJlGJIBIAEoAUhqiAEBEhkKC3NwZWVkX3Njb3JlGJMBIAEoA0hriAEBEicK",
            "GXRvcF9pbXByZXNzaW9uX3BlcmNlbnRhZ2UYlAEgASgBSGyIAQESPgowdmFs",
            "aWRfYWNjZWxlcmF0ZWRfbW9iaWxlX3BhZ2VzX2NsaWNrc19wZXJjZW50YWdl",
            "GJUBIAEoAUhtiAEBEicKGXZhbHVlX3Blcl9hbGxfY29udmVyc2lvbnMYlgEg",
            "ASgBSG6IAQESOgosdmFsdWVfcGVyX2FsbF9jb252ZXJzaW9uc19ieV9jb252",
            "ZXJzaW9uX2RhdGUY9AEgASgBSG+IAQESIgoUdmFsdWVfcGVyX2NvbnZlcnNp",
            "b24YlwEgASgBSHCIAQESNgoodmFsdWVfcGVyX2NvbnZlcnNpb25zX2J5X2Nv",
            "bnZlcnNpb25fZGF0ZRj1ASABKAFIcYgBARI7Ci12YWx1ZV9wZXJfY3VycmVu",
            "dF9tb2RlbF9hdHRyaWJ1dGVkX2NvbnZlcnNpb24YmAEgASgBSHKIAQESJgoY",
            "dmlkZW9fcXVhcnRpbGVfcDEwMF9yYXRlGIQBIAEoAUhziAEBEiUKF3ZpZGVv",
            "X3F1YXJ0aWxlX3AyNV9yYXRlGIUBIAEoAUh0iAEBEiUKF3ZpZGVvX3F1YXJ0",
            "aWxlX3A1MF9yYXRlGIYBIAEoAUh1iAEBEiUKF3ZpZGVvX3F1YXJ0aWxlX3A3",
            "NV9yYXRlGIcBIAEoAUh2iAEBEh0KD3ZpZGVvX3ZpZXdfcmF0ZRiZASABKAFI",
            "d4gBARIZCgt2aWRlb192aWV3cxiaASABKANIeIgBARImChh2aWV3X3Rocm91",
            "Z2hfY29udmVyc2lvbnMYmwEgASgDSHmIAQESIgoZc2tfYWRfbmV0d29ya19j",
            "b252ZXJzaW9ucxj2ASABKANCJQojX2Fic29sdXRlX3RvcF9pbXByZXNzaW9u",
            "X3BlcmNlbnRhZ2VCEgoQX2FjdGl2ZV92aWV3X2NwbUISChBfYWN0aXZlX3Zp",
            "ZXdfY3RyQhoKGF9hY3RpdmVfdmlld19pbXByZXNzaW9uc0IcChpfYWN0aXZl",
            "X3ZpZXdfbWVhc3VyYWJpbGl0eUIlCiNfYWN0aXZlX3ZpZXdfbWVhc3VyYWJs",
            "ZV9jb3N0X21pY3Jvc0IlCiNfYWN0aXZlX3ZpZXdfbWVhc3VyYWJsZV9pbXBy",
            "ZXNzaW9uc0IaChhfYWN0aXZlX3ZpZXdfdmlld2FiaWxpdHlCKQonX2FsbF9j",
            "b252ZXJzaW9uc19mcm9tX2ludGVyYWN0aW9uc19yYXRlQhgKFl9hbGxfY29u",
            "dmVyc2lvbnNfdmFsdWVCEgoQX2FsbF9jb252ZXJzaW9uc0IhCh9fYWxsX2Nv",
            "bnZlcnNpb25zX3ZhbHVlX3Blcl9jb3N0QiUKI19hbGxfY29udmVyc2lvbnNf",
            "ZnJvbV9jbGlja190b19jYWxsQiIKIF9hbGxfY29udmVyc2lvbnNfZnJvbV9k",
            "aXJlY3Rpb25zQjoKOF9hbGxfY29udmVyc2lvbnNfZnJvbV9pbnRlcmFjdGlv",
            "bnNfdmFsdWVfcGVyX2ludGVyYWN0aW9uQhwKGl9hbGxfY29udmVyc2lvbnNf",
            "ZnJvbV9tZW51Qh0KG19hbGxfY29udmVyc2lvbnNfZnJvbV9vcmRlckIoCiZf",
            "YWxsX2NvbnZlcnNpb25zX2Zyb21fb3RoZXJfZW5nYWdlbWVudEIjCiFfYWxs",
            "X2NvbnZlcnNpb25zX2Zyb21fc3RvcmVfdmlzaXRCJQojX2FsbF9jb252ZXJz",
            "aW9uc19mcm9tX3N0b3JlX3dlYnNpdGVCPAo6X2F1Y3Rpb25faW5zaWdodF9z",
            "ZWFyY2hfYWJzb2x1dGVfdG9wX2ltcHJlc3Npb25fcGVyY2VudGFnZUIqCihf",
            "YXVjdGlvbl9pbnNpZ2h0X3NlYXJjaF9pbXByZXNzaW9uX3NoYXJlQioKKF9h",
            "dWN0aW9uX2luc2lnaHRfc2VhcmNoX291dHJhbmtpbmdfc2hhcmVCJgokX2F1",
            "Y3Rpb25faW5zaWdodF9zZWFyY2hfb3ZlcmxhcF9yYXRlQi0KK19hdWN0aW9u",
            "X2luc2lnaHRfc2VhcmNoX3Bvc2l0aW9uX2Fib3ZlX3JhdGVCMwoxX2F1Y3Rp",
            "b25faW5zaWdodF9zZWFyY2hfdG9wX2ltcHJlc3Npb25fcGVyY2VudGFnZUIP",
            "Cg1fYXZlcmFnZV9jb3N0Qg4KDF9hdmVyYWdlX2NwY0IOCgxfYXZlcmFnZV9j",
            "cGVCDgoMX2F2ZXJhZ2VfY3BtQg4KDF9hdmVyYWdlX2NwdkIVChNfYXZlcmFn",
            "ZV9wYWdlX3ZpZXdzQhcKFV9hdmVyYWdlX3RpbWVfb25fc2l0ZUIcChpfYmVu",
            "Y2htYXJrX2F2ZXJhZ2VfbWF4X2NwY0IjCiFfYmlkZGFibGVfYXBwX2luc3Rh",
            "bGxfY29udmVyc2lvbnNCKAomX2JpZGRhYmxlX2FwcF9wb3N0X2luc3RhbGxf",
            "Y29udmVyc2lvbnNCEAoOX2JlbmNobWFya19jdHJCDgoMX2JvdW5jZV9yYXRl",
            "QgkKB19jbGlja3NCEgoQX2NvbWJpbmVkX2NsaWNrc0IcChpfY29tYmluZWRf",
            "Y2xpY2tzX3Blcl9xdWVyeUITChFfY29tYmluZWRfcXVlcmllc0InCiVfY29u",
            "dGVudF9idWRnZXRfbG9zdF9pbXByZXNzaW9uX3NoYXJlQhsKGV9jb250ZW50",
            "X2ltcHJlc3Npb25fc2hhcmVCLQorX2NvbnZlcnNpb25fbGFzdF9yZWNlaXZl",
            "ZF9yZXF1ZXN0X2RhdGVfdGltZUIiCiBfY29udmVyc2lvbl9sYXN0X2NvbnZl",
            "cnNpb25fZGF0ZUIlCiNfY29udGVudF9yYW5rX2xvc3RfaW1wcmVzc2lvbl9z",
            "aGFyZUIlCiNfY29udmVyc2lvbnNfZnJvbV9pbnRlcmFjdGlvbnNfcmF0ZUIU",
            "ChJfY29udmVyc2lvbnNfdmFsdWVCHQobX2NvbnZlcnNpb25zX3ZhbHVlX3Bl",
            "cl9jb3N0QjYKNF9jb252ZXJzaW9uc19mcm9tX2ludGVyYWN0aW9uc192YWx1",
            "ZV9wZXJfaW50ZXJhY3Rpb25CDgoMX2NvbnZlcnNpb25zQg4KDF9jb3N0X21p",
            "Y3Jvc0IbChlfY29zdF9wZXJfYWxsX2NvbnZlcnNpb25zQhYKFF9jb3N0X3Bl",
            "cl9jb252ZXJzaW9uQi8KLV9jb3N0X3Blcl9jdXJyZW50X21vZGVsX2F0dHJp",
            "YnV0ZWRfY29udmVyc2lvbkIbChlfY3Jvc3NfZGV2aWNlX2NvbnZlcnNpb25z",
            "QgYKBF9jdHJCJwolX2N1cnJlbnRfbW9kZWxfYXR0cmlidXRlZF9jb252ZXJz",
            "aW9uc0I+CjxfY3VycmVudF9tb2RlbF9hdHRyaWJ1dGVkX2NvbnZlcnNpb25z",
            "X2Zyb21faW50ZXJhY3Rpb25zX3JhdGVCTwpNX2N1cnJlbnRfbW9kZWxfYXR0",
            "cmlidXRlZF9jb252ZXJzaW9uc19mcm9tX2ludGVyYWN0aW9uc192YWx1ZV9w",
            "ZXJfaW50ZXJhY3Rpb25CLQorX2N1cnJlbnRfbW9kZWxfYXR0cmlidXRlZF9j",
            "b252ZXJzaW9uc192YWx1ZUI2CjRfY3VycmVudF9tb2RlbF9hdHRyaWJ1dGVk",
            "X2NvbnZlcnNpb25zX3ZhbHVlX3Blcl9jb3N0QhIKEF9lbmdhZ2VtZW50X3Jh",
            "dGVCDgoMX2VuZ2FnZW1lbnRzQiIKIF9ob3RlbF9hdmVyYWdlX2xlYWRfdmFs",
            "dWVfbWljcm9zQh8KHV9ob3RlbF9jb21taXNzaW9uX3JhdGVfbWljcm9zQiEK",
            "H19ob3RlbF9leHBlY3RlZF9jb21taXNzaW9uX2Nvc3RCJAoiX2hvdGVsX3By",
            "aWNlX2RpZmZlcmVuY2VfcGVyY2VudGFnZUIdChtfaG90ZWxfZWxpZ2libGVf",
            "aW1wcmVzc2lvbnNCGwoZX2hpc3RvcmljYWxfcXVhbGl0eV9zY29yZUIRCg9f",
            "Z21haWxfZm9yd2FyZHNCDgoMX2dtYWlsX3NhdmVzQhkKF19nbWFpbF9zZWNv",
            "bmRhcnlfY2xpY2tzQh8KHV9pbXByZXNzaW9uc19mcm9tX3N0b3JlX3JlYWNo",
            "Qg4KDF9pbXByZXNzaW9uc0ITChFfaW50ZXJhY3Rpb25fcmF0ZUIPCg1faW50",
            "ZXJhY3Rpb25zQhUKE19pbnZhbGlkX2NsaWNrX3JhdGVCEQoPX2ludmFsaWRf",
            "Y2xpY2tzQhAKDl9tZXNzYWdlX2NoYXRzQhYKFF9tZXNzYWdlX2ltcHJlc3Np",
            "b25zQhQKEl9tZXNzYWdlX2NoYXRfcmF0ZUIkCiJfbW9iaWxlX2ZyaWVuZGx5",
            "X2NsaWNrc19wZXJjZW50YWdlQhwKGl9vcHRpbWl6YXRpb25fc2NvcmVfdXBs",
            "aWZ0QhkKF19vcHRpbWl6YXRpb25fc2NvcmVfdXJsQhEKD19vcmdhbmljX2Ns",
            "aWNrc0IbChlfb3JnYW5pY19jbGlja3NfcGVyX3F1ZXJ5QhYKFF9vcmdhbmlj",
            "X2ltcHJlc3Npb25zQiAKHl9vcmdhbmljX2ltcHJlc3Npb25zX3Blcl9xdWVy",
            "eUISChBfb3JnYW5pY19xdWVyaWVzQhcKFV9wZXJjZW50X25ld192aXNpdG9y",
            "c0IOCgxfcGhvbmVfY2FsbHNCFAoSX3Bob25lX2ltcHJlc3Npb25zQhUKE19w",
            "aG9uZV90aHJvdWdoX3JhdGVCDwoNX3JlbGF0aXZlX2N0ckInCiVfc2VhcmNo",
            "X2Fic29sdXRlX3RvcF9pbXByZXNzaW9uX3NoYXJlQjMKMV9zZWFyY2hfYnVk",
            "Z2V0X2xvc3RfYWJzb2x1dGVfdG9wX2ltcHJlc3Npb25fc2hhcmVCJgokX3Nl",
            "YXJjaF9idWRnZXRfbG9zdF9pbXByZXNzaW9uX3NoYXJlQioKKF9zZWFyY2hf",
            "YnVkZ2V0X2xvc3RfdG9wX2ltcHJlc3Npb25fc2hhcmVCFQoTX3NlYXJjaF9j",
            "bGlja19zaGFyZUImCiRfc2VhcmNoX2V4YWN0X21hdGNoX2ltcHJlc3Npb25f",
            "c2hhcmVCGgoYX3NlYXJjaF9pbXByZXNzaW9uX3NoYXJlQjEKL19zZWFyY2hf",
            "cmFua19sb3N0X2Fic29sdXRlX3RvcF9pbXByZXNzaW9uX3NoYXJlQiQKIl9z",
            "ZWFyY2hfcmFua19sb3N0X2ltcHJlc3Npb25fc2hhcmVCKAomX3NlYXJjaF9y",
            "YW5rX2xvc3RfdG9wX2ltcHJlc3Npb25fc2hhcmVCHgocX3NlYXJjaF90b3Bf",
            "aW1wcmVzc2lvbl9zaGFyZUIOCgxfc3BlZWRfc2NvcmVCHAoaX3RvcF9pbXBy",
            "ZXNzaW9uX3BlcmNlbnRhZ2VCMwoxX3ZhbGlkX2FjY2VsZXJhdGVkX21vYmls",
            "ZV9wYWdlc19jbGlja3NfcGVyY2VudGFnZUIcChpfdmFsdWVfcGVyX2FsbF9j",
            "b252ZXJzaW9uc0IvCi1fdmFsdWVfcGVyX2FsbF9jb252ZXJzaW9uc19ieV9j",
            "b252ZXJzaW9uX2RhdGVCFwoVX3ZhbHVlX3Blcl9jb252ZXJzaW9uQisKKV92",
            "YWx1ZV9wZXJfY29udmVyc2lvbnNfYnlfY29udmVyc2lvbl9kYXRlQjAKLl92",
            "YWx1ZV9wZXJfY3VycmVudF9tb2RlbF9hdHRyaWJ1dGVkX2NvbnZlcnNpb25C",
            "GwoZX3ZpZGVvX3F1YXJ0aWxlX3AxMDBfcmF0ZUIaChhfdmlkZW9fcXVhcnRp",
            "bGVfcDI1X3JhdGVCGgoYX3ZpZGVvX3F1YXJ0aWxlX3A1MF9yYXRlQhoKGF92",
            "aWRlb19xdWFydGlsZV9wNzVfcmF0ZUISChBfdmlkZW9fdmlld19yYXRlQg4K",
            "DF92aWRlb192aWV3c0IbChlfdmlld190aHJvdWdoX2NvbnZlcnNpb25zQuwB",
            "CiNjb20uZ29vZ2xlLmFkcy5nb29nbGVhZHMudjExLmNvbW1vbkIMTWV0cmlj",
            "c1Byb3RvUAFaRWdvb2dsZS5nb2xhbmcub3JnL2dlbnByb3RvL2dvb2dsZWFw",
            "aXMvYWRzL2dvb2dsZWFkcy92MTEvY29tbW9uO2NvbW1vbqICA0dBQaoCH0dv",
            "b2dsZS5BZHMuR29vZ2xlQWRzLlYxMS5Db21tb27KAh9Hb29nbGVcQWRzXEdv",
            "b2dsZUFkc1xWMTFcQ29tbW9u6gIjR29vZ2xlOjpBZHM6Okdvb2dsZUFkczo6",
            "VjExOjpDb21tb25iBnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Google.Ads.GoogleAds.V11.Enums.InteractionEventTypeReflection.Descriptor, global::Google.Ads.GoogleAds.V11.Enums.QualityScoreBucketReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Ads.GoogleAds.V11.Common.Metrics), global::Google.Ads.GoogleAds.V11.Common.Metrics.Parser, new[]{ "AbsoluteTopImpressionPercentage", "ActiveViewCpm", "ActiveViewCtr", "ActiveViewImpressions", "ActiveViewMeasurability", "ActiveViewMeasurableCostMicros", "ActiveViewMeasurableImpressions", "ActiveViewViewability", "AllConversionsFromInteractionsRate", "AllConversionsValue", "AllConversionsValueByConversionDate", "AllConversions", "AllConversionsByConversionDate", "AllConversionsValuePerCost", "AllConversionsFromClickToCall", "AllConversionsFromDirections", "AllConversionsFromInteractionsValuePerInteraction", "AllConversionsFromMenu", "AllConversionsFromOrder", "AllConversionsFromOtherEngagement", "AllConversionsFromStoreVisit", "AllConversionsFromStoreWebsite", "AuctionInsightSearchAbsoluteTopImpressionPercentage", "AuctionInsightSearchImpressionShare", "AuctionInsightSearchOutrankingShare", "AuctionInsightSearchOverlapRate", "AuctionInsightSearchPositionAboveRate", "AuctionInsightSearchTopImpressionPercentage", "AverageCost", "AverageCpc", "AverageCpe", "AverageCpm", "AverageCpv", "AveragePageViews", "AverageTimeOnSite", "BenchmarkAverageMaxCpc", "BiddableAppInstallConversions", "BiddableAppPostInstallConversions", "BenchmarkCtr", "BounceRate", "Clicks", "CombinedClicks", "CombinedClicksPerQuery", "CombinedQueries", "ContentBudgetLostImpressionShare", "ContentImpressionShare", "ConversionLastReceivedRequestDateTime", "ConversionLastConversionDate", "ContentRankLostImpressionShare", "ConversionsFromInteractionsRate", "ConversionsValue", "ConversionsValueByConversionDate", "ConversionsValuePerCost", "ConversionsFromInteractionsValuePerInteraction", "Conversions", "ConversionsByConversionDate", "CostMicros", "CostPerAllConversions", "CostPerConversion", "CostPerCurrentModelAttributedConversion", "CrossDeviceConversions", "Ctr", "CurrentModelAttributedConversions", "CurrentModelAttributedConversionsFromInteractionsRate", "CurrentModelAttributedConversionsFromInteractionsValuePerInteraction", "CurrentModelAttributedConversionsValue", "CurrentModelAttributedConversionsValuePerCost", "EngagementRate", "Engagements", "HotelAverageLeadValueMicros", "HotelCommissionRateMicros", "HotelExpectedCommissionCost", "HotelPriceDifferencePercentage", "HotelEligibleImpressions", "HistoricalCreativeQualityScore", "HistoricalLandingPageQualityScore", "HistoricalQualityScore", "HistoricalSearchPredictedCtr", "GmailForwards", "GmailSaves", "GmailSecondaryClicks", "ImpressionsFromStoreReach", "Impressions", "InteractionRate", "Interactions", "InteractionEventTypes", "InvalidClickRate", "InvalidClicks", "MessageChats", "MessageImpressions", "MessageChatRate", "MobileFriendlyClicksPercentage", "OptimizationScoreUplift", "OptimizationScoreUrl", "OrganicClicks", "OrganicClicksPerQuery", "OrganicImpressions", "OrganicImpressionsPerQuery", "OrganicQueries", "PercentNewVisitors", "PhoneCalls", "PhoneImpressions", "PhoneThroughRate", "RelativeCtr", "SearchAbsoluteTopImpressionShare", "SearchBudgetLostAbsoluteTopImpressionShare", "SearchBudgetLostImpressionShare", "SearchBudgetLostTopImpressionShare", "SearchClickShare", "SearchExactMatchImpressionShare", "SearchImpressionShare", "SearchRankLostAbsoluteTopImpressionShare", "SearchRankLostImpressionShare", "SearchRankLostTopImpressionShare", "SearchTopImpressionShare", "SpeedScore", "TopImpressionPercentage", "ValidAcceleratedMobilePagesClicksPercentage", "ValuePerAllConversions", "ValuePerAllConversionsByConversionDate", "ValuePerConversion", "ValuePerConversionsByConversionDate", "ValuePerCurrentModelAttributedConversion", "VideoQuartileP100Rate", "VideoQuartileP25Rate", "VideoQuartileP50Rate", "VideoQuartileP75Rate", "VideoViewRate", "VideoViews", "ViewThroughConversions", "SkAdNetworkConversions" }, new[]{ "AbsoluteTopImpressionPercentage", "ActiveViewCpm", "ActiveViewCtr", "ActiveViewImpressions", "ActiveViewMeasurability", "ActiveViewMeasurableCostMicros", "ActiveViewMeasurableImpressions", "ActiveViewViewability", "AllConversionsFromInteractionsRate", "AllConversionsValue", "AllConversions", "AllConversionsValuePerCost", "AllConversionsFromClickToCall", "AllConversionsFromDirections", "AllConversionsFromInteractionsValuePerInteraction", "AllConversionsFromMenu", "AllConversionsFromOrder", "AllConversionsFromOtherEngagement", "AllConversionsFromStoreVisit", "AllConversionsFromStoreWebsite", "AuctionInsightSearchAbsoluteTopImpressionPercentage", "AuctionInsightSearchImpressionShare", "AuctionInsightSearchOutrankingShare", "AuctionInsightSearchOverlapRate", "AuctionInsightSearchPositionAboveRate", "AuctionInsightSearchTopImpressionPercentage", "AverageCost", "AverageCpc", "AverageCpe", "AverageCpm", "AverageCpv", "AveragePageViews", "AverageTimeOnSite", "BenchmarkAverageMaxCpc", "BiddableAppInstallConversions", "BiddableAppPostInstallConversions", "BenchmarkCtr", "BounceRate", "Clicks", "CombinedClicks", "CombinedClicksPerQuery", "CombinedQueries", "ContentBudgetLostImpressionShare", "ContentImpressionShare", "ConversionLastReceivedRequestDateTime", "ConversionLastConversionDate", "ContentRankLostImpressionShare", "ConversionsFromInteractionsRate", "ConversionsValue", "ConversionsValuePerCost", "ConversionsFromInteractionsValuePerInteraction", "Conversions", "CostMicros", "CostPerAllConversions", "CostPerConversion", "CostPerCurrentModelAttributedConversion", "CrossDeviceConversions", "Ctr", "CurrentModelAttributedConversions", "CurrentModelAttributedConversionsFromInteractionsRate", "CurrentModelAttributedConversionsFromInteractionsValuePerInteraction", "CurrentModelAttributedConversionsValue", "CurrentModelAttributedConversionsValuePerCost", "EngagementRate", "Engagements", "HotelAverageLeadValueMicros", "HotelCommissionRateMicros", "HotelExpectedCommissionCost", "HotelPriceDifferencePercentage", "HotelEligibleImpressions", "HistoricalQualityScore", "GmailForwards", "GmailSaves", "GmailSecondaryClicks", "ImpressionsFromStoreReach", "Impressions", "InteractionRate", "Interactions", "InvalidClickRate", "InvalidClicks", "MessageChats", "MessageImpressions", "MessageChatRate", "MobileFriendlyClicksPercentage", "OptimizationScoreUplift", "OptimizationScoreUrl", "OrganicClicks", "OrganicClicksPerQuery", "OrganicImpressions", "OrganicImpressionsPerQuery", "OrganicQueries", "PercentNewVisitors", "PhoneCalls", "PhoneImpressions", "PhoneThroughRate", "RelativeCtr", "SearchAbsoluteTopImpressionShare", "SearchBudgetLostAbsoluteTopImpressionShare", "SearchBudgetLostImpressionShare", "SearchBudgetLostTopImpressionShare", "SearchClickShare", "SearchExactMatchImpressionShare", "SearchImpressionShare", "SearchRankLostAbsoluteTopImpressionShare", "SearchRankLostImpressionShare", "SearchRankLostTopImpressionShare", "SearchTopImpressionShare", "SpeedScore", "TopImpressionPercentage", "ValidAcceleratedMobilePagesClicksPercentage", "ValuePerAllConversions", "ValuePerAllConversionsByConversionDate", "ValuePerConversion", "ValuePerConversionsByConversionDate", "ValuePerCurrentModelAttributedConversion", "VideoQuartileP100Rate", "VideoQuartileP25Rate", "VideoQuartileP50Rate", "VideoQuartileP75Rate", "VideoViewRate", "VideoViews", "ViewThroughConversions" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  /// <summary>
  /// Metrics data.
  /// </summary>
  public sealed partial class Metrics : pb::IMessage<Metrics>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<Metrics> _parser = new pb::MessageParser<Metrics>(() => new Metrics());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    private int _hasBits1;
    private int _hasBits2;
    private int _hasBits3;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<Metrics> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Ads.GoogleAds.V11.Common.MetricsReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public Metrics() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public Metrics(Metrics other) : this() {
      _hasBits0 = other._hasBits0;
      _hasBits1 = other._hasBits1;
      _hasBits2 = other._hasBits2;
      _hasBits3 = other._hasBits3;
      absoluteTopImpressionPercentage_ = other.absoluteTopImpressionPercentage_;
      activeViewCpm_ = other.activeViewCpm_;
      activeViewCtr_ = other.activeViewCtr_;
      activeViewImpressions_ = other.activeViewImpressions_;
      activeViewMeasurability_ = other.activeViewMeasurability_;
      activeViewMeasurableCostMicros_ = other.activeViewMeasurableCostMicros_;
      activeViewMeasurableImpressions_ = other.activeViewMeasurableImpressions_;
      activeViewViewability_ = other.activeViewViewability_;
      allConversionsFromInteractionsRate_ = other.allConversionsFromInteractionsRate_;
      allConversionsValue_ = other.allConversionsValue_;
      allConversionsValueByConversionDate_ = other.allConversionsValueByConversionDate_;
      allConversions_ = other.allConversions_;
      allConversionsByConversionDate_ = other.allConversionsByConversionDate_;
      allConversionsValuePerCost_ = other.allConversionsValuePerCost_;
      allConversionsFromClickToCall_ = other.allConversionsFromClickToCall_;
      allConversionsFromDirections_ = other.allConversionsFromDirections_;
      allConversionsFromInteractionsValuePerInteraction_ = other.allConversionsFromInteractionsValuePerInteraction_;
      allConversionsFromMenu_ = other.allConversionsFromMenu_;
      allConversionsFromOrder_ = other.allConversionsFromOrder_;
      allConversionsFromOtherEngagement_ = other.allConversionsFromOtherEngagement_;
      allConversionsFromStoreVisit_ = other.allConversionsFromStoreVisit_;
      allConversionsFromStoreWebsite_ = other.allConversionsFromStoreWebsite_;
      auctionInsightSearchAbsoluteTopImpressionPercentage_ = other.auctionInsightSearchAbsoluteTopImpressionPercentage_;
      auctionInsightSearchImpressionShare_ = other.auctionInsightSearchImpressionShare_;
      auctionInsightSearchOutrankingShare_ = other.auctionInsightSearchOutrankingShare_;
      auctionInsightSearchOverlapRate_ = other.auctionInsightSearchOverlapRate_;
      auctionInsightSearchPositionAboveRate_ = other.auctionInsightSearchPositionAboveRate_;
      auctionInsightSearchTopImpressionPercentage_ = other.auctionInsightSearchTopImpressionPercentage_;
      averageCost_ = other.averageCost_;
      averageCpc_ = other.averageCpc_;
      averageCpe_ = other.averageCpe_;
      averageCpm_ = other.averageCpm_;
      averageCpv_ = other.averageCpv_;
      averagePageViews_ = other.averagePageViews_;
      averageTimeOnSite_ = other.averageTimeOnSite_;
      benchmarkAverageMaxCpc_ = other.benchmarkAverageMaxCpc_;
      biddableAppInstallConversions_ = other.biddableAppInstallConversions_;
      biddableAppPostInstallConversions_ = other.biddableAppPostInstallConversions_;
      benchmarkCtr_ = other.benchmarkCtr_;
      bounceRate_ = other.bounceRate_;
      clicks_ = other.clicks_;
      combinedClicks_ = other.combinedClicks_;
      combinedClicksPerQuery_ = other.combinedClicksPerQuery_;
      combinedQueries_ = other.combinedQueries_;
      contentBudgetLostImpressionShare_ = other.contentBudgetLostImpressionShare_;
      contentImpressionShare_ = other.contentImpressionShare_;
      conversionLastReceivedRequestDateTime_ = other.conversionLastReceivedRequestDateTime_;
      conversionLastConversionDate_ = other.conversionLastConversionDate_;
      contentRankLostImpressionShare_ = other.contentRankLostImpressionShare_;
      conversionsFromInteractionsRate_ = other.conversionsFromInteractionsRate_;
      conversionsValue_ = other.conversionsValue_;
      conversionsValueByConversionDate_ = other.conversionsValueByConversionDate_;
      conversionsValuePerCost_ = other.conversionsValuePerCost_;
      conversionsFromInteractionsValuePerInteraction_ = other.conversionsFromInteractionsValuePerInteraction_;
      conversions_ = other.conversions_;
      conversionsByConversionDate_ = other.conversionsByConversionDate_;
      costMicros_ = other.costMicros_;
      costPerAllConversions_ = other.costPerAllConversions_;
      costPerConversion_ = other.costPerConversion_;
      costPerCurrentModelAttributedConversion_ = other.costPerCurrentModelAttributedConversion_;
      crossDeviceConversions_ = other.crossDeviceConversions_;
      ctr_ = other.ctr_;
      currentModelAttributedConversions_ = other.currentModelAttributedConversions_;
      currentModelAttributedConversionsFromInteractionsRate_ = other.currentModelAttributedConversionsFromInteractionsRate_;
      currentModelAttributedConversionsFromInteractionsValuePerInteraction_ = other.currentModelAttributedConversionsFromInteractionsValuePerInteraction_;
      currentModelAttributedConversionsValue_ = other.currentModelAttributedConversionsValue_;
      currentModelAttributedConversionsValuePerCost_ = other.currentModelAttributedConversionsValuePerCost_;
      engagementRate_ = other.engagementRate_;
      engagements_ = other.engagements_;
      hotelAverageLeadValueMicros_ = other.hotelAverageLeadValueMicros_;
      hotelCommissionRateMicros_ = other.hotelCommissionRateMicros_;
      hotelExpectedCommissionCost_ = other.hotelExpectedCommissionCost_;
      hotelPriceDifferencePercentage_ = other.hotelPriceDifferencePercentage_;
      hotelEligibleImpressions_ = other.hotelEligibleImpressions_;
      historicalCreativeQualityScore_ = other.historicalCreativeQualityScore_;
      historicalLandingPageQualityScore_ = other.historicalLandingPageQualityScore_;
      historicalQualityScore_ = other.historicalQualityScore_;
      historicalSearchPredictedCtr_ = other.historicalSearchPredictedCtr_;
      gmailForwards_ = other.gmailForwards_;
      gmailSaves_ = other.gmailSaves_;
      gmailSecondaryClicks_ = other.gmailSecondaryClicks_;
      impressionsFromStoreReach_ = other.impressionsFromStoreReach_;
      impressions_ = other.impressions_;
      interactionRate_ = other.interactionRate_;
      interactions_ = other.interactions_;
      interactionEventTypes_ = other.interactionEventTypes_.Clone();
      invalidClickRate_ = other.invalidClickRate_;
      invalidClicks_ = other.invalidClicks_;
      messageChats_ = other.messageChats_;
      messageImpressions_ = other.messageImpressions_;
      messageChatRate_ = other.messageChatRate_;
      mobileFriendlyClicksPercentage_ = other.mobileFriendlyClicksPercentage_;
      optimizationScoreUplift_ = other.optimizationScoreUplift_;
      optimizationScoreUrl_ = other.optimizationScoreUrl_;
      organicClicks_ = other.organicClicks_;
      organicClicksPerQuery_ = other.organicClicksPerQuery_;
      organicImpressions_ = other.organicImpressions_;
      organicImpressionsPerQuery_ = other.organicImpressionsPerQuery_;
      organicQueries_ = other.organicQueries_;
      percentNewVisitors_ = other.percentNewVisitors_;
      phoneCalls_ = other.phoneCalls_;
      phoneImpressions_ = other.phoneImpressions_;
      phoneThroughRate_ = other.phoneThroughRate_;
      relativeCtr_ = other.relativeCtr_;
      searchAbsoluteTopImpressionShare_ = other.searchAbsoluteTopImpressionShare_;
      searchBudgetLostAbsoluteTopImpressionShare_ = other.searchBudgetLostAbsoluteTopImpressionShare_;
      searchBudgetLostImpressionShare_ = other.searchBudgetLostImpressionShare_;
      searchBudgetLostTopImpressionShare_ = other.searchBudgetLostTopImpressionShare_;
      searchClickShare_ = other.searchClickShare_;
      searchExactMatchImpressionShare_ = other.searchExactMatchImpressionShare_;
      searchImpressionShare_ = other.searchImpressionShare_;
      searchRankLostAbsoluteTopImpressionShare_ = other.searchRankLostAbsoluteTopImpressionShare_;
      searchRankLostImpressionShare_ = other.searchRankLostImpressionShare_;
      searchRankLostTopImpressionShare_ = other.searchRankLostTopImpressionShare_;
      searchTopImpressionShare_ = other.searchTopImpressionShare_;
      speedScore_ = other.speedScore_;
      topImpressionPercentage_ = other.topImpressionPercentage_;
      validAcceleratedMobilePagesClicksPercentage_ = other.validAcceleratedMobilePagesClicksPercentage_;
      valuePerAllConversions_ = other.valuePerAllConversions_;
      valuePerAllConversionsByConversionDate_ = other.valuePerAllConversionsByConversionDate_;
      valuePerConversion_ = other.valuePerConversion_;
      valuePerConversionsByConversionDate_ = other.valuePerConversionsByConversionDate_;
      valuePerCurrentModelAttributedConversion_ = other.valuePerCurrentModelAttributedConversion_;
      videoQuartileP100Rate_ = other.videoQuartileP100Rate_;
      videoQuartileP25Rate_ = other.videoQuartileP25Rate_;
      videoQuartileP50Rate_ = other.videoQuartileP50Rate_;
      videoQuartileP75Rate_ = other.videoQuartileP75Rate_;
      videoViewRate_ = other.videoViewRate_;
      videoViews_ = other.videoViews_;
      viewThroughConversions_ = other.viewThroughConversions_;
      skAdNetworkConversions_ = other.skAdNetworkConversions_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public Metrics Clone() {
      return new Metrics(this);
    }

    /// <summary>Field number for the "absolute_top_impression_percentage" field.</summary>
    public const int AbsoluteTopImpressionPercentageFieldNumber = 183;
    private double absoluteTopImpressionPercentage_;
    /// <summary>
    /// The percent of your ad impressions that are shown as the very first ad
    /// above the organic search results.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double AbsoluteTopImpressionPercentage {
      get { if ((_hasBits1 & 131072) != 0) { return absoluteTopImpressionPercentage_; } else { return 0D; } }
      set {
        _hasBits1 |= 131072;
        absoluteTopImpressionPercentage_ = value;
      }
    }
    /// <summary>Gets whether the "absolute_top_impression_percentage" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasAbsoluteTopImpressionPercentage {
      get { return (_hasBits1 & 131072) != 0; }
    }
    /// <summary>Clears the value of the "absolute_top_impression_percentage" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearAbsoluteTopImpressionPercentage() {
      _hasBits1 &= ~131072;
    }

    /// <summary>Field number for the "active_view_cpm" field.</summary>
    public const int ActiveViewCpmFieldNumber = 184;
    private double activeViewCpm_;
    /// <summary>
    /// Average cost of viewable impressions (`active_view_impressions`).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double ActiveViewCpm {
      get { if ((_hasBits1 & 262144) != 0) { return activeViewCpm_; } else { return 0D; } }
      set {
        _hasBits1 |= 262144;
        activeViewCpm_ = value;
      }
    }
    /// <summary>Gets whether the "active_view_cpm" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasActiveViewCpm {
      get { return (_hasBits1 & 262144) != 0; }
    }
    /// <summary>Clears the value of the "active_view_cpm" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearActiveViewCpm() {
      _hasBits1 &= ~262144;
    }

    /// <summary>Field number for the "active_view_ctr" field.</summary>
    public const int ActiveViewCtrFieldNumber = 185;
    private double activeViewCtr_;
    /// <summary>
    /// Active view measurable clicks divided by active view viewable impressions.
    /// This metric is reported only for display network.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double ActiveViewCtr {
      get { if ((_hasBits1 & 524288) != 0) { return activeViewCtr_; } else { return 0D; } }
      set {
        _hasBits1 |= 524288;
        activeViewCtr_ = value;
      }
    }
    /// <summary>Gets whether the "active_view_ctr" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasActiveViewCtr {
      get { return (_hasBits1 & 524288) != 0; }
    }
    /// <summary>Clears the value of the "active_view_ctr" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearActiveViewCtr() {
      _hasBits1 &= ~524288;
    }

    /// <summary>Field number for the "active_view_impressions" field.</summary>
    public const int ActiveViewImpressionsFieldNumber = 186;
    private long activeViewImpressions_;
    /// <summary>
    /// A measurement of how often your ad has become viewable on a Display
    /// Network site.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long ActiveViewImpressions {
      get { if ((_hasBits1 & 1048576) != 0) { return activeViewImpressions_; } else { return 0L; } }
      set {
        _hasBits1 |= 1048576;
        activeViewImpressions_ = value;
      }
    }
    /// <summary>Gets whether the "active_view_impressions" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasActiveViewImpressions {
      get { return (_hasBits1 & 1048576) != 0; }
    }
    /// <summary>Clears the value of the "active_view_impressions" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearActiveViewImpressions() {
      _hasBits1 &= ~1048576;
    }

    /// <summary>Field number for the "active_view_measurability" field.</summary>
    public const int ActiveViewMeasurabilityFieldNumber = 187;
    private double activeViewMeasurability_;
    /// <summary>
    /// The ratio of impressions that could be measured by Active View over the
    /// number of served impressions.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double ActiveViewMeasurability {
      get { if ((_hasBits1 & 2097152) != 0) { return activeViewMeasurability_; } else { return 0D; } }
      set {
        _hasBits1 |= 2097152;
        activeViewMeasurability_ = value;
      }
    }
    /// <summary>Gets whether the "active_view_measurability" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasActiveViewMeasurability {
      get { return (_hasBits1 & 2097152) != 0; }
    }
    /// <summary>Clears the value of the "active_view_measurability" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearActiveViewMeasurability() {
      _hasBits1 &= ~2097152;
    }

    /// <summary>Field number for the "active_view_measurable_cost_micros" field.</summary>
    public const int ActiveViewMeasurableCostMicrosFieldNumber = 188;
    private long activeViewMeasurableCostMicros_;
    /// <summary>
    /// The cost of the impressions you received that were measurable by Active
    /// View.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long ActiveViewMeasurableCostMicros {
      get { if ((_hasBits1 & 4194304) != 0) { return activeViewMeasurableCostMicros_; } else { return 0L; } }
      set {
        _hasBits1 |= 4194304;
        activeViewMeasurableCostMicros_ = value;
      }
    }
    /// <summary>Gets whether the "active_view_measurable_cost_micros" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasActiveViewMeasurableCostMicros {
      get { return (_hasBits1 & 4194304) != 0; }
    }
    /// <summary>Clears the value of the "active_view_measurable_cost_micros" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearActiveViewMeasurableCostMicros() {
      _hasBits1 &= ~4194304;
    }

    /// <summary>Field number for the "active_view_measurable_impressions" field.</summary>
    public const int ActiveViewMeasurableImpressionsFieldNumber = 189;
    private long activeViewMeasurableImpressions_;
    /// <summary>
    /// The number of times your ads are appearing on placements in positions
    /// where they can be seen.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long ActiveViewMeasurableImpressions {
      get { if ((_hasBits1 & 8388608) != 0) { return activeViewMeasurableImpressions_; } else { return 0L; } }
      set {
        _hasBits1 |= 8388608;
        activeViewMeasurableImpressions_ = value;
      }
    }
    /// <summary>Gets whether the "active_view_measurable_impressions" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasActiveViewMeasurableImpressions {
      get { return (_hasBits1 & 8388608) != 0; }
    }
    /// <summary>Clears the value of the "active_view_measurable_impressions" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearActiveViewMeasurableImpressions() {
      _hasBits1 &= ~8388608;
    }

    /// <summary>Field number for the "active_view_viewability" field.</summary>
    public const int ActiveViewViewabilityFieldNumber = 190;
    private double activeViewViewability_;
    /// <summary>
    /// The percentage of time when your ad appeared on an Active View enabled site
    /// (measurable impressions) and was viewable (viewable impressions).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double ActiveViewViewability {
      get { if ((_hasBits1 & 16777216) != 0) { return activeViewViewability_; } else { return 0D; } }
      set {
        _hasBits1 |= 16777216;
        activeViewViewability_ = value;
      }
    }
    /// <summary>Gets whether the "active_view_viewability" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasActiveViewViewability {
      get { return (_hasBits1 & 16777216) != 0; }
    }
    /// <summary>Clears the value of the "active_view_viewability" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearActiveViewViewability() {
      _hasBits1 &= ~16777216;
    }

    /// <summary>Field number for the "all_conversions_from_interactions_rate" field.</summary>
    public const int AllConversionsFromInteractionsRateFieldNumber = 191;
    private double allConversionsFromInteractionsRate_;
    /// <summary>
    /// All conversions from interactions (as oppose to view through conversions)
    /// divided by the number of ad interactions.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double AllConversionsFromInteractionsRate {
      get { if ((_hasBits1 & 33554432) != 0) { return allConversionsFromInteractionsRate_; } else { return 0D; } }
      set {
        _hasBits1 |= 33554432;
        allConversionsFromInteractionsRate_ = value;
      }
    }
    /// <summary>Gets whether the "all_conversions_from_interactions_rate" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasAllConversionsFromInteractionsRate {
      get { return (_hasBits1 & 33554432) != 0; }
    }
    /// <summary>Clears the value of the "all_conversions_from_interactions_rate" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearAllConversionsFromInteractionsRate() {
      _hasBits1 &= ~33554432;
    }

    /// <summary>Field number for the "all_conversions_value" field.</summary>
    public const int AllConversionsValueFieldNumber = 192;
    private double allConversionsValue_;
    /// <summary>
    /// The value of all conversions.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double AllConversionsValue {
      get { if ((_hasBits1 & 67108864) != 0) { return allConversionsValue_; } else { return 0D; } }
      set {
        _hasBits1 |= 67108864;
        allConversionsValue_ = value;
      }
    }
    /// <summary>Gets whether the "all_conversions_value" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasAllConversionsValue {
      get { return (_hasBits1 & 67108864) != 0; }
    }
    /// <summary>Clears the value of the "all_conversions_value" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearAllConversionsValue() {
      _hasBits1 &= ~67108864;
    }

    /// <summary>Field number for the "all_conversions_value_by_conversion_date" field.</summary>
    public const int AllConversionsValueByConversionDateFieldNumber = 240;
    private double allConversionsValueByConversionDate_;
    /// <summary>
    /// The value of all conversions. When this column is selected with date, the
    /// values in date column means the conversion date. Details for the
    /// by_conversion_date columns are available at
    /// https://support.google.com/google-ads/answer/9549009.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double AllConversionsValueByConversionDate {
      get { return allConversionsValueByConversionDate_; }
      set {
        allConversionsValueByConversionDate_ = value;
      }
    }

    /// <summary>Field number for the "all_conversions" field.</summary>
    public const int AllConversionsFieldNumber = 193;
    private double allConversions_;
    /// <summary>
    /// The total number of conversions. This includes all conversions regardless
    /// of the value of include_in_conversions_metric.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double AllConversions {
      get { if ((_hasBits1 & 134217728) != 0) { return allConversions_; } else { return 0D; } }
      set {
        _hasBits1 |= 134217728;
        allConversions_ = value;
      }
    }
    /// <summary>Gets whether the "all_conversions" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasAllConversions {
      get { return (_hasBits1 & 134217728) != 0; }
    }
    /// <summary>Clears the value of the "all_conversions" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearAllConversions() {
      _hasBits1 &= ~134217728;
    }

    /// <summary>Field number for the "all_conversions_by_conversion_date" field.</summary>
    public const int AllConversionsByConversionDateFieldNumber = 241;
    private double allConversionsByConversionDate_;
    /// <summary>
    /// The total number of conversions. This includes all conversions regardless
    /// of the value of include_in_conversions_metric. When this column is selected
    /// with date, the values in date column means the conversion date. Details for
    /// the by_conversion_date columns are available at
    /// https://support.google.com/google-ads/answer/9549009.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double AllConversionsByConversionDate {
      get { return allConversionsByConversionDate_; }
      set {
        allConversionsByConversionDate_ = value;
      }
    }

    /// <summary>Field number for the "all_conversions_value_per_cost" field.</summary>
    public const int AllConversionsValuePerCostFieldNumber = 194;
    private double allConversionsValuePerCost_;
    /// <summary>
    /// The value of all conversions divided by the total cost of ad interactions
    /// (such as clicks for text ads or views for video ads).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double AllConversionsValuePerCost {
      get { if ((_hasBits1 & 268435456) != 0) { return allConversionsValuePerCost_; } else { return 0D; } }
      set {
        _hasBits1 |= 268435456;
        allConversionsValuePerCost_ = value;
      }
    }
    /// <summary>Gets whether the "all_conversions_value_per_cost" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasAllConversionsValuePerCost {
      get { return (_hasBits1 & 268435456) != 0; }
    }
    /// <summary>Clears the value of the "all_conversions_value_per_cost" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearAllConversionsValuePerCost() {
      _hasBits1 &= ~268435456;
    }

    /// <summary>Field number for the "all_conversions_from_click_to_call" field.</summary>
    public const int AllConversionsFromClickToCallFieldNumber = 195;
    private double allConversionsFromClickToCall_;
    /// <summary>
    /// The number of times people clicked the "Call" button to call a store during
    /// or after clicking an ad. This number doesn't include whether or not calls
    /// were connected, or the duration of any calls.
    /// This metric applies to feed items only.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double AllConversionsFromClickToCall {
      get { if ((_hasBits1 & 536870912) != 0) { return allConversionsFromClickToCall_; } else { return 0D; } }
      set {
        _hasBits1 |= 536870912;
        allConversionsFromClickToCall_ = value;
      }
    }
    /// <summary>Gets whether the "all_conversions_from_click_to_call" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasAllConversionsFromClickToCall {
      get { return (_hasBits1 & 536870912) != 0; }
    }
    /// <summary>Clears the value of the "all_conversions_from_click_to_call" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearAllConversionsFromClickToCall() {
      _hasBits1 &= ~536870912;
    }

    /// <summary>Field number for the "all_conversions_from_directions" field.</summary>
    public const int AllConversionsFromDirectionsFieldNumber = 196;
    private double allConversionsFromDirections_;
    /// <summary>
    /// The number of times people clicked a "Get directions" button to navigate to
    /// a store after clicking an ad.
    /// This metric applies to feed items only.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double AllConversionsFromDirections {
      get { if ((_hasBits1 & 1073741824) != 0) { return allConversionsFromDirections_; } else { return 0D; } }
      set {
        _hasBits1 |= 1073741824;
        allConversionsFromDirections_ = value;
      }
    }
    /// <summary>Gets whether the "all_conversions_from_directions" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasAllConversionsFromDirections {
      get { return (_hasBits1 & 1073741824) != 0; }
    }
    /// <summary>Clears the value of the "all_conversions_from_directions" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearAllConversionsFromDirections() {
      _hasBits1 &= ~1073741824;
    }

    /// <summary>Field number for the "all_conversions_from_interactions_value_per_interaction" field.</summary>
    public const int AllConversionsFromInteractionsValuePerInteractionFieldNumber = 197;
    private double allConversionsFromInteractionsValuePerInteraction_;
    /// <summary>
    /// The value of all conversions from interactions divided by the total number
    /// of interactions.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double AllConversionsFromInteractionsValuePerInteraction {
      get { if ((_hasBits1 & -2147483648) != 0) { return allConversionsFromInteractionsValuePerInteraction_; } else { return 0D; } }
      set {
        _hasBits1 |= -2147483648;
        allConversionsFromInteractionsValuePerInteraction_ = value;
      }
    }
    /// <summary>Gets whether the "all_conversions_from_interactions_value_per_interaction" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasAllConversionsFromInteractionsValuePerInteraction {
      get { return (_hasBits1 & -2147483648) != 0; }
    }
    /// <summary>Clears the value of the "all_conversions_from_interactions_value_per_interaction" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearAllConversionsFromInteractionsValuePerInteraction() {
      _hasBits1 &= ~-2147483648;
    }

    /// <summary>Field number for the "all_conversions_from_menu" field.</summary>
    public const int AllConversionsFromMenuFieldNumber = 198;
    private double allConversionsFromMenu_;
    /// <summary>
    /// The number of times people clicked a link to view a store's menu after
    /// clicking an ad.
    /// This metric applies to feed items only.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double AllConversionsFromMenu {
      get { if ((_hasBits2 & 1) != 0) { return allConversionsFromMenu_; } else { return 0D; } }
      set {
        _hasBits2 |= 1;
        allConversionsFromMenu_ = value;
      }
    }
    /// <summary>Gets whether the "all_conversions_from_menu" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasAllConversionsFromMenu {
      get { return (_hasBits2 & 1) != 0; }
    }
    /// <summary>Clears the value of the "all_conversions_from_menu" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearAllConversionsFromMenu() {
      _hasBits2 &= ~1;
    }

    /// <summary>Field number for the "all_conversions_from_order" field.</summary>
    public const int AllConversionsFromOrderFieldNumber = 199;
    private double allConversionsFromOrder_;
    /// <summary>
    /// The number of times people placed an order at a store after clicking an ad.
    /// This metric applies to feed items only.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double AllConversionsFromOrder {
      get { if ((_hasBits2 & 2) != 0) { return allConversionsFromOrder_; } else { return 0D; } }
      set {
        _hasBits2 |= 2;
        allConversionsFromOrder_ = value;
      }
    }
    /// <summary>Gets whether the "all_conversions_from_order" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasAllConversionsFromOrder {
      get { return (_hasBits2 & 2) != 0; }
    }
    /// <summary>Clears the value of the "all_conversions_from_order" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearAllConversionsFromOrder() {
      _hasBits2 &= ~2;
    }

    /// <summary>Field number for the "all_conversions_from_other_engagement" field.</summary>
    public const int AllConversionsFromOtherEngagementFieldNumber = 200;
    private double allConversionsFromOtherEngagement_;
    /// <summary>
    /// The number of other conversions (for example, posting a review or saving a
    /// location for a store) that occurred after people clicked an ad.
    /// This metric applies to feed items only.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double AllConversionsFromOtherEngagement {
      get { if ((_hasBits2 & 4) != 0) { return allConversionsFromOtherEngagement_; } else { return 0D; } }
      set {
        _hasBits2 |= 4;
        allConversionsFromOtherEngagement_ = value;
      }
    }
    /// <summary>Gets whether the "all_conversions_from_other_engagement" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasAllConversionsFromOtherEngagement {
      get { return (_hasBits2 & 4) != 0; }
    }
    /// <summary>Clears the value of the "all_conversions_from_other_engagement" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearAllConversionsFromOtherEngagement() {
      _hasBits2 &= ~4;
    }

    /// <summary>Field number for the "all_conversions_from_store_visit" field.</summary>
    public const int AllConversionsFromStoreVisitFieldNumber = 201;
    private double allConversionsFromStoreVisit_;
    /// <summary>
    /// Estimated number of times people visited a store after clicking an ad.
    /// This metric applies to feed items only.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double AllConversionsFromStoreVisit {
      get { if ((_hasBits2 & 8) != 0) { return allConversionsFromStoreVisit_; } else { return 0D; } }
      set {
        _hasBits2 |= 8;
        allConversionsFromStoreVisit_ = value;
      }
    }
    /// <summary>Gets whether the "all_conversions_from_store_visit" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasAllConversionsFromStoreVisit {
      get { return (_hasBits2 & 8) != 0; }
    }
    /// <summary>Clears the value of the "all_conversions_from_store_visit" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearAllConversionsFromStoreVisit() {
      _hasBits2 &= ~8;
    }

    /// <summary>Field number for the "all_conversions_from_store_website" field.</summary>
    public const int AllConversionsFromStoreWebsiteFieldNumber = 202;
    private double allConversionsFromStoreWebsite_;
    /// <summary>
    /// The number of times that people were taken to a store's URL after clicking
    /// an ad.
    /// This metric applies to feed items only.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double AllConversionsFromStoreWebsite {
      get { if ((_hasBits2 & 16) != 0) { return allConversionsFromStoreWebsite_; } else { return 0D; } }
      set {
        _hasBits2 |= 16;
        allConversionsFromStoreWebsite_ = value;
      }
    }
    /// <summary>Gets whether the "all_conversions_from_store_website" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasAllConversionsFromStoreWebsite {
      get { return (_hasBits2 & 16) != 0; }
    }
    /// <summary>Clears the value of the "all_conversions_from_store_website" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearAllConversionsFromStoreWebsite() {
      _hasBits2 &= ~16;
    }

    /// <summary>Field number for the "auction_insight_search_absolute_top_impression_percentage" field.</summary>
    public const int AuctionInsightSearchAbsoluteTopImpressionPercentageFieldNumber = 258;
    private double auctionInsightSearchAbsoluteTopImpressionPercentage_;
    /// <summary>
    /// This metric is part of the Auction Insights report, and tells how often
    /// the ads of another participant showed as the very first ad above the
    /// organic search results.
    /// This percentage is computed only over the auctions that you appeared in
    /// the page.
    /// This metric is not publicly available.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double AuctionInsightSearchAbsoluteTopImpressionPercentage {
      get { if ((_hasBits3 & 131072) != 0) { return auctionInsightSearchAbsoluteTopImpressionPercentage_; } else { return 0D; } }
      set {
        _hasBits3 |= 131072;
        auctionInsightSearchAbsoluteTopImpressionPercentage_ = value;
      }
    }
    /// <summary>Gets whether the "auction_insight_search_absolute_top_impression_percentage" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasAuctionInsightSearchAbsoluteTopImpressionPercentage {
      get { return (_hasBits3 & 131072) != 0; }
    }
    /// <summary>Clears the value of the "auction_insight_search_absolute_top_impression_percentage" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearAuctionInsightSearchAbsoluteTopImpressionPercentage() {
      _hasBits3 &= ~131072;
    }

    /// <summary>Field number for the "auction_insight_search_impression_share" field.</summary>
    public const int AuctionInsightSearchImpressionShareFieldNumber = 259;
    private double auctionInsightSearchImpressionShare_;
    /// <summary>
    /// This metric is part of the Auction Insights report, and tells the
    /// percentage of impressions that another participant obtained, over the total
    /// number of impressions that your ads were eligible for.
    /// Any value below 0.1 is reported as 0.0999.
    /// This metric is not publicly available.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double AuctionInsightSearchImpressionShare {
      get { if ((_hasBits3 & 262144) != 0) { return auctionInsightSearchImpressionShare_; } else { return 0D; } }
      set {
        _hasBits3 |= 262144;
        auctionInsightSearchImpressionShare_ = value;
      }
    }
    /// <summary>Gets whether the "auction_insight_search_impression_share" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasAuctionInsightSearchImpressionShare {
      get { return (_hasBits3 & 262144) != 0; }
    }
    /// <summary>Clears the value of the "auction_insight_search_impression_share" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearAuctionInsightSearchImpressionShare() {
      _hasBits3 &= ~262144;
    }

    /// <summary>Field number for the "auction_insight_search_outranking_share" field.</summary>
    public const int AuctionInsightSearchOutrankingShareFieldNumber = 260;
    private double auctionInsightSearchOutrankingShare_;
    /// <summary>
    /// This metric is part of the Auction Insights report, and tells the
    /// percentage of impressions that your ads outranked (showed above)
    /// another participant in the auction, compared to the total number of
    /// impressions that your ads were eligible for.
    /// Any value below 0.1 is reported as 0.0999.
    /// This metric is not publicly available.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double AuctionInsightSearchOutrankingShare {
      get { if ((_hasBits3 & 524288) != 0) { return auctionInsightSearchOutrankingShare_; } else { return 0D; } }
      set {
        _hasBits3 |= 524288;
        auctionInsightSearchOutrankingShare_ = value;
      }
    }
    /// <summary>Gets whether the "auction_insight_search_outranking_share" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasAuctionInsightSearchOutrankingShare {
      get { return (_hasBits3 & 524288) != 0; }
    }
    /// <summary>Clears the value of the "auction_insight_search_outranking_share" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearAuctionInsightSearchOutrankingShare() {
      _hasBits3 &= ~524288;
    }

    /// <summary>Field number for the "auction_insight_search_overlap_rate" field.</summary>
    public const int AuctionInsightSearchOverlapRateFieldNumber = 261;
    private double auctionInsightSearchOverlapRate_;
    /// <summary>
    /// This metric is part of the Auction Insights report, and tells how often
    /// another participant's ad received an impression when your ad also received
    /// an impression.
    /// This metric is not publicly available.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double AuctionInsightSearchOverlapRate {
      get { if ((_hasBits3 & 1048576) != 0) { return auctionInsightSearchOverlapRate_; } else { return 0D; } }
      set {
        _hasBits3 |= 1048576;
        auctionInsightSearchOverlapRate_ = value;
      }
    }
    /// <summary>Gets whether the "auction_insight_search_overlap_rate" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasAuctionInsightSearchOverlapRate {
      get { return (_hasBits3 & 1048576) != 0; }
    }
    /// <summary>Clears the value of the "auction_insight_search_overlap_rate" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearAuctionInsightSearchOverlapRate() {
      _hasBits3 &= ~1048576;
    }

    /// <summary>Field number for the "auction_insight_search_position_above_rate" field.</summary>
    public const int AuctionInsightSearchPositionAboveRateFieldNumber = 262;
    private double auctionInsightSearchPositionAboveRate_;
    /// <summary>
    /// This metric is part of the Auction Insights report, and tells how often
    /// another participant's ad was shown in a higher position than yours, when
    /// both of your ads were shown at the same page.
    /// This metric is not publicly available.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double AuctionInsightSearchPositionAboveRate {
      get { if ((_hasBits3 & 2097152) != 0) { return auctionInsightSearchPositionAboveRate_; } else { return 0D; } }
      set {
        _hasBits3 |= 2097152;
        auctionInsightSearchPositionAboveRate_ = value;
      }
    }
    /// <summary>Gets whether the "auction_insight_search_position_above_rate" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasAuctionInsightSearchPositionAboveRate {
      get { return (_hasBits3 & 2097152) != 0; }
    }
    /// <summary>Clears the value of the "auction_insight_search_position_above_rate" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearAuctionInsightSearchPositionAboveRate() {
      _hasBits3 &= ~2097152;
    }

    /// <summary>Field number for the "auction_insight_search_top_impression_percentage" field.</summary>
    public const int AuctionInsightSearchTopImpressionPercentageFieldNumber = 263;
    private double auctionInsightSearchTopImpressionPercentage_;
    /// <summary>
    /// This metric is part of the Auction Insights report, and tells how often
    /// the ads of another participant showed above the organic search results.
    /// This percentage is computed only over the auctions that you appeared in
    /// the page.
    /// This metric is not publicly available.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double AuctionInsightSearchTopImpressionPercentage {
      get { if ((_hasBits3 & 4194304) != 0) { return auctionInsightSearchTopImpressionPercentage_; } else { return 0D; } }
      set {
        _hasBits3 |= 4194304;
        auctionInsightSearchTopImpressionPercentage_ = value;
      }
    }
    /// <summary>Gets whether the "auction_insight_search_top_impression_percentage" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasAuctionInsightSearchTopImpressionPercentage {
      get { return (_hasBits3 & 4194304) != 0; }
    }
    /// <summary>Clears the value of the "auction_insight_search_top_impression_percentage" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearAuctionInsightSearchTopImpressionPercentage() {
      _hasBits3 &= ~4194304;
    }

    /// <summary>Field number for the "average_cost" field.</summary>
    public const int AverageCostFieldNumber = 203;
    private double averageCost_;
    /// <summary>
    /// The average amount you pay per interaction. This amount is the total cost
    /// of your ads divided by the total number of interactions.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double AverageCost {
      get { if ((_hasBits2 & 32) != 0) { return averageCost_; } else { return 0D; } }
      set {
        _hasBits2 |= 32;
        averageCost_ = value;
      }
    }
    /// <summary>Gets whether the "average_cost" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasAverageCost {
      get { return (_hasBits2 & 32) != 0; }
    }
    /// <summary>Clears the value of the "average_cost" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearAverageCost() {
      _hasBits2 &= ~32;
    }

    /// <summary>Field number for the "average_cpc" field.</summary>
    public const int AverageCpcFieldNumber = 204;
    private double averageCpc_;
    /// <summary>
    /// The total cost of all clicks divided by the total number of clicks
    /// received.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double AverageCpc {
      get { if ((_hasBits2 & 64) != 0) { return averageCpc_; } else { return 0D; } }
      set {
        _hasBits2 |= 64;
        averageCpc_ = value;
      }
    }
    /// <summary>Gets whether the "average_cpc" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasAverageCpc {
      get { return (_hasBits2 & 64) != 0; }
    }
    /// <summary>Clears the value of the "average_cpc" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearAverageCpc() {
      _hasBits2 &= ~64;
    }

    /// <summary>Field number for the "average_cpe" field.</summary>
    public const int AverageCpeFieldNumber = 205;
    private double averageCpe_;
    /// <summary>
    /// The average amount that you've been charged for an ad engagement. This
    /// amount is the total cost of all ad engagements divided by the total number
    /// of ad engagements.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double AverageCpe {
      get { if ((_hasBits2 & 128) != 0) { return averageCpe_; } else { return 0D; } }
      set {
        _hasBits2 |= 128;
        averageCpe_ = value;
      }
    }
    /// <summary>Gets whether the "average_cpe" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasAverageCpe {
      get { return (_hasBits2 & 128) != 0; }
    }
    /// <summary>Clears the value of the "average_cpe" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearAverageCpe() {
      _hasBits2 &= ~128;
    }

    /// <summary>Field number for the "average_cpm" field.</summary>
    public const int AverageCpmFieldNumber = 206;
    private double averageCpm_;
    /// <summary>
    /// Average cost-per-thousand impressions (CPM).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double AverageCpm {
      get { if ((_hasBits2 & 256) != 0) { return averageCpm_; } else { return 0D; } }
      set {
        _hasBits2 |= 256;
        averageCpm_ = value;
      }
    }
    /// <summary>Gets whether the "average_cpm" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasAverageCpm {
      get { return (_hasBits2 & 256) != 0; }
    }
    /// <summary>Clears the value of the "average_cpm" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearAverageCpm() {
      _hasBits2 &= ~256;
    }

    /// <summary>Field number for the "average_cpv" field.</summary>
    public const int AverageCpvFieldNumber = 207;
    private double averageCpv_;
    /// <summary>
    /// The average amount you pay each time someone views your ad.
    /// The average CPV is defined by the total cost of all ad views divided by
    /// the number of views.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double AverageCpv {
      get { if ((_hasBits2 & 512) != 0) { return averageCpv_; } else { return 0D; } }
      set {
        _hasBits2 |= 512;
        averageCpv_ = value;
      }
    }
    /// <summary>Gets whether the "average_cpv" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasAverageCpv {
      get { return (_hasBits2 & 512) != 0; }
    }
    /// <summary>Clears the value of the "average_cpv" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearAverageCpv() {
      _hasBits2 &= ~512;
    }

    /// <summary>Field number for the "average_page_views" field.</summary>
    public const int AveragePageViewsFieldNumber = 208;
    private double averagePageViews_;
    /// <summary>
    /// Average number of pages viewed per session.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double AveragePageViews {
      get { if ((_hasBits2 & 1024) != 0) { return averagePageViews_; } else { return 0D; } }
      set {
        _hasBits2 |= 1024;
        averagePageViews_ = value;
      }
    }
    /// <summary>Gets whether the "average_page_views" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasAveragePageViews {
      get { return (_hasBits2 & 1024) != 0; }
    }
    /// <summary>Clears the value of the "average_page_views" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearAveragePageViews() {
      _hasBits2 &= ~1024;
    }

    /// <summary>Field number for the "average_time_on_site" field.</summary>
    public const int AverageTimeOnSiteFieldNumber = 209;
    private double averageTimeOnSite_;
    /// <summary>
    /// Total duration of all sessions (in seconds) / number of sessions. Imported
    /// from Google Analytics.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double AverageTimeOnSite {
      get { if ((_hasBits2 & 2048) != 0) { return averageTimeOnSite_; } else { return 0D; } }
      set {
        _hasBits2 |= 2048;
        averageTimeOnSite_ = value;
      }
    }
    /// <summary>Gets whether the "average_time_on_site" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasAverageTimeOnSite {
      get { return (_hasBits2 & 2048) != 0; }
    }
    /// <summary>Clears the value of the "average_time_on_site" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearAverageTimeOnSite() {
      _hasBits2 &= ~2048;
    }

    /// <summary>Field number for the "benchmark_average_max_cpc" field.</summary>
    public const int BenchmarkAverageMaxCpcFieldNumber = 210;
    private double benchmarkAverageMaxCpc_;
    /// <summary>
    /// An indication of how other advertisers are bidding on similar products.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double BenchmarkAverageMaxCpc {
      get { if ((_hasBits2 & 4096) != 0) { return benchmarkAverageMaxCpc_; } else { return 0D; } }
      set {
        _hasBits2 |= 4096;
        benchmarkAverageMaxCpc_ = value;
      }
    }
    /// <summary>Gets whether the "benchmark_average_max_cpc" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasBenchmarkAverageMaxCpc {
      get { return (_hasBits2 & 4096) != 0; }
    }
    /// <summary>Clears the value of the "benchmark_average_max_cpc" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearBenchmarkAverageMaxCpc() {
      _hasBits2 &= ~4096;
    }

    /// <summary>Field number for the "biddable_app_install_conversions" field.</summary>
    public const int BiddableAppInstallConversionsFieldNumber = 254;
    private double biddableAppInstallConversions_;
    /// <summary>
    /// Number of app installs.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double BiddableAppInstallConversions {
      get { if ((_hasBits3 & 8192) != 0) { return biddableAppInstallConversions_; } else { return 0D; } }
      set {
        _hasBits3 |= 8192;
        biddableAppInstallConversions_ = value;
      }
    }
    /// <summary>Gets whether the "biddable_app_install_conversions" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasBiddableAppInstallConversions {
      get { return (_hasBits3 & 8192) != 0; }
    }
    /// <summary>Clears the value of the "biddable_app_install_conversions" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearBiddableAppInstallConversions() {
      _hasBits3 &= ~8192;
    }

    /// <summary>Field number for the "biddable_app_post_install_conversions" field.</summary>
    public const int BiddableAppPostInstallConversionsFieldNumber = 255;
    private double biddableAppPostInstallConversions_;
    /// <summary>
    /// Number of in-app actions.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double BiddableAppPostInstallConversions {
      get { if ((_hasBits3 & 16384) != 0) { return biddableAppPostInstallConversions_; } else { return 0D; } }
      set {
        _hasBits3 |= 16384;
        biddableAppPostInstallConversions_ = value;
      }
    }
    /// <summary>Gets whether the "biddable_app_post_install_conversions" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasBiddableAppPostInstallConversions {
      get { return (_hasBits3 & 16384) != 0; }
    }
    /// <summary>Clears the value of the "biddable_app_post_install_conversions" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearBiddableAppPostInstallConversions() {
      _hasBits3 &= ~16384;
    }

    /// <summary>Field number for the "benchmark_ctr" field.</summary>
    public const int BenchmarkCtrFieldNumber = 211;
    private double benchmarkCtr_;
    /// <summary>
    /// An indication on how other advertisers' Shopping ads for similar products
    /// are performing based on how often people who see their ad click on it.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double BenchmarkCtr {
      get { if ((_hasBits2 & 8192) != 0) { return benchmarkCtr_; } else { return 0D; } }
      set {
        _hasBits2 |= 8192;
        benchmarkCtr_ = value;
      }
    }
    /// <summary>Gets whether the "benchmark_ctr" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasBenchmarkCtr {
      get { return (_hasBits2 & 8192) != 0; }
    }
    /// <summary>Clears the value of the "benchmark_ctr" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearBenchmarkCtr() {
      _hasBits2 &= ~8192;
    }

    /// <summary>Field number for the "bounce_rate" field.</summary>
    public const int BounceRateFieldNumber = 212;
    private double bounceRate_;
    /// <summary>
    /// Percentage of clicks where the user only visited a single page on your
    /// site. Imported from Google Analytics.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double BounceRate {
      get { if ((_hasBits2 & 16384) != 0) { return bounceRate_; } else { return 0D; } }
      set {
        _hasBits2 |= 16384;
        bounceRate_ = value;
      }
    }
    /// <summary>Gets whether the "bounce_rate" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasBounceRate {
      get { return (_hasBits2 & 16384) != 0; }
    }
    /// <summary>Clears the value of the "bounce_rate" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearBounceRate() {
      _hasBits2 &= ~16384;
    }

    /// <summary>Field number for the "clicks" field.</summary>
    public const int ClicksFieldNumber = 131;
    private long clicks_;
    /// <summary>
    /// The number of clicks.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long Clicks {
      get { if ((_hasBits0 & 1) != 0) { return clicks_; } else { return 0L; } }
      set {
        _hasBits0 |= 1;
        clicks_ = value;
      }
    }
    /// <summary>Gets whether the "clicks" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasClicks {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "clicks" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearClicks() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "combined_clicks" field.</summary>
    public const int CombinedClicksFieldNumber = 156;
    private long combinedClicks_;
    /// <summary>
    /// The number of times your ad or your site's listing in the unpaid
    /// results was clicked. See the help page at
    /// https://support.google.com/google-ads/answer/3097241 for details.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long CombinedClicks {
      get { if ((_hasBits0 & 33554432) != 0) { return combinedClicks_; } else { return 0L; } }
      set {
        _hasBits0 |= 33554432;
        combinedClicks_ = value;
      }
    }
    /// <summary>Gets whether the "combined_clicks" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasCombinedClicks {
      get { return (_hasBits0 & 33554432) != 0; }
    }
    /// <summary>Clears the value of the "combined_clicks" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearCombinedClicks() {
      _hasBits0 &= ~33554432;
    }

    /// <summary>Field number for the "combined_clicks_per_query" field.</summary>
    public const int CombinedClicksPerQueryFieldNumber = 157;
    private double combinedClicksPerQuery_;
    /// <summary>
    /// The number of times your ad or your site's listing in the unpaid
    /// results was clicked (combined_clicks) divided by combined_queries. See the
    /// help page at https://support.google.com/google-ads/answer/3097241 for
    /// details.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double CombinedClicksPerQuery {
      get { if ((_hasBits0 & 67108864) != 0) { return combinedClicksPerQuery_; } else { return 0D; } }
      set {
        _hasBits0 |= 67108864;
        combinedClicksPerQuery_ = value;
      }
    }
    /// <summary>Gets whether the "combined_clicks_per_query" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasCombinedClicksPerQuery {
      get { return (_hasBits0 & 67108864) != 0; }
    }
    /// <summary>Clears the value of the "combined_clicks_per_query" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearCombinedClicksPerQuery() {
      _hasBits0 &= ~67108864;
    }

    /// <summary>Field number for the "combined_queries" field.</summary>
    public const int CombinedQueriesFieldNumber = 158;
    private long combinedQueries_;
    /// <summary>
    /// The number of searches that returned pages from your site in the unpaid
    /// results or showed one of your text ads. See the help page at
    /// https://support.google.com/google-ads/answer/3097241 for details.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long CombinedQueries {
      get { if ((_hasBits0 & 134217728) != 0) { return combinedQueries_; } else { return 0L; } }
      set {
        _hasBits0 |= 134217728;
        combinedQueries_ = value;
      }
    }
    /// <summary>Gets whether the "combined_queries" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasCombinedQueries {
      get { return (_hasBits0 & 134217728) != 0; }
    }
    /// <summary>Clears the value of the "combined_queries" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearCombinedQueries() {
      _hasBits0 &= ~134217728;
    }

    /// <summary>Field number for the "content_budget_lost_impression_share" field.</summary>
    public const int ContentBudgetLostImpressionShareFieldNumber = 159;
    private double contentBudgetLostImpressionShare_;
    /// <summary>
    /// The estimated percent of times that your ad was eligible to show
    /// on the Display Network but didn't because your budget was too low.
    /// Note: Content budget lost impression share is reported in the range of 0
    /// to 0.9. Any value above 0.9 is reported as 0.9001.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double ContentBudgetLostImpressionShare {
      get { if ((_hasBits0 & 268435456) != 0) { return contentBudgetLostImpressionShare_; } else { return 0D; } }
      set {
        _hasBits0 |= 268435456;
        contentBudgetLostImpressionShare_ = value;
      }
    }
    /// <summary>Gets whether the "content_budget_lost_impression_share" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasContentBudgetLostImpressionShare {
      get { return (_hasBits0 & 268435456) != 0; }
    }
    /// <summary>Clears the value of the "content_budget_lost_impression_share" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearContentBudgetLostImpressionShare() {
      _hasBits0 &= ~268435456;
    }

    /// <summary>Field number for the "content_impression_share" field.</summary>
    public const int ContentImpressionShareFieldNumber = 160;
    private double contentImpressionShare_;
    /// <summary>
    /// The impressions you've received on the Display Network divided
    /// by the estimated number of impressions you were eligible to receive.
    /// Note: Content impression share is reported in the range of 0.1 to 1. Any
    /// value below 0.1 is reported as 0.0999.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double ContentImpressionShare {
      get { if ((_hasBits0 & 536870912) != 0) { return contentImpressionShare_; } else { return 0D; } }
      set {
        _hasBits0 |= 536870912;
        contentImpressionShare_ = value;
      }
    }
    /// <summary>Gets whether the "content_impression_share" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasContentImpressionShare {
      get { return (_hasBits0 & 536870912) != 0; }
    }
    /// <summary>Clears the value of the "content_impression_share" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearContentImpressionShare() {
      _hasBits0 &= ~536870912;
    }

    /// <summary>Field number for the "conversion_last_received_request_date_time" field.</summary>
    public const int ConversionLastReceivedRequestDateTimeFieldNumber = 161;
    private string conversionLastReceivedRequestDateTime_;
    /// <summary>
    /// The last date/time a conversion tag for this conversion action successfully
    /// fired and was seen by Google Ads. This firing event may not have been the
    /// result of an attributable conversion (e.g. because the tag was fired from a
    /// browser that did not previously click an ad from an appropriate
    /// advertiser). The date/time is in the customer's time zone.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string ConversionLastReceivedRequestDateTime {
      get { return conversionLastReceivedRequestDateTime_ ?? ""; }
      set {
        conversionLastReceivedRequestDateTime_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "conversion_last_received_request_date_time" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasConversionLastReceivedRequestDateTime {
      get { return conversionLastReceivedRequestDateTime_ != null; }
    }
    /// <summary>Clears the value of the "conversion_last_received_request_date_time" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearConversionLastReceivedRequestDateTime() {
      conversionLastReceivedRequestDateTime_ = null;
    }

    /// <summary>Field number for the "conversion_last_conversion_date" field.</summary>
    public const int ConversionLastConversionDateFieldNumber = 162;
    private string conversionLastConversionDate_;
    /// <summary>
    /// The date of the most recent conversion for this conversion action. The date
    /// is in the customer's time zone.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string ConversionLastConversionDate {
      get { return conversionLastConversionDate_ ?? ""; }
      set {
        conversionLastConversionDate_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "conversion_last_conversion_date" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasConversionLastConversionDate {
      get { return conversionLastConversionDate_ != null; }
    }
    /// <summary>Clears the value of the "conversion_last_conversion_date" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearConversionLastConversionDate() {
      conversionLastConversionDate_ = null;
    }

    /// <summary>Field number for the "content_rank_lost_impression_share" field.</summary>
    public const int ContentRankLostImpressionShareFieldNumber = 163;
    private double contentRankLostImpressionShare_;
    /// <summary>
    /// The estimated percentage of impressions on the Display Network
    /// that your ads didn't receive due to poor Ad Rank.
    /// Note: Content rank lost impression share is reported in the range of 0
    /// to 0.9. Any value above 0.9 is reported as 0.9001.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double ContentRankLostImpressionShare {
      get { if ((_hasBits0 & 1073741824) != 0) { return contentRankLostImpressionShare_; } else { return 0D; } }
      set {
        _hasBits0 |= 1073741824;
        contentRankLostImpressionShare_ = value;
      }
    }
    /// <summary>Gets whether the "content_rank_lost_impression_share" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasContentRankLostImpressionShare {
      get { return (_hasBits0 & 1073741824) != 0; }
    }
    /// <summary>Clears the value of the "content_rank_lost_impression_share" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearContentRankLostImpressionShare() {
      _hasBits0 &= ~1073741824;
    }

    /// <summary>Field number for the "conversions_from_interactions_rate" field.</summary>
    public const int ConversionsFromInteractionsRateFieldNumber = 164;
    private double conversionsFromInteractionsRate_;
    /// <summary>
    /// Conversions from interactions divided by the number of ad interactions
    /// (such as clicks for text ads or views for video ads). This only includes
    /// conversion actions which include_in_conversions_metric attribute is set to
    /// true. If you use conversion-based bidding, your bid strategies will
    /// optimize for these conversions.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double ConversionsFromInteractionsRate {
      get { if ((_hasBits0 & -2147483648) != 0) { return conversionsFromInteractionsRate_; } else { return 0D; } }
      set {
        _hasBits0 |= -2147483648;
        conversionsFromInteractionsRate_ = value;
      }
    }
    /// <summary>Gets whether the "conversions_from_interactions_rate" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasConversionsFromInteractionsRate {
      get { return (_hasBits0 & -2147483648) != 0; }
    }
    /// <summary>Clears the value of the "conversions_from_interactions_rate" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearConversionsFromInteractionsRate() {
      _hasBits0 &= ~-2147483648;
    }

    /// <summary>Field number for the "conversions_value" field.</summary>
    public const int ConversionsValueFieldNumber = 165;
    private double conversionsValue_;
    /// <summary>
    /// The value of conversions. This only includes conversion actions which
    /// include_in_conversions_metric attribute is set to true. If you use
    /// conversion-based bidding, your bid strategies will optimize for these
    /// conversions.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double ConversionsValue {
      get { if ((_hasBits1 & 1) != 0) { return conversionsValue_; } else { return 0D; } }
      set {
        _hasBits1 |= 1;
        conversionsValue_ = value;
      }
    }
    /// <summary>Gets whether the "conversions_value" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasConversionsValue {
      get { return (_hasBits1 & 1) != 0; }
    }
    /// <summary>Clears the value of the "conversions_value" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearConversionsValue() {
      _hasBits1 &= ~1;
    }

    /// <summary>Field number for the "conversions_value_by_conversion_date" field.</summary>
    public const int ConversionsValueByConversionDateFieldNumber = 242;
    private double conversionsValueByConversionDate_;
    /// <summary>
    /// The value of conversions. This only includes conversion actions which
    /// include_in_conversions_metric attribute is set to true. If you use
    /// conversion-based bidding, your bid strategies will optimize for these
    /// conversions. When this column is selected with date, the values in date
    /// column means the conversion date. Details for the by_conversion_date
    /// columns are available at
    /// https://support.google.com/google-ads/answer/9549009.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double ConversionsValueByConversionDate {
      get { return conversionsValueByConversionDate_; }
      set {
        conversionsValueByConversionDate_ = value;
      }
    }

    /// <summary>Field number for the "conversions_value_per_cost" field.</summary>
    public const int ConversionsValuePerCostFieldNumber = 166;
    private double conversionsValuePerCost_;
    /// <summary>
    /// The value of conversions divided by the cost of ad interactions. This only
    /// includes conversion actions which include_in_conversions_metric attribute
    /// is set to true. If you use conversion-based bidding, your bid strategies
    /// will optimize for these conversions.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double ConversionsValuePerCost {
      get { if ((_hasBits1 & 2) != 0) { return conversionsValuePerCost_; } else { return 0D; } }
      set {
        _hasBits1 |= 2;
        conversionsValuePerCost_ = value;
      }
    }
    /// <summary>Gets whether the "conversions_value_per_cost" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasConversionsValuePerCost {
      get { return (_hasBits1 & 2) != 0; }
    }
    /// <summary>Clears the value of the "conversions_value_per_cost" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearConversionsValuePerCost() {
      _hasBits1 &= ~2;
    }

    /// <summary>Field number for the "conversions_from_interactions_value_per_interaction" field.</summary>
    public const int ConversionsFromInteractionsValuePerInteractionFieldNumber = 167;
    private double conversionsFromInteractionsValuePerInteraction_;
    /// <summary>
    /// The value of conversions from interactions divided by the number of ad
    /// interactions. This only includes conversion actions which
    /// include_in_conversions_metric attribute is set to true. If you use
    /// conversion-based bidding, your bid strategies will optimize for these
    /// conversions.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double ConversionsFromInteractionsValuePerInteraction {
      get { if ((_hasBits1 & 4) != 0) { return conversionsFromInteractionsValuePerInteraction_; } else { return 0D; } }
      set {
        _hasBits1 |= 4;
        conversionsFromInteractionsValuePerInteraction_ = value;
      }
    }
    /// <summary>Gets whether the "conversions_from_interactions_value_per_interaction" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasConversionsFromInteractionsValuePerInteraction {
      get { return (_hasBits1 & 4) != 0; }
    }
    /// <summary>Clears the value of the "conversions_from_interactions_value_per_interaction" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearConversionsFromInteractionsValuePerInteraction() {
      _hasBits1 &= ~4;
    }

    /// <summary>Field number for the "conversions" field.</summary>
    public const int ConversionsFieldNumber = 168;
    private double conversions_;
    /// <summary>
    /// The number of conversions. This only includes conversion actions which
    /// include_in_conversions_metric attribute is set to true. If you use
    /// conversion-based bidding, your bid strategies will optimize for these
    /// conversions.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double Conversions {
      get { if ((_hasBits1 & 8) != 0) { return conversions_; } else { return 0D; } }
      set {
        _hasBits1 |= 8;
        conversions_ = value;
      }
    }
    /// <summary>Gets whether the "conversions" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasConversions {
      get { return (_hasBits1 & 8) != 0; }
    }
    /// <summary>Clears the value of the "conversions" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearConversions() {
      _hasBits1 &= ~8;
    }

    /// <summary>Field number for the "conversions_by_conversion_date" field.</summary>
    public const int ConversionsByConversionDateFieldNumber = 243;
    private double conversionsByConversionDate_;
    /// <summary>
    /// The number of conversions. This only includes conversion actions which
    /// include_in_conversions_metric attribute is set to true. If you use
    /// conversion-based bidding, your bid strategies will optimize for these
    /// conversions. When this column is selected with date, the values in date
    /// column means the conversion date. Details for the by_conversion_date
    /// columns are available at
    /// https://support.google.com/google-ads/answer/9549009.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double ConversionsByConversionDate {
      get { return conversionsByConversionDate_; }
      set {
        conversionsByConversionDate_ = value;
      }
    }

    /// <summary>Field number for the "cost_micros" field.</summary>
    public const int CostMicrosFieldNumber = 169;
    private long costMicros_;
    /// <summary>
    /// The sum of your cost-per-click (CPC) and cost-per-thousand impressions
    /// (CPM) costs during this period.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long CostMicros {
      get { if ((_hasBits1 & 16) != 0) { return costMicros_; } else { return 0L; } }
      set {
        _hasBits1 |= 16;
        costMicros_ = value;
      }
    }
    /// <summary>Gets whether the "cost_micros" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasCostMicros {
      get { return (_hasBits1 & 16) != 0; }
    }
    /// <summary>Clears the value of the "cost_micros" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearCostMicros() {
      _hasBits1 &= ~16;
    }

    /// <summary>Field number for the "cost_per_all_conversions" field.</summary>
    public const int CostPerAllConversionsFieldNumber = 170;
    private double costPerAllConversions_;
    /// <summary>
    /// The cost of ad interactions divided by all conversions.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double CostPerAllConversions {
      get { if ((_hasBits1 & 32) != 0) { return costPerAllConversions_; } else { return 0D; } }
      set {
        _hasBits1 |= 32;
        costPerAllConversions_ = value;
      }
    }
    /// <summary>Gets whether the "cost_per_all_conversions" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasCostPerAllConversions {
      get { return (_hasBits1 & 32) != 0; }
    }
    /// <summary>Clears the value of the "cost_per_all_conversions" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearCostPerAllConversions() {
      _hasBits1 &= ~32;
    }

    /// <summary>Field number for the "cost_per_conversion" field.</summary>
    public const int CostPerConversionFieldNumber = 171;
    private double costPerConversion_;
    /// <summary>
    /// The cost of ad interactions divided by conversions. This only includes
    /// conversion actions which include_in_conversions_metric attribute is set to
    /// true. If you use conversion-based bidding, your bid strategies will
    /// optimize for these conversions.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double CostPerConversion {
      get { if ((_hasBits1 & 64) != 0) { return costPerConversion_; } else { return 0D; } }
      set {
        _hasBits1 |= 64;
        costPerConversion_ = value;
      }
    }
    /// <summary>Gets whether the "cost_per_conversion" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasCostPerConversion {
      get { return (_hasBits1 & 64) != 0; }
    }
    /// <summary>Clears the value of the "cost_per_conversion" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearCostPerConversion() {
      _hasBits1 &= ~64;
    }

    /// <summary>Field number for the "cost_per_current_model_attributed_conversion" field.</summary>
    public const int CostPerCurrentModelAttributedConversionFieldNumber = 172;
    private double costPerCurrentModelAttributedConversion_;
    /// <summary>
    /// The cost of ad interactions divided by current model attributed
    /// conversions. This only includes conversion actions which
    /// include_in_conversions_metric attribute is set to true. If you use
    /// conversion-based bidding, your bid strategies will optimize for these
    /// conversions.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double CostPerCurrentModelAttributedConversion {
      get { if ((_hasBits1 & 128) != 0) { return costPerCurrentModelAttributedConversion_; } else { return 0D; } }
      set {
        _hasBits1 |= 128;
        costPerCurrentModelAttributedConversion_ = value;
      }
    }
    /// <summary>Gets whether the "cost_per_current_model_attributed_conversion" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasCostPerCurrentModelAttributedConversion {
      get { return (_hasBits1 & 128) != 0; }
    }
    /// <summary>Clears the value of the "cost_per_current_model_attributed_conversion" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearCostPerCurrentModelAttributedConversion() {
      _hasBits1 &= ~128;
    }

    /// <summary>Field number for the "cross_device_conversions" field.</summary>
    public const int CrossDeviceConversionsFieldNumber = 173;
    private double crossDeviceConversions_;
    /// <summary>
    /// Conversions from when a customer clicks on a Google Ads ad on one device,
    /// then converts on a different device or browser.
    /// Cross-device conversions are already included in all_conversions.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double CrossDeviceConversions {
      get { if ((_hasBits1 & 256) != 0) { return crossDeviceConversions_; } else { return 0D; } }
      set {
        _hasBits1 |= 256;
        crossDeviceConversions_ = value;
      }
    }
    /// <summary>Gets whether the "cross_device_conversions" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasCrossDeviceConversions {
      get { return (_hasBits1 & 256) != 0; }
    }
    /// <summary>Clears the value of the "cross_device_conversions" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearCrossDeviceConversions() {
      _hasBits1 &= ~256;
    }

    /// <summary>Field number for the "ctr" field.</summary>
    public const int CtrFieldNumber = 174;
    private double ctr_;
    /// <summary>
    /// The number of clicks your ad receives (Clicks) divided by the number
    /// of times your ad is shown (Impressions).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double Ctr {
      get { if ((_hasBits1 & 512) != 0) { return ctr_; } else { return 0D; } }
      set {
        _hasBits1 |= 512;
        ctr_ = value;
      }
    }
    /// <summary>Gets whether the "ctr" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasCtr {
      get { return (_hasBits1 & 512) != 0; }
    }
    /// <summary>Clears the value of the "ctr" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearCtr() {
      _hasBits1 &= ~512;
    }

    /// <summary>Field number for the "current_model_attributed_conversions" field.</summary>
    public const int CurrentModelAttributedConversionsFieldNumber = 175;
    private double currentModelAttributedConversions_;
    /// <summary>
    /// Shows how your historic conversions data would look under the attribution
    /// model you've currently selected. This only includes conversion actions
    /// which include_in_conversions_metric attribute is set to true. If you use
    /// conversion-based bidding, your bid strategies will optimize for these
    /// conversions.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double CurrentModelAttributedConversions {
      get { if ((_hasBits1 & 1024) != 0) { return currentModelAttributedConversions_; } else { return 0D; } }
      set {
        _hasBits1 |= 1024;
        currentModelAttributedConversions_ = value;
      }
    }
    /// <summary>Gets whether the "current_model_attributed_conversions" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasCurrentModelAttributedConversions {
      get { return (_hasBits1 & 1024) != 0; }
    }
    /// <summary>Clears the value of the "current_model_attributed_conversions" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearCurrentModelAttributedConversions() {
      _hasBits1 &= ~1024;
    }

    /// <summary>Field number for the "current_model_attributed_conversions_from_interactions_rate" field.</summary>
    public const int CurrentModelAttributedConversionsFromInteractionsRateFieldNumber = 176;
    private double currentModelAttributedConversionsFromInteractionsRate_;
    /// <summary>
    /// Current model attributed conversions from interactions divided by the
    /// number of ad interactions (such as clicks for text ads or views for video
    /// ads). This only includes conversion actions which
    /// include_in_conversions_metric attribute is set to true. If you use
    /// conversion-based bidding, your bid strategies will optimize for these
    /// conversions.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double CurrentModelAttributedConversionsFromInteractionsRate {
      get { if ((_hasBits1 & 2048) != 0) { return currentModelAttributedConversionsFromInteractionsRate_; } else { return 0D; } }
      set {
        _hasBits1 |= 2048;
        currentModelAttributedConversionsFromInteractionsRate_ = value;
      }
    }
    /// <summary>Gets whether the "current_model_attributed_conversions_from_interactions_rate" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasCurrentModelAttributedConversionsFromInteractionsRate {
      get { return (_hasBits1 & 2048) != 0; }
    }
    /// <summary>Clears the value of the "current_model_attributed_conversions_from_interactions_rate" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearCurrentModelAttributedConversionsFromInteractionsRate() {
      _hasBits1 &= ~2048;
    }

    /// <summary>Field number for the "current_model_attributed_conversions_from_interactions_value_per_interaction" field.</summary>
    public const int CurrentModelAttributedConversionsFromInteractionsValuePerInteractionFieldNumber = 177;
    private double currentModelAttributedConversionsFromInteractionsValuePerInteraction_;
    /// <summary>
    /// The value of current model attributed conversions from interactions divided
    /// by the number of ad interactions. This only includes conversion actions
    /// which include_in_conversions_metric attribute is set to true. If you use
    /// conversion-based bidding, your bid strategies will optimize for these
    /// conversions.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double CurrentModelAttributedConversionsFromInteractionsValuePerInteraction {
      get { if ((_hasBits1 & 4096) != 0) { return currentModelAttributedConversionsFromInteractionsValuePerInteraction_; } else { return 0D; } }
      set {
        _hasBits1 |= 4096;
        currentModelAttributedConversionsFromInteractionsValuePerInteraction_ = value;
      }
    }
    /// <summary>Gets whether the "current_model_attributed_conversions_from_interactions_value_per_interaction" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasCurrentModelAttributedConversionsFromInteractionsValuePerInteraction {
      get { return (_hasBits1 & 4096) != 0; }
    }
    /// <summary>Clears the value of the "current_model_attributed_conversions_from_interactions_value_per_interaction" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearCurrentModelAttributedConversionsFromInteractionsValuePerInteraction() {
      _hasBits1 &= ~4096;
    }

    /// <summary>Field number for the "current_model_attributed_conversions_value" field.</summary>
    public const int CurrentModelAttributedConversionsValueFieldNumber = 178;
    private double currentModelAttributedConversionsValue_;
    /// <summary>
    /// The value of current model attributed conversions. This only includes
    /// conversion actions which include_in_conversions_metric attribute is set to
    /// true. If you use conversion-based bidding, your bid strategies will
    /// optimize for these conversions.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double CurrentModelAttributedConversionsValue {
      get { if ((_hasBits1 & 8192) != 0) { return currentModelAttributedConversionsValue_; } else { return 0D; } }
      set {
        _hasBits1 |= 8192;
        currentModelAttributedConversionsValue_ = value;
      }
    }
    /// <summary>Gets whether the "current_model_attributed_conversions_value" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasCurrentModelAttributedConversionsValue {
      get { return (_hasBits1 & 8192) != 0; }
    }
    /// <summary>Clears the value of the "current_model_attributed_conversions_value" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearCurrentModelAttributedConversionsValue() {
      _hasBits1 &= ~8192;
    }

    /// <summary>Field number for the "current_model_attributed_conversions_value_per_cost" field.</summary>
    public const int CurrentModelAttributedConversionsValuePerCostFieldNumber = 179;
    private double currentModelAttributedConversionsValuePerCost_;
    /// <summary>
    /// The value of current model attributed conversions divided by the cost of ad
    /// interactions. This only includes conversion actions which
    /// include_in_conversions_metric attribute is set to true. If you use
    /// conversion-based bidding, your bid strategies will optimize for these
    /// conversions.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double CurrentModelAttributedConversionsValuePerCost {
      get { if ((_hasBits1 & 16384) != 0) { return currentModelAttributedConversionsValuePerCost_; } else { return 0D; } }
      set {
        _hasBits1 |= 16384;
        currentModelAttributedConversionsValuePerCost_ = value;
      }
    }
    /// <summary>Gets whether the "current_model_attributed_conversions_value_per_cost" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasCurrentModelAttributedConversionsValuePerCost {
      get { return (_hasBits1 & 16384) != 0; }
    }
    /// <summary>Clears the value of the "current_model_attributed_conversions_value_per_cost" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearCurrentModelAttributedConversionsValuePerCost() {
      _hasBits1 &= ~16384;
    }

    /// <summary>Field number for the "engagement_rate" field.</summary>
    public const int EngagementRateFieldNumber = 180;
    private double engagementRate_;
    /// <summary>
    /// How often people engage with your ad after it's shown to them. This is the
    /// number of ad expansions divided by the number of times your ad is shown.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double EngagementRate {
      get { if ((_hasBits1 & 32768) != 0) { return engagementRate_; } else { return 0D; } }
      set {
        _hasBits1 |= 32768;
        engagementRate_ = value;
      }
    }
    /// <summary>Gets whether the "engagement_rate" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasEngagementRate {
      get { return (_hasBits1 & 32768) != 0; }
    }
    /// <summary>Clears the value of the "engagement_rate" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearEngagementRate() {
      _hasBits1 &= ~32768;
    }

    /// <summary>Field number for the "engagements" field.</summary>
    public const int EngagementsFieldNumber = 181;
    private long engagements_;
    /// <summary>
    /// The number of engagements.
    /// An engagement occurs when a viewer expands your Lightbox ad. Also, in the
    /// future, other ad types may support engagement metrics.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long Engagements {
      get { if ((_hasBits1 & 65536) != 0) { return engagements_; } else { return 0L; } }
      set {
        _hasBits1 |= 65536;
        engagements_ = value;
      }
    }
    /// <summary>Gets whether the "engagements" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasEngagements {
      get { return (_hasBits1 & 65536) != 0; }
    }
    /// <summary>Clears the value of the "engagements" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearEngagements() {
      _hasBits1 &= ~65536;
    }

    /// <summary>Field number for the "hotel_average_lead_value_micros" field.</summary>
    public const int HotelAverageLeadValueMicrosFieldNumber = 213;
    private double hotelAverageLeadValueMicros_;
    /// <summary>
    /// Average lead value based on clicks.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double HotelAverageLeadValueMicros {
      get { if ((_hasBits2 & 32768) != 0) { return hotelAverageLeadValueMicros_; } else { return 0D; } }
      set {
        _hasBits2 |= 32768;
        hotelAverageLeadValueMicros_ = value;
      }
    }
    /// <summary>Gets whether the "hotel_average_lead_value_micros" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasHotelAverageLeadValueMicros {
      get { return (_hasBits2 & 32768) != 0; }
    }
    /// <summary>Clears the value of the "hotel_average_lead_value_micros" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearHotelAverageLeadValueMicros() {
      _hasBits2 &= ~32768;
    }

    /// <summary>Field number for the "hotel_commission_rate_micros" field.</summary>
    public const int HotelCommissionRateMicrosFieldNumber = 256;
    private long hotelCommissionRateMicros_;
    /// <summary>
    /// Commission bid rate in micros. A 20% commission is represented as
    /// 200,000.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long HotelCommissionRateMicros {
      get { if ((_hasBits3 & 32768) != 0) { return hotelCommissionRateMicros_; } else { return 0L; } }
      set {
        _hasBits3 |= 32768;
        hotelCommissionRateMicros_ = value;
      }
    }
    /// <summary>Gets whether the "hotel_commission_rate_micros" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasHotelCommissionRateMicros {
      get { return (_hasBits3 & 32768) != 0; }
    }
    /// <summary>Clears the value of the "hotel_commission_rate_micros" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearHotelCommissionRateMicros() {
      _hasBits3 &= ~32768;
    }

    /// <summary>Field number for the "hotel_expected_commission_cost" field.</summary>
    public const int HotelExpectedCommissionCostFieldNumber = 257;
    private double hotelExpectedCommissionCost_;
    /// <summary>
    /// Expected commission cost. The result of multiplying the commission value
    /// times the hotel_commission_rate in advertiser currency.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double HotelExpectedCommissionCost {
      get { if ((_hasBits3 & 65536) != 0) { return hotelExpectedCommissionCost_; } else { return 0D; } }
      set {
        _hasBits3 |= 65536;
        hotelExpectedCommissionCost_ = value;
      }
    }
    /// <summary>Gets whether the "hotel_expected_commission_cost" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasHotelExpectedCommissionCost {
      get { return (_hasBits3 & 65536) != 0; }
    }
    /// <summary>Clears the value of the "hotel_expected_commission_cost" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearHotelExpectedCommissionCost() {
      _hasBits3 &= ~65536;
    }

    /// <summary>Field number for the "hotel_price_difference_percentage" field.</summary>
    public const int HotelPriceDifferencePercentageFieldNumber = 214;
    private double hotelPriceDifferencePercentage_;
    /// <summary>
    /// The average price difference between the price offered by reporting hotel
    /// advertiser and the cheapest price offered by the competing advertiser.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double HotelPriceDifferencePercentage {
      get { if ((_hasBits2 & 65536) != 0) { return hotelPriceDifferencePercentage_; } else { return 0D; } }
      set {
        _hasBits2 |= 65536;
        hotelPriceDifferencePercentage_ = value;
      }
    }
    /// <summary>Gets whether the "hotel_price_difference_percentage" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasHotelPriceDifferencePercentage {
      get { return (_hasBits2 & 65536) != 0; }
    }
    /// <summary>Clears the value of the "hotel_price_difference_percentage" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearHotelPriceDifferencePercentage() {
      _hasBits2 &= ~65536;
    }

    /// <summary>Field number for the "hotel_eligible_impressions" field.</summary>
    public const int HotelEligibleImpressionsFieldNumber = 215;
    private long hotelEligibleImpressions_;
    /// <summary>
    /// The number of impressions that hotel partners could have had given their
    /// feed performance.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long HotelEligibleImpressions {
      get { if ((_hasBits2 & 131072) != 0) { return hotelEligibleImpressions_; } else { return 0L; } }
      set {
        _hasBits2 |= 131072;
        hotelEligibleImpressions_ = value;
      }
    }
    /// <summary>Gets whether the "hotel_eligible_impressions" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasHotelEligibleImpressions {
      get { return (_hasBits2 & 131072) != 0; }
    }
    /// <summary>Clears the value of the "hotel_eligible_impressions" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearHotelEligibleImpressions() {
      _hasBits2 &= ~131072;
    }

    /// <summary>Field number for the "historical_creative_quality_score" field.</summary>
    public const int HistoricalCreativeQualityScoreFieldNumber = 80;
    private global::Google.Ads.GoogleAds.V11.Enums.QualityScoreBucketEnum.Types.QualityScoreBucket historicalCreativeQualityScore_ = global::Google.Ads.GoogleAds.V11.Enums.QualityScoreBucketEnum.Types.QualityScoreBucket.Unspecified;
    /// <summary>
    /// The creative historical quality score.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Google.Ads.GoogleAds.V11.Enums.QualityScoreBucketEnum.Types.QualityScoreBucket HistoricalCreativeQualityScore {
      get { return historicalCreativeQualityScore_; }
      set {
        historicalCreativeQualityScore_ = value;
      }
    }

    /// <summary>Field number for the "historical_landing_page_quality_score" field.</summary>
    public const int HistoricalLandingPageQualityScoreFieldNumber = 81;
    private global::Google.Ads.GoogleAds.V11.Enums.QualityScoreBucketEnum.Types.QualityScoreBucket historicalLandingPageQualityScore_ = global::Google.Ads.GoogleAds.V11.Enums.QualityScoreBucketEnum.Types.QualityScoreBucket.Unspecified;
    /// <summary>
    /// The quality of historical landing page experience.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Google.Ads.GoogleAds.V11.Enums.QualityScoreBucketEnum.Types.QualityScoreBucket HistoricalLandingPageQualityScore {
      get { return historicalLandingPageQualityScore_; }
      set {
        historicalLandingPageQualityScore_ = value;
      }
    }

    /// <summary>Field number for the "historical_quality_score" field.</summary>
    public const int HistoricalQualityScoreFieldNumber = 216;
    private long historicalQualityScore_;
    /// <summary>
    /// The historical quality score.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long HistoricalQualityScore {
      get { if ((_hasBits2 & 262144) != 0) { return historicalQualityScore_; } else { return 0L; } }
      set {
        _hasBits2 |= 262144;
        historicalQualityScore_ = value;
      }
    }
    /// <summary>Gets whether the "historical_quality_score" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasHistoricalQualityScore {
      get { return (_hasBits2 & 262144) != 0; }
    }
    /// <summary>Clears the value of the "historical_quality_score" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearHistoricalQualityScore() {
      _hasBits2 &= ~262144;
    }

    /// <summary>Field number for the "historical_search_predicted_ctr" field.</summary>
    public const int HistoricalSearchPredictedCtrFieldNumber = 83;
    private global::Google.Ads.GoogleAds.V11.Enums.QualityScoreBucketEnum.Types.QualityScoreBucket historicalSearchPredictedCtr_ = global::Google.Ads.GoogleAds.V11.Enums.QualityScoreBucketEnum.Types.QualityScoreBucket.Unspecified;
    /// <summary>
    /// The historical search predicted click through rate (CTR).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Google.Ads.GoogleAds.V11.Enums.QualityScoreBucketEnum.Types.QualityScoreBucket HistoricalSearchPredictedCtr {
      get { return historicalSearchPredictedCtr_; }
      set {
        historicalSearchPredictedCtr_ = value;
      }
    }

    /// <summary>Field number for the "gmail_forwards" field.</summary>
    public const int GmailForwardsFieldNumber = 217;
    private long gmailForwards_;
    /// <summary>
    /// The number of times the ad was forwarded to someone else as a message.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long GmailForwards {
      get { if ((_hasBits2 & 524288) != 0) { return gmailForwards_; } else { return 0L; } }
      set {
        _hasBits2 |= 524288;
        gmailForwards_ = value;
      }
    }
    /// <summary>Gets whether the "gmail_forwards" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasGmailForwards {
      get { return (_hasBits2 & 524288) != 0; }
    }
    /// <summary>Clears the value of the "gmail_forwards" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearGmailForwards() {
      _hasBits2 &= ~524288;
    }

    /// <summary>Field number for the "gmail_saves" field.</summary>
    public const int GmailSavesFieldNumber = 218;
    private long gmailSaves_;
    /// <summary>
    /// The number of times someone has saved your Gmail ad to their inbox as a
    /// message.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long GmailSaves {
      get { if ((_hasBits2 & 1048576) != 0) { return gmailSaves_; } else { return 0L; } }
      set {
        _hasBits2 |= 1048576;
        gmailSaves_ = value;
      }
    }
    /// <summary>Gets whether the "gmail_saves" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasGmailSaves {
      get { return (_hasBits2 & 1048576) != 0; }
    }
    /// <summary>Clears the value of the "gmail_saves" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearGmailSaves() {
      _hasBits2 &= ~1048576;
    }

    /// <summary>Field number for the "gmail_secondary_clicks" field.</summary>
    public const int GmailSecondaryClicksFieldNumber = 219;
    private long gmailSecondaryClicks_;
    /// <summary>
    /// The number of clicks to the landing page on the expanded state of Gmail
    /// ads.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long GmailSecondaryClicks {
      get { if ((_hasBits2 & 2097152) != 0) { return gmailSecondaryClicks_; } else { return 0L; } }
      set {
        _hasBits2 |= 2097152;
        gmailSecondaryClicks_ = value;
      }
    }
    /// <summary>Gets whether the "gmail_secondary_clicks" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasGmailSecondaryClicks {
      get { return (_hasBits2 & 2097152) != 0; }
    }
    /// <summary>Clears the value of the "gmail_secondary_clicks" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearGmailSecondaryClicks() {
      _hasBits2 &= ~2097152;
    }

    /// <summary>Field number for the "impressions_from_store_reach" field.</summary>
    public const int ImpressionsFromStoreReachFieldNumber = 220;
    private long impressionsFromStoreReach_;
    /// <summary>
    /// The number of times a store's location-based ad was shown.
    /// This metric applies to feed items only.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long ImpressionsFromStoreReach {
      get { if ((_hasBits2 & 4194304) != 0) { return impressionsFromStoreReach_; } else { return 0L; } }
      set {
        _hasBits2 |= 4194304;
        impressionsFromStoreReach_ = value;
      }
    }
    /// <summary>Gets whether the "impressions_from_store_reach" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasImpressionsFromStoreReach {
      get { return (_hasBits2 & 4194304) != 0; }
    }
    /// <summary>Clears the value of the "impressions_from_store_reach" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearImpressionsFromStoreReach() {
      _hasBits2 &= ~4194304;
    }

    /// <summary>Field number for the "impressions" field.</summary>
    public const int ImpressionsFieldNumber = 221;
    private long impressions_;
    /// <summary>
    /// Count of how often your ad has appeared on a search results page or
    /// website on the Google Network.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long Impressions {
      get { if ((_hasBits2 & 8388608) != 0) { return impressions_; } else { return 0L; } }
      set {
        _hasBits2 |= 8388608;
        impressions_ = value;
      }
    }
    /// <summary>Gets whether the "impressions" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasImpressions {
      get { return (_hasBits2 & 8388608) != 0; }
    }
    /// <summary>Clears the value of the "impressions" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearImpressions() {
      _hasBits2 &= ~8388608;
    }

    /// <summary>Field number for the "interaction_rate" field.</summary>
    public const int InteractionRateFieldNumber = 222;
    private double interactionRate_;
    /// <summary>
    /// How often people interact with your ad after it is shown to them.
    /// This is the number of interactions divided by the number of times your ad
    /// is shown.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double InteractionRate {
      get { if ((_hasBits2 & 16777216) != 0) { return interactionRate_; } else { return 0D; } }
      set {
        _hasBits2 |= 16777216;
        interactionRate_ = value;
      }
    }
    /// <summary>Gets whether the "interaction_rate" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasInteractionRate {
      get { return (_hasBits2 & 16777216) != 0; }
    }
    /// <summary>Clears the value of the "interaction_rate" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearInteractionRate() {
      _hasBits2 &= ~16777216;
    }

    /// <summary>Field number for the "interactions" field.</summary>
    public const int InteractionsFieldNumber = 223;
    private long interactions_;
    /// <summary>
    /// The number of interactions.
    /// An interaction is the main user action associated with an ad format-clicks
    /// for text and shopping ads, views for video ads, and so on.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long Interactions {
      get { if ((_hasBits2 & 33554432) != 0) { return interactions_; } else { return 0L; } }
      set {
        _hasBits2 |= 33554432;
        interactions_ = value;
      }
    }
    /// <summary>Gets whether the "interactions" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasInteractions {
      get { return (_hasBits2 & 33554432) != 0; }
    }
    /// <summary>Clears the value of the "interactions" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearInteractions() {
      _hasBits2 &= ~33554432;
    }

    /// <summary>Field number for the "interaction_event_types" field.</summary>
    public const int InteractionEventTypesFieldNumber = 100;
    private static readonly pb::FieldCodec<global::Google.Ads.GoogleAds.V11.Enums.InteractionEventTypeEnum.Types.InteractionEventType> _repeated_interactionEventTypes_codec
        = pb::FieldCodec.ForEnum(802, x => (int) x, x => (global::Google.Ads.GoogleAds.V11.Enums.InteractionEventTypeEnum.Types.InteractionEventType) x);
    private readonly pbc::RepeatedField<global::Google.Ads.GoogleAds.V11.Enums.InteractionEventTypeEnum.Types.InteractionEventType> interactionEventTypes_ = new pbc::RepeatedField<global::Google.Ads.GoogleAds.V11.Enums.InteractionEventTypeEnum.Types.InteractionEventType>();
    /// <summary>
    /// The types of payable and free interactions.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<global::Google.Ads.GoogleAds.V11.Enums.InteractionEventTypeEnum.Types.InteractionEventType> InteractionEventTypes {
      get { return interactionEventTypes_; }
    }

    /// <summary>Field number for the "invalid_click_rate" field.</summary>
    public const int InvalidClickRateFieldNumber = 224;
    private double invalidClickRate_;
    /// <summary>
    /// The percentage of clicks filtered out of your total number of clicks
    /// (filtered + non-filtered clicks) during the reporting period.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double InvalidClickRate {
      get { if ((_hasBits2 & 67108864) != 0) { return invalidClickRate_; } else { return 0D; } }
      set {
        _hasBits2 |= 67108864;
        invalidClickRate_ = value;
      }
    }
    /// <summary>Gets whether the "invalid_click_rate" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasInvalidClickRate {
      get { return (_hasBits2 & 67108864) != 0; }
    }
    /// <summary>Clears the value of the "invalid_click_rate" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearInvalidClickRate() {
      _hasBits2 &= ~67108864;
    }

    /// <summary>Field number for the "invalid_clicks" field.</summary>
    public const int InvalidClicksFieldNumber = 225;
    private long invalidClicks_;
    /// <summary>
    /// Number of clicks Google considers illegitimate and doesn't charge you for.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long InvalidClicks {
      get { if ((_hasBits2 & 134217728) != 0) { return invalidClicks_; } else { return 0L; } }
      set {
        _hasBits2 |= 134217728;
        invalidClicks_ = value;
      }
    }
    /// <summary>Gets whether the "invalid_clicks" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasInvalidClicks {
      get { return (_hasBits2 & 134217728) != 0; }
    }
    /// <summary>Clears the value of the "invalid_clicks" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearInvalidClicks() {
      _hasBits2 &= ~134217728;
    }

    /// <summary>Field number for the "message_chats" field.</summary>
    public const int MessageChatsFieldNumber = 226;
    private long messageChats_;
    /// <summary>
    /// Number of message chats initiated for Click To Message impressions that
    /// were message tracking eligible.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long MessageChats {
      get { if ((_hasBits2 & 268435456) != 0) { return messageChats_; } else { return 0L; } }
      set {
        _hasBits2 |= 268435456;
        messageChats_ = value;
      }
    }
    /// <summary>Gets whether the "message_chats" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasMessageChats {
      get { return (_hasBits2 & 268435456) != 0; }
    }
    /// <summary>Clears the value of the "message_chats" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearMessageChats() {
      _hasBits2 &= ~268435456;
    }

    /// <summary>Field number for the "message_impressions" field.</summary>
    public const int MessageImpressionsFieldNumber = 227;
    private long messageImpressions_;
    /// <summary>
    /// Number of Click To Message impressions that were message tracking eligible.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long MessageImpressions {
      get { if ((_hasBits2 & 536870912) != 0) { return messageImpressions_; } else { return 0L; } }
      set {
        _hasBits2 |= 536870912;
        messageImpressions_ = value;
      }
    }
    /// <summary>Gets whether the "message_impressions" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasMessageImpressions {
      get { return (_hasBits2 & 536870912) != 0; }
    }
    /// <summary>Clears the value of the "message_impressions" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearMessageImpressions() {
      _hasBits2 &= ~536870912;
    }

    /// <summary>Field number for the "message_chat_rate" field.</summary>
    public const int MessageChatRateFieldNumber = 228;
    private double messageChatRate_;
    /// <summary>
    /// Number of message chats initiated (message_chats) divided by the number
    /// of message impressions (message_impressions).
    /// Rate at which a user initiates a message chat from an ad impression with
    /// a messaging option and message tracking enabled.
    /// Note that this rate can be more than 1.0 for a given message impression.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double MessageChatRate {
      get { if ((_hasBits2 & 1073741824) != 0) { return messageChatRate_; } else { return 0D; } }
      set {
        _hasBits2 |= 1073741824;
        messageChatRate_ = value;
      }
    }
    /// <summary>Gets whether the "message_chat_rate" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasMessageChatRate {
      get { return (_hasBits2 & 1073741824) != 0; }
    }
    /// <summary>Clears the value of the "message_chat_rate" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearMessageChatRate() {
      _hasBits2 &= ~1073741824;
    }

    /// <summary>Field number for the "mobile_friendly_clicks_percentage" field.</summary>
    public const int MobileFriendlyClicksPercentageFieldNumber = 229;
    private double mobileFriendlyClicksPercentage_;
    /// <summary>
    /// The percentage of mobile clicks that go to a mobile-friendly page.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double MobileFriendlyClicksPercentage {
      get { if ((_hasBits2 & -2147483648) != 0) { return mobileFriendlyClicksPercentage_; } else { return 0D; } }
      set {
        _hasBits2 |= -2147483648;
        mobileFriendlyClicksPercentage_ = value;
      }
    }
    /// <summary>Gets whether the "mobile_friendly_clicks_percentage" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasMobileFriendlyClicksPercentage {
      get { return (_hasBits2 & -2147483648) != 0; }
    }
    /// <summary>Clears the value of the "mobile_friendly_clicks_percentage" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearMobileFriendlyClicksPercentage() {
      _hasBits2 &= ~-2147483648;
    }

    /// <summary>Field number for the "optimization_score_uplift" field.</summary>
    public const int OptimizationScoreUpliftFieldNumber = 247;
    private double optimizationScoreUplift_;
    /// <summary>
    /// Total optimization score uplift of all recommendations.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double OptimizationScoreUplift {
      get { if ((_hasBits3 & 4096) != 0) { return optimizationScoreUplift_; } else { return 0D; } }
      set {
        _hasBits3 |= 4096;
        optimizationScoreUplift_ = value;
      }
    }
    /// <summary>Gets whether the "optimization_score_uplift" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasOptimizationScoreUplift {
      get { return (_hasBits3 & 4096) != 0; }
    }
    /// <summary>Clears the value of the "optimization_score_uplift" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearOptimizationScoreUplift() {
      _hasBits3 &= ~4096;
    }

    /// <summary>Field number for the "optimization_score_url" field.</summary>
    public const int OptimizationScoreUrlFieldNumber = 248;
    private string optimizationScoreUrl_;
    /// <summary>
    /// URL for the optimization score page in the Google Ads web interface.
    /// This metric can be selected from `customer` or `campaign`, and can be
    /// segmented by `segments.recommendation_type`. For example, `SELECT
    /// metrics.optimization_score_url, segments.recommendation_type FROM
    /// customer` will return a URL for each unique (customer, recommendation_type)
    /// combination.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string OptimizationScoreUrl {
      get { return optimizationScoreUrl_ ?? ""; }
      set {
        optimizationScoreUrl_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "optimization_score_url" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasOptimizationScoreUrl {
      get { return optimizationScoreUrl_ != null; }
    }
    /// <summary>Clears the value of the "optimization_score_url" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearOptimizationScoreUrl() {
      optimizationScoreUrl_ = null;
    }

    /// <summary>Field number for the "organic_clicks" field.</summary>
    public const int OrganicClicksFieldNumber = 230;
    private long organicClicks_;
    /// <summary>
    /// The number of times someone clicked your site's listing in the unpaid
    /// results for a particular query. See the help page at
    /// https://support.google.com/google-ads/answer/3097241 for details.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long OrganicClicks {
      get { if ((_hasBits3 & 1) != 0) { return organicClicks_; } else { return 0L; } }
      set {
        _hasBits3 |= 1;
        organicClicks_ = value;
      }
    }
    /// <summary>Gets whether the "organic_clicks" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasOrganicClicks {
      get { return (_hasBits3 & 1) != 0; }
    }
    /// <summary>Clears the value of the "organic_clicks" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearOrganicClicks() {
      _hasBits3 &= ~1;
    }

    /// <summary>Field number for the "organic_clicks_per_query" field.</summary>
    public const int OrganicClicksPerQueryFieldNumber = 231;
    private double organicClicksPerQuery_;
    /// <summary>
    /// The number of times someone clicked your site's listing in the unpaid
    /// results (organic_clicks) divided by the total number of searches that
    /// returned pages from your site (organic_queries). See the help page at
    /// https://support.google.com/google-ads/answer/3097241 for details.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double OrganicClicksPerQuery {
      get { if ((_hasBits3 & 2) != 0) { return organicClicksPerQuery_; } else { return 0D; } }
      set {
        _hasBits3 |= 2;
        organicClicksPerQuery_ = value;
      }
    }
    /// <summary>Gets whether the "organic_clicks_per_query" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasOrganicClicksPerQuery {
      get { return (_hasBits3 & 2) != 0; }
    }
    /// <summary>Clears the value of the "organic_clicks_per_query" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearOrganicClicksPerQuery() {
      _hasBits3 &= ~2;
    }

    /// <summary>Field number for the "organic_impressions" field.</summary>
    public const int OrganicImpressionsFieldNumber = 232;
    private long organicImpressions_;
    /// <summary>
    /// The number of listings for your site in the unpaid search results. See the
    /// help page at https://support.google.com/google-ads/answer/3097241 for
    /// details.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long OrganicImpressions {
      get { if ((_hasBits3 & 4) != 0) { return organicImpressions_; } else { return 0L; } }
      set {
        _hasBits3 |= 4;
        organicImpressions_ = value;
      }
    }
    /// <summary>Gets whether the "organic_impressions" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasOrganicImpressions {
      get { return (_hasBits3 & 4) != 0; }
    }
    /// <summary>Clears the value of the "organic_impressions" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearOrganicImpressions() {
      _hasBits3 &= ~4;
    }

    /// <summary>Field number for the "organic_impressions_per_query" field.</summary>
    public const int OrganicImpressionsPerQueryFieldNumber = 233;
    private double organicImpressionsPerQuery_;
    /// <summary>
    /// The number of times a page from your site was listed in the unpaid search
    /// results (organic_impressions) divided by the number of searches returning
    /// your site's listing in the unpaid results (organic_queries). See the help
    /// page at https://support.google.com/google-ads/answer/3097241 for details.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double OrganicImpressionsPerQuery {
      get { if ((_hasBits3 & 8) != 0) { return organicImpressionsPerQuery_; } else { return 0D; } }
      set {
        _hasBits3 |= 8;
        organicImpressionsPerQuery_ = value;
      }
    }
    /// <summary>Gets whether the "organic_impressions_per_query" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasOrganicImpressionsPerQuery {
      get { return (_hasBits3 & 8) != 0; }
    }
    /// <summary>Clears the value of the "organic_impressions_per_query" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearOrganicImpressionsPerQuery() {
      _hasBits3 &= ~8;
    }

    /// <summary>Field number for the "organic_queries" field.</summary>
    public const int OrganicQueriesFieldNumber = 234;
    private long organicQueries_;
    /// <summary>
    /// The total number of searches that returned your site's listing in the
    /// unpaid results. See the help page at
    /// https://support.google.com/google-ads/answer/3097241 for details.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long OrganicQueries {
      get { if ((_hasBits3 & 16) != 0) { return organicQueries_; } else { return 0L; } }
      set {
        _hasBits3 |= 16;
        organicQueries_ = value;
      }
    }
    /// <summary>Gets whether the "organic_queries" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasOrganicQueries {
      get { return (_hasBits3 & 16) != 0; }
    }
    /// <summary>Clears the value of the "organic_queries" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearOrganicQueries() {
      _hasBits3 &= ~16;
    }

    /// <summary>Field number for the "percent_new_visitors" field.</summary>
    public const int PercentNewVisitorsFieldNumber = 235;
    private double percentNewVisitors_;
    /// <summary>
    /// Percentage of first-time sessions (from people who had never visited your
    /// site before). Imported from Google Analytics.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double PercentNewVisitors {
      get { if ((_hasBits3 & 32) != 0) { return percentNewVisitors_; } else { return 0D; } }
      set {
        _hasBits3 |= 32;
        percentNewVisitors_ = value;
      }
    }
    /// <summary>Gets whether the "percent_new_visitors" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasPercentNewVisitors {
      get { return (_hasBits3 & 32) != 0; }
    }
    /// <summary>Clears the value of the "percent_new_visitors" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearPercentNewVisitors() {
      _hasBits3 &= ~32;
    }

    /// <summary>Field number for the "phone_calls" field.</summary>
    public const int PhoneCallsFieldNumber = 236;
    private long phoneCalls_;
    /// <summary>
    /// Number of offline phone calls.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long PhoneCalls {
      get { if ((_hasBits3 & 64) != 0) { return phoneCalls_; } else { return 0L; } }
      set {
        _hasBits3 |= 64;
        phoneCalls_ = value;
      }
    }
    /// <summary>Gets whether the "phone_calls" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasPhoneCalls {
      get { return (_hasBits3 & 64) != 0; }
    }
    /// <summary>Clears the value of the "phone_calls" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearPhoneCalls() {
      _hasBits3 &= ~64;
    }

    /// <summary>Field number for the "phone_impressions" field.</summary>
    public const int PhoneImpressionsFieldNumber = 237;
    private long phoneImpressions_;
    /// <summary>
    /// Number of offline phone impressions.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long PhoneImpressions {
      get { if ((_hasBits3 & 128) != 0) { return phoneImpressions_; } else { return 0L; } }
      set {
        _hasBits3 |= 128;
        phoneImpressions_ = value;
      }
    }
    /// <summary>Gets whether the "phone_impressions" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasPhoneImpressions {
      get { return (_hasBits3 & 128) != 0; }
    }
    /// <summary>Clears the value of the "phone_impressions" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearPhoneImpressions() {
      _hasBits3 &= ~128;
    }

    /// <summary>Field number for the "phone_through_rate" field.</summary>
    public const int PhoneThroughRateFieldNumber = 238;
    private double phoneThroughRate_;
    /// <summary>
    /// Number of phone calls received (phone_calls) divided by the number of
    /// times your phone number is shown (phone_impressions).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double PhoneThroughRate {
      get { if ((_hasBits3 & 256) != 0) { return phoneThroughRate_; } else { return 0D; } }
      set {
        _hasBits3 |= 256;
        phoneThroughRate_ = value;
      }
    }
    /// <summary>Gets whether the "phone_through_rate" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasPhoneThroughRate {
      get { return (_hasBits3 & 256) != 0; }
    }
    /// <summary>Clears the value of the "phone_through_rate" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearPhoneThroughRate() {
      _hasBits3 &= ~256;
    }

    /// <summary>Field number for the "relative_ctr" field.</summary>
    public const int RelativeCtrFieldNumber = 239;
    private double relativeCtr_;
    /// <summary>
    /// Your clickthrough rate (Ctr) divided by the average clickthrough rate of
    /// all advertisers on the websites that show your ads. Measures how your ads
    /// perform on Display Network sites compared to other ads on the same sites.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double RelativeCtr {
      get { if ((_hasBits3 & 512) != 0) { return relativeCtr_; } else { return 0D; } }
      set {
        _hasBits3 |= 512;
        relativeCtr_ = value;
      }
    }
    /// <summary>Gets whether the "relative_ctr" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasRelativeCtr {
      get { return (_hasBits3 & 512) != 0; }
    }
    /// <summary>Clears the value of the "relative_ctr" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearRelativeCtr() {
      _hasBits3 &= ~512;
    }

    /// <summary>Field number for the "search_absolute_top_impression_share" field.</summary>
    public const int SearchAbsoluteTopImpressionShareFieldNumber = 136;
    private double searchAbsoluteTopImpressionShare_;
    /// <summary>
    /// The percentage of the customer's Shopping or Search ad impressions that are
    /// shown in the most prominent Shopping position. See
    /// https://support.google.com/google-ads/answer/7501826
    /// for details. Any value below 0.1 is reported as 0.0999.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double SearchAbsoluteTopImpressionShare {
      get { if ((_hasBits0 & 32) != 0) { return searchAbsoluteTopImpressionShare_; } else { return 0D; } }
      set {
        _hasBits0 |= 32;
        searchAbsoluteTopImpressionShare_ = value;
      }
    }
    /// <summary>Gets whether the "search_absolute_top_impression_share" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasSearchAbsoluteTopImpressionShare {
      get { return (_hasBits0 & 32) != 0; }
    }
    /// <summary>Clears the value of the "search_absolute_top_impression_share" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearSearchAbsoluteTopImpressionShare() {
      _hasBits0 &= ~32;
    }

    /// <summary>Field number for the "search_budget_lost_absolute_top_impression_share" field.</summary>
    public const int SearchBudgetLostAbsoluteTopImpressionShareFieldNumber = 137;
    private double searchBudgetLostAbsoluteTopImpressionShare_;
    /// <summary>
    /// The number estimating how often your ad wasn't the very first ad above the
    /// organic search results due to a low budget. Note: Search
    /// budget lost absolute top impression share is reported in the range of 0 to
    /// 0.9. Any value above 0.9 is reported as 0.9001.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double SearchBudgetLostAbsoluteTopImpressionShare {
      get { if ((_hasBits0 & 64) != 0) { return searchBudgetLostAbsoluteTopImpressionShare_; } else { return 0D; } }
      set {
        _hasBits0 |= 64;
        searchBudgetLostAbsoluteTopImpressionShare_ = value;
      }
    }
    /// <summary>Gets whether the "search_budget_lost_absolute_top_impression_share" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasSearchBudgetLostAbsoluteTopImpressionShare {
      get { return (_hasBits0 & 64) != 0; }
    }
    /// <summary>Clears the value of the "search_budget_lost_absolute_top_impression_share" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearSearchBudgetLostAbsoluteTopImpressionShare() {
      _hasBits0 &= ~64;
    }

    /// <summary>Field number for the "search_budget_lost_impression_share" field.</summary>
    public const int SearchBudgetLostImpressionShareFieldNumber = 138;
    private double searchBudgetLostImpressionShare_;
    /// <summary>
    /// The estimated percent of times that your ad was eligible to show on the
    /// Search Network but didn't because your budget was too low. Note: Search
    /// budget lost impression share is reported in the range of 0 to 0.9. Any
    /// value above 0.9 is reported as 0.9001.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double SearchBudgetLostImpressionShare {
      get { if ((_hasBits0 & 128) != 0) { return searchBudgetLostImpressionShare_; } else { return 0D; } }
      set {
        _hasBits0 |= 128;
        searchBudgetLostImpressionShare_ = value;
      }
    }
    /// <summary>Gets whether the "search_budget_lost_impression_share" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasSearchBudgetLostImpressionShare {
      get { return (_hasBits0 & 128) != 0; }
    }
    /// <summary>Clears the value of the "search_budget_lost_impression_share" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearSearchBudgetLostImpressionShare() {
      _hasBits0 &= ~128;
    }

    /// <summary>Field number for the "search_budget_lost_top_impression_share" field.</summary>
    public const int SearchBudgetLostTopImpressionShareFieldNumber = 139;
    private double searchBudgetLostTopImpressionShare_;
    /// <summary>
    /// The number estimating how often your ad didn't show anywhere above the
    /// organic search results due to a low budget. Note: Search
    /// budget lost top impression share is reported in the range of 0 to 0.9. Any
    /// value above 0.9 is reported as 0.9001.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double SearchBudgetLostTopImpressionShare {
      get { if ((_hasBits0 & 256) != 0) { return searchBudgetLostTopImpressionShare_; } else { return 0D; } }
      set {
        _hasBits0 |= 256;
        searchBudgetLostTopImpressionShare_ = value;
      }
    }
    /// <summary>Gets whether the "search_budget_lost_top_impression_share" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasSearchBudgetLostTopImpressionShare {
      get { return (_hasBits0 & 256) != 0; }
    }
    /// <summary>Clears the value of the "search_budget_lost_top_impression_share" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearSearchBudgetLostTopImpressionShare() {
      _hasBits0 &= ~256;
    }

    /// <summary>Field number for the "search_click_share" field.</summary>
    public const int SearchClickShareFieldNumber = 140;
    private double searchClickShare_;
    /// <summary>
    /// The number of clicks you've received on the Search Network
    /// divided by the estimated number of clicks you were eligible to receive.
    /// Note: Search click share is reported in the range of 0.1 to 1. Any value
    /// below 0.1 is reported as 0.0999.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double SearchClickShare {
      get { if ((_hasBits0 & 512) != 0) { return searchClickShare_; } else { return 0D; } }
      set {
        _hasBits0 |= 512;
        searchClickShare_ = value;
      }
    }
    /// <summary>Gets whether the "search_click_share" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasSearchClickShare {
      get { return (_hasBits0 & 512) != 0; }
    }
    /// <summary>Clears the value of the "search_click_share" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearSearchClickShare() {
      _hasBits0 &= ~512;
    }

    /// <summary>Field number for the "search_exact_match_impression_share" field.</summary>
    public const int SearchExactMatchImpressionShareFieldNumber = 141;
    private double searchExactMatchImpressionShare_;
    /// <summary>
    /// The impressions you've received divided by the estimated number of
    /// impressions you were eligible to receive on the Search Network for search
    /// terms that matched your keywords exactly (or were close variants of your
    /// keyword), regardless of your keyword match types. Note: Search exact match
    /// impression share is reported in the range of 0.1 to 1. Any value below 0.1
    /// is reported as 0.0999.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double SearchExactMatchImpressionShare {
      get { if ((_hasBits0 & 1024) != 0) { return searchExactMatchImpressionShare_; } else { return 0D; } }
      set {
        _hasBits0 |= 1024;
        searchExactMatchImpressionShare_ = value;
      }
    }
    /// <summary>Gets whether the "search_exact_match_impression_share" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasSearchExactMatchImpressionShare {
      get { return (_hasBits0 & 1024) != 0; }
    }
    /// <summary>Clears the value of the "search_exact_match_impression_share" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearSearchExactMatchImpressionShare() {
      _hasBits0 &= ~1024;
    }

    /// <summary>Field number for the "search_impression_share" field.</summary>
    public const int SearchImpressionShareFieldNumber = 142;
    private double searchImpressionShare_;
    /// <summary>
    /// The impressions you've received on the Search Network divided
    /// by the estimated number of impressions you were eligible to receive.
    /// Note: Search impression share is reported in the range of 0.1 to 1. Any
    /// value below 0.1 is reported as 0.0999.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double SearchImpressionShare {
      get { if ((_hasBits0 & 2048) != 0) { return searchImpressionShare_; } else { return 0D; } }
      set {
        _hasBits0 |= 2048;
        searchImpressionShare_ = value;
      }
    }
    /// <summary>Gets whether the "search_impression_share" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasSearchImpressionShare {
      get { return (_hasBits0 & 2048) != 0; }
    }
    /// <summary>Clears the value of the "search_impression_share" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearSearchImpressionShare() {
      _hasBits0 &= ~2048;
    }

    /// <summary>Field number for the "search_rank_lost_absolute_top_impression_share" field.</summary>
    public const int SearchRankLostAbsoluteTopImpressionShareFieldNumber = 143;
    private double searchRankLostAbsoluteTopImpressionShare_;
    /// <summary>
    /// The number estimating how often your ad wasn't the very first ad above the
    /// organic search results due to poor Ad Rank.
    /// Note: Search rank lost absolute top impression share is reported in the
    /// range of 0 to 0.9. Any value above 0.9 is reported as 0.9001.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double SearchRankLostAbsoluteTopImpressionShare {
      get { if ((_hasBits0 & 4096) != 0) { return searchRankLostAbsoluteTopImpressionShare_; } else { return 0D; } }
      set {
        _hasBits0 |= 4096;
        searchRankLostAbsoluteTopImpressionShare_ = value;
      }
    }
    /// <summary>Gets whether the "search_rank_lost_absolute_top_impression_share" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasSearchRankLostAbsoluteTopImpressionShare {
      get { return (_hasBits0 & 4096) != 0; }
    }
    /// <summary>Clears the value of the "search_rank_lost_absolute_top_impression_share" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearSearchRankLostAbsoluteTopImpressionShare() {
      _hasBits0 &= ~4096;
    }

    /// <summary>Field number for the "search_rank_lost_impression_share" field.</summary>
    public const int SearchRankLostImpressionShareFieldNumber = 144;
    private double searchRankLostImpressionShare_;
    /// <summary>
    /// The estimated percentage of impressions on the Search Network
    /// that your ads didn't receive due to poor Ad Rank.
    /// Note: Search rank lost impression share is reported in the range of 0 to
    /// 0.9. Any value above 0.9 is reported as 0.9001.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double SearchRankLostImpressionShare {
      get { if ((_hasBits0 & 8192) != 0) { return searchRankLostImpressionShare_; } else { return 0D; } }
      set {
        _hasBits0 |= 8192;
        searchRankLostImpressionShare_ = value;
      }
    }
    /// <summary>Gets whether the "search_rank_lost_impression_share" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasSearchRankLostImpressionShare {
      get { return (_hasBits0 & 8192) != 0; }
    }
    /// <summary>Clears the value of the "search_rank_lost_impression_share" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearSearchRankLostImpressionShare() {
      _hasBits0 &= ~8192;
    }

    /// <summary>Field number for the "search_rank_lost_top_impression_share" field.</summary>
    public const int SearchRankLostTopImpressionShareFieldNumber = 145;
    private double searchRankLostTopImpressionShare_;
    /// <summary>
    /// The number estimating how often your ad didn't show anywhere above the
    /// organic search results due to poor Ad Rank.
    /// Note: Search rank lost top impression share is reported in the range of 0
    /// to 0.9. Any value above 0.9 is reported as 0.9001.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double SearchRankLostTopImpressionShare {
      get { if ((_hasBits0 & 16384) != 0) { return searchRankLostTopImpressionShare_; } else { return 0D; } }
      set {
        _hasBits0 |= 16384;
        searchRankLostTopImpressionShare_ = value;
      }
    }
    /// <summary>Gets whether the "search_rank_lost_top_impression_share" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasSearchRankLostTopImpressionShare {
      get { return (_hasBits0 & 16384) != 0; }
    }
    /// <summary>Clears the value of the "search_rank_lost_top_impression_share" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearSearchRankLostTopImpressionShare() {
      _hasBits0 &= ~16384;
    }

    /// <summary>Field number for the "search_top_impression_share" field.</summary>
    public const int SearchTopImpressionShareFieldNumber = 146;
    private double searchTopImpressionShare_;
    /// <summary>
    /// The impressions you've received in the top location (anywhere above the
    /// organic search results) compared to the estimated number of impressions you
    /// were eligible to receive in the top location.
    /// Note: Search top impression share is reported in the range of 0.1 to 1. Any
    /// value below 0.1 is reported as 0.0999.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double SearchTopImpressionShare {
      get { if ((_hasBits0 & 32768) != 0) { return searchTopImpressionShare_; } else { return 0D; } }
      set {
        _hasBits0 |= 32768;
        searchTopImpressionShare_ = value;
      }
    }
    /// <summary>Gets whether the "search_top_impression_share" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasSearchTopImpressionShare {
      get { return (_hasBits0 & 32768) != 0; }
    }
    /// <summary>Clears the value of the "search_top_impression_share" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearSearchTopImpressionShare() {
      _hasBits0 &= ~32768;
    }

    /// <summary>Field number for the "speed_score" field.</summary>
    public const int SpeedScoreFieldNumber = 147;
    private long speedScore_;
    /// <summary>
    /// A measure of how quickly your page loads after clicks on your mobile ads.
    /// The score is a range from 1 to 10, 10 being the fastest.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long SpeedScore {
      get { if ((_hasBits0 & 65536) != 0) { return speedScore_; } else { return 0L; } }
      set {
        _hasBits0 |= 65536;
        speedScore_ = value;
      }
    }
    /// <summary>Gets whether the "speed_score" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasSpeedScore {
      get { return (_hasBits0 & 65536) != 0; }
    }
    /// <summary>Clears the value of the "speed_score" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearSpeedScore() {
      _hasBits0 &= ~65536;
    }

    /// <summary>Field number for the "top_impression_percentage" field.</summary>
    public const int TopImpressionPercentageFieldNumber = 148;
    private double topImpressionPercentage_;
    /// <summary>
    /// The percent of your ad impressions that are shown anywhere above the
    /// organic search results.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double TopImpressionPercentage {
      get { if ((_hasBits0 & 131072) != 0) { return topImpressionPercentage_; } else { return 0D; } }
      set {
        _hasBits0 |= 131072;
        topImpressionPercentage_ = value;
      }
    }
    /// <summary>Gets whether the "top_impression_percentage" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasTopImpressionPercentage {
      get { return (_hasBits0 & 131072) != 0; }
    }
    /// <summary>Clears the value of the "top_impression_percentage" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearTopImpressionPercentage() {
      _hasBits0 &= ~131072;
    }

    /// <summary>Field number for the "valid_accelerated_mobile_pages_clicks_percentage" field.</summary>
    public const int ValidAcceleratedMobilePagesClicksPercentageFieldNumber = 149;
    private double validAcceleratedMobilePagesClicksPercentage_;
    /// <summary>
    /// The percentage of ad clicks to Accelerated Mobile Pages (AMP) landing pages
    /// that reach a valid AMP page.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double ValidAcceleratedMobilePagesClicksPercentage {
      get { if ((_hasBits0 & 262144) != 0) { return validAcceleratedMobilePagesClicksPercentage_; } else { return 0D; } }
      set {
        _hasBits0 |= 262144;
        validAcceleratedMobilePagesClicksPercentage_ = value;
      }
    }
    /// <summary>Gets whether the "valid_accelerated_mobile_pages_clicks_percentage" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasValidAcceleratedMobilePagesClicksPercentage {
      get { return (_hasBits0 & 262144) != 0; }
    }
    /// <summary>Clears the value of the "valid_accelerated_mobile_pages_clicks_percentage" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearValidAcceleratedMobilePagesClicksPercentage() {
      _hasBits0 &= ~262144;
    }

    /// <summary>Field number for the "value_per_all_conversions" field.</summary>
    public const int ValuePerAllConversionsFieldNumber = 150;
    private double valuePerAllConversions_;
    /// <summary>
    /// The value of all conversions divided by the number of all conversions.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double ValuePerAllConversions {
      get { if ((_hasBits0 & 524288) != 0) { return valuePerAllConversions_; } else { return 0D; } }
      set {
        _hasBits0 |= 524288;
        valuePerAllConversions_ = value;
      }
    }
    /// <summary>Gets whether the "value_per_all_conversions" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasValuePerAllConversions {
      get { return (_hasBits0 & 524288) != 0; }
    }
    /// <summary>Clears the value of the "value_per_all_conversions" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearValuePerAllConversions() {
      _hasBits0 &= ~524288;
    }

    /// <summary>Field number for the "value_per_all_conversions_by_conversion_date" field.</summary>
    public const int ValuePerAllConversionsByConversionDateFieldNumber = 244;
    private double valuePerAllConversionsByConversionDate_;
    /// <summary>
    /// The value of all conversions divided by the number of all conversions. When
    /// this column is selected with date, the values in date column means the
    /// conversion date. Details for the by_conversion_date columns are available
    /// at https://support.google.com/google-ads/answer/9549009.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double ValuePerAllConversionsByConversionDate {
      get { if ((_hasBits3 & 1024) != 0) { return valuePerAllConversionsByConversionDate_; } else { return 0D; } }
      set {
        _hasBits3 |= 1024;
        valuePerAllConversionsByConversionDate_ = value;
      }
    }
    /// <summary>Gets whether the "value_per_all_conversions_by_conversion_date" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasValuePerAllConversionsByConversionDate {
      get { return (_hasBits3 & 1024) != 0; }
    }
    /// <summary>Clears the value of the "value_per_all_conversions_by_conversion_date" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearValuePerAllConversionsByConversionDate() {
      _hasBits3 &= ~1024;
    }

    /// <summary>Field number for the "value_per_conversion" field.</summary>
    public const int ValuePerConversionFieldNumber = 151;
    private double valuePerConversion_;
    /// <summary>
    /// The value of conversions divided by the number of conversions. This only
    /// includes conversion actions which include_in_conversions_metric attribute
    /// is set to true. If you use conversion-based bidding, your bid strategies
    /// will optimize for these conversions.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double ValuePerConversion {
      get { if ((_hasBits0 & 1048576) != 0) { return valuePerConversion_; } else { return 0D; } }
      set {
        _hasBits0 |= 1048576;
        valuePerConversion_ = value;
      }
    }
    /// <summary>Gets whether the "value_per_conversion" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasValuePerConversion {
      get { return (_hasBits0 & 1048576) != 0; }
    }
    /// <summary>Clears the value of the "value_per_conversion" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearValuePerConversion() {
      _hasBits0 &= ~1048576;
    }

    /// <summary>Field number for the "value_per_conversions_by_conversion_date" field.</summary>
    public const int ValuePerConversionsByConversionDateFieldNumber = 245;
    private double valuePerConversionsByConversionDate_;
    /// <summary>
    /// The value of conversions divided by the number of conversions. This only
    /// includes conversion actions which include_in_conversions_metric attribute
    /// is set to true. If you use conversion-based bidding, your bid strategies
    /// will optimize for these conversions. When this column is selected with
    /// date, the values in date column means the conversion date. Details for the
    /// by_conversion_date columns are available at
    /// https://support.google.com/google-ads/answer/9549009.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double ValuePerConversionsByConversionDate {
      get { if ((_hasBits3 & 2048) != 0) { return valuePerConversionsByConversionDate_; } else { return 0D; } }
      set {
        _hasBits3 |= 2048;
        valuePerConversionsByConversionDate_ = value;
      }
    }
    /// <summary>Gets whether the "value_per_conversions_by_conversion_date" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasValuePerConversionsByConversionDate {
      get { return (_hasBits3 & 2048) != 0; }
    }
    /// <summary>Clears the value of the "value_per_conversions_by_conversion_date" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearValuePerConversionsByConversionDate() {
      _hasBits3 &= ~2048;
    }

    /// <summary>Field number for the "value_per_current_model_attributed_conversion" field.</summary>
    public const int ValuePerCurrentModelAttributedConversionFieldNumber = 152;
    private double valuePerCurrentModelAttributedConversion_;
    /// <summary>
    /// The value of current model attributed conversions divided by the number of
    /// the conversions. This only includes conversion actions which
    /// include_in_conversions_metric attribute is set to true. If you use
    /// conversion-based bidding, your bid strategies will optimize for these
    /// conversions.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double ValuePerCurrentModelAttributedConversion {
      get { if ((_hasBits0 & 2097152) != 0) { return valuePerCurrentModelAttributedConversion_; } else { return 0D; } }
      set {
        _hasBits0 |= 2097152;
        valuePerCurrentModelAttributedConversion_ = value;
      }
    }
    /// <summary>Gets whether the "value_per_current_model_attributed_conversion" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasValuePerCurrentModelAttributedConversion {
      get { return (_hasBits0 & 2097152) != 0; }
    }
    /// <summary>Clears the value of the "value_per_current_model_attributed_conversion" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearValuePerCurrentModelAttributedConversion() {
      _hasBits0 &= ~2097152;
    }

    /// <summary>Field number for the "video_quartile_p100_rate" field.</summary>
    public const int VideoQuartileP100RateFieldNumber = 132;
    private double videoQuartileP100Rate_;
    /// <summary>
    /// Percentage of impressions where the viewer watched all of your video.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double VideoQuartileP100Rate {
      get { if ((_hasBits0 & 2) != 0) { return videoQuartileP100Rate_; } else { return 0D; } }
      set {
        _hasBits0 |= 2;
        videoQuartileP100Rate_ = value;
      }
    }
    /// <summary>Gets whether the "video_quartile_p100_rate" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasVideoQuartileP100Rate {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "video_quartile_p100_rate" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearVideoQuartileP100Rate() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "video_quartile_p25_rate" field.</summary>
    public const int VideoQuartileP25RateFieldNumber = 133;
    private double videoQuartileP25Rate_;
    /// <summary>
    /// Percentage of impressions where the viewer watched 25% of your video.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double VideoQuartileP25Rate {
      get { if ((_hasBits0 & 4) != 0) { return videoQuartileP25Rate_; } else { return 0D; } }
      set {
        _hasBits0 |= 4;
        videoQuartileP25Rate_ = value;
      }
    }
    /// <summary>Gets whether the "video_quartile_p25_rate" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasVideoQuartileP25Rate {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "video_quartile_p25_rate" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearVideoQuartileP25Rate() {
      _hasBits0 &= ~4;
    }

    /// <summary>Field number for the "video_quartile_p50_rate" field.</summary>
    public const int VideoQuartileP50RateFieldNumber = 134;
    private double videoQuartileP50Rate_;
    /// <summary>
    /// Percentage of impressions where the viewer watched 50% of your video.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double VideoQuartileP50Rate {
      get { if ((_hasBits0 & 8) != 0) { return videoQuartileP50Rate_; } else { return 0D; } }
      set {
        _hasBits0 |= 8;
        videoQuartileP50Rate_ = value;
      }
    }
    /// <summary>Gets whether the "video_quartile_p50_rate" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasVideoQuartileP50Rate {
      get { return (_hasBits0 & 8) != 0; }
    }
    /// <summary>Clears the value of the "video_quartile_p50_rate" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearVideoQuartileP50Rate() {
      _hasBits0 &= ~8;
    }

    /// <summary>Field number for the "video_quartile_p75_rate" field.</summary>
    public const int VideoQuartileP75RateFieldNumber = 135;
    private double videoQuartileP75Rate_;
    /// <summary>
    /// Percentage of impressions where the viewer watched 75% of your video.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double VideoQuartileP75Rate {
      get { if ((_hasBits0 & 16) != 0) { return videoQuartileP75Rate_; } else { return 0D; } }
      set {
        _hasBits0 |= 16;
        videoQuartileP75Rate_ = value;
      }
    }
    /// <summary>Gets whether the "video_quartile_p75_rate" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasVideoQuartileP75Rate {
      get { return (_hasBits0 & 16) != 0; }
    }
    /// <summary>Clears the value of the "video_quartile_p75_rate" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearVideoQuartileP75Rate() {
      _hasBits0 &= ~16;
    }

    /// <summary>Field number for the "video_view_rate" field.</summary>
    public const int VideoViewRateFieldNumber = 153;
    private double videoViewRate_;
    /// <summary>
    /// The number of views your TrueView video ad receives divided by its number
    /// of impressions, including thumbnail impressions for TrueView in-display
    /// ads.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double VideoViewRate {
      get { if ((_hasBits0 & 4194304) != 0) { return videoViewRate_; } else { return 0D; } }
      set {
        _hasBits0 |= 4194304;
        videoViewRate_ = value;
      }
    }
    /// <summary>Gets whether the "video_view_rate" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasVideoViewRate {
      get { return (_hasBits0 & 4194304) != 0; }
    }
    /// <summary>Clears the value of the "video_view_rate" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearVideoViewRate() {
      _hasBits0 &= ~4194304;
    }

    /// <summary>Field number for the "video_views" field.</summary>
    public const int VideoViewsFieldNumber = 154;
    private long videoViews_;
    /// <summary>
    /// The number of times your video ads were viewed.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long VideoViews {
      get { if ((_hasBits0 & 8388608) != 0) { return videoViews_; } else { return 0L; } }
      set {
        _hasBits0 |= 8388608;
        videoViews_ = value;
      }
    }
    /// <summary>Gets whether the "video_views" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasVideoViews {
      get { return (_hasBits0 & 8388608) != 0; }
    }
    /// <summary>Clears the value of the "video_views" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearVideoViews() {
      _hasBits0 &= ~8388608;
    }

    /// <summary>Field number for the "view_through_conversions" field.</summary>
    public const int ViewThroughConversionsFieldNumber = 155;
    private long viewThroughConversions_;
    /// <summary>
    /// The total number of view-through conversions.
    /// These happen when a customer sees an image or rich media ad, then later
    /// completes a conversion on your site without interacting with (e.g.,
    /// clicking on) another ad.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long ViewThroughConversions {
      get { if ((_hasBits0 & 16777216) != 0) { return viewThroughConversions_; } else { return 0L; } }
      set {
        _hasBits0 |= 16777216;
        viewThroughConversions_ = value;
      }
    }
    /// <summary>Gets whether the "view_through_conversions" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasViewThroughConversions {
      get { return (_hasBits0 & 16777216) != 0; }
    }
    /// <summary>Clears the value of the "view_through_conversions" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearViewThroughConversions() {
      _hasBits0 &= ~16777216;
    }

    /// <summary>Field number for the "sk_ad_network_conversions" field.</summary>
    public const int SkAdNetworkConversionsFieldNumber = 246;
    private long skAdNetworkConversions_;
    /// <summary>
    /// The number of iOS Store Kit Ad Network conversions.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long SkAdNetworkConversions {
      get { return skAdNetworkConversions_; }
      set {
        skAdNetworkConversions_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as Metrics);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(Metrics other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(AbsoluteTopImpressionPercentage, other.AbsoluteTopImpressionPercentage)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(ActiveViewCpm, other.ActiveViewCpm)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(ActiveViewCtr, other.ActiveViewCtr)) return false;
      if (ActiveViewImpressions != other.ActiveViewImpressions) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(ActiveViewMeasurability, other.ActiveViewMeasurability)) return false;
      if (ActiveViewMeasurableCostMicros != other.ActiveViewMeasurableCostMicros) return false;
      if (ActiveViewMeasurableImpressions != other.ActiveViewMeasurableImpressions) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(ActiveViewViewability, other.ActiveViewViewability)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(AllConversionsFromInteractionsRate, other.AllConversionsFromInteractionsRate)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(AllConversionsValue, other.AllConversionsValue)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(AllConversionsValueByConversionDate, other.AllConversionsValueByConversionDate)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(AllConversions, other.AllConversions)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(AllConversionsByConversionDate, other.AllConversionsByConversionDate)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(AllConversionsValuePerCost, other.AllConversionsValuePerCost)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(AllConversionsFromClickToCall, other.AllConversionsFromClickToCall)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(AllConversionsFromDirections, other.AllConversionsFromDirections)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(AllConversionsFromInteractionsValuePerInteraction, other.AllConversionsFromInteractionsValuePerInteraction)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(AllConversionsFromMenu, other.AllConversionsFromMenu)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(AllConversionsFromOrder, other.AllConversionsFromOrder)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(AllConversionsFromOtherEngagement, other.AllConversionsFromOtherEngagement)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(AllConversionsFromStoreVisit, other.AllConversionsFromStoreVisit)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(AllConversionsFromStoreWebsite, other.AllConversionsFromStoreWebsite)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(AuctionInsightSearchAbsoluteTopImpressionPercentage, other.AuctionInsightSearchAbsoluteTopImpressionPercentage)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(AuctionInsightSearchImpressionShare, other.AuctionInsightSearchImpressionShare)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(AuctionInsightSearchOutrankingShare, other.AuctionInsightSearchOutrankingShare)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(AuctionInsightSearchOverlapRate, other.AuctionInsightSearchOverlapRate)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(AuctionInsightSearchPositionAboveRate, other.AuctionInsightSearchPositionAboveRate)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(AuctionInsightSearchTopImpressionPercentage, other.AuctionInsightSearchTopImpressionPercentage)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(AverageCost, other.AverageCost)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(AverageCpc, other.AverageCpc)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(AverageCpe, other.AverageCpe)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(AverageCpm, other.AverageCpm)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(AverageCpv, other.AverageCpv)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(AveragePageViews, other.AveragePageViews)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(AverageTimeOnSite, other.AverageTimeOnSite)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(BenchmarkAverageMaxCpc, other.BenchmarkAverageMaxCpc)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(BiddableAppInstallConversions, other.BiddableAppInstallConversions)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(BiddableAppPostInstallConversions, other.BiddableAppPostInstallConversions)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(BenchmarkCtr, other.BenchmarkCtr)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(BounceRate, other.BounceRate)) return false;
      if (Clicks != other.Clicks) return false;
      if (CombinedClicks != other.CombinedClicks) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(CombinedClicksPerQuery, other.CombinedClicksPerQuery)) return false;
      if (CombinedQueries != other.CombinedQueries) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(ContentBudgetLostImpressionShare, other.ContentBudgetLostImpressionShare)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(ContentImpressionShare, other.ContentImpressionShare)) return false;
      if (ConversionLastReceivedRequestDateTime != other.ConversionLastReceivedRequestDateTime) return false;
      if (ConversionLastConversionDate != other.ConversionLastConversionDate) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(ContentRankLostImpressionShare, other.ContentRankLostImpressionShare)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(ConversionsFromInteractionsRate, other.ConversionsFromInteractionsRate)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(ConversionsValue, other.ConversionsValue)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(ConversionsValueByConversionDate, other.ConversionsValueByConversionDate)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(ConversionsValuePerCost, other.ConversionsValuePerCost)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(ConversionsFromInteractionsValuePerInteraction, other.ConversionsFromInteractionsValuePerInteraction)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Conversions, other.Conversions)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(ConversionsByConversionDate, other.ConversionsByConversionDate)) return false;
      if (CostMicros != other.CostMicros) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(CostPerAllConversions, other.CostPerAllConversions)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(CostPerConversion, other.CostPerConversion)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(CostPerCurrentModelAttributedConversion, other.CostPerCurrentModelAttributedConversion)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(CrossDeviceConversions, other.CrossDeviceConversions)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Ctr, other.Ctr)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(CurrentModelAttributedConversions, other.CurrentModelAttributedConversions)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(CurrentModelAttributedConversionsFromInteractionsRate, other.CurrentModelAttributedConversionsFromInteractionsRate)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(CurrentModelAttributedConversionsFromInteractionsValuePerInteraction, other.CurrentModelAttributedConversionsFromInteractionsValuePerInteraction)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(CurrentModelAttributedConversionsValue, other.CurrentModelAttributedConversionsValue)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(CurrentModelAttributedConversionsValuePerCost, other.CurrentModelAttributedConversionsValuePerCost)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(EngagementRate, other.EngagementRate)) return false;
      if (Engagements != other.Engagements) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(HotelAverageLeadValueMicros, other.HotelAverageLeadValueMicros)) return false;
      if (HotelCommissionRateMicros != other.HotelCommissionRateMicros) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(HotelExpectedCommissionCost, other.HotelExpectedCommissionCost)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(HotelPriceDifferencePercentage, other.HotelPriceDifferencePercentage)) return false;
      if (HotelEligibleImpressions != other.HotelEligibleImpressions) return false;
      if (HistoricalCreativeQualityScore != other.HistoricalCreativeQualityScore) return false;
      if (HistoricalLandingPageQualityScore != other.HistoricalLandingPageQualityScore) return false;
      if (HistoricalQualityScore != other.HistoricalQualityScore) return false;
      if (HistoricalSearchPredictedCtr != other.HistoricalSearchPredictedCtr) return false;
      if (GmailForwards != other.GmailForwards) return false;
      if (GmailSaves != other.GmailSaves) return false;
      if (GmailSecondaryClicks != other.GmailSecondaryClicks) return false;
      if (ImpressionsFromStoreReach != other.ImpressionsFromStoreReach) return false;
      if (Impressions != other.Impressions) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(InteractionRate, other.InteractionRate)) return false;
      if (Interactions != other.Interactions) return false;
      if(!interactionEventTypes_.Equals(other.interactionEventTypes_)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(InvalidClickRate, other.InvalidClickRate)) return false;
      if (InvalidClicks != other.InvalidClicks) return false;
      if (MessageChats != other.MessageChats) return false;
      if (MessageImpressions != other.MessageImpressions) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(MessageChatRate, other.MessageChatRate)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(MobileFriendlyClicksPercentage, other.MobileFriendlyClicksPercentage)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(OptimizationScoreUplift, other.OptimizationScoreUplift)) return false;
      if (OptimizationScoreUrl != other.OptimizationScoreUrl) return false;
      if (OrganicClicks != other.OrganicClicks) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(OrganicClicksPerQuery, other.OrganicClicksPerQuery)) return false;
      if (OrganicImpressions != other.OrganicImpressions) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(OrganicImpressionsPerQuery, other.OrganicImpressionsPerQuery)) return false;
      if (OrganicQueries != other.OrganicQueries) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(PercentNewVisitors, other.PercentNewVisitors)) return false;
      if (PhoneCalls != other.PhoneCalls) return false;
      if (PhoneImpressions != other.PhoneImpressions) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(PhoneThroughRate, other.PhoneThroughRate)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(RelativeCtr, other.RelativeCtr)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(SearchAbsoluteTopImpressionShare, other.SearchAbsoluteTopImpressionShare)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(SearchBudgetLostAbsoluteTopImpressionShare, other.SearchBudgetLostAbsoluteTopImpressionShare)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(SearchBudgetLostImpressionShare, other.SearchBudgetLostImpressionShare)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(SearchBudgetLostTopImpressionShare, other.SearchBudgetLostTopImpressionShare)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(SearchClickShare, other.SearchClickShare)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(SearchExactMatchImpressionShare, other.SearchExactMatchImpressionShare)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(SearchImpressionShare, other.SearchImpressionShare)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(SearchRankLostAbsoluteTopImpressionShare, other.SearchRankLostAbsoluteTopImpressionShare)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(SearchRankLostImpressionShare, other.SearchRankLostImpressionShare)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(SearchRankLostTopImpressionShare, other.SearchRankLostTopImpressionShare)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(SearchTopImpressionShare, other.SearchTopImpressionShare)) return false;
      if (SpeedScore != other.SpeedScore) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(TopImpressionPercentage, other.TopImpressionPercentage)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(ValidAcceleratedMobilePagesClicksPercentage, other.ValidAcceleratedMobilePagesClicksPercentage)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(ValuePerAllConversions, other.ValuePerAllConversions)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(ValuePerAllConversionsByConversionDate, other.ValuePerAllConversionsByConversionDate)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(ValuePerConversion, other.ValuePerConversion)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(ValuePerConversionsByConversionDate, other.ValuePerConversionsByConversionDate)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(ValuePerCurrentModelAttributedConversion, other.ValuePerCurrentModelAttributedConversion)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(VideoQuartileP100Rate, other.VideoQuartileP100Rate)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(VideoQuartileP25Rate, other.VideoQuartileP25Rate)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(VideoQuartileP50Rate, other.VideoQuartileP50Rate)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(VideoQuartileP75Rate, other.VideoQuartileP75Rate)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(VideoViewRate, other.VideoViewRate)) return false;
      if (VideoViews != other.VideoViews) return false;
      if (ViewThroughConversions != other.ViewThroughConversions) return false;
      if (SkAdNetworkConversions != other.SkAdNetworkConversions) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (HasAbsoluteTopImpressionPercentage) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(AbsoluteTopImpressionPercentage);
      if (HasActiveViewCpm) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(ActiveViewCpm);
      if (HasActiveViewCtr) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(ActiveViewCtr);
      if (HasActiveViewImpressions) hash ^= ActiveViewImpressions.GetHashCode();
      if (HasActiveViewMeasurability) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(ActiveViewMeasurability);
      if (HasActiveViewMeasurableCostMicros) hash ^= ActiveViewMeasurableCostMicros.GetHashCode();
      if (HasActiveViewMeasurableImpressions) hash ^= ActiveViewMeasurableImpressions.GetHashCode();
      if (HasActiveViewViewability) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(ActiveViewViewability);
      if (HasAllConversionsFromInteractionsRate) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(AllConversionsFromInteractionsRate);
      if (HasAllConversionsValue) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(AllConversionsValue);
      if (AllConversionsValueByConversionDate != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(AllConversionsValueByConversionDate);
      if (HasAllConversions) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(AllConversions);
      if (AllConversionsByConversionDate != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(AllConversionsByConversionDate);
      if (HasAllConversionsValuePerCost) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(AllConversionsValuePerCost);
      if (HasAllConversionsFromClickToCall) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(AllConversionsFromClickToCall);
      if (HasAllConversionsFromDirections) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(AllConversionsFromDirections);
      if (HasAllConversionsFromInteractionsValuePerInteraction) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(AllConversionsFromInteractionsValuePerInteraction);
      if (HasAllConversionsFromMenu) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(AllConversionsFromMenu);
      if (HasAllConversionsFromOrder) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(AllConversionsFromOrder);
      if (HasAllConversionsFromOtherEngagement) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(AllConversionsFromOtherEngagement);
      if (HasAllConversionsFromStoreVisit) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(AllConversionsFromStoreVisit);
      if (HasAllConversionsFromStoreWebsite) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(AllConversionsFromStoreWebsite);
      if (HasAuctionInsightSearchAbsoluteTopImpressionPercentage) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(AuctionInsightSearchAbsoluteTopImpressionPercentage);
      if (HasAuctionInsightSearchImpressionShare) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(AuctionInsightSearchImpressionShare);
      if (HasAuctionInsightSearchOutrankingShare) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(AuctionInsightSearchOutrankingShare);
      if (HasAuctionInsightSearchOverlapRate) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(AuctionInsightSearchOverlapRate);
      if (HasAuctionInsightSearchPositionAboveRate) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(AuctionInsightSearchPositionAboveRate);
      if (HasAuctionInsightSearchTopImpressionPercentage) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(AuctionInsightSearchTopImpressionPercentage);
      if (HasAverageCost) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(AverageCost);
      if (HasAverageCpc) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(AverageCpc);
      if (HasAverageCpe) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(AverageCpe);
      if (HasAverageCpm) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(AverageCpm);
      if (HasAverageCpv) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(AverageCpv);
      if (HasAveragePageViews) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(AveragePageViews);
      if (HasAverageTimeOnSite) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(AverageTimeOnSite);
      if (HasBenchmarkAverageMaxCpc) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(BenchmarkAverageMaxCpc);
      if (HasBiddableAppInstallConversions) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(BiddableAppInstallConversions);
      if (HasBiddableAppPostInstallConversions) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(BiddableAppPostInstallConversions);
      if (HasBenchmarkCtr) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(BenchmarkCtr);
      if (HasBounceRate) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(BounceRate);
      if (HasClicks) hash ^= Clicks.GetHashCode();
      if (HasCombinedClicks) hash ^= CombinedClicks.GetHashCode();
      if (HasCombinedClicksPerQuery) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(CombinedClicksPerQuery);
      if (HasCombinedQueries) hash ^= CombinedQueries.GetHashCode();
      if (HasContentBudgetLostImpressionShare) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(ContentBudgetLostImpressionShare);
      if (HasContentImpressionShare) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(ContentImpressionShare);
      if (HasConversionLastReceivedRequestDateTime) hash ^= ConversionLastReceivedRequestDateTime.GetHashCode();
      if (HasConversionLastConversionDate) hash ^= ConversionLastConversionDate.GetHashCode();
      if (HasContentRankLostImpressionShare) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(ContentRankLostImpressionShare);
      if (HasConversionsFromInteractionsRate) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(ConversionsFromInteractionsRate);
      if (HasConversionsValue) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(ConversionsValue);
      if (ConversionsValueByConversionDate != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(ConversionsValueByConversionDate);
      if (HasConversionsValuePerCost) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(ConversionsValuePerCost);
      if (HasConversionsFromInteractionsValuePerInteraction) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(ConversionsFromInteractionsValuePerInteraction);
      if (HasConversions) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Conversions);
      if (ConversionsByConversionDate != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(ConversionsByConversionDate);
      if (HasCostMicros) hash ^= CostMicros.GetHashCode();
      if (HasCostPerAllConversions) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(CostPerAllConversions);
      if (HasCostPerConversion) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(CostPerConversion);
      if (HasCostPerCurrentModelAttributedConversion) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(CostPerCurrentModelAttributedConversion);
      if (HasCrossDeviceConversions) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(CrossDeviceConversions);
      if (HasCtr) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Ctr);
      if (HasCurrentModelAttributedConversions) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(CurrentModelAttributedConversions);
      if (HasCurrentModelAttributedConversionsFromInteractionsRate) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(CurrentModelAttributedConversionsFromInteractionsRate);
      if (HasCurrentModelAttributedConversionsFromInteractionsValuePerInteraction) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(CurrentModelAttributedConversionsFromInteractionsValuePerInteraction);
      if (HasCurrentModelAttributedConversionsValue) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(CurrentModelAttributedConversionsValue);
      if (HasCurrentModelAttributedConversionsValuePerCost) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(CurrentModelAttributedConversionsValuePerCost);
      if (HasEngagementRate) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(EngagementRate);
      if (HasEngagements) hash ^= Engagements.GetHashCode();
      if (HasHotelAverageLeadValueMicros) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(HotelAverageLeadValueMicros);
      if (HasHotelCommissionRateMicros) hash ^= HotelCommissionRateMicros.GetHashCode();
      if (HasHotelExpectedCommissionCost) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(HotelExpectedCommissionCost);
      if (HasHotelPriceDifferencePercentage) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(HotelPriceDifferencePercentage);
      if (HasHotelEligibleImpressions) hash ^= HotelEligibleImpressions.GetHashCode();
      if (HistoricalCreativeQualityScore != global::Google.Ads.GoogleAds.V11.Enums.QualityScoreBucketEnum.Types.QualityScoreBucket.Unspecified) hash ^= HistoricalCreativeQualityScore.GetHashCode();
      if (HistoricalLandingPageQualityScore != global::Google.Ads.GoogleAds.V11.Enums.QualityScoreBucketEnum.Types.QualityScoreBucket.Unspecified) hash ^= HistoricalLandingPageQualityScore.GetHashCode();
      if (HasHistoricalQualityScore) hash ^= HistoricalQualityScore.GetHashCode();
      if (HistoricalSearchPredictedCtr != global::Google.Ads.GoogleAds.V11.Enums.QualityScoreBucketEnum.Types.QualityScoreBucket.Unspecified) hash ^= HistoricalSearchPredictedCtr.GetHashCode();
      if (HasGmailForwards) hash ^= GmailForwards.GetHashCode();
      if (HasGmailSaves) hash ^= GmailSaves.GetHashCode();
      if (HasGmailSecondaryClicks) hash ^= GmailSecondaryClicks.GetHashCode();
      if (HasImpressionsFromStoreReach) hash ^= ImpressionsFromStoreReach.GetHashCode();
      if (HasImpressions) hash ^= Impressions.GetHashCode();
      if (HasInteractionRate) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(InteractionRate);
      if (HasInteractions) hash ^= Interactions.GetHashCode();
      hash ^= interactionEventTypes_.GetHashCode();
      if (HasInvalidClickRate) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(InvalidClickRate);
      if (HasInvalidClicks) hash ^= InvalidClicks.GetHashCode();
      if (HasMessageChats) hash ^= MessageChats.GetHashCode();
      if (HasMessageImpressions) hash ^= MessageImpressions.GetHashCode();
      if (HasMessageChatRate) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(MessageChatRate);
      if (HasMobileFriendlyClicksPercentage) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(MobileFriendlyClicksPercentage);
      if (HasOptimizationScoreUplift) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(OptimizationScoreUplift);
      if (HasOptimizationScoreUrl) hash ^= OptimizationScoreUrl.GetHashCode();
      if (HasOrganicClicks) hash ^= OrganicClicks.GetHashCode();
      if (HasOrganicClicksPerQuery) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(OrganicClicksPerQuery);
      if (HasOrganicImpressions) hash ^= OrganicImpressions.GetHashCode();
      if (HasOrganicImpressionsPerQuery) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(OrganicImpressionsPerQuery);
      if (HasOrganicQueries) hash ^= OrganicQueries.GetHashCode();
      if (HasPercentNewVisitors) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(PercentNewVisitors);
      if (HasPhoneCalls) hash ^= PhoneCalls.GetHashCode();
      if (HasPhoneImpressions) hash ^= PhoneImpressions.GetHashCode();
      if (HasPhoneThroughRate) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(PhoneThroughRate);
      if (HasRelativeCtr) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(RelativeCtr);
      if (HasSearchAbsoluteTopImpressionShare) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(SearchAbsoluteTopImpressionShare);
      if (HasSearchBudgetLostAbsoluteTopImpressionShare) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(SearchBudgetLostAbsoluteTopImpressionShare);
      if (HasSearchBudgetLostImpressionShare) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(SearchBudgetLostImpressionShare);
      if (HasSearchBudgetLostTopImpressionShare) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(SearchBudgetLostTopImpressionShare);
      if (HasSearchClickShare) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(SearchClickShare);
      if (HasSearchExactMatchImpressionShare) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(SearchExactMatchImpressionShare);
      if (HasSearchImpressionShare) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(SearchImpressionShare);
      if (HasSearchRankLostAbsoluteTopImpressionShare) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(SearchRankLostAbsoluteTopImpressionShare);
      if (HasSearchRankLostImpressionShare) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(SearchRankLostImpressionShare);
      if (HasSearchRankLostTopImpressionShare) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(SearchRankLostTopImpressionShare);
      if (HasSearchTopImpressionShare) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(SearchTopImpressionShare);
      if (HasSpeedScore) hash ^= SpeedScore.GetHashCode();
      if (HasTopImpressionPercentage) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(TopImpressionPercentage);
      if (HasValidAcceleratedMobilePagesClicksPercentage) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(ValidAcceleratedMobilePagesClicksPercentage);
      if (HasValuePerAllConversions) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(ValuePerAllConversions);
      if (HasValuePerAllConversionsByConversionDate) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(ValuePerAllConversionsByConversionDate);
      if (HasValuePerConversion) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(ValuePerConversion);
      if (HasValuePerConversionsByConversionDate) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(ValuePerConversionsByConversionDate);
      if (HasValuePerCurrentModelAttributedConversion) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(ValuePerCurrentModelAttributedConversion);
      if (HasVideoQuartileP100Rate) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(VideoQuartileP100Rate);
      if (HasVideoQuartileP25Rate) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(VideoQuartileP25Rate);
      if (HasVideoQuartileP50Rate) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(VideoQuartileP50Rate);
      if (HasVideoQuartileP75Rate) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(VideoQuartileP75Rate);
      if (HasVideoViewRate) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(VideoViewRate);
      if (HasVideoViews) hash ^= VideoViews.GetHashCode();
      if (HasViewThroughConversions) hash ^= ViewThroughConversions.GetHashCode();
      if (SkAdNetworkConversions != 0L) hash ^= SkAdNetworkConversions.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HistoricalCreativeQualityScore != global::Google.Ads.GoogleAds.V11.Enums.QualityScoreBucketEnum.Types.QualityScoreBucket.Unspecified) {
        output.WriteRawTag(128, 5);
        output.WriteEnum((int) HistoricalCreativeQualityScore);
      }
      if (HistoricalLandingPageQualityScore != global::Google.Ads.GoogleAds.V11.Enums.QualityScoreBucketEnum.Types.QualityScoreBucket.Unspecified) {
        output.WriteRawTag(136, 5);
        output.WriteEnum((int) HistoricalLandingPageQualityScore);
      }
      if (HistoricalSearchPredictedCtr != global::Google.Ads.GoogleAds.V11.Enums.QualityScoreBucketEnum.Types.QualityScoreBucket.Unspecified) {
        output.WriteRawTag(152, 5);
        output.WriteEnum((int) HistoricalSearchPredictedCtr);
      }
      interactionEventTypes_.WriteTo(output, _repeated_interactionEventTypes_codec);
      if (HasClicks) {
        output.WriteRawTag(152, 8);
        output.WriteInt64(Clicks);
      }
      if (HasVideoQuartileP100Rate) {
        output.WriteRawTag(161, 8);
        output.WriteDouble(VideoQuartileP100Rate);
      }
      if (HasVideoQuartileP25Rate) {
        output.WriteRawTag(169, 8);
        output.WriteDouble(VideoQuartileP25Rate);
      }
      if (HasVideoQuartileP50Rate) {
        output.WriteRawTag(177, 8);
        output.WriteDouble(VideoQuartileP50Rate);
      }
      if (HasVideoQuartileP75Rate) {
        output.WriteRawTag(185, 8);
        output.WriteDouble(VideoQuartileP75Rate);
      }
      if (HasSearchAbsoluteTopImpressionShare) {
        output.WriteRawTag(193, 8);
        output.WriteDouble(SearchAbsoluteTopImpressionShare);
      }
      if (HasSearchBudgetLostAbsoluteTopImpressionShare) {
        output.WriteRawTag(201, 8);
        output.WriteDouble(SearchBudgetLostAbsoluteTopImpressionShare);
      }
      if (HasSearchBudgetLostImpressionShare) {
        output.WriteRawTag(209, 8);
        output.WriteDouble(SearchBudgetLostImpressionShare);
      }
      if (HasSearchBudgetLostTopImpressionShare) {
        output.WriteRawTag(217, 8);
        output.WriteDouble(SearchBudgetLostTopImpressionShare);
      }
      if (HasSearchClickShare) {
        output.WriteRawTag(225, 8);
        output.WriteDouble(SearchClickShare);
      }
      if (HasSearchExactMatchImpressionShare) {
        output.WriteRawTag(233, 8);
        output.WriteDouble(SearchExactMatchImpressionShare);
      }
      if (HasSearchImpressionShare) {
        output.WriteRawTag(241, 8);
        output.WriteDouble(SearchImpressionShare);
      }
      if (HasSearchRankLostAbsoluteTopImpressionShare) {
        output.WriteRawTag(249, 8);
        output.WriteDouble(SearchRankLostAbsoluteTopImpressionShare);
      }
      if (HasSearchRankLostImpressionShare) {
        output.WriteRawTag(129, 9);
        output.WriteDouble(SearchRankLostImpressionShare);
      }
      if (HasSearchRankLostTopImpressionShare) {
        output.WriteRawTag(137, 9);
        output.WriteDouble(SearchRankLostTopImpressionShare);
      }
      if (HasSearchTopImpressionShare) {
        output.WriteRawTag(145, 9);
        output.WriteDouble(SearchTopImpressionShare);
      }
      if (HasSpeedScore) {
        output.WriteRawTag(152, 9);
        output.WriteInt64(SpeedScore);
      }
      if (HasTopImpressionPercentage) {
        output.WriteRawTag(161, 9);
        output.WriteDouble(TopImpressionPercentage);
      }
      if (HasValidAcceleratedMobilePagesClicksPercentage) {
        output.WriteRawTag(169, 9);
        output.WriteDouble(ValidAcceleratedMobilePagesClicksPercentage);
      }
      if (HasValuePerAllConversions) {
        output.WriteRawTag(177, 9);
        output.WriteDouble(ValuePerAllConversions);
      }
      if (HasValuePerConversion) {
        output.WriteRawTag(185, 9);
        output.WriteDouble(ValuePerConversion);
      }
      if (HasValuePerCurrentModelAttributedConversion) {
        output.WriteRawTag(193, 9);
        output.WriteDouble(ValuePerCurrentModelAttributedConversion);
      }
      if (HasVideoViewRate) {
        output.WriteRawTag(201, 9);
        output.WriteDouble(VideoViewRate);
      }
      if (HasVideoViews) {
        output.WriteRawTag(208, 9);
        output.WriteInt64(VideoViews);
      }
      if (HasViewThroughConversions) {
        output.WriteRawTag(216, 9);
        output.WriteInt64(ViewThroughConversions);
      }
      if (HasCombinedClicks) {
        output.WriteRawTag(224, 9);
        output.WriteInt64(CombinedClicks);
      }
      if (HasCombinedClicksPerQuery) {
        output.WriteRawTag(233, 9);
        output.WriteDouble(CombinedClicksPerQuery);
      }
      if (HasCombinedQueries) {
        output.WriteRawTag(240, 9);
        output.WriteInt64(CombinedQueries);
      }
      if (HasContentBudgetLostImpressionShare) {
        output.WriteRawTag(249, 9);
        output.WriteDouble(ContentBudgetLostImpressionShare);
      }
      if (HasContentImpressionShare) {
        output.WriteRawTag(129, 10);
        output.WriteDouble(ContentImpressionShare);
      }
      if (HasConversionLastReceivedRequestDateTime) {
        output.WriteRawTag(138, 10);
        output.WriteString(ConversionLastReceivedRequestDateTime);
      }
      if (HasConversionLastConversionDate) {
        output.WriteRawTag(146, 10);
        output.WriteString(ConversionLastConversionDate);
      }
      if (HasContentRankLostImpressionShare) {
        output.WriteRawTag(153, 10);
        output.WriteDouble(ContentRankLostImpressionShare);
      }
      if (HasConversionsFromInteractionsRate) {
        output.WriteRawTag(161, 10);
        output.WriteDouble(ConversionsFromInteractionsRate);
      }
      if (HasConversionsValue) {
        output.WriteRawTag(169, 10);
        output.WriteDouble(ConversionsValue);
      }
      if (HasConversionsValuePerCost) {
        output.WriteRawTag(177, 10);
        output.WriteDouble(ConversionsValuePerCost);
      }
      if (HasConversionsFromInteractionsValuePerInteraction) {
        output.WriteRawTag(185, 10);
        output.WriteDouble(ConversionsFromInteractionsValuePerInteraction);
      }
      if (HasConversions) {
        output.WriteRawTag(193, 10);
        output.WriteDouble(Conversions);
      }
      if (HasCostMicros) {
        output.WriteRawTag(200, 10);
        output.WriteInt64(CostMicros);
      }
      if (HasCostPerAllConversions) {
        output.WriteRawTag(209, 10);
        output.WriteDouble(CostPerAllConversions);
      }
      if (HasCostPerConversion) {
        output.WriteRawTag(217, 10);
        output.WriteDouble(CostPerConversion);
      }
      if (HasCostPerCurrentModelAttributedConversion) {
        output.WriteRawTag(225, 10);
        output.WriteDouble(CostPerCurrentModelAttributedConversion);
      }
      if (HasCrossDeviceConversions) {
        output.WriteRawTag(233, 10);
        output.WriteDouble(CrossDeviceConversions);
      }
      if (HasCtr) {
        output.WriteRawTag(241, 10);
        output.WriteDouble(Ctr);
      }
      if (HasCurrentModelAttributedConversions) {
        output.WriteRawTag(249, 10);
        output.WriteDouble(CurrentModelAttributedConversions);
      }
      if (HasCurrentModelAttributedConversionsFromInteractionsRate) {
        output.WriteRawTag(129, 11);
        output.WriteDouble(CurrentModelAttributedConversionsFromInteractionsRate);
      }
      if (HasCurrentModelAttributedConversionsFromInteractionsValuePerInteraction) {
        output.WriteRawTag(137, 11);
        output.WriteDouble(CurrentModelAttributedConversionsFromInteractionsValuePerInteraction);
      }
      if (HasCurrentModelAttributedConversionsValue) {
        output.WriteRawTag(145, 11);
        output.WriteDouble(CurrentModelAttributedConversionsValue);
      }
      if (HasCurrentModelAttributedConversionsValuePerCost) {
        output.WriteRawTag(153, 11);
        output.WriteDouble(CurrentModelAttributedConversionsValuePerCost);
      }
      if (HasEngagementRate) {
        output.WriteRawTag(161, 11);
        output.WriteDouble(EngagementRate);
      }
      if (HasEngagements) {
        output.WriteRawTag(168, 11);
        output.WriteInt64(Engagements);
      }
      if (HasAbsoluteTopImpressionPercentage) {
        output.WriteRawTag(185, 11);
        output.WriteDouble(AbsoluteTopImpressionPercentage);
      }
      if (HasActiveViewCpm) {
        output.WriteRawTag(193, 11);
        output.WriteDouble(ActiveViewCpm);
      }
      if (HasActiveViewCtr) {
        output.WriteRawTag(201, 11);
        output.WriteDouble(ActiveViewCtr);
      }
      if (HasActiveViewImpressions) {
        output.WriteRawTag(208, 11);
        output.WriteInt64(ActiveViewImpressions);
      }
      if (HasActiveViewMeasurability) {
        output.WriteRawTag(217, 11);
        output.WriteDouble(ActiveViewMeasurability);
      }
      if (HasActiveViewMeasurableCostMicros) {
        output.WriteRawTag(224, 11);
        output.WriteInt64(ActiveViewMeasurableCostMicros);
      }
      if (HasActiveViewMeasurableImpressions) {
        output.WriteRawTag(232, 11);
        output.WriteInt64(ActiveViewMeasurableImpressions);
      }
      if (HasActiveViewViewability) {
        output.WriteRawTag(241, 11);
        output.WriteDouble(ActiveViewViewability);
      }
      if (HasAllConversionsFromInteractionsRate) {
        output.WriteRawTag(249, 11);
        output.WriteDouble(AllConversionsFromInteractionsRate);
      }
      if (HasAllConversionsValue) {
        output.WriteRawTag(129, 12);
        output.WriteDouble(AllConversionsValue);
      }
      if (HasAllConversions) {
        output.WriteRawTag(137, 12);
        output.WriteDouble(AllConversions);
      }
      if (HasAllConversionsValuePerCost) {
        output.WriteRawTag(145, 12);
        output.WriteDouble(AllConversionsValuePerCost);
      }
      if (HasAllConversionsFromClickToCall) {
        output.WriteRawTag(153, 12);
        output.WriteDouble(AllConversionsFromClickToCall);
      }
      if (HasAllConversionsFromDirections) {
        output.WriteRawTag(161, 12);
        output.WriteDouble(AllConversionsFromDirections);
      }
      if (HasAllConversionsFromInteractionsValuePerInteraction) {
        output.WriteRawTag(169, 12);
        output.WriteDouble(AllConversionsFromInteractionsValuePerInteraction);
      }
      if (HasAllConversionsFromMenu) {
        output.WriteRawTag(177, 12);
        output.WriteDouble(AllConversionsFromMenu);
      }
      if (HasAllConversionsFromOrder) {
        output.WriteRawTag(185, 12);
        output.WriteDouble(AllConversionsFromOrder);
      }
      if (HasAllConversionsFromOtherEngagement) {
        output.WriteRawTag(193, 12);
        output.WriteDouble(AllConversionsFromOtherEngagement);
      }
      if (HasAllConversionsFromStoreVisit) {
        output.WriteRawTag(201, 12);
        output.WriteDouble(AllConversionsFromStoreVisit);
      }
      if (HasAllConversionsFromStoreWebsite) {
        output.WriteRawTag(209, 12);
        output.WriteDouble(AllConversionsFromStoreWebsite);
      }
      if (HasAverageCost) {
        output.WriteRawTag(217, 12);
        output.WriteDouble(AverageCost);
      }
      if (HasAverageCpc) {
        output.WriteRawTag(225, 12);
        output.WriteDouble(AverageCpc);
      }
      if (HasAverageCpe) {
        output.WriteRawTag(233, 12);
        output.WriteDouble(AverageCpe);
      }
      if (HasAverageCpm) {
        output.WriteRawTag(241, 12);
        output.WriteDouble(AverageCpm);
      }
      if (HasAverageCpv) {
        output.WriteRawTag(249, 12);
        output.WriteDouble(AverageCpv);
      }
      if (HasAveragePageViews) {
        output.WriteRawTag(129, 13);
        output.WriteDouble(AveragePageViews);
      }
      if (HasAverageTimeOnSite) {
        output.WriteRawTag(137, 13);
        output.WriteDouble(AverageTimeOnSite);
      }
      if (HasBenchmarkAverageMaxCpc) {
        output.WriteRawTag(145, 13);
        output.WriteDouble(BenchmarkAverageMaxCpc);
      }
      if (HasBenchmarkCtr) {
        output.WriteRawTag(153, 13);
        output.WriteDouble(BenchmarkCtr);
      }
      if (HasBounceRate) {
        output.WriteRawTag(161, 13);
        output.WriteDouble(BounceRate);
      }
      if (HasHotelAverageLeadValueMicros) {
        output.WriteRawTag(169, 13);
        output.WriteDouble(HotelAverageLeadValueMicros);
      }
      if (HasHotelPriceDifferencePercentage) {
        output.WriteRawTag(177, 13);
        output.WriteDouble(HotelPriceDifferencePercentage);
      }
      if (HasHotelEligibleImpressions) {
        output.WriteRawTag(184, 13);
        output.WriteInt64(HotelEligibleImpressions);
      }
      if (HasHistoricalQualityScore) {
        output.WriteRawTag(192, 13);
        output.WriteInt64(HistoricalQualityScore);
      }
      if (HasGmailForwards) {
        output.WriteRawTag(200, 13);
        output.WriteInt64(GmailForwards);
      }
      if (HasGmailSaves) {
        output.WriteRawTag(208, 13);
        output.WriteInt64(GmailSaves);
      }
      if (HasGmailSecondaryClicks) {
        output.WriteRawTag(216, 13);
        output.WriteInt64(GmailSecondaryClicks);
      }
      if (HasImpressionsFromStoreReach) {
        output.WriteRawTag(224, 13);
        output.WriteInt64(ImpressionsFromStoreReach);
      }
      if (HasImpressions) {
        output.WriteRawTag(232, 13);
        output.WriteInt64(Impressions);
      }
      if (HasInteractionRate) {
        output.WriteRawTag(241, 13);
        output.WriteDouble(InteractionRate);
      }
      if (HasInteractions) {
        output.WriteRawTag(248, 13);
        output.WriteInt64(Interactions);
      }
      if (HasInvalidClickRate) {
        output.WriteRawTag(129, 14);
        output.WriteDouble(InvalidClickRate);
      }
      if (HasInvalidClicks) {
        output.WriteRawTag(136, 14);
        output.WriteInt64(InvalidClicks);
      }
      if (HasMessageChats) {
        output.WriteRawTag(144, 14);
        output.WriteInt64(MessageChats);
      }
      if (HasMessageImpressions) {
        output.WriteRawTag(152, 14);
        output.WriteInt64(MessageImpressions);
      }
      if (HasMessageChatRate) {
        output.WriteRawTag(161, 14);
        output.WriteDouble(MessageChatRate);
      }
      if (HasMobileFriendlyClicksPercentage) {
        output.WriteRawTag(169, 14);
        output.WriteDouble(MobileFriendlyClicksPercentage);
      }
      if (HasOrganicClicks) {
        output.WriteRawTag(176, 14);
        output.WriteInt64(OrganicClicks);
      }
      if (HasOrganicClicksPerQuery) {
        output.WriteRawTag(185, 14);
        output.WriteDouble(OrganicClicksPerQuery);
      }
      if (HasOrganicImpressions) {
        output.WriteRawTag(192, 14);
        output.WriteInt64(OrganicImpressions);
      }
      if (HasOrganicImpressionsPerQuery) {
        output.WriteRawTag(201, 14);
        output.WriteDouble(OrganicImpressionsPerQuery);
      }
      if (HasOrganicQueries) {
        output.WriteRawTag(208, 14);
        output.WriteInt64(OrganicQueries);
      }
      if (HasPercentNewVisitors) {
        output.WriteRawTag(217, 14);
        output.WriteDouble(PercentNewVisitors);
      }
      if (HasPhoneCalls) {
        output.WriteRawTag(224, 14);
        output.WriteInt64(PhoneCalls);
      }
      if (HasPhoneImpressions) {
        output.WriteRawTag(232, 14);
        output.WriteInt64(PhoneImpressions);
      }
      if (HasPhoneThroughRate) {
        output.WriteRawTag(241, 14);
        output.WriteDouble(PhoneThroughRate);
      }
      if (HasRelativeCtr) {
        output.WriteRawTag(249, 14);
        output.WriteDouble(RelativeCtr);
      }
      if (AllConversionsValueByConversionDate != 0D) {
        output.WriteRawTag(129, 15);
        output.WriteDouble(AllConversionsValueByConversionDate);
      }
      if (AllConversionsByConversionDate != 0D) {
        output.WriteRawTag(137, 15);
        output.WriteDouble(AllConversionsByConversionDate);
      }
      if (ConversionsValueByConversionDate != 0D) {
        output.WriteRawTag(145, 15);
        output.WriteDouble(ConversionsValueByConversionDate);
      }
      if (ConversionsByConversionDate != 0D) {
        output.WriteRawTag(153, 15);
        output.WriteDouble(ConversionsByConversionDate);
      }
      if (HasValuePerAllConversionsByConversionDate) {
        output.WriteRawTag(161, 15);
        output.WriteDouble(ValuePerAllConversionsByConversionDate);
      }
      if (HasValuePerConversionsByConversionDate) {
        output.WriteRawTag(169, 15);
        output.WriteDouble(ValuePerConversionsByConversionDate);
      }
      if (SkAdNetworkConversions != 0L) {
        output.WriteRawTag(176, 15);
        output.WriteInt64(SkAdNetworkConversions);
      }
      if (HasOptimizationScoreUplift) {
        output.WriteRawTag(185, 15);
        output.WriteDouble(OptimizationScoreUplift);
      }
      if (HasOptimizationScoreUrl) {
        output.WriteRawTag(194, 15);
        output.WriteString(OptimizationScoreUrl);
      }
      if (HasBiddableAppInstallConversions) {
        output.WriteRawTag(241, 15);
        output.WriteDouble(BiddableAppInstallConversions);
      }
      if (HasBiddableAppPostInstallConversions) {
        output.WriteRawTag(249, 15);
        output.WriteDouble(BiddableAppPostInstallConversions);
      }
      if (HasHotelCommissionRateMicros) {
        output.WriteRawTag(128, 16);
        output.WriteInt64(HotelCommissionRateMicros);
      }
      if (HasHotelExpectedCommissionCost) {
        output.WriteRawTag(137, 16);
        output.WriteDouble(HotelExpectedCommissionCost);
      }
      if (HasAuctionInsightSearchAbsoluteTopImpressionPercentage) {
        output.WriteRawTag(145, 16);
        output.WriteDouble(AuctionInsightSearchAbsoluteTopImpressionPercentage);
      }
      if (HasAuctionInsightSearchImpressionShare) {
        output.WriteRawTag(153, 16);
        output.WriteDouble(AuctionInsightSearchImpressionShare);
      }
      if (HasAuctionInsightSearchOutrankingShare) {
        output.WriteRawTag(161, 16);
        output.WriteDouble(AuctionInsightSearchOutrankingShare);
      }
      if (HasAuctionInsightSearchOverlapRate) {
        output.WriteRawTag(169, 16);
        output.WriteDouble(AuctionInsightSearchOverlapRate);
      }
      if (HasAuctionInsightSearchPositionAboveRate) {
        output.WriteRawTag(177, 16);
        output.WriteDouble(AuctionInsightSearchPositionAboveRate);
      }
      if (HasAuctionInsightSearchTopImpressionPercentage) {
        output.WriteRawTag(185, 16);
        output.WriteDouble(AuctionInsightSearchTopImpressionPercentage);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HistoricalCreativeQualityScore != global::Google.Ads.GoogleAds.V11.Enums.QualityScoreBucketEnum.Types.QualityScoreBucket.Unspecified) {
        output.WriteRawTag(128, 5);
        output.WriteEnum((int) HistoricalCreativeQualityScore);
      }
      if (HistoricalLandingPageQualityScore != global::Google.Ads.GoogleAds.V11.Enums.QualityScoreBucketEnum.Types.QualityScoreBucket.Unspecified) {
        output.WriteRawTag(136, 5);
        output.WriteEnum((int) HistoricalLandingPageQualityScore);
      }
      if (HistoricalSearchPredictedCtr != global::Google.Ads.GoogleAds.V11.Enums.QualityScoreBucketEnum.Types.QualityScoreBucket.Unspecified) {
        output.WriteRawTag(152, 5);
        output.WriteEnum((int) HistoricalSearchPredictedCtr);
      }
      interactionEventTypes_.WriteTo(ref output, _repeated_interactionEventTypes_codec);
      if (HasClicks) {
        output.WriteRawTag(152, 8);
        output.WriteInt64(Clicks);
      }
      if (HasVideoQuartileP100Rate) {
        output.WriteRawTag(161, 8);
        output.WriteDouble(VideoQuartileP100Rate);
      }
      if (HasVideoQuartileP25Rate) {
        output.WriteRawTag(169, 8);
        output.WriteDouble(VideoQuartileP25Rate);
      }
      if (HasVideoQuartileP50Rate) {
        output.WriteRawTag(177, 8);
        output.WriteDouble(VideoQuartileP50Rate);
      }
      if (HasVideoQuartileP75Rate) {
        output.WriteRawTag(185, 8);
        output.WriteDouble(VideoQuartileP75Rate);
      }
      if (HasSearchAbsoluteTopImpressionShare) {
        output.WriteRawTag(193, 8);
        output.WriteDouble(SearchAbsoluteTopImpressionShare);
      }
      if (HasSearchBudgetLostAbsoluteTopImpressionShare) {
        output.WriteRawTag(201, 8);
        output.WriteDouble(SearchBudgetLostAbsoluteTopImpressionShare);
      }
      if (HasSearchBudgetLostImpressionShare) {
        output.WriteRawTag(209, 8);
        output.WriteDouble(SearchBudgetLostImpressionShare);
      }
      if (HasSearchBudgetLostTopImpressionShare) {
        output.WriteRawTag(217, 8);
        output.WriteDouble(SearchBudgetLostTopImpressionShare);
      }
      if (HasSearchClickShare) {
        output.WriteRawTag(225, 8);
        output.WriteDouble(SearchClickShare);
      }
      if (HasSearchExactMatchImpressionShare) {
        output.WriteRawTag(233, 8);
        output.WriteDouble(SearchExactMatchImpressionShare);
      }
      if (HasSearchImpressionShare) {
        output.WriteRawTag(241, 8);
        output.WriteDouble(SearchImpressionShare);
      }
      if (HasSearchRankLostAbsoluteTopImpressionShare) {
        output.WriteRawTag(249, 8);
        output.WriteDouble(SearchRankLostAbsoluteTopImpressionShare);
      }
      if (HasSearchRankLostImpressionShare) {
        output.WriteRawTag(129, 9);
        output.WriteDouble(SearchRankLostImpressionShare);
      }
      if (HasSearchRankLostTopImpressionShare) {
        output.WriteRawTag(137, 9);
        output.WriteDouble(SearchRankLostTopImpressionShare);
      }
      if (HasSearchTopImpressionShare) {
        output.WriteRawTag(145, 9);
        output.WriteDouble(SearchTopImpressionShare);
      }
      if (HasSpeedScore) {
        output.WriteRawTag(152, 9);
        output.WriteInt64(SpeedScore);
      }
      if (HasTopImpressionPercentage) {
        output.WriteRawTag(161, 9);
        output.WriteDouble(TopImpressionPercentage);
      }
      if (HasValidAcceleratedMobilePagesClicksPercentage) {
        output.WriteRawTag(169, 9);
        output.WriteDouble(ValidAcceleratedMobilePagesClicksPercentage);
      }
      if (HasValuePerAllConversions) {
        output.WriteRawTag(177, 9);
        output.WriteDouble(ValuePerAllConversions);
      }
      if (HasValuePerConversion) {
        output.WriteRawTag(185, 9);
        output.WriteDouble(ValuePerConversion);
      }
      if (HasValuePerCurrentModelAttributedConversion) {
        output.WriteRawTag(193, 9);
        output.WriteDouble(ValuePerCurrentModelAttributedConversion);
      }
      if (HasVideoViewRate) {
        output.WriteRawTag(201, 9);
        output.WriteDouble(VideoViewRate);
      }
      if (HasVideoViews) {
        output.WriteRawTag(208, 9);
        output.WriteInt64(VideoViews);
      }
      if (HasViewThroughConversions) {
        output.WriteRawTag(216, 9);
        output.WriteInt64(ViewThroughConversions);
      }
      if (HasCombinedClicks) {
        output.WriteRawTag(224, 9);
        output.WriteInt64(CombinedClicks);
      }
      if (HasCombinedClicksPerQuery) {
        output.WriteRawTag(233, 9);
        output.WriteDouble(CombinedClicksPerQuery);
      }
      if (HasCombinedQueries) {
        output.WriteRawTag(240, 9);
        output.WriteInt64(CombinedQueries);
      }
      if (HasContentBudgetLostImpressionShare) {
        output.WriteRawTag(249, 9);
        output.WriteDouble(ContentBudgetLostImpressionShare);
      }
      if (HasContentImpressionShare) {
        output.WriteRawTag(129, 10);
        output.WriteDouble(ContentImpressionShare);
      }
      if (HasConversionLastReceivedRequestDateTime) {
        output.WriteRawTag(138, 10);
        output.WriteString(ConversionLastReceivedRequestDateTime);
      }
      if (HasConversionLastConversionDate) {
        output.WriteRawTag(146, 10);
        output.WriteString(ConversionLastConversionDate);
      }
      if (HasContentRankLostImpressionShare) {
        output.WriteRawTag(153, 10);
        output.WriteDouble(ContentRankLostImpressionShare);
      }
      if (HasConversionsFromInteractionsRate) {
        output.WriteRawTag(161, 10);
        output.WriteDouble(ConversionsFromInteractionsRate);
      }
      if (HasConversionsValue) {
        output.WriteRawTag(169, 10);
        output.WriteDouble(ConversionsValue);
      }
      if (HasConversionsValuePerCost) {
        output.WriteRawTag(177, 10);
        output.WriteDouble(ConversionsValuePerCost);
      }
      if (HasConversionsFromInteractionsValuePerInteraction) {
        output.WriteRawTag(185, 10);
        output.WriteDouble(ConversionsFromInteractionsValuePerInteraction);
      }
      if (HasConversions) {
        output.WriteRawTag(193, 10);
        output.WriteDouble(Conversions);
      }
      if (HasCostMicros) {
        output.WriteRawTag(200, 10);
        output.WriteInt64(CostMicros);
      }
      if (HasCostPerAllConversions) {
        output.WriteRawTag(209, 10);
        output.WriteDouble(CostPerAllConversions);
      }
      if (HasCostPerConversion) {
        output.WriteRawTag(217, 10);
        output.WriteDouble(CostPerConversion);
      }
      if (HasCostPerCurrentModelAttributedConversion) {
        output.WriteRawTag(225, 10);
        output.WriteDouble(CostPerCurrentModelAttributedConversion);
      }
      if (HasCrossDeviceConversions) {
        output.WriteRawTag(233, 10);
        output.WriteDouble(CrossDeviceConversions);
      }
      if (HasCtr) {
        output.WriteRawTag(241, 10);
        output.WriteDouble(Ctr);
      }
      if (HasCurrentModelAttributedConversions) {
        output.WriteRawTag(249, 10);
        output.WriteDouble(CurrentModelAttributedConversions);
      }
      if (HasCurrentModelAttributedConversionsFromInteractionsRate) {
        output.WriteRawTag(129, 11);
        output.WriteDouble(CurrentModelAttributedConversionsFromInteractionsRate);
      }
      if (HasCurrentModelAttributedConversionsFromInteractionsValuePerInteraction) {
        output.WriteRawTag(137, 11);
        output.WriteDouble(CurrentModelAttributedConversionsFromInteractionsValuePerInteraction);
      }
      if (HasCurrentModelAttributedConversionsValue) {
        output.WriteRawTag(145, 11);
        output.WriteDouble(CurrentModelAttributedConversionsValue);
      }
      if (HasCurrentModelAttributedConversionsValuePerCost) {
        output.WriteRawTag(153, 11);
        output.WriteDouble(CurrentModelAttributedConversionsValuePerCost);
      }
      if (HasEngagementRate) {
        output.WriteRawTag(161, 11);
        output.WriteDouble(EngagementRate);
      }
      if (HasEngagements) {
        output.WriteRawTag(168, 11);
        output.WriteInt64(Engagements);
      }
      if (HasAbsoluteTopImpressionPercentage) {
        output.WriteRawTag(185, 11);
        output.WriteDouble(AbsoluteTopImpressionPercentage);
      }
      if (HasActiveViewCpm) {
        output.WriteRawTag(193, 11);
        output.WriteDouble(ActiveViewCpm);
      }
      if (HasActiveViewCtr) {
        output.WriteRawTag(201, 11);
        output.WriteDouble(ActiveViewCtr);
      }
      if (HasActiveViewImpressions) {
        output.WriteRawTag(208, 11);
        output.WriteInt64(ActiveViewImpressions);
      }
      if (HasActiveViewMeasurability) {
        output.WriteRawTag(217, 11);
        output.WriteDouble(ActiveViewMeasurability);
      }
      if (HasActiveViewMeasurableCostMicros) {
        output.WriteRawTag(224, 11);
        output.WriteInt64(ActiveViewMeasurableCostMicros);
      }
      if (HasActiveViewMeasurableImpressions) {
        output.WriteRawTag(232, 11);
        output.WriteInt64(ActiveViewMeasurableImpressions);
      }
      if (HasActiveViewViewability) {
        output.WriteRawTag(241, 11);
        output.WriteDouble(ActiveViewViewability);
      }
      if (HasAllConversionsFromInteractionsRate) {
        output.WriteRawTag(249, 11);
        output.WriteDouble(AllConversionsFromInteractionsRate);
      }
      if (HasAllConversionsValue) {
        output.WriteRawTag(129, 12);
        output.WriteDouble(AllConversionsValue);
      }
      if (HasAllConversions) {
        output.WriteRawTag(137, 12);
        output.WriteDouble(AllConversions);
      }
      if (HasAllConversionsValuePerCost) {
        output.WriteRawTag(145, 12);
        output.WriteDouble(AllConversionsValuePerCost);
      }
      if (HasAllConversionsFromClickToCall) {
        output.WriteRawTag(153, 12);
        output.WriteDouble(AllConversionsFromClickToCall);
      }
      if (HasAllConversionsFromDirections) {
        output.WriteRawTag(161, 12);
        output.WriteDouble(AllConversionsFromDirections);
      }
      if (HasAllConversionsFromInteractionsValuePerInteraction) {
        output.WriteRawTag(169, 12);
        output.WriteDouble(AllConversionsFromInteractionsValuePerInteraction);
      }
      if (HasAllConversionsFromMenu) {
        output.WriteRawTag(177, 12);
        output.WriteDouble(AllConversionsFromMenu);
      }
      if (HasAllConversionsFromOrder) {
        output.WriteRawTag(185, 12);
        output.WriteDouble(AllConversionsFromOrder);
      }
      if (HasAllConversionsFromOtherEngagement) {
        output.WriteRawTag(193, 12);
        output.WriteDouble(AllConversionsFromOtherEngagement);
      }
      if (HasAllConversionsFromStoreVisit) {
        output.WriteRawTag(201, 12);
        output.WriteDouble(AllConversionsFromStoreVisit);
      }
      if (HasAllConversionsFromStoreWebsite) {
        output.WriteRawTag(209, 12);
        output.WriteDouble(AllConversionsFromStoreWebsite);
      }
      if (HasAverageCost) {
        output.WriteRawTag(217, 12);
        output.WriteDouble(AverageCost);
      }
      if (HasAverageCpc) {
        output.WriteRawTag(225, 12);
        output.WriteDouble(AverageCpc);
      }
      if (HasAverageCpe) {
        output.WriteRawTag(233, 12);
        output.WriteDouble(AverageCpe);
      }
      if (HasAverageCpm) {
        output.WriteRawTag(241, 12);
        output.WriteDouble(AverageCpm);
      }
      if (HasAverageCpv) {
        output.WriteRawTag(249, 12);
        output.WriteDouble(AverageCpv);
      }
      if (HasAveragePageViews) {
        output.WriteRawTag(129, 13);
        output.WriteDouble(AveragePageViews);
      }
      if (HasAverageTimeOnSite) {
        output.WriteRawTag(137, 13);
        output.WriteDouble(AverageTimeOnSite);
      }
      if (HasBenchmarkAverageMaxCpc) {
        output.WriteRawTag(145, 13);
        output.WriteDouble(BenchmarkAverageMaxCpc);
      }
      if (HasBenchmarkCtr) {
        output.WriteRawTag(153, 13);
        output.WriteDouble(BenchmarkCtr);
      }
      if (HasBounceRate) {
        output.WriteRawTag(161, 13);
        output.WriteDouble(BounceRate);
      }
      if (HasHotelAverageLeadValueMicros) {
        output.WriteRawTag(169, 13);
        output.WriteDouble(HotelAverageLeadValueMicros);
      }
      if (HasHotelPriceDifferencePercentage) {
        output.WriteRawTag(177, 13);
        output.WriteDouble(HotelPriceDifferencePercentage);
      }
      if (HasHotelEligibleImpressions) {
        output.WriteRawTag(184, 13);
        output.WriteInt64(HotelEligibleImpressions);
      }
      if (HasHistoricalQualityScore) {
        output.WriteRawTag(192, 13);
        output.WriteInt64(HistoricalQualityScore);
      }
      if (HasGmailForwards) {
        output.WriteRawTag(200, 13);
        output.WriteInt64(GmailForwards);
      }
      if (HasGmailSaves) {
        output.WriteRawTag(208, 13);
        output.WriteInt64(GmailSaves);
      }
      if (HasGmailSecondaryClicks) {
        output.WriteRawTag(216, 13);
        output.WriteInt64(GmailSecondaryClicks);
      }
      if (HasImpressionsFromStoreReach) {
        output.WriteRawTag(224, 13);
        output.WriteInt64(ImpressionsFromStoreReach);
      }
      if (HasImpressions) {
        output.WriteRawTag(232, 13);
        output.WriteInt64(Impressions);
      }
      if (HasInteractionRate) {
        output.WriteRawTag(241, 13);
        output.WriteDouble(InteractionRate);
      }
      if (HasInteractions) {
        output.WriteRawTag(248, 13);
        output.WriteInt64(Interactions);
      }
      if (HasInvalidClickRate) {
        output.WriteRawTag(129, 14);
        output.WriteDouble(InvalidClickRate);
      }
      if (HasInvalidClicks) {
        output.WriteRawTag(136, 14);
        output.WriteInt64(InvalidClicks);
      }
      if (HasMessageChats) {
        output.WriteRawTag(144, 14);
        output.WriteInt64(MessageChats);
      }
      if (HasMessageImpressions) {
        output.WriteRawTag(152, 14);
        output.WriteInt64(MessageImpressions);
      }
      if (HasMessageChatRate) {
        output.WriteRawTag(161, 14);
        output.WriteDouble(MessageChatRate);
      }
      if (HasMobileFriendlyClicksPercentage) {
        output.WriteRawTag(169, 14);
        output.WriteDouble(MobileFriendlyClicksPercentage);
      }
      if (HasOrganicClicks) {
        output.WriteRawTag(176, 14);
        output.WriteInt64(OrganicClicks);
      }
      if (HasOrganicClicksPerQuery) {
        output.WriteRawTag(185, 14);
        output.WriteDouble(OrganicClicksPerQuery);
      }
      if (HasOrganicImpressions) {
        output.WriteRawTag(192, 14);
        output.WriteInt64(OrganicImpressions);
      }
      if (HasOrganicImpressionsPerQuery) {
        output.WriteRawTag(201, 14);
        output.WriteDouble(OrganicImpressionsPerQuery);
      }
      if (HasOrganicQueries) {
        output.WriteRawTag(208, 14);
        output.WriteInt64(OrganicQueries);
      }
      if (HasPercentNewVisitors) {
        output.WriteRawTag(217, 14);
        output.WriteDouble(PercentNewVisitors);
      }
      if (HasPhoneCalls) {
        output.WriteRawTag(224, 14);
        output.WriteInt64(PhoneCalls);
      }
      if (HasPhoneImpressions) {
        output.WriteRawTag(232, 14);
        output.WriteInt64(PhoneImpressions);
      }
      if (HasPhoneThroughRate) {
        output.WriteRawTag(241, 14);
        output.WriteDouble(PhoneThroughRate);
      }
      if (HasRelativeCtr) {
        output.WriteRawTag(249, 14);
        output.WriteDouble(RelativeCtr);
      }
      if (AllConversionsValueByConversionDate != 0D) {
        output.WriteRawTag(129, 15);
        output.WriteDouble(AllConversionsValueByConversionDate);
      }
      if (AllConversionsByConversionDate != 0D) {
        output.WriteRawTag(137, 15);
        output.WriteDouble(AllConversionsByConversionDate);
      }
      if (ConversionsValueByConversionDate != 0D) {
        output.WriteRawTag(145, 15);
        output.WriteDouble(ConversionsValueByConversionDate);
      }
      if (ConversionsByConversionDate != 0D) {
        output.WriteRawTag(153, 15);
        output.WriteDouble(ConversionsByConversionDate);
      }
      if (HasValuePerAllConversionsByConversionDate) {
        output.WriteRawTag(161, 15);
        output.WriteDouble(ValuePerAllConversionsByConversionDate);
      }
      if (HasValuePerConversionsByConversionDate) {
        output.WriteRawTag(169, 15);
        output.WriteDouble(ValuePerConversionsByConversionDate);
      }
      if (SkAdNetworkConversions != 0L) {
        output.WriteRawTag(176, 15);
        output.WriteInt64(SkAdNetworkConversions);
      }
      if (HasOptimizationScoreUplift) {
        output.WriteRawTag(185, 15);
        output.WriteDouble(OptimizationScoreUplift);
      }
      if (HasOptimizationScoreUrl) {
        output.WriteRawTag(194, 15);
        output.WriteString(OptimizationScoreUrl);
      }
      if (HasBiddableAppInstallConversions) {
        output.WriteRawTag(241, 15);
        output.WriteDouble(BiddableAppInstallConversions);
      }
      if (HasBiddableAppPostInstallConversions) {
        output.WriteRawTag(249, 15);
        output.WriteDouble(BiddableAppPostInstallConversions);
      }
      if (HasHotelCommissionRateMicros) {
        output.WriteRawTag(128, 16);
        output.WriteInt64(HotelCommissionRateMicros);
      }
      if (HasHotelExpectedCommissionCost) {
        output.WriteRawTag(137, 16);
        output.WriteDouble(HotelExpectedCommissionCost);
      }
      if (HasAuctionInsightSearchAbsoluteTopImpressionPercentage) {
        output.WriteRawTag(145, 16);
        output.WriteDouble(AuctionInsightSearchAbsoluteTopImpressionPercentage);
      }
      if (HasAuctionInsightSearchImpressionShare) {
        output.WriteRawTag(153, 16);
        output.WriteDouble(AuctionInsightSearchImpressionShare);
      }
      if (HasAuctionInsightSearchOutrankingShare) {
        output.WriteRawTag(161, 16);
        output.WriteDouble(AuctionInsightSearchOutrankingShare);
      }
      if (HasAuctionInsightSearchOverlapRate) {
        output.WriteRawTag(169, 16);
        output.WriteDouble(AuctionInsightSearchOverlapRate);
      }
      if (HasAuctionInsightSearchPositionAboveRate) {
        output.WriteRawTag(177, 16);
        output.WriteDouble(AuctionInsightSearchPositionAboveRate);
      }
      if (HasAuctionInsightSearchTopImpressionPercentage) {
        output.WriteRawTag(185, 16);
        output.WriteDouble(AuctionInsightSearchTopImpressionPercentage);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (HasAbsoluteTopImpressionPercentage) {
        size += 2 + 8;
      }
      if (HasActiveViewCpm) {
        size += 2 + 8;
      }
      if (HasActiveViewCtr) {
        size += 2 + 8;
      }
      if (HasActiveViewImpressions) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(ActiveViewImpressions);
      }
      if (HasActiveViewMeasurability) {
        size += 2 + 8;
      }
      if (HasActiveViewMeasurableCostMicros) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(ActiveViewMeasurableCostMicros);
      }
      if (HasActiveViewMeasurableImpressions) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(ActiveViewMeasurableImpressions);
      }
      if (HasActiveViewViewability) {
        size += 2 + 8;
      }
      if (HasAllConversionsFromInteractionsRate) {
        size += 2 + 8;
      }
      if (HasAllConversionsValue) {
        size += 2 + 8;
      }
      if (AllConversionsValueByConversionDate != 0D) {
        size += 2 + 8;
      }
      if (HasAllConversions) {
        size += 2 + 8;
      }
      if (AllConversionsByConversionDate != 0D) {
        size += 2 + 8;
      }
      if (HasAllConversionsValuePerCost) {
        size += 2 + 8;
      }
      if (HasAllConversionsFromClickToCall) {
        size += 2 + 8;
      }
      if (HasAllConversionsFromDirections) {
        size += 2 + 8;
      }
      if (HasAllConversionsFromInteractionsValuePerInteraction) {
        size += 2 + 8;
      }
      if (HasAllConversionsFromMenu) {
        size += 2 + 8;
      }
      if (HasAllConversionsFromOrder) {
        size += 2 + 8;
      }
      if (HasAllConversionsFromOtherEngagement) {
        size += 2 + 8;
      }
      if (HasAllConversionsFromStoreVisit) {
        size += 2 + 8;
      }
      if (HasAllConversionsFromStoreWebsite) {
        size += 2 + 8;
      }
      if (HasAuctionInsightSearchAbsoluteTopImpressionPercentage) {
        size += 2 + 8;
      }
      if (HasAuctionInsightSearchImpressionShare) {
        size += 2 + 8;
      }
      if (HasAuctionInsightSearchOutrankingShare) {
        size += 2 + 8;
      }
      if (HasAuctionInsightSearchOverlapRate) {
        size += 2 + 8;
      }
      if (HasAuctionInsightSearchPositionAboveRate) {
        size += 2 + 8;
      }
      if (HasAuctionInsightSearchTopImpressionPercentage) {
        size += 2 + 8;
      }
      if (HasAverageCost) {
        size += 2 + 8;
      }
      if (HasAverageCpc) {
        size += 2 + 8;
      }
      if (HasAverageCpe) {
        size += 2 + 8;
      }
      if (HasAverageCpm) {
        size += 2 + 8;
      }
      if (HasAverageCpv) {
        size += 2 + 8;
      }
      if (HasAveragePageViews) {
        size += 2 + 8;
      }
      if (HasAverageTimeOnSite) {
        size += 2 + 8;
      }
      if (HasBenchmarkAverageMaxCpc) {
        size += 2 + 8;
      }
      if (HasBiddableAppInstallConversions) {
        size += 2 + 8;
      }
      if (HasBiddableAppPostInstallConversions) {
        size += 2 + 8;
      }
      if (HasBenchmarkCtr) {
        size += 2 + 8;
      }
      if (HasBounceRate) {
        size += 2 + 8;
      }
      if (HasClicks) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(Clicks);
      }
      if (HasCombinedClicks) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(CombinedClicks);
      }
      if (HasCombinedClicksPerQuery) {
        size += 2 + 8;
      }
      if (HasCombinedQueries) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(CombinedQueries);
      }
      if (HasContentBudgetLostImpressionShare) {
        size += 2 + 8;
      }
      if (HasContentImpressionShare) {
        size += 2 + 8;
      }
      if (HasConversionLastReceivedRequestDateTime) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(ConversionLastReceivedRequestDateTime);
      }
      if (HasConversionLastConversionDate) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(ConversionLastConversionDate);
      }
      if (HasContentRankLostImpressionShare) {
        size += 2 + 8;
      }
      if (HasConversionsFromInteractionsRate) {
        size += 2 + 8;
      }
      if (HasConversionsValue) {
        size += 2 + 8;
      }
      if (ConversionsValueByConversionDate != 0D) {
        size += 2 + 8;
      }
      if (HasConversionsValuePerCost) {
        size += 2 + 8;
      }
      if (HasConversionsFromInteractionsValuePerInteraction) {
        size += 2 + 8;
      }
      if (HasConversions) {
        size += 2 + 8;
      }
      if (ConversionsByConversionDate != 0D) {
        size += 2 + 8;
      }
      if (HasCostMicros) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(CostMicros);
      }
      if (HasCostPerAllConversions) {
        size += 2 + 8;
      }
      if (HasCostPerConversion) {
        size += 2 + 8;
      }
      if (HasCostPerCurrentModelAttributedConversion) {
        size += 2 + 8;
      }
      if (HasCrossDeviceConversions) {
        size += 2 + 8;
      }
      if (HasCtr) {
        size += 2 + 8;
      }
      if (HasCurrentModelAttributedConversions) {
        size += 2 + 8;
      }
      if (HasCurrentModelAttributedConversionsFromInteractionsRate) {
        size += 2 + 8;
      }
      if (HasCurrentModelAttributedConversionsFromInteractionsValuePerInteraction) {
        size += 2 + 8;
      }
      if (HasCurrentModelAttributedConversionsValue) {
        size += 2 + 8;
      }
      if (HasCurrentModelAttributedConversionsValuePerCost) {
        size += 2 + 8;
      }
      if (HasEngagementRate) {
        size += 2 + 8;
      }
      if (HasEngagements) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(Engagements);
      }
      if (HasHotelAverageLeadValueMicros) {
        size += 2 + 8;
      }
      if (HasHotelCommissionRateMicros) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(HotelCommissionRateMicros);
      }
      if (HasHotelExpectedCommissionCost) {
        size += 2 + 8;
      }
      if (HasHotelPriceDifferencePercentage) {
        size += 2 + 8;
      }
      if (HasHotelEligibleImpressions) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(HotelEligibleImpressions);
      }
      if (HistoricalCreativeQualityScore != global::Google.Ads.GoogleAds.V11.Enums.QualityScoreBucketEnum.Types.QualityScoreBucket.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) HistoricalCreativeQualityScore);
      }
      if (HistoricalLandingPageQualityScore != global::Google.Ads.GoogleAds.V11.Enums.QualityScoreBucketEnum.Types.QualityScoreBucket.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) HistoricalLandingPageQualityScore);
      }
      if (HasHistoricalQualityScore) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(HistoricalQualityScore);
      }
      if (HistoricalSearchPredictedCtr != global::Google.Ads.GoogleAds.V11.Enums.QualityScoreBucketEnum.Types.QualityScoreBucket.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) HistoricalSearchPredictedCtr);
      }
      if (HasGmailForwards) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(GmailForwards);
      }
      if (HasGmailSaves) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(GmailSaves);
      }
      if (HasGmailSecondaryClicks) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(GmailSecondaryClicks);
      }
      if (HasImpressionsFromStoreReach) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(ImpressionsFromStoreReach);
      }
      if (HasImpressions) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(Impressions);
      }
      if (HasInteractionRate) {
        size += 2 + 8;
      }
      if (HasInteractions) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(Interactions);
      }
      size += interactionEventTypes_.CalculateSize(_repeated_interactionEventTypes_codec);
      if (HasInvalidClickRate) {
        size += 2 + 8;
      }
      if (HasInvalidClicks) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(InvalidClicks);
      }
      if (HasMessageChats) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(MessageChats);
      }
      if (HasMessageImpressions) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(MessageImpressions);
      }
      if (HasMessageChatRate) {
        size += 2 + 8;
      }
      if (HasMobileFriendlyClicksPercentage) {
        size += 2 + 8;
      }
      if (HasOptimizationScoreUplift) {
        size += 2 + 8;
      }
      if (HasOptimizationScoreUrl) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(OptimizationScoreUrl);
      }
      if (HasOrganicClicks) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(OrganicClicks);
      }
      if (HasOrganicClicksPerQuery) {
        size += 2 + 8;
      }
      if (HasOrganicImpressions) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(OrganicImpressions);
      }
      if (HasOrganicImpressionsPerQuery) {
        size += 2 + 8;
      }
      if (HasOrganicQueries) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(OrganicQueries);
      }
      if (HasPercentNewVisitors) {
        size += 2 + 8;
      }
      if (HasPhoneCalls) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(PhoneCalls);
      }
      if (HasPhoneImpressions) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(PhoneImpressions);
      }
      if (HasPhoneThroughRate) {
        size += 2 + 8;
      }
      if (HasRelativeCtr) {
        size += 2 + 8;
      }
      if (HasSearchAbsoluteTopImpressionShare) {
        size += 2 + 8;
      }
      if (HasSearchBudgetLostAbsoluteTopImpressionShare) {
        size += 2 + 8;
      }
      if (HasSearchBudgetLostImpressionShare) {
        size += 2 + 8;
      }
      if (HasSearchBudgetLostTopImpressionShare) {
        size += 2 + 8;
      }
      if (HasSearchClickShare) {
        size += 2 + 8;
      }
      if (HasSearchExactMatchImpressionShare) {
        size += 2 + 8;
      }
      if (HasSearchImpressionShare) {
        size += 2 + 8;
      }
      if (HasSearchRankLostAbsoluteTopImpressionShare) {
        size += 2 + 8;
      }
      if (HasSearchRankLostImpressionShare) {
        size += 2 + 8;
      }
      if (HasSearchRankLostTopImpressionShare) {
        size += 2 + 8;
      }
      if (HasSearchTopImpressionShare) {
        size += 2 + 8;
      }
      if (HasSpeedScore) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(SpeedScore);
      }
      if (HasTopImpressionPercentage) {
        size += 2 + 8;
      }
      if (HasValidAcceleratedMobilePagesClicksPercentage) {
        size += 2 + 8;
      }
      if (HasValuePerAllConversions) {
        size += 2 + 8;
      }
      if (HasValuePerAllConversionsByConversionDate) {
        size += 2 + 8;
      }
      if (HasValuePerConversion) {
        size += 2 + 8;
      }
      if (HasValuePerConversionsByConversionDate) {
        size += 2 + 8;
      }
      if (HasValuePerCurrentModelAttributedConversion) {
        size += 2 + 8;
      }
      if (HasVideoQuartileP100Rate) {
        size += 2 + 8;
      }
      if (HasVideoQuartileP25Rate) {
        size += 2 + 8;
      }
      if (HasVideoQuartileP50Rate) {
        size += 2 + 8;
      }
      if (HasVideoQuartileP75Rate) {
        size += 2 + 8;
      }
      if (HasVideoViewRate) {
        size += 2 + 8;
      }
      if (HasVideoViews) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(VideoViews);
      }
      if (HasViewThroughConversions) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(ViewThroughConversions);
      }
      if (SkAdNetworkConversions != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(SkAdNetworkConversions);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(Metrics other) {
      if (other == null) {
        return;
      }
      if (other.HasAbsoluteTopImpressionPercentage) {
        AbsoluteTopImpressionPercentage = other.AbsoluteTopImpressionPercentage;
      }
      if (other.HasActiveViewCpm) {
        ActiveViewCpm = other.ActiveViewCpm;
      }
      if (other.HasActiveViewCtr) {
        ActiveViewCtr = other.ActiveViewCtr;
      }
      if (other.HasActiveViewImpressions) {
        ActiveViewImpressions = other.ActiveViewImpressions;
      }
      if (other.HasActiveViewMeasurability) {
        ActiveViewMeasurability = other.ActiveViewMeasurability;
      }
      if (other.HasActiveViewMeasurableCostMicros) {
        ActiveViewMeasurableCostMicros = other.ActiveViewMeasurableCostMicros;
      }
      if (other.HasActiveViewMeasurableImpressions) {
        ActiveViewMeasurableImpressions = other.ActiveViewMeasurableImpressions;
      }
      if (other.HasActiveViewViewability) {
        ActiveViewViewability = other.ActiveViewViewability;
      }
      if (other.HasAllConversionsFromInteractionsRate) {
        AllConversionsFromInteractionsRate = other.AllConversionsFromInteractionsRate;
      }
      if (other.HasAllConversionsValue) {
        AllConversionsValue = other.AllConversionsValue;
      }
      if (other.AllConversionsValueByConversionDate != 0D) {
        AllConversionsValueByConversionDate = other.AllConversionsValueByConversionDate;
      }
      if (other.HasAllConversions) {
        AllConversions = other.AllConversions;
      }
      if (other.AllConversionsByConversionDate != 0D) {
        AllConversionsByConversionDate = other.AllConversionsByConversionDate;
      }
      if (other.HasAllConversionsValuePerCost) {
        AllConversionsValuePerCost = other.AllConversionsValuePerCost;
      }
      if (other.HasAllConversionsFromClickToCall) {
        AllConversionsFromClickToCall = other.AllConversionsFromClickToCall;
      }
      if (other.HasAllConversionsFromDirections) {
        AllConversionsFromDirections = other.AllConversionsFromDirections;
      }
      if (other.HasAllConversionsFromInteractionsValuePerInteraction) {
        AllConversionsFromInteractionsValuePerInteraction = other.AllConversionsFromInteractionsValuePerInteraction;
      }
      if (other.HasAllConversionsFromMenu) {
        AllConversionsFromMenu = other.AllConversionsFromMenu;
      }
      if (other.HasAllConversionsFromOrder) {
        AllConversionsFromOrder = other.AllConversionsFromOrder;
      }
      if (other.HasAllConversionsFromOtherEngagement) {
        AllConversionsFromOtherEngagement = other.AllConversionsFromOtherEngagement;
      }
      if (other.HasAllConversionsFromStoreVisit) {
        AllConversionsFromStoreVisit = other.AllConversionsFromStoreVisit;
      }
      if (other.HasAllConversionsFromStoreWebsite) {
        AllConversionsFromStoreWebsite = other.AllConversionsFromStoreWebsite;
      }
      if (other.HasAuctionInsightSearchAbsoluteTopImpressionPercentage) {
        AuctionInsightSearchAbsoluteTopImpressionPercentage = other.AuctionInsightSearchAbsoluteTopImpressionPercentage;
      }
      if (other.HasAuctionInsightSearchImpressionShare) {
        AuctionInsightSearchImpressionShare = other.AuctionInsightSearchImpressionShare;
      }
      if (other.HasAuctionInsightSearchOutrankingShare) {
        AuctionInsightSearchOutrankingShare = other.AuctionInsightSearchOutrankingShare;
      }
      if (other.HasAuctionInsightSearchOverlapRate) {
        AuctionInsightSearchOverlapRate = other.AuctionInsightSearchOverlapRate;
      }
      if (other.HasAuctionInsightSearchPositionAboveRate) {
        AuctionInsightSearchPositionAboveRate = other.AuctionInsightSearchPositionAboveRate;
      }
      if (other.HasAuctionInsightSearchTopImpressionPercentage) {
        AuctionInsightSearchTopImpressionPercentage = other.AuctionInsightSearchTopImpressionPercentage;
      }
      if (other.HasAverageCost) {
        AverageCost = other.AverageCost;
      }
      if (other.HasAverageCpc) {
        AverageCpc = other.AverageCpc;
      }
      if (other.HasAverageCpe) {
        AverageCpe = other.AverageCpe;
      }
      if (other.HasAverageCpm) {
        AverageCpm = other.AverageCpm;
      }
      if (other.HasAverageCpv) {
        AverageCpv = other.AverageCpv;
      }
      if (other.HasAveragePageViews) {
        AveragePageViews = other.AveragePageViews;
      }
      if (other.HasAverageTimeOnSite) {
        AverageTimeOnSite = other.AverageTimeOnSite;
      }
      if (other.HasBenchmarkAverageMaxCpc) {
        BenchmarkAverageMaxCpc = other.BenchmarkAverageMaxCpc;
      }
      if (other.HasBiddableAppInstallConversions) {
        BiddableAppInstallConversions = other.BiddableAppInstallConversions;
      }
      if (other.HasBiddableAppPostInstallConversions) {
        BiddableAppPostInstallConversions = other.BiddableAppPostInstallConversions;
      }
      if (other.HasBenchmarkCtr) {
        BenchmarkCtr = other.BenchmarkCtr;
      }
      if (other.HasBounceRate) {
        BounceRate = other.BounceRate;
      }
      if (other.HasClicks) {
        Clicks = other.Clicks;
      }
      if (other.HasCombinedClicks) {
        CombinedClicks = other.CombinedClicks;
      }
      if (other.HasCombinedClicksPerQuery) {
        CombinedClicksPerQuery = other.CombinedClicksPerQuery;
      }
      if (other.HasCombinedQueries) {
        CombinedQueries = other.CombinedQueries;
      }
      if (other.HasContentBudgetLostImpressionShare) {
        ContentBudgetLostImpressionShare = other.ContentBudgetLostImpressionShare;
      }
      if (other.HasContentImpressionShare) {
        ContentImpressionShare = other.ContentImpressionShare;
      }
      if (other.HasConversionLastReceivedRequestDateTime) {
        ConversionLastReceivedRequestDateTime = other.ConversionLastReceivedRequestDateTime;
      }
      if (other.HasConversionLastConversionDate) {
        ConversionLastConversionDate = other.ConversionLastConversionDate;
      }
      if (other.HasContentRankLostImpressionShare) {
        ContentRankLostImpressionShare = other.ContentRankLostImpressionShare;
      }
      if (other.HasConversionsFromInteractionsRate) {
        ConversionsFromInteractionsRate = other.ConversionsFromInteractionsRate;
      }
      if (other.HasConversionsValue) {
        ConversionsValue = other.ConversionsValue;
      }
      if (other.ConversionsValueByConversionDate != 0D) {
        ConversionsValueByConversionDate = other.ConversionsValueByConversionDate;
      }
      if (other.HasConversionsValuePerCost) {
        ConversionsValuePerCost = other.ConversionsValuePerCost;
      }
      if (other.HasConversionsFromInteractionsValuePerInteraction) {
        ConversionsFromInteractionsValuePerInteraction = other.ConversionsFromInteractionsValuePerInteraction;
      }
      if (other.HasConversions) {
        Conversions = other.Conversions;
      }
      if (other.ConversionsByConversionDate != 0D) {
        ConversionsByConversionDate = other.ConversionsByConversionDate;
      }
      if (other.HasCostMicros) {
        CostMicros = other.CostMicros;
      }
      if (other.HasCostPerAllConversions) {
        CostPerAllConversions = other.CostPerAllConversions;
      }
      if (other.HasCostPerConversion) {
        CostPerConversion = other.CostPerConversion;
      }
      if (other.HasCostPerCurrentModelAttributedConversion) {
        CostPerCurrentModelAttributedConversion = other.CostPerCurrentModelAttributedConversion;
      }
      if (other.HasCrossDeviceConversions) {
        CrossDeviceConversions = other.CrossDeviceConversions;
      }
      if (other.HasCtr) {
        Ctr = other.Ctr;
      }
      if (other.HasCurrentModelAttributedConversions) {
        CurrentModelAttributedConversions = other.CurrentModelAttributedConversions;
      }
      if (other.HasCurrentModelAttributedConversionsFromInteractionsRate) {
        CurrentModelAttributedConversionsFromInteractionsRate = other.CurrentModelAttributedConversionsFromInteractionsRate;
      }
      if (other.HasCurrentModelAttributedConversionsFromInteractionsValuePerInteraction) {
        CurrentModelAttributedConversionsFromInteractionsValuePerInteraction = other.CurrentModelAttributedConversionsFromInteractionsValuePerInteraction;
      }
      if (other.HasCurrentModelAttributedConversionsValue) {
        CurrentModelAttributedConversionsValue = other.CurrentModelAttributedConversionsValue;
      }
      if (other.HasCurrentModelAttributedConversionsValuePerCost) {
        CurrentModelAttributedConversionsValuePerCost = other.CurrentModelAttributedConversionsValuePerCost;
      }
      if (other.HasEngagementRate) {
        EngagementRate = other.EngagementRate;
      }
      if (other.HasEngagements) {
        Engagements = other.Engagements;
      }
      if (other.HasHotelAverageLeadValueMicros) {
        HotelAverageLeadValueMicros = other.HotelAverageLeadValueMicros;
      }
      if (other.HasHotelCommissionRateMicros) {
        HotelCommissionRateMicros = other.HotelCommissionRateMicros;
      }
      if (other.HasHotelExpectedCommissionCost) {
        HotelExpectedCommissionCost = other.HotelExpectedCommissionCost;
      }
      if (other.HasHotelPriceDifferencePercentage) {
        HotelPriceDifferencePercentage = other.HotelPriceDifferencePercentage;
      }
      if (other.HasHotelEligibleImpressions) {
        HotelEligibleImpressions = other.HotelEligibleImpressions;
      }
      if (other.HistoricalCreativeQualityScore != global::Google.Ads.GoogleAds.V11.Enums.QualityScoreBucketEnum.Types.QualityScoreBucket.Unspecified) {
        HistoricalCreativeQualityScore = other.HistoricalCreativeQualityScore;
      }
      if (other.HistoricalLandingPageQualityScore != global::Google.Ads.GoogleAds.V11.Enums.QualityScoreBucketEnum.Types.QualityScoreBucket.Unspecified) {
        HistoricalLandingPageQualityScore = other.HistoricalLandingPageQualityScore;
      }
      if (other.HasHistoricalQualityScore) {
        HistoricalQualityScore = other.HistoricalQualityScore;
      }
      if (other.HistoricalSearchPredictedCtr != global::Google.Ads.GoogleAds.V11.Enums.QualityScoreBucketEnum.Types.QualityScoreBucket.Unspecified) {
        HistoricalSearchPredictedCtr = other.HistoricalSearchPredictedCtr;
      }
      if (other.HasGmailForwards) {
        GmailForwards = other.GmailForwards;
      }
      if (other.HasGmailSaves) {
        GmailSaves = other.GmailSaves;
      }
      if (other.HasGmailSecondaryClicks) {
        GmailSecondaryClicks = other.GmailSecondaryClicks;
      }
      if (other.HasImpressionsFromStoreReach) {
        ImpressionsFromStoreReach = other.ImpressionsFromStoreReach;
      }
      if (other.HasImpressions) {
        Impressions = other.Impressions;
      }
      if (other.HasInteractionRate) {
        InteractionRate = other.InteractionRate;
      }
      if (other.HasInteractions) {
        Interactions = other.Interactions;
      }
      interactionEventTypes_.Add(other.interactionEventTypes_);
      if (other.HasInvalidClickRate) {
        InvalidClickRate = other.InvalidClickRate;
      }
      if (other.HasInvalidClicks) {
        InvalidClicks = other.InvalidClicks;
      }
      if (other.HasMessageChats) {
        MessageChats = other.MessageChats;
      }
      if (other.HasMessageImpressions) {
        MessageImpressions = other.MessageImpressions;
      }
      if (other.HasMessageChatRate) {
        MessageChatRate = other.MessageChatRate;
      }
      if (other.HasMobileFriendlyClicksPercentage) {
        MobileFriendlyClicksPercentage = other.MobileFriendlyClicksPercentage;
      }
      if (other.HasOptimizationScoreUplift) {
        OptimizationScoreUplift = other.OptimizationScoreUplift;
      }
      if (other.HasOptimizationScoreUrl) {
        OptimizationScoreUrl = other.OptimizationScoreUrl;
      }
      if (other.HasOrganicClicks) {
        OrganicClicks = other.OrganicClicks;
      }
      if (other.HasOrganicClicksPerQuery) {
        OrganicClicksPerQuery = other.OrganicClicksPerQuery;
      }
      if (other.HasOrganicImpressions) {
        OrganicImpressions = other.OrganicImpressions;
      }
      if (other.HasOrganicImpressionsPerQuery) {
        OrganicImpressionsPerQuery = other.OrganicImpressionsPerQuery;
      }
      if (other.HasOrganicQueries) {
        OrganicQueries = other.OrganicQueries;
      }
      if (other.HasPercentNewVisitors) {
        PercentNewVisitors = other.PercentNewVisitors;
      }
      if (other.HasPhoneCalls) {
        PhoneCalls = other.PhoneCalls;
      }
      if (other.HasPhoneImpressions) {
        PhoneImpressions = other.PhoneImpressions;
      }
      if (other.HasPhoneThroughRate) {
        PhoneThroughRate = other.PhoneThroughRate;
      }
      if (other.HasRelativeCtr) {
        RelativeCtr = other.RelativeCtr;
      }
      if (other.HasSearchAbsoluteTopImpressionShare) {
        SearchAbsoluteTopImpressionShare = other.SearchAbsoluteTopImpressionShare;
      }
      if (other.HasSearchBudgetLostAbsoluteTopImpressionShare) {
        SearchBudgetLostAbsoluteTopImpressionShare = other.SearchBudgetLostAbsoluteTopImpressionShare;
      }
      if (other.HasSearchBudgetLostImpressionShare) {
        SearchBudgetLostImpressionShare = other.SearchBudgetLostImpressionShare;
      }
      if (other.HasSearchBudgetLostTopImpressionShare) {
        SearchBudgetLostTopImpressionShare = other.SearchBudgetLostTopImpressionShare;
      }
      if (other.HasSearchClickShare) {
        SearchClickShare = other.SearchClickShare;
      }
      if (other.HasSearchExactMatchImpressionShare) {
        SearchExactMatchImpressionShare = other.SearchExactMatchImpressionShare;
      }
      if (other.HasSearchImpressionShare) {
        SearchImpressionShare = other.SearchImpressionShare;
      }
      if (other.HasSearchRankLostAbsoluteTopImpressionShare) {
        SearchRankLostAbsoluteTopImpressionShare = other.SearchRankLostAbsoluteTopImpressionShare;
      }
      if (other.HasSearchRankLostImpressionShare) {
        SearchRankLostImpressionShare = other.SearchRankLostImpressionShare;
      }
      if (other.HasSearchRankLostTopImpressionShare) {
        SearchRankLostTopImpressionShare = other.SearchRankLostTopImpressionShare;
      }
      if (other.HasSearchTopImpressionShare) {
        SearchTopImpressionShare = other.SearchTopImpressionShare;
      }
      if (other.HasSpeedScore) {
        SpeedScore = other.SpeedScore;
      }
      if (other.HasTopImpressionPercentage) {
        TopImpressionPercentage = other.TopImpressionPercentage;
      }
      if (other.HasValidAcceleratedMobilePagesClicksPercentage) {
        ValidAcceleratedMobilePagesClicksPercentage = other.ValidAcceleratedMobilePagesClicksPercentage;
      }
      if (other.HasValuePerAllConversions) {
        ValuePerAllConversions = other.ValuePerAllConversions;
      }
      if (other.HasValuePerAllConversionsByConversionDate) {
        ValuePerAllConversionsByConversionDate = other.ValuePerAllConversionsByConversionDate;
      }
      if (other.HasValuePerConversion) {
        ValuePerConversion = other.ValuePerConversion;
      }
      if (other.HasValuePerConversionsByConversionDate) {
        ValuePerConversionsByConversionDate = other.ValuePerConversionsByConversionDate;
      }
      if (other.HasValuePerCurrentModelAttributedConversion) {
        ValuePerCurrentModelAttributedConversion = other.ValuePerCurrentModelAttributedConversion;
      }
      if (other.HasVideoQuartileP100Rate) {
        VideoQuartileP100Rate = other.VideoQuartileP100Rate;
      }
      if (other.HasVideoQuartileP25Rate) {
        VideoQuartileP25Rate = other.VideoQuartileP25Rate;
      }
      if (other.HasVideoQuartileP50Rate) {
        VideoQuartileP50Rate = other.VideoQuartileP50Rate;
      }
      if (other.HasVideoQuartileP75Rate) {
        VideoQuartileP75Rate = other.VideoQuartileP75Rate;
      }
      if (other.HasVideoViewRate) {
        VideoViewRate = other.VideoViewRate;
      }
      if (other.HasVideoViews) {
        VideoViews = other.VideoViews;
      }
      if (other.HasViewThroughConversions) {
        ViewThroughConversions = other.ViewThroughConversions;
      }
      if (other.SkAdNetworkConversions != 0L) {
        SkAdNetworkConversions = other.SkAdNetworkConversions;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 640: {
            HistoricalCreativeQualityScore = (global::Google.Ads.GoogleAds.V11.Enums.QualityScoreBucketEnum.Types.QualityScoreBucket) input.ReadEnum();
            break;
          }
          case 648: {
            HistoricalLandingPageQualityScore = (global::Google.Ads.GoogleAds.V11.Enums.QualityScoreBucketEnum.Types.QualityScoreBucket) input.ReadEnum();
            break;
          }
          case 664: {
            HistoricalSearchPredictedCtr = (global::Google.Ads.GoogleAds.V11.Enums.QualityScoreBucketEnum.Types.QualityScoreBucket) input.ReadEnum();
            break;
          }
          case 802:
          case 800: {
            interactionEventTypes_.AddEntriesFrom(input, _repeated_interactionEventTypes_codec);
            break;
          }
          case 1048: {
            Clicks = input.ReadInt64();
            break;
          }
          case 1057: {
            VideoQuartileP100Rate = input.ReadDouble();
            break;
          }
          case 1065: {
            VideoQuartileP25Rate = input.ReadDouble();
            break;
          }
          case 1073: {
            VideoQuartileP50Rate = input.ReadDouble();
            break;
          }
          case 1081: {
            VideoQuartileP75Rate = input.ReadDouble();
            break;
          }
          case 1089: {
            SearchAbsoluteTopImpressionShare = input.ReadDouble();
            break;
          }
          case 1097: {
            SearchBudgetLostAbsoluteTopImpressionShare = input.ReadDouble();
            break;
          }
          case 1105: {
            SearchBudgetLostImpressionShare = input.ReadDouble();
            break;
          }
          case 1113: {
            SearchBudgetLostTopImpressionShare = input.ReadDouble();
            break;
          }
          case 1121: {
            SearchClickShare = input.ReadDouble();
            break;
          }
          case 1129: {
            SearchExactMatchImpressionShare = input.ReadDouble();
            break;
          }
          case 1137: {
            SearchImpressionShare = input.ReadDouble();
            break;
          }
          case 1145: {
            SearchRankLostAbsoluteTopImpressionShare = input.ReadDouble();
            break;
          }
          case 1153: {
            SearchRankLostImpressionShare = input.ReadDouble();
            break;
          }
          case 1161: {
            SearchRankLostTopImpressionShare = input.ReadDouble();
            break;
          }
          case 1169: {
            SearchTopImpressionShare = input.ReadDouble();
            break;
          }
          case 1176: {
            SpeedScore = input.ReadInt64();
            break;
          }
          case 1185: {
            TopImpressionPercentage = input.ReadDouble();
            break;
          }
          case 1193: {
            ValidAcceleratedMobilePagesClicksPercentage = input.ReadDouble();
            break;
          }
          case 1201: {
            ValuePerAllConversions = input.ReadDouble();
            break;
          }
          case 1209: {
            ValuePerConversion = input.ReadDouble();
            break;
          }
          case 1217: {
            ValuePerCurrentModelAttributedConversion = input.ReadDouble();
            break;
          }
          case 1225: {
            VideoViewRate = input.ReadDouble();
            break;
          }
          case 1232: {
            VideoViews = input.ReadInt64();
            break;
          }
          case 1240: {
            ViewThroughConversions = input.ReadInt64();
            break;
          }
          case 1248: {
            CombinedClicks = input.ReadInt64();
            break;
          }
          case 1257: {
            CombinedClicksPerQuery = input.ReadDouble();
            break;
          }
          case 1264: {
            CombinedQueries = input.ReadInt64();
            break;
          }
          case 1273: {
            ContentBudgetLostImpressionShare = input.ReadDouble();
            break;
          }
          case 1281: {
            ContentImpressionShare = input.ReadDouble();
            break;
          }
          case 1290: {
            ConversionLastReceivedRequestDateTime = input.ReadString();
            break;
          }
          case 1298: {
            ConversionLastConversionDate = input.ReadString();
            break;
          }
          case 1305: {
            ContentRankLostImpressionShare = input.ReadDouble();
            break;
          }
          case 1313: {
            ConversionsFromInteractionsRate = input.ReadDouble();
            break;
          }
          case 1321: {
            ConversionsValue = input.ReadDouble();
            break;
          }
          case 1329: {
            ConversionsValuePerCost = input.ReadDouble();
            break;
          }
          case 1337: {
            ConversionsFromInteractionsValuePerInteraction = input.ReadDouble();
            break;
          }
          case 1345: {
            Conversions = input.ReadDouble();
            break;
          }
          case 1352: {
            CostMicros = input.ReadInt64();
            break;
          }
          case 1361: {
            CostPerAllConversions = input.ReadDouble();
            break;
          }
          case 1369: {
            CostPerConversion = input.ReadDouble();
            break;
          }
          case 1377: {
            CostPerCurrentModelAttributedConversion = input.ReadDouble();
            break;
          }
          case 1385: {
            CrossDeviceConversions = input.ReadDouble();
            break;
          }
          case 1393: {
            Ctr = input.ReadDouble();
            break;
          }
          case 1401: {
            CurrentModelAttributedConversions = input.ReadDouble();
            break;
          }
          case 1409: {
            CurrentModelAttributedConversionsFromInteractionsRate = input.ReadDouble();
            break;
          }
          case 1417: {
            CurrentModelAttributedConversionsFromInteractionsValuePerInteraction = input.ReadDouble();
            break;
          }
          case 1425: {
            CurrentModelAttributedConversionsValue = input.ReadDouble();
            break;
          }
          case 1433: {
            CurrentModelAttributedConversionsValuePerCost = input.ReadDouble();
            break;
          }
          case 1441: {
            EngagementRate = input.ReadDouble();
            break;
          }
          case 1448: {
            Engagements = input.ReadInt64();
            break;
          }
          case 1465: {
            AbsoluteTopImpressionPercentage = input.ReadDouble();
            break;
          }
          case 1473: {
            ActiveViewCpm = input.ReadDouble();
            break;
          }
          case 1481: {
            ActiveViewCtr = input.ReadDouble();
            break;
          }
          case 1488: {
            ActiveViewImpressions = input.ReadInt64();
            break;
          }
          case 1497: {
            ActiveViewMeasurability = input.ReadDouble();
            break;
          }
          case 1504: {
            ActiveViewMeasurableCostMicros = input.ReadInt64();
            break;
          }
          case 1512: {
            ActiveViewMeasurableImpressions = input.ReadInt64();
            break;
          }
          case 1521: {
            ActiveViewViewability = input.ReadDouble();
            break;
          }
          case 1529: {
            AllConversionsFromInteractionsRate = input.ReadDouble();
            break;
          }
          case 1537: {
            AllConversionsValue = input.ReadDouble();
            break;
          }
          case 1545: {
            AllConversions = input.ReadDouble();
            break;
          }
          case 1553: {
            AllConversionsValuePerCost = input.ReadDouble();
            break;
          }
          case 1561: {
            AllConversionsFromClickToCall = input.ReadDouble();
            break;
          }
          case 1569: {
            AllConversionsFromDirections = input.ReadDouble();
            break;
          }
          case 1577: {
            AllConversionsFromInteractionsValuePerInteraction = input.ReadDouble();
            break;
          }
          case 1585: {
            AllConversionsFromMenu = input.ReadDouble();
            break;
          }
          case 1593: {
            AllConversionsFromOrder = input.ReadDouble();
            break;
          }
          case 1601: {
            AllConversionsFromOtherEngagement = input.ReadDouble();
            break;
          }
          case 1609: {
            AllConversionsFromStoreVisit = input.ReadDouble();
            break;
          }
          case 1617: {
            AllConversionsFromStoreWebsite = input.ReadDouble();
            break;
          }
          case 1625: {
            AverageCost = input.ReadDouble();
            break;
          }
          case 1633: {
            AverageCpc = input.ReadDouble();
            break;
          }
          case 1641: {
            AverageCpe = input.ReadDouble();
            break;
          }
          case 1649: {
            AverageCpm = input.ReadDouble();
            break;
          }
          case 1657: {
            AverageCpv = input.ReadDouble();
            break;
          }
          case 1665: {
            AveragePageViews = input.ReadDouble();
            break;
          }
          case 1673: {
            AverageTimeOnSite = input.ReadDouble();
            break;
          }
          case 1681: {
            BenchmarkAverageMaxCpc = input.ReadDouble();
            break;
          }
          case 1689: {
            BenchmarkCtr = input.ReadDouble();
            break;
          }
          case 1697: {
            BounceRate = input.ReadDouble();
            break;
          }
          case 1705: {
            HotelAverageLeadValueMicros = input.ReadDouble();
            break;
          }
          case 1713: {
            HotelPriceDifferencePercentage = input.ReadDouble();
            break;
          }
          case 1720: {
            HotelEligibleImpressions = input.ReadInt64();
            break;
          }
          case 1728: {
            HistoricalQualityScore = input.ReadInt64();
            break;
          }
          case 1736: {
            GmailForwards = input.ReadInt64();
            break;
          }
          case 1744: {
            GmailSaves = input.ReadInt64();
            break;
          }
          case 1752: {
            GmailSecondaryClicks = input.ReadInt64();
            break;
          }
          case 1760: {
            ImpressionsFromStoreReach = input.ReadInt64();
            break;
          }
          case 1768: {
            Impressions = input.ReadInt64();
            break;
          }
          case 1777: {
            InteractionRate = input.ReadDouble();
            break;
          }
          case 1784: {
            Interactions = input.ReadInt64();
            break;
          }
          case 1793: {
            InvalidClickRate = input.ReadDouble();
            break;
          }
          case 1800: {
            InvalidClicks = input.ReadInt64();
            break;
          }
          case 1808: {
            MessageChats = input.ReadInt64();
            break;
          }
          case 1816: {
            MessageImpressions = input.ReadInt64();
            break;
          }
          case 1825: {
            MessageChatRate = input.ReadDouble();
            break;
          }
          case 1833: {
            MobileFriendlyClicksPercentage = input.ReadDouble();
            break;
          }
          case 1840: {
            OrganicClicks = input.ReadInt64();
            break;
          }
          case 1849: {
            OrganicClicksPerQuery = input.ReadDouble();
            break;
          }
          case 1856: {
            OrganicImpressions = input.ReadInt64();
            break;
          }
          case 1865: {
            OrganicImpressionsPerQuery = input.ReadDouble();
            break;
          }
          case 1872: {
            OrganicQueries = input.ReadInt64();
            break;
          }
          case 1881: {
            PercentNewVisitors = input.ReadDouble();
            break;
          }
          case 1888: {
            PhoneCalls = input.ReadInt64();
            break;
          }
          case 1896: {
            PhoneImpressions = input.ReadInt64();
            break;
          }
          case 1905: {
            PhoneThroughRate = input.ReadDouble();
            break;
          }
          case 1913: {
            RelativeCtr = input.ReadDouble();
            break;
          }
          case 1921: {
            AllConversionsValueByConversionDate = input.ReadDouble();
            break;
          }
          case 1929: {
            AllConversionsByConversionDate = input.ReadDouble();
            break;
          }
          case 1937: {
            ConversionsValueByConversionDate = input.ReadDouble();
            break;
          }
          case 1945: {
            ConversionsByConversionDate = input.ReadDouble();
            break;
          }
          case 1953: {
            ValuePerAllConversionsByConversionDate = input.ReadDouble();
            break;
          }
          case 1961: {
            ValuePerConversionsByConversionDate = input.ReadDouble();
            break;
          }
          case 1968: {
            SkAdNetworkConversions = input.ReadInt64();
            break;
          }
          case 1977: {
            OptimizationScoreUplift = input.ReadDouble();
            break;
          }
          case 1986: {
            OptimizationScoreUrl = input.ReadString();
            break;
          }
          case 2033: {
            BiddableAppInstallConversions = input.ReadDouble();
            break;
          }
          case 2041: {
            BiddableAppPostInstallConversions = input.ReadDouble();
            break;
          }
          case 2048: {
            HotelCommissionRateMicros = input.ReadInt64();
            break;
          }
          case 2057: {
            HotelExpectedCommissionCost = input.ReadDouble();
            break;
          }
          case 2065: {
            AuctionInsightSearchAbsoluteTopImpressionPercentage = input.ReadDouble();
            break;
          }
          case 2073: {
            AuctionInsightSearchImpressionShare = input.ReadDouble();
            break;
          }
          case 2081: {
            AuctionInsightSearchOutrankingShare = input.ReadDouble();
            break;
          }
          case 2089: {
            AuctionInsightSearchOverlapRate = input.ReadDouble();
            break;
          }
          case 2097: {
            AuctionInsightSearchPositionAboveRate = input.ReadDouble();
            break;
          }
          case 2105: {
            AuctionInsightSearchTopImpressionPercentage = input.ReadDouble();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 640: {
            HistoricalCreativeQualityScore = (global::Google.Ads.GoogleAds.V11.Enums.QualityScoreBucketEnum.Types.QualityScoreBucket) input.ReadEnum();
            break;
          }
          case 648: {
            HistoricalLandingPageQualityScore = (global::Google.Ads.GoogleAds.V11.Enums.QualityScoreBucketEnum.Types.QualityScoreBucket) input.ReadEnum();
            break;
          }
          case 664: {
            HistoricalSearchPredictedCtr = (global::Google.Ads.GoogleAds.V11.Enums.QualityScoreBucketEnum.Types.QualityScoreBucket) input.ReadEnum();
            break;
          }
          case 802:
          case 800: {
            interactionEventTypes_.AddEntriesFrom(ref input, _repeated_interactionEventTypes_codec);
            break;
          }
          case 1048: {
            Clicks = input.ReadInt64();
            break;
          }
          case 1057: {
            VideoQuartileP100Rate = input.ReadDouble();
            break;
          }
          case 1065: {
            VideoQuartileP25Rate = input.ReadDouble();
            break;
          }
          case 1073: {
            VideoQuartileP50Rate = input.ReadDouble();
            break;
          }
          case 1081: {
            VideoQuartileP75Rate = input.ReadDouble();
            break;
          }
          case 1089: {
            SearchAbsoluteTopImpressionShare = input.ReadDouble();
            break;
          }
          case 1097: {
            SearchBudgetLostAbsoluteTopImpressionShare = input.ReadDouble();
            break;
          }
          case 1105: {
            SearchBudgetLostImpressionShare = input.ReadDouble();
            break;
          }
          case 1113: {
            SearchBudgetLostTopImpressionShare = input.ReadDouble();
            break;
          }
          case 1121: {
            SearchClickShare = input.ReadDouble();
            break;
          }
          case 1129: {
            SearchExactMatchImpressionShare = input.ReadDouble();
            break;
          }
          case 1137: {
            SearchImpressionShare = input.ReadDouble();
            break;
          }
          case 1145: {
            SearchRankLostAbsoluteTopImpressionShare = input.ReadDouble();
            break;
          }
          case 1153: {
            SearchRankLostImpressionShare = input.ReadDouble();
            break;
          }
          case 1161: {
            SearchRankLostTopImpressionShare = input.ReadDouble();
            break;
          }
          case 1169: {
            SearchTopImpressionShare = input.ReadDouble();
            break;
          }
          case 1176: {
            SpeedScore = input.ReadInt64();
            break;
          }
          case 1185: {
            TopImpressionPercentage = input.ReadDouble();
            break;
          }
          case 1193: {
            ValidAcceleratedMobilePagesClicksPercentage = input.ReadDouble();
            break;
          }
          case 1201: {
            ValuePerAllConversions = input.ReadDouble();
            break;
          }
          case 1209: {
            ValuePerConversion = input.ReadDouble();
            break;
          }
          case 1217: {
            ValuePerCurrentModelAttributedConversion = input.ReadDouble();
            break;
          }
          case 1225: {
            VideoViewRate = input.ReadDouble();
            break;
          }
          case 1232: {
            VideoViews = input.ReadInt64();
            break;
          }
          case 1240: {
            ViewThroughConversions = input.ReadInt64();
            break;
          }
          case 1248: {
            CombinedClicks = input.ReadInt64();
            break;
          }
          case 1257: {
            CombinedClicksPerQuery = input.ReadDouble();
            break;
          }
          case 1264: {
            CombinedQueries = input.ReadInt64();
            break;
          }
          case 1273: {
            ContentBudgetLostImpressionShare = input.ReadDouble();
            break;
          }
          case 1281: {
            ContentImpressionShare = input.ReadDouble();
            break;
          }
          case 1290: {
            ConversionLastReceivedRequestDateTime = input.ReadString();
            break;
          }
          case 1298: {
            ConversionLastConversionDate = input.ReadString();
            break;
          }
          case 1305: {
            ContentRankLostImpressionShare = input.ReadDouble();
            break;
          }
          case 1313: {
            ConversionsFromInteractionsRate = input.ReadDouble();
            break;
          }
          case 1321: {
            ConversionsValue = input.ReadDouble();
            break;
          }
          case 1329: {
            ConversionsValuePerCost = input.ReadDouble();
            break;
          }
          case 1337: {
            ConversionsFromInteractionsValuePerInteraction = input.ReadDouble();
            break;
          }
          case 1345: {
            Conversions = input.ReadDouble();
            break;
          }
          case 1352: {
            CostMicros = input.ReadInt64();
            break;
          }
          case 1361: {
            CostPerAllConversions = input.ReadDouble();
            break;
          }
          case 1369: {
            CostPerConversion = input.ReadDouble();
            break;
          }
          case 1377: {
            CostPerCurrentModelAttributedConversion = input.ReadDouble();
            break;
          }
          case 1385: {
            CrossDeviceConversions = input.ReadDouble();
            break;
          }
          case 1393: {
            Ctr = input.ReadDouble();
            break;
          }
          case 1401: {
            CurrentModelAttributedConversions = input.ReadDouble();
            break;
          }
          case 1409: {
            CurrentModelAttributedConversionsFromInteractionsRate = input.ReadDouble();
            break;
          }
          case 1417: {
            CurrentModelAttributedConversionsFromInteractionsValuePerInteraction = input.ReadDouble();
            break;
          }
          case 1425: {
            CurrentModelAttributedConversionsValue = input.ReadDouble();
            break;
          }
          case 1433: {
            CurrentModelAttributedConversionsValuePerCost = input.ReadDouble();
            break;
          }
          case 1441: {
            EngagementRate = input.ReadDouble();
            break;
          }
          case 1448: {
            Engagements = input.ReadInt64();
            break;
          }
          case 1465: {
            AbsoluteTopImpressionPercentage = input.ReadDouble();
            break;
          }
          case 1473: {
            ActiveViewCpm = input.ReadDouble();
            break;
          }
          case 1481: {
            ActiveViewCtr = input.ReadDouble();
            break;
          }
          case 1488: {
            ActiveViewImpressions = input.ReadInt64();
            break;
          }
          case 1497: {
            ActiveViewMeasurability = input.ReadDouble();
            break;
          }
          case 1504: {
            ActiveViewMeasurableCostMicros = input.ReadInt64();
            break;
          }
          case 1512: {
            ActiveViewMeasurableImpressions = input.ReadInt64();
            break;
          }
          case 1521: {
            ActiveViewViewability = input.ReadDouble();
            break;
          }
          case 1529: {
            AllConversionsFromInteractionsRate = input.ReadDouble();
            break;
          }
          case 1537: {
            AllConversionsValue = input.ReadDouble();
            break;
          }
          case 1545: {
            AllConversions = input.ReadDouble();
            break;
          }
          case 1553: {
            AllConversionsValuePerCost = input.ReadDouble();
            break;
          }
          case 1561: {
            AllConversionsFromClickToCall = input.ReadDouble();
            break;
          }
          case 1569: {
            AllConversionsFromDirections = input.ReadDouble();
            break;
          }
          case 1577: {
            AllConversionsFromInteractionsValuePerInteraction = input.ReadDouble();
            break;
          }
          case 1585: {
            AllConversionsFromMenu = input.ReadDouble();
            break;
          }
          case 1593: {
            AllConversionsFromOrder = input.ReadDouble();
            break;
          }
          case 1601: {
            AllConversionsFromOtherEngagement = input.ReadDouble();
            break;
          }
          case 1609: {
            AllConversionsFromStoreVisit = input.ReadDouble();
            break;
          }
          case 1617: {
            AllConversionsFromStoreWebsite = input.ReadDouble();
            break;
          }
          case 1625: {
            AverageCost = input.ReadDouble();
            break;
          }
          case 1633: {
            AverageCpc = input.ReadDouble();
            break;
          }
          case 1641: {
            AverageCpe = input.ReadDouble();
            break;
          }
          case 1649: {
            AverageCpm = input.ReadDouble();
            break;
          }
          case 1657: {
            AverageCpv = input.ReadDouble();
            break;
          }
          case 1665: {
            AveragePageViews = input.ReadDouble();
            break;
          }
          case 1673: {
            AverageTimeOnSite = input.ReadDouble();
            break;
          }
          case 1681: {
            BenchmarkAverageMaxCpc = input.ReadDouble();
            break;
          }
          case 1689: {
            BenchmarkCtr = input.ReadDouble();
            break;
          }
          case 1697: {
            BounceRate = input.ReadDouble();
            break;
          }
          case 1705: {
            HotelAverageLeadValueMicros = input.ReadDouble();
            break;
          }
          case 1713: {
            HotelPriceDifferencePercentage = input.ReadDouble();
            break;
          }
          case 1720: {
            HotelEligibleImpressions = input.ReadInt64();
            break;
          }
          case 1728: {
            HistoricalQualityScore = input.ReadInt64();
            break;
          }
          case 1736: {
            GmailForwards = input.ReadInt64();
            break;
          }
          case 1744: {
            GmailSaves = input.ReadInt64();
            break;
          }
          case 1752: {
            GmailSecondaryClicks = input.ReadInt64();
            break;
          }
          case 1760: {
            ImpressionsFromStoreReach = input.ReadInt64();
            break;
          }
          case 1768: {
            Impressions = input.ReadInt64();
            break;
          }
          case 1777: {
            InteractionRate = input.ReadDouble();
            break;
          }
          case 1784: {
            Interactions = input.ReadInt64();
            break;
          }
          case 1793: {
            InvalidClickRate = input.ReadDouble();
            break;
          }
          case 1800: {
            InvalidClicks = input.ReadInt64();
            break;
          }
          case 1808: {
            MessageChats = input.ReadInt64();
            break;
          }
          case 1816: {
            MessageImpressions = input.ReadInt64();
            break;
          }
          case 1825: {
            MessageChatRate = input.ReadDouble();
            break;
          }
          case 1833: {
            MobileFriendlyClicksPercentage = input.ReadDouble();
            break;
          }
          case 1840: {
            OrganicClicks = input.ReadInt64();
            break;
          }
          case 1849: {
            OrganicClicksPerQuery = input.ReadDouble();
            break;
          }
          case 1856: {
            OrganicImpressions = input.ReadInt64();
            break;
          }
          case 1865: {
            OrganicImpressionsPerQuery = input.ReadDouble();
            break;
          }
          case 1872: {
            OrganicQueries = input.ReadInt64();
            break;
          }
          case 1881: {
            PercentNewVisitors = input.ReadDouble();
            break;
          }
          case 1888: {
            PhoneCalls = input.ReadInt64();
            break;
          }
          case 1896: {
            PhoneImpressions = input.ReadInt64();
            break;
          }
          case 1905: {
            PhoneThroughRate = input.ReadDouble();
            break;
          }
          case 1913: {
            RelativeCtr = input.ReadDouble();
            break;
          }
          case 1921: {
            AllConversionsValueByConversionDate = input.ReadDouble();
            break;
          }
          case 1929: {
            AllConversionsByConversionDate = input.ReadDouble();
            break;
          }
          case 1937: {
            ConversionsValueByConversionDate = input.ReadDouble();
            break;
          }
          case 1945: {
            ConversionsByConversionDate = input.ReadDouble();
            break;
          }
          case 1953: {
            ValuePerAllConversionsByConversionDate = input.ReadDouble();
            break;
          }
          case 1961: {
            ValuePerConversionsByConversionDate = input.ReadDouble();
            break;
          }
          case 1968: {
            SkAdNetworkConversions = input.ReadInt64();
            break;
          }
          case 1977: {
            OptimizationScoreUplift = input.ReadDouble();
            break;
          }
          case 1986: {
            OptimizationScoreUrl = input.ReadString();
            break;
          }
          case 2033: {
            BiddableAppInstallConversions = input.ReadDouble();
            break;
          }
          case 2041: {
            BiddableAppPostInstallConversions = input.ReadDouble();
            break;
          }
          case 2048: {
            HotelCommissionRateMicros = input.ReadInt64();
            break;
          }
          case 2057: {
            HotelExpectedCommissionCost = input.ReadDouble();
            break;
          }
          case 2065: {
            AuctionInsightSearchAbsoluteTopImpressionPercentage = input.ReadDouble();
            break;
          }
          case 2073: {
            AuctionInsightSearchImpressionShare = input.ReadDouble();
            break;
          }
          case 2081: {
            AuctionInsightSearchOutrankingShare = input.ReadDouble();
            break;
          }
          case 2089: {
            AuctionInsightSearchOverlapRate = input.ReadDouble();
            break;
          }
          case 2097: {
            AuctionInsightSearchPositionAboveRate = input.ReadDouble();
            break;
          }
          case 2105: {
            AuctionInsightSearchTopImpressionPercentage = input.ReadDouble();
            break;
          }
        }
      }
    }
    #endif

  }

  #endregion

}

#endregion Designer generated code
