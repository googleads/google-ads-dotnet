// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: google/ads/googleads/v11/enums/resource_limit_type.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Google.Ads.GoogleAds.V11.Enums {

  /// <summary>Holder for reflection information generated from google/ads/googleads/v11/enums/resource_limit_type.proto</summary>
  public static partial class ResourceLimitTypeReflection {

    #region Descriptor
    /// <summary>File descriptor for google/ads/googleads/v11/enums/resource_limit_type.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static ResourceLimitTypeReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Cjhnb29nbGUvYWRzL2dvb2dsZWFkcy92MTEvZW51bXMvcmVzb3VyY2VfbGlt",
            "aXRfdHlwZS5wcm90bxIeZ29vZ2xlLmFkcy5nb29nbGVhZHMudjExLmVudW1z",
            "ItwpChVSZXNvdXJjZUxpbWl0VHlwZUVudW0iwikKEVJlc291cmNlTGltaXRU",
            "eXBlEg8KC1VOU1BFQ0lGSUVEEAASCwoHVU5LTk9XThABEhoKFkNBTVBBSUdO",
            "U19QRVJfQ1VTVE9NRVIQAhIfChtCQVNFX0NBTVBBSUdOU19QRVJfQ1VTVE9N",
            "RVIQAxIlCiFFWFBFUklNRU5UX0NBTVBBSUdOU19QRVJfQ1VTVE9NRVIQaRIg",
            "ChxIT1RFTF9DQU1QQUlHTlNfUEVSX0NVU1RPTUVSEAQSKQolU01BUlRfU0hP",
            "UFBJTkdfQ0FNUEFJR05TX1BFUl9DVVNUT01FUhAFEhoKFkFEX0dST1VQU19Q",
            "RVJfQ0FNUEFJR04QBhIjCh9BRF9HUk9VUFNfUEVSX1NIT1BQSU5HX0NBTVBB",
            "SUdOEAgSIAocQURfR1JPVVBTX1BFUl9IT1RFTF9DQU1QQUlHThAJEioKJlJF",
            "UE9SVElOR19BRF9HUk9VUFNfUEVSX0xPQ0FMX0NBTVBBSUdOEAoSKAokUkVQ",
            "T1JUSU5HX0FEX0dST1VQU19QRVJfQVBQX0NBTVBBSUdOEAsSKAokTUFOQUdF",
            "RF9BRF9HUk9VUFNfUEVSX1NNQVJUX0NBTVBBSUdOEDQSIgoeQURfR1JPVVBf",
            "Q1JJVEVSSUFfUEVSX0NVU1RPTUVSEAwSJwojQkFTRV9BRF9HUk9VUF9DUklU",
            "RVJJQV9QRVJfQ1VTVE9NRVIQDRItCilFWFBFUklNRU5UX0FEX0dST1VQX0NS",
            "SVRFUklBX1BFUl9DVVNUT01FUhBrEiIKHkFEX0dST1VQX0NSSVRFUklBX1BF",
            "Ul9DQU1QQUlHThAOEiIKHkNBTVBBSUdOX0NSSVRFUklBX1BFUl9DVVNUT01F",
            "UhAPEicKI0JBU0VfQ0FNUEFJR05fQ1JJVEVSSUFfUEVSX0NVU1RPTUVSEBAS",
            "LQopRVhQRVJJTUVOVF9DQU1QQUlHTl9DUklURVJJQV9QRVJfQ1VTVE9NRVIQ",
            "bBIhCh1XRUJQQUdFX0NSSVRFUklBX1BFUl9DVVNUT01FUhAREiYKIkJBU0Vf",
            "V0VCUEFHRV9DUklURVJJQV9QRVJfQ1VTVE9NRVIQEhIsCihFWFBFUklNRU5U",
            "X1dFQlBBR0VfQ1JJVEVSSUFfUEVSX0NVU1RPTUVSEBMSKwonQ09NQklORURf",
            "QVVESUVOQ0VfQ1JJVEVSSUFfUEVSX0FEX0dST1VQEBQSNQoxQ1VTVE9NRVJf",
            "TkVHQVRJVkVfUExBQ0VNRU5UX0NSSVRFUklBX1BFUl9DVVNUT01FUhAVEjsK",
            "N0NVU1RPTUVSX05FR0FUSVZFX1lPVVRVQkVfQ0hBTk5FTF9DUklURVJJQV9Q",
            "RVJfQ1VTVE9NRVIQFhIZChVDUklURVJJQV9QRVJfQURfR1JPVVAQFxIfChtM",
            "SVNUSU5HX0dST1VQU19QRVJfQURfR1JPVVAQGBIqCiZFWFBMSUNJVExZX1NI",
            "QVJFRF9CVURHRVRTX1BFUl9DVVNUT01FUhAZEioKJklNUExJQ0lUTFlfU0hB",
            "UkVEX0JVREdFVFNfUEVSX0NVU1RPTUVSEBoSKwonQ09NQklORURfQVVESUVO",
            "Q0VfQ1JJVEVSSUFfUEVSX0NBTVBBSUdOEBsSIgoeTkVHQVRJVkVfS0VZV09S",
            "RFNfUEVSX0NBTVBBSUdOEBwSJAogTkVHQVRJVkVfUExBQ0VNRU5UU19QRVJf",
            "Q0FNUEFJR04QHRIcChhHRU9fVEFSR0VUU19QRVJfQ0FNUEFJR04QHhIjCh9O",
            "RUdBVElWRV9JUF9CTE9DS1NfUEVSX0NBTVBBSUdOECASHAoYUFJPWElNSVRJ",
            "RVNfUEVSX0NBTVBBSUdOECESKAokTElTVElOR19TQ09QRVNfUEVSX1NIT1BQ",
            "SU5HX0NBTVBBSUdOECISLAooTElTVElOR19TQ09QRVNfUEVSX05PTl9TSE9Q",
            "UElOR19DQU1QQUlHThAjEiQKIE5FR0FUSVZFX0tFWVdPUkRTX1BFUl9TSEFS",
            "RURfU0VUECQSJgoiTkVHQVRJVkVfUExBQ0VNRU5UU19QRVJfU0hBUkVEX1NF",
            "VBAlEi0KKVNIQVJFRF9TRVRTX1BFUl9DVVNUT01FUl9GT1JfVFlQRV9ERUZB",
            "VUxUECgSPgo6U0hBUkVEX1NFVFNfUEVSX0NVU1RPTUVSX0ZPUl9ORUdBVElW",
            "RV9QTEFDRU1FTlRfTElTVF9MT1dFUhApEjsKN0hPVEVMX0FEVkFOQ0VfQk9P",
            "S0lOR19XSU5ET1dfQklEX01PRElGSUVSU19QRVJfQURfR1JPVVAQLBIjCh9C",
            "SURESU5HX1NUUkFURUdJRVNfUEVSX0NVU1RPTUVSEC0SIQodQkFTSUNfVVNF",
            "Ul9MSVNUU19QRVJfQ1VTVE9NRVIQLxIjCh9MT0dJQ0FMX1VTRVJfTElTVFNf",
            "UEVSX0NVU1RPTUVSEDASJwoiUlVMRV9CQVNFRF9VU0VSX0xJU1RTX1BFUl9D",
            "VVNUT01FUhCZARIiCh5CQVNFX0FEX0dST1VQX0FEU19QRVJfQ1VTVE9NRVIQ",
            "NRIoCiRFWFBFUklNRU5UX0FEX0dST1VQX0FEU19QRVJfQ1VTVE9NRVIQNhId",
            "ChlBRF9HUk9VUF9BRFNfUEVSX0NBTVBBSUdOEDcSIwofVEVYVF9BTkRfT1RI",
            "RVJfQURTX1BFUl9BRF9HUk9VUBA4EhoKFklNQUdFX0FEU19QRVJfQURfR1JP",
            "VVAQORIjCh9TSE9QUElOR19TTUFSVF9BRFNfUEVSX0FEX0dST1VQEDoSJgoi",
            "UkVTUE9OU0lWRV9TRUFSQ0hfQURTX1BFUl9BRF9HUk9VUBA7EhgKFEFQUF9B",
            "RFNfUEVSX0FEX0dST1VQEDwSIwofQVBQX0VOR0FHRU1FTlRfQURTX1BFUl9B",
            "RF9HUk9VUBA9EhoKFkxPQ0FMX0FEU19QRVJfQURfR1JPVVAQPhIaChZWSURF",
            "T19BRFNfUEVSX0FEX0dST1VQED8SKwomTEVBRF9GT1JNX0NBTVBBSUdOX0FT",
            "U0VUU19QRVJfQ0FNUEFJR04QjwESKgomUFJPTU9USU9OX0NVU1RPTUVSX0FT",
            "U0VUU19QRVJfQ1VTVE9NRVIQTxIqCiZQUk9NT1RJT05fQ0FNUEFJR05fQVNT",
            "RVRTX1BFUl9DQU1QQUlHThBQEioKJlBST01PVElPTl9BRF9HUk9VUF9BU1NF",
            "VFNfUEVSX0FEX0dST1VQEFESKQokQ0FMTE9VVF9DVVNUT01FUl9BU1NFVFNf",
            "UEVSX0NVU1RPTUVSEIYBEikKJENBTExPVVRfQ0FNUEFJR05fQVNTRVRTX1BF",
            "Ul9DQU1QQUlHThCHARIpCiRDQUxMT1VUX0FEX0dST1VQX0FTU0VUU19QRVJf",
            "QURfR1JPVVAQiAESKgolU0lURUxJTktfQ1VTVE9NRVJfQVNTRVRTX1BFUl9D",
            "VVNUT01FUhCJARIqCiVTSVRFTElOS19DQU1QQUlHTl9BU1NFVFNfUEVSX0NB",
            "TVBBSUdOEIoBEioKJVNJVEVMSU5LX0FEX0dST1VQX0FTU0VUU19QRVJfQURf",
            "R1JPVVAQiwESNAovU1RSVUNUVVJFRF9TTklQUEVUX0NVU1RPTUVSX0FTU0VU",
            "U19QRVJfQ1VTVE9NRVIQjAESNAovU1RSVUNUVVJFRF9TTklQUEVUX0NBTVBB",
            "SUdOX0FTU0VUU19QRVJfQ0FNUEFJR04QjQESNAovU1RSVUNUVVJFRF9TTklQ",
            "UEVUX0FEX0dST1VQX0FTU0VUU19QRVJfQURfR1JPVVAQjgESLAonTU9CSUxF",
            "X0FQUF9DVVNUT01FUl9BU1NFVFNfUEVSX0NVU1RPTUVSEJABEiwKJ01PQklM",
            "RV9BUFBfQ0FNUEFJR05fQVNTRVRTX1BFUl9DQU1QQUlHThCRARIsCidNT0JJ",
            "TEVfQVBQX0FEX0dST1VQX0FTU0VUU19QRVJfQURfR1JPVVAQkgESLwoqSE9U",
            "RUxfQ0FMTE9VVF9DVVNUT01FUl9BU1NFVFNfUEVSX0NVU1RPTUVSEJMBEi8K",
            "KkhPVEVMX0NBTExPVVRfQ0FNUEFJR05fQVNTRVRTX1BFUl9DQU1QQUlHThCU",
            "ARIvCipIT1RFTF9DQUxMT1VUX0FEX0dST1VQX0FTU0VUU19QRVJfQURfR1JP",
            "VVAQlQESJgohQ0FMTF9DVVNUT01FUl9BU1NFVFNfUEVSX0NVU1RPTUVSEJYB",
            "EiYKIUNBTExfQ0FNUEFJR05fQVNTRVRTX1BFUl9DQU1QQUlHThCXARImCiFD",
            "QUxMX0FEX0dST1VQX0FTU0VUU19QRVJfQURfR1JPVVAQmAESJwoiUFJJQ0Vf",
            "Q1VTVE9NRVJfQVNTRVRTX1BFUl9DVVNUT01FUhCaARInCiJQUklDRV9DQU1Q",
            "QUlHTl9BU1NFVFNfUEVSX0NBTVBBSUdOEJsBEicKIlBSSUNFX0FEX0dST1VQ",
            "X0FTU0VUU19QRVJfQURfR1JPVVAQnAESJgohUEFHRV9GRUVEX0FTU0VUX1NF",
            "VFNfUEVSX0NVU1RPTUVSEJ0BEjMKLkRZTkFNSUNfRURVQ0FUSU9OX0ZFRURf",
            "QVNTRVRfU0VUU19QRVJfQ1VTVE9NRVIQngESIwoeQVNTRVRTX1BFUl9QQUdF",
            "X0ZFRURfQVNTRVRfU0VUEJ8BEjAKK0FTU0VUU19QRVJfRFlOQU1JQ19FRFVD",
            "QVRJT05fRkVFRF9BU1NFVF9TRVQQoAESMAorRFlOQU1JQ19SRUFMX0VTVEFU",
            "RV9BU1NFVF9TRVRTX1BFUl9DVVNUT01FUhChARItCihBU1NFVFNfUEVSX0RZ",
            "TkFNSUNfUkVBTF9FU1RBVEVfQVNTRVRfU0VUEKIBEisKJkRZTkFNSUNfQ1VT",
            "VE9NX0FTU0VUX1NFVFNfUEVSX0NVU1RPTUVSEKMBEigKI0FTU0VUU19QRVJf",
            "RFlOQU1JQ19DVVNUT01fQVNTRVRfU0VUEKQBEjcKMkRZTkFNSUNfSE9URUxT",
            "X0FORF9SRU5UQUxTX0FTU0VUX1NFVFNfUEVSX0NVU1RPTUVSEKUBEjQKL0FT",
            "U0VUU19QRVJfRFlOQU1JQ19IT1RFTFNfQU5EX1JFTlRBTFNfQVNTRVRfU0VU",
            "EKYBEioKJURZTkFNSUNfTE9DQUxfQVNTRVRfU0VUU19QRVJfQ1VTVE9NRVIQ",
            "pwESJwoiQVNTRVRTX1BFUl9EWU5BTUlDX0xPQ0FMX0FTU0VUX1NFVBCoARIs",
            "CidEWU5BTUlDX0ZMSUdIVFNfQVNTRVRfU0VUU19QRVJfQ1VTVE9NRVIQqQES",
            "KQokQVNTRVRTX1BFUl9EWU5BTUlDX0ZMSUdIVFNfQVNTRVRfU0VUEKoBEisK",
            "JkRZTkFNSUNfVFJBVkVMX0FTU0VUX1NFVFNfUEVSX0NVU1RPTUVSEKsBEigK",
            "I0FTU0VUU19QRVJfRFlOQU1JQ19UUkFWRUxfQVNTRVRfU0VUEKwBEikKJERZ",
            "TkFNSUNfSk9CU19BU1NFVF9TRVRTX1BFUl9DVVNUT01FUhCtARImCiFBU1NF",
            "VFNfUEVSX0RZTkFNSUNfSk9CU19BU1NFVF9TRVQQrgESEwoPVkVSU0lPTlNf",
            "UEVSX0FEEFISGwoXVVNFUl9GRUVEU19QRVJfQ1VTVE9NRVIQWhIdChlTWVNU",
            "RU1fRkVFRFNfUEVSX0NVU1RPTUVSEFsSHAoYRkVFRF9BVFRSSUJVVEVTX1BF",
            "Ul9GRUVEEFwSGwoXRkVFRF9JVEVNU19QRVJfQ1VTVE9NRVIQXhIfChtDQU1Q",
            "QUlHTl9GRUVEU19QRVJfQ1VTVE9NRVIQXxIkCiBCQVNFX0NBTVBBSUdOX0ZF",
            "RURTX1BFUl9DVVNUT01FUhBgEioKJkVYUEVSSU1FTlRfQ0FNUEFJR05fRkVF",
            "RFNfUEVSX0NVU1RPTUVSEG0SHwobQURfR1JPVVBfRkVFRFNfUEVSX0NVU1RP",
            "TUVSEGESJAogQkFTRV9BRF9HUk9VUF9GRUVEU19QRVJfQ1VTVE9NRVIQYhIq",
            "CiZFWFBFUklNRU5UX0FEX0dST1VQX0ZFRURTX1BFUl9DVVNUT01FUhBuEh8K",
            "G0FEX0dST1VQX0ZFRURTX1BFUl9DQU1QQUlHThBjEh8KG0ZFRURfSVRFTV9T",
            "RVRTX1BFUl9DVVNUT01FUhBkEiAKHEZFRURfSVRFTVNfUEVSX0ZFRURfSVRF",
            "TV9TRVQQZRIlCiFDQU1QQUlHTl9FWFBFUklNRU5UU19QRVJfQ1VTVE9NRVIQ",
            "cBIoCiRFWFBFUklNRU5UX0FSTVNfUEVSX1ZJREVPX0VYUEVSSU1FTlQQcRId",
            "ChlPV05FRF9MQUJFTFNfUEVSX0NVU1RPTUVSEHMSFwoTTEFCRUxTX1BFUl9D",
            "QU1QQUlHThB1EhcKE0xBQkVMU19QRVJfQURfR1JPVVAQdhIaChZMQUJFTFNf",
            "UEVSX0FEX0dST1VQX0FEEHcSIQodTEFCRUxTX1BFUl9BRF9HUk9VUF9DUklU",
            "RVJJT04QeBIeChpUQVJHRVRfQ1VTVE9NRVJTX1BFUl9MQUJFTBB5EicKI0tF",
            "WVdPUkRfUExBTlNfUEVSX1VTRVJfUEVSX0NVU1RPTUVSEHoSMwovS0VZV09S",
            "RF9QTEFOX0FEX0dST1VQX0tFWVdPUkRTX1BFUl9LRVlXT1JEX1BMQU4QexIr",
            "CidLRVlXT1JEX1BMQU5fQURfR1JPVVBTX1BFUl9LRVlXT1JEX1BMQU4QfBIz",
            "Ci9LRVlXT1JEX1BMQU5fTkVHQVRJVkVfS0VZV09SRFNfUEVSX0tFWVdPUkRf",
            "UExBThB9EisKJ0tFWVdPUkRfUExBTl9DQU1QQUlHTlNfUEVSX0tFWVdPUkRf",
            "UExBThB+EiQKH0NPTlZFUlNJT05fQUNUSU9OU19QRVJfQ1VTVE9NRVIQgAES",
            "IQocQkFUQ0hfSk9CX09QRVJBVElPTlNfUEVSX0pPQhCCARIcChdCQVRDSF9K",
            "T0JTX1BFUl9DVVNUT01FUhCDARI5CjRIT1RFTF9DSEVDS19JTl9EQVRFX1JB",
            "TkdFX0JJRF9NT0RJRklFUlNfUEVSX0FEX0dST1VQEIQBQvABCiJjb20uZ29v",
            "Z2xlLmFkcy5nb29nbGVhZHMudjExLmVudW1zQhZSZXNvdXJjZUxpbWl0VHlw",
            "ZVByb3RvUAFaQ2dvb2dsZS5nb2xhbmcub3JnL2dlbnByb3RvL2dvb2dsZWFw",
            "aXMvYWRzL2dvb2dsZWFkcy92MTEvZW51bXM7ZW51bXOiAgNHQUGqAh5Hb29n",
            "bGUuQWRzLkdvb2dsZUFkcy5WMTEuRW51bXPKAh5Hb29nbGVcQWRzXEdvb2ds",
            "ZUFkc1xWMTFcRW51bXPqAiJHb29nbGU6OkFkczo6R29vZ2xlQWRzOjpWMTE6",
            "OkVudW1zYgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Ads.GoogleAds.V11.Enums.ResourceLimitTypeEnum), global::Google.Ads.GoogleAds.V11.Enums.ResourceLimitTypeEnum.Parser, null, null, new[]{ typeof(global::Google.Ads.GoogleAds.V11.Enums.ResourceLimitTypeEnum.Types.ResourceLimitType) }, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  /// <summary>
  /// Container for enum describing possible resource limit types.
  /// </summary>
  public sealed partial class ResourceLimitTypeEnum : pb::IMessage<ResourceLimitTypeEnum>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<ResourceLimitTypeEnum> _parser = new pb::MessageParser<ResourceLimitTypeEnum>(() => new ResourceLimitTypeEnum());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<ResourceLimitTypeEnum> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Ads.GoogleAds.V11.Enums.ResourceLimitTypeReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ResourceLimitTypeEnum() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ResourceLimitTypeEnum(ResourceLimitTypeEnum other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ResourceLimitTypeEnum Clone() {
      return new ResourceLimitTypeEnum(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as ResourceLimitTypeEnum);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(ResourceLimitTypeEnum other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(ResourceLimitTypeEnum other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
        }
      }
    }
    #endif

    #region Nested types
    /// <summary>Container for nested types declared in the ResourceLimitTypeEnum message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static partial class Types {
      /// <summary>
      /// Resource limit type.
      /// </summary>
      public enum ResourceLimitType {
        /// <summary>
        /// No value has been specified.
        /// </summary>
        [pbr::OriginalName("UNSPECIFIED")] Unspecified = 0,
        /// <summary>
        /// Used for return value only. Represents an unclassified operation unknown
        /// in this version.
        /// </summary>
        [pbr::OriginalName("UNKNOWN")] Unknown = 1,
        /// <summary>
        /// Number of ENABLED and PAUSED campaigns per customer.
        /// </summary>
        [pbr::OriginalName("CAMPAIGNS_PER_CUSTOMER")] CampaignsPerCustomer = 2,
        /// <summary>
        /// Number of ENABLED and PAUSED base campaigns per customer.
        /// </summary>
        [pbr::OriginalName("BASE_CAMPAIGNS_PER_CUSTOMER")] BaseCampaignsPerCustomer = 3,
        /// <summary>
        /// Number of ENABLED and PAUSED experiment campaigns per customer.
        /// </summary>
        [pbr::OriginalName("EXPERIMENT_CAMPAIGNS_PER_CUSTOMER")] ExperimentCampaignsPerCustomer = 105,
        /// <summary>
        /// Number of ENABLED and PAUSED Hotel campaigns per customer.
        /// </summary>
        [pbr::OriginalName("HOTEL_CAMPAIGNS_PER_CUSTOMER")] HotelCampaignsPerCustomer = 4,
        /// <summary>
        /// Number of ENABLED and PAUSED Smart Shopping campaigns per customer.
        /// </summary>
        [pbr::OriginalName("SMART_SHOPPING_CAMPAIGNS_PER_CUSTOMER")] SmartShoppingCampaignsPerCustomer = 5,
        /// <summary>
        /// Number of ENABLED ad groups per campaign.
        /// </summary>
        [pbr::OriginalName("AD_GROUPS_PER_CAMPAIGN")] AdGroupsPerCampaign = 6,
        /// <summary>
        /// Number of ENABLED ad groups per Shopping campaign.
        /// </summary>
        [pbr::OriginalName("AD_GROUPS_PER_SHOPPING_CAMPAIGN")] AdGroupsPerShoppingCampaign = 8,
        /// <summary>
        /// Number of ENABLED ad groups per Hotel campaign.
        /// </summary>
        [pbr::OriginalName("AD_GROUPS_PER_HOTEL_CAMPAIGN")] AdGroupsPerHotelCampaign = 9,
        /// <summary>
        /// Number of ENABLED reporting ad groups per local campaign.
        /// </summary>
        [pbr::OriginalName("REPORTING_AD_GROUPS_PER_LOCAL_CAMPAIGN")] ReportingAdGroupsPerLocalCampaign = 10,
        /// <summary>
        /// Number of ENABLED reporting ad groups per App campaign. It includes app
        /// campaign and app campaign for engagement.
        /// </summary>
        [pbr::OriginalName("REPORTING_AD_GROUPS_PER_APP_CAMPAIGN")] ReportingAdGroupsPerAppCampaign = 11,
        /// <summary>
        /// Number of ENABLED managed ad groups per smart campaign.
        /// </summary>
        [pbr::OriginalName("MANAGED_AD_GROUPS_PER_SMART_CAMPAIGN")] ManagedAdGroupsPerSmartCampaign = 52,
        /// <summary>
        /// Number of ENABLED ad group criteria per customer.
        /// An ad group criterion is considered as ENABLED if:
        /// 1. it's not REMOVED
        /// 2. its ad group is not REMOVED
        /// 3. its campaign is not REMOVED.
        /// </summary>
        [pbr::OriginalName("AD_GROUP_CRITERIA_PER_CUSTOMER")] AdGroupCriteriaPerCustomer = 12,
        /// <summary>
        /// Number of ad group criteria across all base campaigns for a customer.
        /// </summary>
        [pbr::OriginalName("BASE_AD_GROUP_CRITERIA_PER_CUSTOMER")] BaseAdGroupCriteriaPerCustomer = 13,
        /// <summary>
        /// Number of ad group criteria across all experiment campaigns for a
        /// customer.
        /// </summary>
        [pbr::OriginalName("EXPERIMENT_AD_GROUP_CRITERIA_PER_CUSTOMER")] ExperimentAdGroupCriteriaPerCustomer = 107,
        /// <summary>
        /// Number of ENABLED ad group criteria per campaign.
        /// An ad group criterion is considered as ENABLED if:
        /// 1. it's not REMOVED
        /// 2. its ad group is not REMOVED.
        /// </summary>
        [pbr::OriginalName("AD_GROUP_CRITERIA_PER_CAMPAIGN")] AdGroupCriteriaPerCampaign = 14,
        /// <summary>
        /// Number of ENABLED campaign criteria per customer.
        /// </summary>
        [pbr::OriginalName("CAMPAIGN_CRITERIA_PER_CUSTOMER")] CampaignCriteriaPerCustomer = 15,
        /// <summary>
        /// Number of ENABLED campaign criteria across all base campaigns for a
        /// customer.
        /// </summary>
        [pbr::OriginalName("BASE_CAMPAIGN_CRITERIA_PER_CUSTOMER")] BaseCampaignCriteriaPerCustomer = 16,
        /// <summary>
        /// Number of ENABLED campaign criteria across all experiment campaigns for a
        /// customer.
        /// </summary>
        [pbr::OriginalName("EXPERIMENT_CAMPAIGN_CRITERIA_PER_CUSTOMER")] ExperimentCampaignCriteriaPerCustomer = 108,
        /// <summary>
        /// Number of ENABLED webpage criteria per customer, including
        /// campaign level and ad group level.
        /// </summary>
        [pbr::OriginalName("WEBPAGE_CRITERIA_PER_CUSTOMER")] WebpageCriteriaPerCustomer = 17,
        /// <summary>
        /// Number of ENABLED webpage criteria across all base campaigns for
        /// a customer.
        /// </summary>
        [pbr::OriginalName("BASE_WEBPAGE_CRITERIA_PER_CUSTOMER")] BaseWebpageCriteriaPerCustomer = 18,
        /// <summary>
        /// Meximum number of ENABLED webpage criteria across all experiment
        /// campaigns for a customer.
        /// </summary>
        [pbr::OriginalName("EXPERIMENT_WEBPAGE_CRITERIA_PER_CUSTOMER")] ExperimentWebpageCriteriaPerCustomer = 19,
        /// <summary>
        /// Number of combined audience criteria per ad group.
        /// </summary>
        [pbr::OriginalName("COMBINED_AUDIENCE_CRITERIA_PER_AD_GROUP")] CombinedAudienceCriteriaPerAdGroup = 20,
        /// <summary>
        /// Limit for placement criterion type group in customer negative criterion.
        /// </summary>
        [pbr::OriginalName("CUSTOMER_NEGATIVE_PLACEMENT_CRITERIA_PER_CUSTOMER")] CustomerNegativePlacementCriteriaPerCustomer = 21,
        /// <summary>
        /// Limit for YouTube TV channels in customer negative criterion.
        /// </summary>
        [pbr::OriginalName("CUSTOMER_NEGATIVE_YOUTUBE_CHANNEL_CRITERIA_PER_CUSTOMER")] CustomerNegativeYoutubeChannelCriteriaPerCustomer = 22,
        /// <summary>
        /// Number of ENABLED criteria per ad group.
        /// </summary>
        [pbr::OriginalName("CRITERIA_PER_AD_GROUP")] CriteriaPerAdGroup = 23,
        /// <summary>
        /// Number of listing group criteria per ad group.
        /// </summary>
        [pbr::OriginalName("LISTING_GROUPS_PER_AD_GROUP")] ListingGroupsPerAdGroup = 24,
        /// <summary>
        /// Number of ENABLED explicitly shared budgets per customer.
        /// </summary>
        [pbr::OriginalName("EXPLICITLY_SHARED_BUDGETS_PER_CUSTOMER")] ExplicitlySharedBudgetsPerCustomer = 25,
        /// <summary>
        /// Number of ENABLED implicitly shared budgets per customer.
        /// </summary>
        [pbr::OriginalName("IMPLICITLY_SHARED_BUDGETS_PER_CUSTOMER")] ImplicitlySharedBudgetsPerCustomer = 26,
        /// <summary>
        /// Number of combined audience criteria per campaign.
        /// </summary>
        [pbr::OriginalName("COMBINED_AUDIENCE_CRITERIA_PER_CAMPAIGN")] CombinedAudienceCriteriaPerCampaign = 27,
        /// <summary>
        /// Number of negative keywords per campaign.
        /// </summary>
        [pbr::OriginalName("NEGATIVE_KEYWORDS_PER_CAMPAIGN")] NegativeKeywordsPerCampaign = 28,
        /// <summary>
        /// Number of excluded campaign criteria in placement dimension, e.g.
        /// placement, mobile application, YouTube channel, etc. The API criterion
        /// type is NOT limited to placement only, and this does not include
        /// exclusions at the ad group or other levels.
        /// </summary>
        [pbr::OriginalName("NEGATIVE_PLACEMENTS_PER_CAMPAIGN")] NegativePlacementsPerCampaign = 29,
        /// <summary>
        /// Number of geo targets per campaign.
        /// </summary>
        [pbr::OriginalName("GEO_TARGETS_PER_CAMPAIGN")] GeoTargetsPerCampaign = 30,
        /// <summary>
        /// Number of negative IP blocks per campaign.
        /// </summary>
        [pbr::OriginalName("NEGATIVE_IP_BLOCKS_PER_CAMPAIGN")] NegativeIpBlocksPerCampaign = 32,
        /// <summary>
        /// Number of proximity targets per campaign.
        /// </summary>
        [pbr::OriginalName("PROXIMITIES_PER_CAMPAIGN")] ProximitiesPerCampaign = 33,
        /// <summary>
        /// Number of listing scopes per Shopping campaign.
        /// </summary>
        [pbr::OriginalName("LISTING_SCOPES_PER_SHOPPING_CAMPAIGN")] ListingScopesPerShoppingCampaign = 34,
        /// <summary>
        /// Number of listing scopes per non-Shopping campaign.
        /// </summary>
        [pbr::OriginalName("LISTING_SCOPES_PER_NON_SHOPPING_CAMPAIGN")] ListingScopesPerNonShoppingCampaign = 35,
        /// <summary>
        /// Number of criteria per negative keyword shared set.
        /// </summary>
        [pbr::OriginalName("NEGATIVE_KEYWORDS_PER_SHARED_SET")] NegativeKeywordsPerSharedSet = 36,
        /// <summary>
        /// Number of criteria per negative placement shared set.
        /// </summary>
        [pbr::OriginalName("NEGATIVE_PLACEMENTS_PER_SHARED_SET")] NegativePlacementsPerSharedSet = 37,
        /// <summary>
        /// Default number of shared sets allowed per type per customer.
        /// </summary>
        [pbr::OriginalName("SHARED_SETS_PER_CUSTOMER_FOR_TYPE_DEFAULT")] SharedSetsPerCustomerForTypeDefault = 40,
        /// <summary>
        /// Number of shared sets of negative placement list type for a
        /// manager customer.
        /// </summary>
        [pbr::OriginalName("SHARED_SETS_PER_CUSTOMER_FOR_NEGATIVE_PLACEMENT_LIST_LOWER")] SharedSetsPerCustomerForNegativePlacementListLower = 41,
        /// <summary>
        /// Number of hotel_advance_booking_window bid modifiers per ad group.
        /// </summary>
        [pbr::OriginalName("HOTEL_ADVANCE_BOOKING_WINDOW_BID_MODIFIERS_PER_AD_GROUP")] HotelAdvanceBookingWindowBidModifiersPerAdGroup = 44,
        /// <summary>
        /// Number of ENABLED shared bidding strategies per customer.
        /// </summary>
        [pbr::OriginalName("BIDDING_STRATEGIES_PER_CUSTOMER")] BiddingStrategiesPerCustomer = 45,
        /// <summary>
        /// Number of open basic user lists per customer.
        /// </summary>
        [pbr::OriginalName("BASIC_USER_LISTS_PER_CUSTOMER")] BasicUserListsPerCustomer = 47,
        /// <summary>
        /// Number of open logical user lists per customer.
        /// </summary>
        [pbr::OriginalName("LOGICAL_USER_LISTS_PER_CUSTOMER")] LogicalUserListsPerCustomer = 48,
        /// <summary>
        /// Number of open rule based user lists per customer.
        /// </summary>
        [pbr::OriginalName("RULE_BASED_USER_LISTS_PER_CUSTOMER")] RuleBasedUserListsPerCustomer = 153,
        /// <summary>
        /// Number of ENABLED and PAUSED ad group ads across all base campaigns for a
        /// customer.
        /// </summary>
        [pbr::OriginalName("BASE_AD_GROUP_ADS_PER_CUSTOMER")] BaseAdGroupAdsPerCustomer = 53,
        /// <summary>
        /// Number of ENABLED and PAUSED ad group ads across all experiment campaigns
        /// for a customer.
        /// </summary>
        [pbr::OriginalName("EXPERIMENT_AD_GROUP_ADS_PER_CUSTOMER")] ExperimentAdGroupAdsPerCustomer = 54,
        /// <summary>
        /// Number of ENABLED and PAUSED ad group ads per campaign.
        /// </summary>
        [pbr::OriginalName("AD_GROUP_ADS_PER_CAMPAIGN")] AdGroupAdsPerCampaign = 55,
        /// <summary>
        /// Number of ENABLED ads per ad group that do not fall in to other buckets.
        /// Includes text and many other types.
        /// </summary>
        [pbr::OriginalName("TEXT_AND_OTHER_ADS_PER_AD_GROUP")] TextAndOtherAdsPerAdGroup = 56,
        /// <summary>
        /// Number of ENABLED image ads per ad group.
        /// </summary>
        [pbr::OriginalName("IMAGE_ADS_PER_AD_GROUP")] ImageAdsPerAdGroup = 57,
        /// <summary>
        /// Number of ENABLED shopping smart ads per ad group.
        /// </summary>
        [pbr::OriginalName("SHOPPING_SMART_ADS_PER_AD_GROUP")] ShoppingSmartAdsPerAdGroup = 58,
        /// <summary>
        /// Number of ENABLED responsive search ads per ad group.
        /// </summary>
        [pbr::OriginalName("RESPONSIVE_SEARCH_ADS_PER_AD_GROUP")] ResponsiveSearchAdsPerAdGroup = 59,
        /// <summary>
        /// Number of ENABLED app ads per ad group.
        /// </summary>
        [pbr::OriginalName("APP_ADS_PER_AD_GROUP")] AppAdsPerAdGroup = 60,
        /// <summary>
        /// Number of ENABLED app engagement ads per ad group.
        /// </summary>
        [pbr::OriginalName("APP_ENGAGEMENT_ADS_PER_AD_GROUP")] AppEngagementAdsPerAdGroup = 61,
        /// <summary>
        /// Number of ENABLED local ads per ad group.
        /// </summary>
        [pbr::OriginalName("LOCAL_ADS_PER_AD_GROUP")] LocalAdsPerAdGroup = 62,
        /// <summary>
        /// Number of ENABLED video ads per ad group.
        /// </summary>
        [pbr::OriginalName("VIDEO_ADS_PER_AD_GROUP")] VideoAdsPerAdGroup = 63,
        /// <summary>
        /// Number of ENABLED lead form CampaignAssets per campaign.
        /// </summary>
        [pbr::OriginalName("LEAD_FORM_CAMPAIGN_ASSETS_PER_CAMPAIGN")] LeadFormCampaignAssetsPerCampaign = 143,
        /// <summary>
        /// Number of ENABLED promotion CustomerAssets per customer.
        /// </summary>
        [pbr::OriginalName("PROMOTION_CUSTOMER_ASSETS_PER_CUSTOMER")] PromotionCustomerAssetsPerCustomer = 79,
        /// <summary>
        /// Number of ENABLED promotion CampaignAssets per campaign.
        /// </summary>
        [pbr::OriginalName("PROMOTION_CAMPAIGN_ASSETS_PER_CAMPAIGN")] PromotionCampaignAssetsPerCampaign = 80,
        /// <summary>
        /// Number of ENABLED promotion AdGroupAssets per ad group.
        /// </summary>
        [pbr::OriginalName("PROMOTION_AD_GROUP_ASSETS_PER_AD_GROUP")] PromotionAdGroupAssetsPerAdGroup = 81,
        /// <summary>
        /// Number of ENABLED callout CustomerAssets per customer.
        /// </summary>
        [pbr::OriginalName("CALLOUT_CUSTOMER_ASSETS_PER_CUSTOMER")] CalloutCustomerAssetsPerCustomer = 134,
        /// <summary>
        /// Number of ENABLED callout CampaignAssets per campaign.
        /// </summary>
        [pbr::OriginalName("CALLOUT_CAMPAIGN_ASSETS_PER_CAMPAIGN")] CalloutCampaignAssetsPerCampaign = 135,
        /// <summary>
        /// Number of ENABLED callout AdGroupAssets per ad group.
        /// </summary>
        [pbr::OriginalName("CALLOUT_AD_GROUP_ASSETS_PER_AD_GROUP")] CalloutAdGroupAssetsPerAdGroup = 136,
        /// <summary>
        /// Number of ENABLED sitelink CustomerAssets per customer.
        /// </summary>
        [pbr::OriginalName("SITELINK_CUSTOMER_ASSETS_PER_CUSTOMER")] SitelinkCustomerAssetsPerCustomer = 137,
        /// <summary>
        /// Number of ENABLED sitelink CampaignAssets per campaign.
        /// </summary>
        [pbr::OriginalName("SITELINK_CAMPAIGN_ASSETS_PER_CAMPAIGN")] SitelinkCampaignAssetsPerCampaign = 138,
        /// <summary>
        /// Number of ENABLED sitelink AdGroupAssets per ad group.
        /// </summary>
        [pbr::OriginalName("SITELINK_AD_GROUP_ASSETS_PER_AD_GROUP")] SitelinkAdGroupAssetsPerAdGroup = 139,
        /// <summary>
        /// Number of ENABLED structured snippet CustomerAssets per customer.
        /// </summary>
        [pbr::OriginalName("STRUCTURED_SNIPPET_CUSTOMER_ASSETS_PER_CUSTOMER")] StructuredSnippetCustomerAssetsPerCustomer = 140,
        /// <summary>
        /// Number of ENABLED structured snippet CampaignAssets per campaign.
        /// </summary>
        [pbr::OriginalName("STRUCTURED_SNIPPET_CAMPAIGN_ASSETS_PER_CAMPAIGN")] StructuredSnippetCampaignAssetsPerCampaign = 141,
        /// <summary>
        /// Number of ENABLED structured snippet AdGroupAssets per ad group.
        /// </summary>
        [pbr::OriginalName("STRUCTURED_SNIPPET_AD_GROUP_ASSETS_PER_AD_GROUP")] StructuredSnippetAdGroupAssetsPerAdGroup = 142,
        /// <summary>
        /// Number of ENABLED mobile app CustomerAssets per customer.
        /// </summary>
        [pbr::OriginalName("MOBILE_APP_CUSTOMER_ASSETS_PER_CUSTOMER")] MobileAppCustomerAssetsPerCustomer = 144,
        /// <summary>
        /// Number of ENABLED mobile app CampaignAssets per campaign.
        /// </summary>
        [pbr::OriginalName("MOBILE_APP_CAMPAIGN_ASSETS_PER_CAMPAIGN")] MobileAppCampaignAssetsPerCampaign = 145,
        /// <summary>
        /// Number of ENABLED mobile app AdGroupAssets per ad group.
        /// </summary>
        [pbr::OriginalName("MOBILE_APP_AD_GROUP_ASSETS_PER_AD_GROUP")] MobileAppAdGroupAssetsPerAdGroup = 146,
        /// <summary>
        /// Number of ENABLED hotel callout CustomerAssets per customer.
        /// </summary>
        [pbr::OriginalName("HOTEL_CALLOUT_CUSTOMER_ASSETS_PER_CUSTOMER")] HotelCalloutCustomerAssetsPerCustomer = 147,
        /// <summary>
        /// Number of ENABLED hotel callout CampaignAssets per campaign.
        /// </summary>
        [pbr::OriginalName("HOTEL_CALLOUT_CAMPAIGN_ASSETS_PER_CAMPAIGN")] HotelCalloutCampaignAssetsPerCampaign = 148,
        /// <summary>
        /// Number of ENABLED hotel callout AdGroupAssets per ad group.
        /// </summary>
        [pbr::OriginalName("HOTEL_CALLOUT_AD_GROUP_ASSETS_PER_AD_GROUP")] HotelCalloutAdGroupAssetsPerAdGroup = 149,
        /// <summary>
        /// Number of ENABLED call CustomerAssets per customer.
        /// </summary>
        [pbr::OriginalName("CALL_CUSTOMER_ASSETS_PER_CUSTOMER")] CallCustomerAssetsPerCustomer = 150,
        /// <summary>
        /// Number of ENABLED call CampaignAssets per campaign.
        /// </summary>
        [pbr::OriginalName("CALL_CAMPAIGN_ASSETS_PER_CAMPAIGN")] CallCampaignAssetsPerCampaign = 151,
        /// <summary>
        /// Number of ENABLED call AdGroupAssets per ad group.
        /// </summary>
        [pbr::OriginalName("CALL_AD_GROUP_ASSETS_PER_AD_GROUP")] CallAdGroupAssetsPerAdGroup = 152,
        /// <summary>
        /// Number of ENABLED price CustomerAssets per customer.
        /// </summary>
        [pbr::OriginalName("PRICE_CUSTOMER_ASSETS_PER_CUSTOMER")] PriceCustomerAssetsPerCustomer = 154,
        /// <summary>
        /// Number of ENABLED price CampaignAssets per campaign.
        /// </summary>
        [pbr::OriginalName("PRICE_CAMPAIGN_ASSETS_PER_CAMPAIGN")] PriceCampaignAssetsPerCampaign = 155,
        /// <summary>
        /// Number of ENABLED price AdGroupAssets per ad group.
        /// </summary>
        [pbr::OriginalName("PRICE_AD_GROUP_ASSETS_PER_AD_GROUP")] PriceAdGroupAssetsPerAdGroup = 156,
        /// <summary>
        /// Number of ENABLED page feed asset sets per customer.
        /// </summary>
        [pbr::OriginalName("PAGE_FEED_ASSET_SETS_PER_CUSTOMER")] PageFeedAssetSetsPerCustomer = 157,
        /// <summary>
        /// Number of ENABLED dynamic education feed asset sets per customer.
        /// </summary>
        [pbr::OriginalName("DYNAMIC_EDUCATION_FEED_ASSET_SETS_PER_CUSTOMER")] DynamicEducationFeedAssetSetsPerCustomer = 158,
        /// <summary>
        /// Number of ENABLED assets per page feed asset set.
        /// </summary>
        [pbr::OriginalName("ASSETS_PER_PAGE_FEED_ASSET_SET")] AssetsPerPageFeedAssetSet = 159,
        /// <summary>
        /// Number of ENABLED assets per dynamic education asset set.
        /// </summary>
        [pbr::OriginalName("ASSETS_PER_DYNAMIC_EDUCATION_FEED_ASSET_SET")] AssetsPerDynamicEducationFeedAssetSet = 160,
        /// <summary>
        /// Number of ENABLED dynamic real estate asset sets per customer.
        /// </summary>
        [pbr::OriginalName("DYNAMIC_REAL_ESTATE_ASSET_SETS_PER_CUSTOMER")] DynamicRealEstateAssetSetsPerCustomer = 161,
        /// <summary>
        /// Number of ENABLED assets per dynamic real estate asset set.
        /// </summary>
        [pbr::OriginalName("ASSETS_PER_DYNAMIC_REAL_ESTATE_ASSET_SET")] AssetsPerDynamicRealEstateAssetSet = 162,
        /// <summary>
        /// Number of ENABLED dynamic custom asset sets per customer.
        /// </summary>
        [pbr::OriginalName("DYNAMIC_CUSTOM_ASSET_SETS_PER_CUSTOMER")] DynamicCustomAssetSetsPerCustomer = 163,
        /// <summary>
        /// Number of ENABLED assets per dynamic custom asset set.
        /// </summary>
        [pbr::OriginalName("ASSETS_PER_DYNAMIC_CUSTOM_ASSET_SET")] AssetsPerDynamicCustomAssetSet = 164,
        /// <summary>
        /// Number of ENABLED dynamic hotels and rentals asset sets per
        /// customer.
        /// </summary>
        [pbr::OriginalName("DYNAMIC_HOTELS_AND_RENTALS_ASSET_SETS_PER_CUSTOMER")] DynamicHotelsAndRentalsAssetSetsPerCustomer = 165,
        /// <summary>
        /// Number of ENABLED assets per dynamic hotels and rentals asset set.
        /// </summary>
        [pbr::OriginalName("ASSETS_PER_DYNAMIC_HOTELS_AND_RENTALS_ASSET_SET")] AssetsPerDynamicHotelsAndRentalsAssetSet = 166,
        /// <summary>
        /// Number of ENABLED dynamic local asset sets per customer.
        /// </summary>
        [pbr::OriginalName("DYNAMIC_LOCAL_ASSET_SETS_PER_CUSTOMER")] DynamicLocalAssetSetsPerCustomer = 167,
        /// <summary>
        /// Number of ENABLED assets per dynamic local asset set.
        /// </summary>
        [pbr::OriginalName("ASSETS_PER_DYNAMIC_LOCAL_ASSET_SET")] AssetsPerDynamicLocalAssetSet = 168,
        /// <summary>
        /// Number of ENABLED dynamic flights asset sets per customer.
        /// </summary>
        [pbr::OriginalName("DYNAMIC_FLIGHTS_ASSET_SETS_PER_CUSTOMER")] DynamicFlightsAssetSetsPerCustomer = 169,
        /// <summary>
        /// Number of ENABLED assets per dynamic flights asset set.
        /// </summary>
        [pbr::OriginalName("ASSETS_PER_DYNAMIC_FLIGHTS_ASSET_SET")] AssetsPerDynamicFlightsAssetSet = 170,
        /// <summary>
        /// Number of ENABLED dynamic travel asset sets per customer.
        /// </summary>
        [pbr::OriginalName("DYNAMIC_TRAVEL_ASSET_SETS_PER_CUSTOMER")] DynamicTravelAssetSetsPerCustomer = 171,
        /// <summary>
        /// Number of ENABLED assets per dynamic travel asset set.
        /// </summary>
        [pbr::OriginalName("ASSETS_PER_DYNAMIC_TRAVEL_ASSET_SET")] AssetsPerDynamicTravelAssetSet = 172,
        /// <summary>
        /// Number of ENABLED dynamic jobs asset sets per customer.
        /// </summary>
        [pbr::OriginalName("DYNAMIC_JOBS_ASSET_SETS_PER_CUSTOMER")] DynamicJobsAssetSetsPerCustomer = 173,
        /// <summary>
        /// Number of ENABLED assets per dynamic jobs asset set.
        /// </summary>
        [pbr::OriginalName("ASSETS_PER_DYNAMIC_JOBS_ASSET_SET")] AssetsPerDynamicJobsAssetSet = 174,
        /// <summary>
        /// Number of versions per ad.
        /// </summary>
        [pbr::OriginalName("VERSIONS_PER_AD")] VersionsPerAd = 82,
        /// <summary>
        /// Number of ENABLED user feeds per customer.
        /// </summary>
        [pbr::OriginalName("USER_FEEDS_PER_CUSTOMER")] UserFeedsPerCustomer = 90,
        /// <summary>
        /// Number of ENABLED system feeds per customer.
        /// </summary>
        [pbr::OriginalName("SYSTEM_FEEDS_PER_CUSTOMER")] SystemFeedsPerCustomer = 91,
        /// <summary>
        /// Number of feed attributes per feed.
        /// </summary>
        [pbr::OriginalName("FEED_ATTRIBUTES_PER_FEED")] FeedAttributesPerFeed = 92,
        /// <summary>
        /// Number of ENABLED feed items per customer.
        /// </summary>
        [pbr::OriginalName("FEED_ITEMS_PER_CUSTOMER")] FeedItemsPerCustomer = 94,
        /// <summary>
        /// Number of ENABLED campaign feeds per customer.
        /// </summary>
        [pbr::OriginalName("CAMPAIGN_FEEDS_PER_CUSTOMER")] CampaignFeedsPerCustomer = 95,
        /// <summary>
        /// Number of ENABLED campaign feeds across all base campaigns for a
        /// customer.
        /// </summary>
        [pbr::OriginalName("BASE_CAMPAIGN_FEEDS_PER_CUSTOMER")] BaseCampaignFeedsPerCustomer = 96,
        /// <summary>
        /// Number of ENABLED campaign feeds across all experiment campaigns for a
        /// customer.
        /// </summary>
        [pbr::OriginalName("EXPERIMENT_CAMPAIGN_FEEDS_PER_CUSTOMER")] ExperimentCampaignFeedsPerCustomer = 109,
        /// <summary>
        /// Number of ENABLED ad group feeds per customer.
        /// </summary>
        [pbr::OriginalName("AD_GROUP_FEEDS_PER_CUSTOMER")] AdGroupFeedsPerCustomer = 97,
        /// <summary>
        /// Number of ENABLED ad group feeds across all base campaigns for a
        /// customer.
        /// </summary>
        [pbr::OriginalName("BASE_AD_GROUP_FEEDS_PER_CUSTOMER")] BaseAdGroupFeedsPerCustomer = 98,
        /// <summary>
        /// Number of ENABLED ad group feeds across all experiment campaigns for a
        /// customer.
        /// </summary>
        [pbr::OriginalName("EXPERIMENT_AD_GROUP_FEEDS_PER_CUSTOMER")] ExperimentAdGroupFeedsPerCustomer = 110,
        /// <summary>
        /// Number of ENABLED ad group feeds per campaign.
        /// </summary>
        [pbr::OriginalName("AD_GROUP_FEEDS_PER_CAMPAIGN")] AdGroupFeedsPerCampaign = 99,
        /// <summary>
        /// Number of ENABLED feed items per customer.
        /// </summary>
        [pbr::OriginalName("FEED_ITEM_SETS_PER_CUSTOMER")] FeedItemSetsPerCustomer = 100,
        /// <summary>
        /// Number of feed items per feed item set.
        /// </summary>
        [pbr::OriginalName("FEED_ITEMS_PER_FEED_ITEM_SET")] FeedItemsPerFeedItemSet = 101,
        /// <summary>
        /// Number of ENABLED campaign experiments per customer.
        /// </summary>
        [pbr::OriginalName("CAMPAIGN_EXPERIMENTS_PER_CUSTOMER")] CampaignExperimentsPerCustomer = 112,
        /// <summary>
        /// Number of video experiment arms per experiment.
        /// </summary>
        [pbr::OriginalName("EXPERIMENT_ARMS_PER_VIDEO_EXPERIMENT")] ExperimentArmsPerVideoExperiment = 113,
        /// <summary>
        /// Number of owned labels per customer.
        /// </summary>
        [pbr::OriginalName("OWNED_LABELS_PER_CUSTOMER")] OwnedLabelsPerCustomer = 115,
        /// <summary>
        /// Number of applied labels per campaign.
        /// </summary>
        [pbr::OriginalName("LABELS_PER_CAMPAIGN")] LabelsPerCampaign = 117,
        /// <summary>
        /// Number of applied labels per ad group.
        /// </summary>
        [pbr::OriginalName("LABELS_PER_AD_GROUP")] LabelsPerAdGroup = 118,
        /// <summary>
        /// Number of applied labels per ad group ad.
        /// </summary>
        [pbr::OriginalName("LABELS_PER_AD_GROUP_AD")] LabelsPerAdGroupAd = 119,
        /// <summary>
        /// Number of applied labels per ad group criterion.
        /// </summary>
        [pbr::OriginalName("LABELS_PER_AD_GROUP_CRITERION")] LabelsPerAdGroupCriterion = 120,
        /// <summary>
        /// Number of customers with a single label applied.
        /// </summary>
        [pbr::OriginalName("TARGET_CUSTOMERS_PER_LABEL")] TargetCustomersPerLabel = 121,
        /// <summary>
        /// Number of ENABLED keyword plans per user per customer.
        /// The limit is applied per &lt;user, customer> pair because by default a plan
        /// is private to a user of a customer. Each user of a customer has his or
        /// her own independent limit.
        /// </summary>
        [pbr::OriginalName("KEYWORD_PLANS_PER_USER_PER_CUSTOMER")] KeywordPlansPerUserPerCustomer = 122,
        /// <summary>
        /// Number of keyword plan ad group keywords per keyword plan.
        /// </summary>
        [pbr::OriginalName("KEYWORD_PLAN_AD_GROUP_KEYWORDS_PER_KEYWORD_PLAN")] KeywordPlanAdGroupKeywordsPerKeywordPlan = 123,
        /// <summary>
        /// Number of keyword plan ad groups per keyword plan.
        /// </summary>
        [pbr::OriginalName("KEYWORD_PLAN_AD_GROUPS_PER_KEYWORD_PLAN")] KeywordPlanAdGroupsPerKeywordPlan = 124,
        /// <summary>
        /// Number of keyword plan negative keywords (both campaign and ad group) per
        /// keyword plan.
        /// </summary>
        [pbr::OriginalName("KEYWORD_PLAN_NEGATIVE_KEYWORDS_PER_KEYWORD_PLAN")] KeywordPlanNegativeKeywordsPerKeywordPlan = 125,
        /// <summary>
        /// Number of keyword plan campaigns per keyword plan.
        /// </summary>
        [pbr::OriginalName("KEYWORD_PLAN_CAMPAIGNS_PER_KEYWORD_PLAN")] KeywordPlanCampaignsPerKeywordPlan = 126,
        /// <summary>
        /// Number of ENABLED conversion actions per customer.
        /// </summary>
        [pbr::OriginalName("CONVERSION_ACTIONS_PER_CUSTOMER")] ConversionActionsPerCustomer = 128,
        /// <summary>
        /// Number of operations in a single batch job.
        /// </summary>
        [pbr::OriginalName("BATCH_JOB_OPERATIONS_PER_JOB")] BatchJobOperationsPerJob = 130,
        /// <summary>
        /// Number of PENDING or ENABLED batch jobs per customer.
        /// </summary>
        [pbr::OriginalName("BATCH_JOBS_PER_CUSTOMER")] BatchJobsPerCustomer = 131,
        /// <summary>
        /// Number of hotel check-in date range bid modifiers per ad agroup.
        /// </summary>
        [pbr::OriginalName("HOTEL_CHECK_IN_DATE_RANGE_BID_MODIFIERS_PER_AD_GROUP")] HotelCheckInDateRangeBidModifiersPerAdGroup = 132,
      }

    }
    #endregion

  }

  #endregion

}

#endregion Designer generated code
