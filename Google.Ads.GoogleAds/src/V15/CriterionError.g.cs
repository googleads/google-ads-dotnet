// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: google/ads/googleads/v15/errors/criterion_error.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021, 8981
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Google.Ads.GoogleAds.V15.Errors {

  /// <summary>Holder for reflection information generated from google/ads/googleads/v15/errors/criterion_error.proto</summary>
  public static partial class CriterionErrorReflection {

    #region Descriptor
    /// <summary>File descriptor for google/ads/googleads/v15/errors/criterion_error.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static CriterionErrorReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CjVnb29nbGUvYWRzL2dvb2dsZWFkcy92MTUvZXJyb3JzL2NyaXRlcmlvbl9l",
            "cnJvci5wcm90bxIfZ29vZ2xlLmFkcy5nb29nbGVhZHMudjE1LmVycm9ycyLg",
            "LwoSQ3JpdGVyaW9uRXJyb3JFbnVtIskvCg5Dcml0ZXJpb25FcnJvchIPCgtV",
            "TlNQRUNJRklFRBAAEgsKB1VOS05PV04QARIaChZDT05DUkVURV9UWVBFX1JF",
            "UVVJUkVEEAISHQoZSU5WQUxJRF9FWENMVURFRF9DQVRFR09SWRADEhgKFElO",
            "VkFMSURfS0VZV09SRF9URVhUEAQSGQoVS0VZV09SRF9URVhUX1RPT19MT05H",
            "EAUSHgoaS0VZV09SRF9IQVNfVE9PX01BTllfV09SRFMQBhIdChlLRVlXT1JE",
            "X0hBU19JTlZBTElEX0NIQVJTEAcSGQoVSU5WQUxJRF9QTEFDRU1FTlRfVVJM",
            "EAgSFQoRSU5WQUxJRF9VU0VSX0xJU1QQCRIZChVJTlZBTElEX1VTRVJfSU5U",
            "RVJFU1QQChIkCiBJTlZBTElEX0ZPUk1BVF9GT1JfUExBQ0VNRU5UX1VSTBAL",
            "Eh0KGVBMQUNFTUVOVF9VUkxfSVNfVE9PX0xPTkcQDBIiCh5QTEFDRU1FTlRf",
            "VVJMX0hBU19JTExFR0FMX0NIQVIQDRIsCihQTEFDRU1FTlRfVVJMX0hBU19N",
            "VUxUSVBMRV9TSVRFU19JTl9MSU5FEA4SOQo1UExBQ0VNRU5UX0lTX05PVF9B",
            "VkFJTEFCTEVfRk9SX1RBUkdFVElOR19PUl9FWENMVVNJT04QDxIWChJJTlZB",
            "TElEX1RPUElDX1BBVEgQEBIeChpJTlZBTElEX1lPVVRVQkVfQ0hBTk5FTF9J",
            "RBAREhwKGElOVkFMSURfWU9VVFVCRV9WSURFT19JRBASEicKI1lPVVRVQkVf",
            "VkVSVElDQUxfQ0hBTk5FTF9ERVBSRUNBVEVEEBMSKgomWU9VVFVCRV9ERU1P",
            "R1JBUEhJQ19DSEFOTkVMX0RFUFJFQ0FURUQQFBIbChdZT1VUVUJFX1VSTF9V",
            "TlNVUFBPUlRFRBAVEiAKHENBTk5PVF9FWENMVURFX0NSSVRFUklBX1RZUEUQ",
            "FhIcChhDQU5OT1RfQUREX0NSSVRFUklBX1RZUEUQFxIkCiBDQU5OT1RfRVhD",
            "TFVERV9TSU1JTEFSX1VTRVJfTElTVBAaEh8KG0NBTk5PVF9BRERfQ0xPU0VE",
            "X1VTRVJfTElTVBAbEjoKNkNBTk5PVF9BRERfRElTUExBWV9PTkxZX0xJU1RT",
            "X1RPX1NFQVJDSF9PTkxZX0NBTVBBSUdOUxAcEjUKMUNBTk5PVF9BRERfRElT",
            "UExBWV9PTkxZX0xJU1RTX1RPX1NFQVJDSF9DQU1QQUlHTlMQHRI3CjNDQU5O",
            "T1RfQUREX0RJU1BMQVlfT05MWV9MSVNUU19UT19TSE9QUElOR19DQU1QQUlH",
            "TlMQHhIxCi1DQU5OT1RfQUREX1VTRVJfSU5URVJFU1RTX1RPX1NFQVJDSF9D",
            "QU1QQUlHTlMQHxI5CjVDQU5OT1RfU0VUX0JJRFNfT05fQ1JJVEVSSU9OX1RZ",
            "UEVfSU5fU0VBUkNIX0NBTVBBSUdOUxAgEjcKM0NBTk5PVF9BRERfVVJMU19U",
            "T19DUklURVJJT05fVFlQRV9GT1JfQ0FNUEFJR05fVFlQRRAhEh0KGUlOVkFM",
            "SURfQ09NQklORURfQVVESUVOQ0UQehIbChdJTlZBTElEX0NVU1RPTV9BRkZJ",
            "TklUWRBgEhkKFUlOVkFMSURfQ1VTVE9NX0lOVEVOVBBhEhsKF0lOVkFMSURf",
            "Q1VTVE9NX0FVRElFTkNFEHkSFgoSSU5WQUxJRF9JUF9BRERSRVNTECISFQoR",
            "SU5WQUxJRF9JUF9GT1JNQVQQIxIWChJJTlZBTElEX01PQklMRV9BUFAQJBIf",
            "ChtJTlZBTElEX01PQklMRV9BUFBfQ0FURUdPUlkQJRIYChRJTlZBTElEX0NS",
            "SVRFUklPTl9JRBAmEhsKF0NBTk5PVF9UQVJHRVRfQ1JJVEVSSU9OECcSJAog",
            "Q0FOTk9UX1RBUkdFVF9PQlNPTEVURV9DUklURVJJT04QKBIiCh5DUklURVJJ",
            "T05fSURfQU5EX1RZUEVfTUlTTUFUQ0gQKRIcChhJTlZBTElEX1BST1hJTUlU",
            "WV9SQURJVVMQKhIiCh5JTlZBTElEX1BST1hJTUlUWV9SQURJVVNfVU5JVFMQ",
            "KxIgChxJTlZBTElEX1NUUkVFVEFERFJFU1NfTEVOR1RIECwSGwoXSU5WQUxJ",
            "RF9DSVRZTkFNRV9MRU5HVEgQLRIdChlJTlZBTElEX1JFR0lPTkNPREVfTEVO",
            "R1RIEC4SHQoZSU5WQUxJRF9SRUdJT05OQU1FX0xFTkdUSBAvEh0KGUlOVkFM",
            "SURfUE9TVEFMQ09ERV9MRU5HVEgQMBIYChRJTlZBTElEX0NPVU5UUllfQ09E",
            "RRAxEhQKEElOVkFMSURfTEFUSVRVREUQMhIVChFJTlZBTElEX0xPTkdJVFVE",
            "RRAzEjYKMlBST1hJTUlUWV9HRU9QT0lOVF9BTkRfQUREUkVTU19CT1RIX0NB",
            "Tk5PVF9CRV9OVUxMEDQSHQoZSU5WQUxJRF9QUk9YSU1JVFlfQUREUkVTUxA1",
            "EhwKGElOVkFMSURfVVNFUl9ET01BSU5fTkFNRRA2EiAKHENSSVRFUklPTl9Q",
            "QVJBTUVURVJfVE9PX0xPTkcQNxImCiJBRF9TQ0hFRFVMRV9USU1FX0lOVEVS",
            "VkFMU19PVkVSTEFQEDgSMgouQURfU0NIRURVTEVfSU5URVJWQUxfQ0FOTk9U",
            "X1NQQU5fTVVMVElQTEVfREFZUxA5EiUKIUFEX1NDSEVEVUxFX0lOVkFMSURf",
            "VElNRV9JTlRFUlZBTBA6EjAKLEFEX1NDSEVEVUxFX0VYQ0VFREVEX0lOVEVS",
            "VkFMU19QRVJfREFZX0xJTUlUEDsSLworQURfU0NIRURVTEVfQ1JJVEVSSU9O",
            "X0lEX01JU01BVENISU5HX0ZJRUxEUxA8EiQKIENBTk5PVF9CSURfTU9ESUZZ",
            "X0NSSVRFUklPTl9UWVBFED0SMgouQ0FOTk9UX0JJRF9NT0RJRllfQ1JJVEVS",
            "SU9OX0NBTVBBSUdOX09QVEVEX09VVBA+EigKJENBTk5PVF9CSURfTU9ESUZZ",
            "X05FR0FUSVZFX0NSSVRFUklPThA/Eh8KG0JJRF9NT0RJRklFUl9BTFJFQURZ",
            "X0VYSVNUUxBAEhcKE0ZFRURfSURfTk9UX0FMTE9XRUQQQRIoCiRBQ0NPVU5U",
            "X0lORUxJR0lCTEVfRk9SX0NSSVRFUklBX1RZUEUQQhIuCipDUklURVJJQV9U",
            "WVBFX0lOVkFMSURfRk9SX0JJRERJTkdfU1RSQVRFR1kQQxIcChhDQU5OT1Rf",
            "RVhDTFVERV9DUklURVJJT04QRBIbChdDQU5OT1RfUkVNT1ZFX0NSSVRFUklP",
            "ThBFEiQKIElOVkFMSURfUFJPRFVDVF9CSURESU5HX0NBVEVHT1JZEEwSHAoY",
            "TUlTU0lOR19TSE9QUElOR19TRVRUSU5HEE0SHQoZSU5WQUxJRF9NQVRDSElO",
            "R19GVU5DVElPThBOEh8KG0xPQ0FUSU9OX0ZJTFRFUl9OT1RfQUxMT1dFRBBP",
            "EiQKIElOVkFMSURfRkVFRF9GT1JfTE9DQVRJT05fRklMVEVSEGISGwoXTE9D",
            "QVRJT05fRklMVEVSX0lOVkFMSUQQUBI3CjNDQU5OT1RfU0VUX0dFT19UQVJH",
            "RVRfQ09OU1RBTlRTX1dJVEhfRkVFRF9JVEVNX1NFVFMQexInCiJDQU5OT1Rf",
            "U0VUX0JPVEhfQVNTRVRfU0VUX0FORF9GRUVEEIwBEjMKLkNBTk5PVF9TRVRf",
            "RkVFRF9PUl9GRUVEX0lURU1fU0VUU19GT1JfQ1VTVE9NRVIQjgESLAonQ0FO",
            "Tk9UX1NFVF9BU1NFVF9TRVRfRklFTERfRk9SX0NVU1RPTUVSEJYBEjQKL0NB",
            "Tk5PVF9TRVRfR0VPX1RBUkdFVF9DT05TVEFOVFNfV0lUSF9BU1NFVF9TRVRT",
            "EI8BEi4KKUNBTk5PVF9TRVRfQVNTRVRfU0VUU19XSVRIX0ZFRURfSVRFTV9T",
            "RVRTEJABEiUKIElOVkFMSURfTE9DQVRJT05fR1JPVVBfQVNTRVRfU0VUEI0B",
            "EiEKHUlOVkFMSURfTE9DQVRJT05fR1JPVVBfUkFESVVTEHwSJgoiSU5WQUxJ",
            "RF9MT0NBVElPTl9HUk9VUF9SQURJVVNfVU5JVBB9EjIKLkNBTk5PVF9BVFRB",
            "Q0hfQ1JJVEVSSUFfQVRfQ0FNUEFJR05fQU5EX0FER1JPVVAQURI5CjVIT1RF",
            "TF9MRU5HVEhfT0ZfU1RBWV9PVkVSTEFQU19XSVRIX0VYSVNUSU5HX0NSSVRF",
            "UklPThBSEkEKPUhPVEVMX0FEVkFOQ0VfQk9PS0lOR19XSU5ET1dfT1ZFUkxB",
            "UFNfV0lUSF9FWElTVElOR19DUklURVJJT04QUxIuCipGSUVMRF9JTkNPTVBB",
            "VElCTEVfV0lUSF9ORUdBVElWRV9UQVJHRVRJTkcQVBIdChlJTlZBTElEX1dF",
            "QlBBR0VfQ09ORElUSU9OEFUSIQodSU5WQUxJRF9XRUJQQUdFX0NPTkRJVElP",
            "Tl9VUkwQVhIpCiVXRUJQQUdFX0NPTkRJVElPTl9VUkxfQ0FOTk9UX0JFX0VN",
            "UFRZEFcSLgoqV0VCUEFHRV9DT05ESVRJT05fVVJMX1VOU1VQUE9SVEVEX1BS",
            "T1RPQ09MEFgSLgoqV0VCUEFHRV9DT05ESVRJT05fVVJMX0NBTk5PVF9CRV9J",
            "UF9BRERSRVNTEFkSRQpBV0VCUEFHRV9DT05ESVRJT05fVVJMX0RPTUFJTl9O",
            "T1RfQ09OU0lTVEVOVF9XSVRIX0NBTVBBSUdOX1NFVFRJTkcQWhIxCi1XRUJQ",
            "QUdFX0NPTkRJVElPTl9VUkxfQ0FOTk9UX0JFX1BVQkxJQ19TVUZGSVgQWxIv",
            "CitXRUJQQUdFX0NPTkRJVElPTl9VUkxfSU5WQUxJRF9QVUJMSUNfU1VGRklY",
            "EFwSOQo1V0VCUEFHRV9DT05ESVRJT05fVVJMX1ZBTFVFX1RSQUNLX1ZBTFVF",
            "X05PVF9TVVBQT1JURUQQXRI8CjhXRUJQQUdFX0NSSVRFUklPTl9VUkxfRVFV",
            "QUxTX0NBTl9IQVZFX09OTFlfT05FX0NPTkRJVElPThBeEjcKM1dFQlBBR0Vf",
            "Q1JJVEVSSU9OX05PVF9TVVBQT1JURURfT05fTk9OX0RTQV9BRF9HUk9VUBBf",
            "EjcKM0NBTk5PVF9UQVJHRVRfVVNFUl9MSVNUX0ZPUl9TTUFSVF9ESVNQTEFZ",
            "X0NBTVBBSUdOUxBjEjEKLUNBTk5PVF9UQVJHRVRfUExBQ0VNRU5UU19GT1Jf",
            "U0VBUkNIX0NBTVBBSUdOUxB+EioKJkxJU1RJTkdfU0NPUEVfVE9PX01BTllf",
            "RElNRU5TSU9OX1RZUEVTEGQSJwojTElTVElOR19TQ09QRV9UT09fTUFOWV9J",
            "Tl9PUEVSQVRPUlMQZRIrCidMSVNUSU5HX1NDT1BFX0lOX09QRVJBVE9SX05P",
            "VF9TVVBQT1JURUQQZhIkCiBEVVBMSUNBVEVfTElTVElOR19ESU1FTlNJT05f",
            "VFlQRRBnEiUKIURVUExJQ0FURV9MSVNUSU5HX0RJTUVOU0lPTl9WQUxVRRBo",
            "EjAKLENBTk5PVF9TRVRfQklEU19PTl9MSVNUSU5HX0dST1VQX1NVQkRJVklT",
            "SU9OEGkSIwofSU5WQUxJRF9MSVNUSU5HX0dST1VQX0hJRVJBUkNIWRBqEisK",
            "J0xJU1RJTkdfR1JPVVBfVU5JVF9DQU5OT1RfSEFWRV9DSElMRFJFThBrEjIK",
            "LkxJU1RJTkdfR1JPVVBfU1VCRElWSVNJT05fUkVRVUlSRVNfT1RIRVJTX0NB",
            "U0UQbBI6CjZMSVNUSU5HX0dST1VQX1JFUVVJUkVTX1NBTUVfRElNRU5TSU9O",
            "X1RZUEVfQVNfU0lCTElOR1MQbRIgChxMSVNUSU5HX0dST1VQX0FMUkVBRFlf",
            "RVhJU1RTEG4SIAocTElTVElOR19HUk9VUF9ET0VTX05PVF9FWElTVBBvEiMK",
            "H0xJU1RJTkdfR1JPVVBfQ0FOTk9UX0JFX1JFTU9WRUQQcBIeChpJTlZBTElE",
            "X0xJU1RJTkdfR1JPVVBfVFlQRRBxEioKJkxJU1RJTkdfR1JPVVBfQUREX01B",
            "WV9PTkxZX1VTRV9URU1QX0lEEHISGgoWTElTVElOR19TQ09QRV9UT09fTE9O",
            "RxBzEiUKIUxJU1RJTkdfU0NPUEVfVE9PX01BTllfRElNRU5TSU9OUxB0EhoK",
            "FkxJU1RJTkdfR1JPVVBfVE9PX0xPTkcQdRIfChtMSVNUSU5HX0dST1VQX1RS",
            "RUVfVE9PX0RFRVAQdhIdChlJTlZBTElEX0xJU1RJTkdfRElNRU5TSU9OEHcS",
            "IgoeSU5WQUxJRF9MSVNUSU5HX0RJTUVOU0lPTl9UWVBFEHgSQAo8QURWRVJU",
            "SVNFUl9OT1RfT05fQUxMT1dMSVNUX0ZPUl9DT01CSU5FRF9BVURJRU5DRV9P",
            "Tl9ESVNQTEFZEH8SLAonQ0FOTk9UX1RBUkdFVF9SRU1PVkVEX0NPTUJJTkVE",
            "X0FVRElFTkNFEIABEiEKHElOVkFMSURfQ09NQklORURfQVVESUVOQ0VfSUQQ",
            "gQESKgolQ0FOTk9UX1RBUkdFVF9SRU1PVkVEX0NVU1RPTV9BVURJRU5DRRCC",
            "ARI/CjpIT1RFTF9DSEVDS19JTl9EQVRFX1JBTkdFX09WRVJMQVBTX1dJVEhf",
            "RVhJU1RJTkdfQ1JJVEVSSU9OEIMBEjMKLkhPVEVMX0NIRUNLX0lOX0RBVEVf",
            "UkFOR0VfU1RBUlRfREFURV9UT09fRUFSTFkQhAESMAorSE9URUxfQ0hFQ0tf",
            "SU5fREFURV9SQU5HRV9FTkRfREFURV9UT09fTEFURRCFARInCiJIT1RFTF9D",
            "SEVDS19JTl9EQVRFX1JBTkdFX1JFVkVSU0VEEIYBEi0KKEJST0FEX01BVENI",
            "X01PRElGSUVSX0tFWVdPUkRfTk9UX0FMTE9XRUQQhwESKQokT05FX0FVRElF",
            "TkNFX0FMTE9XRURfUEVSX0FTU0VUX0dST1VQEIgBEiwKJ0FVRElFTkNFX05P",
            "VF9FTElHSUJMRV9GT1JfQ0FNUEFJR05fVFlQRRCJARJGCkFBVURJRU5DRV9O",
            "T1RfQUxMT1dFRF9UT19BVFRBQ0hfV0hFTl9BVURJRU5DRV9HUk9VUEVEX1NF",
            "VF9UT19GQUxTRRCKARIrCiZDQU5OT1RfVEFSR0VUX0NVU1RPTUVSX01BVENI",
            "X1VTRVJfTElTVBCLARIvCipORUdBVElWRV9LRVlXT1JEX1NIQVJFRF9TRVRf",
            "RE9FU19OT1RfRVhJU1QQkQESMwouQ0FOTk9UX0FERF9SRU1PVkVEX05FR0FU",
            "SVZFX0tFWVdPUkRfU0hBUkVEX1NFVBCSARI7CjZDQU5OT1RfSEFWRV9NVUxU",
            "SVBMRV9ORUdBVElWRV9LRVlXT1JEX0xJU1RfUEVSX0FDQ09VTlQQkwESLwoq",
            "Q1VTVE9NRVJfQ0FOTk9UX0FERF9DUklURVJJT05fT0ZfVEhJU19UWVBFEJUB",
            "EiQKH0NBTk5PVF9UQVJHRVRfU0lNSUxBUl9VU0VSX0xJU1QQlwESRwpCQ0FO",
            "Tk9UX0FERF9BVURJRU5DRV9TRUdNRU5UX0NSSVRFUklPTl9XSEVOX0FVRElF",
            "TkNFX0dST1VQRURfSVNfU0VUEJgBEiYKIU9ORV9BVURJRU5DRV9BTExPV0VE",
            "X1BFUl9BRF9HUk9VUBCZARIhChxJTlZBTElEX0RFVEFJTEVEX0RFTU9HUkFQ",
            "SElDEJoBEhsKFkNBTk5PVF9SRUNPR05JWkVfQlJBTkQQmwESJAofQlJBTkRf",
            "U0hBUkVEX1NFVF9ET0VTX05PVF9FWElTVBCcARIoCiNDQU5OT1RfQUREX1JF",
            "TU9WRURfQlJBTkRfU0hBUkVEX1NFVBCdARI4CjNPTkxZX0VYQ0xVU0lPTl9C",
            "UkFORF9MSVNUX0FMTE9XRURfRk9SX0NBTVBBSUdOX1RZUEUQngFC8wEKI2Nv",
            "bS5nb29nbGUuYWRzLmdvb2dsZWFkcy52MTUuZXJyb3JzQhNDcml0ZXJpb25F",
            "cnJvclByb3RvUAFaRWdvb2dsZS5nb2xhbmcub3JnL2dlbnByb3RvL2dvb2ds",
            "ZWFwaXMvYWRzL2dvb2dsZWFkcy92MTUvZXJyb3JzO2Vycm9yc6ICA0dBQaoC",
            "H0dvb2dsZS5BZHMuR29vZ2xlQWRzLlYxNS5FcnJvcnPKAh9Hb29nbGVcQWRz",
            "XEdvb2dsZUFkc1xWMTVcRXJyb3Jz6gIjR29vZ2xlOjpBZHM6Okdvb2dsZUFk",
            "czo6VjE1OjpFcnJvcnNiBnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Ads.GoogleAds.V15.Errors.CriterionErrorEnum), global::Google.Ads.GoogleAds.V15.Errors.CriterionErrorEnum.Parser, null, null, new[]{ typeof(global::Google.Ads.GoogleAds.V15.Errors.CriterionErrorEnum.Types.CriterionError) }, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  /// <summary>
  /// Container for enum describing possible criterion errors.
  /// </summary>
  public sealed partial class CriterionErrorEnum : pb::IMessage<CriterionErrorEnum>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CriterionErrorEnum> _parser = new pb::MessageParser<CriterionErrorEnum>(() => new CriterionErrorEnum());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<CriterionErrorEnum> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Ads.GoogleAds.V15.Errors.CriterionErrorReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public CriterionErrorEnum() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public CriterionErrorEnum(CriterionErrorEnum other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public CriterionErrorEnum Clone() {
      return new CriterionErrorEnum(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as CriterionErrorEnum);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(CriterionErrorEnum other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(CriterionErrorEnum other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
        }
      }
    }
    #endif

    #region Nested types
    /// <summary>Container for nested types declared in the CriterionErrorEnum message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static partial class Types {
      /// <summary>
      /// Enum describing possible criterion errors.
      /// </summary>
      public enum CriterionError {
        /// <summary>
        /// Enum unspecified.
        /// </summary>
        [pbr::OriginalName("UNSPECIFIED")] Unspecified = 0,
        /// <summary>
        /// The received error code is not known in this version.
        /// </summary>
        [pbr::OriginalName("UNKNOWN")] Unknown = 1,
        /// <summary>
        /// Concrete type of criterion is required for CREATE and UPDATE operations.
        /// </summary>
        [pbr::OriginalName("CONCRETE_TYPE_REQUIRED")] ConcreteTypeRequired = 2,
        /// <summary>
        /// The category requested for exclusion is invalid.
        /// </summary>
        [pbr::OriginalName("INVALID_EXCLUDED_CATEGORY")] InvalidExcludedCategory = 3,
        /// <summary>
        /// Invalid keyword criteria text.
        /// </summary>
        [pbr::OriginalName("INVALID_KEYWORD_TEXT")] InvalidKeywordText = 4,
        /// <summary>
        /// Keyword text should be less than 80 chars.
        /// </summary>
        [pbr::OriginalName("KEYWORD_TEXT_TOO_LONG")] KeywordTextTooLong = 5,
        /// <summary>
        /// Keyword text has too many words.
        /// </summary>
        [pbr::OriginalName("KEYWORD_HAS_TOO_MANY_WORDS")] KeywordHasTooManyWords = 6,
        /// <summary>
        /// Keyword text has invalid characters or symbols.
        /// </summary>
        [pbr::OriginalName("KEYWORD_HAS_INVALID_CHARS")] KeywordHasInvalidChars = 7,
        /// <summary>
        /// Invalid placement URL.
        /// </summary>
        [pbr::OriginalName("INVALID_PLACEMENT_URL")] InvalidPlacementUrl = 8,
        /// <summary>
        /// Invalid user list criterion.
        /// </summary>
        [pbr::OriginalName("INVALID_USER_LIST")] InvalidUserList = 9,
        /// <summary>
        /// Invalid user interest criterion.
        /// </summary>
        [pbr::OriginalName("INVALID_USER_INTEREST")] InvalidUserInterest = 10,
        /// <summary>
        /// Placement URL has wrong format.
        /// </summary>
        [pbr::OriginalName("INVALID_FORMAT_FOR_PLACEMENT_URL")] InvalidFormatForPlacementUrl = 11,
        /// <summary>
        /// Placement URL is too long.
        /// </summary>
        [pbr::OriginalName("PLACEMENT_URL_IS_TOO_LONG")] PlacementUrlIsTooLong = 12,
        /// <summary>
        /// Indicates the URL contains an illegal character.
        /// </summary>
        [pbr::OriginalName("PLACEMENT_URL_HAS_ILLEGAL_CHAR")] PlacementUrlHasIllegalChar = 13,
        /// <summary>
        /// Indicates the URL contains multiple comma separated URLs.
        /// </summary>
        [pbr::OriginalName("PLACEMENT_URL_HAS_MULTIPLE_SITES_IN_LINE")] PlacementUrlHasMultipleSitesInLine = 14,
        /// <summary>
        /// Indicates the domain is blocked.
        /// </summary>
        [pbr::OriginalName("PLACEMENT_IS_NOT_AVAILABLE_FOR_TARGETING_OR_EXCLUSION")] PlacementIsNotAvailableForTargetingOrExclusion = 15,
        /// <summary>
        /// Invalid topic path.
        /// </summary>
        [pbr::OriginalName("INVALID_TOPIC_PATH")] InvalidTopicPath = 16,
        /// <summary>
        /// The YouTube Channel Id is invalid.
        /// </summary>
        [pbr::OriginalName("INVALID_YOUTUBE_CHANNEL_ID")] InvalidYoutubeChannelId = 17,
        /// <summary>
        /// The YouTube Video Id is invalid.
        /// </summary>
        [pbr::OriginalName("INVALID_YOUTUBE_VIDEO_ID")] InvalidYoutubeVideoId = 18,
        /// <summary>
        /// Indicates the placement is a YouTube vertical channel, which is no longer
        /// supported.
        /// </summary>
        [pbr::OriginalName("YOUTUBE_VERTICAL_CHANNEL_DEPRECATED")] YoutubeVerticalChannelDeprecated = 19,
        /// <summary>
        /// Indicates the placement is a YouTube demographic channel, which is no
        /// longer supported.
        /// </summary>
        [pbr::OriginalName("YOUTUBE_DEMOGRAPHIC_CHANNEL_DEPRECATED")] YoutubeDemographicChannelDeprecated = 20,
        /// <summary>
        /// YouTube urls are not supported in Placement criterion. Use YouTubeChannel
        /// and YouTubeVideo criterion instead.
        /// </summary>
        [pbr::OriginalName("YOUTUBE_URL_UNSUPPORTED")] YoutubeUrlUnsupported = 21,
        /// <summary>
        /// Criteria type can not be excluded by the customer, like AOL account type
        /// cannot target site type criteria.
        /// </summary>
        [pbr::OriginalName("CANNOT_EXCLUDE_CRITERIA_TYPE")] CannotExcludeCriteriaType = 22,
        /// <summary>
        /// Criteria type can not be targeted.
        /// </summary>
        [pbr::OriginalName("CANNOT_ADD_CRITERIA_TYPE")] CannotAddCriteriaType = 23,
        /// <summary>
        /// Not allowed to exclude similar user list.
        /// </summary>
        [pbr::OriginalName("CANNOT_EXCLUDE_SIMILAR_USER_LIST")] CannotExcludeSimilarUserList = 26,
        /// <summary>
        /// Not allowed to target a closed user list.
        /// </summary>
        [pbr::OriginalName("CANNOT_ADD_CLOSED_USER_LIST")] CannotAddClosedUserList = 27,
        /// <summary>
        /// Not allowed to add display only UserLists to search only campaigns.
        /// </summary>
        [pbr::OriginalName("CANNOT_ADD_DISPLAY_ONLY_LISTS_TO_SEARCH_ONLY_CAMPAIGNS")] CannotAddDisplayOnlyListsToSearchOnlyCampaigns = 28,
        /// <summary>
        /// Not allowed to add display only UserLists to search plus campaigns.
        /// </summary>
        [pbr::OriginalName("CANNOT_ADD_DISPLAY_ONLY_LISTS_TO_SEARCH_CAMPAIGNS")] CannotAddDisplayOnlyListsToSearchCampaigns = 29,
        /// <summary>
        /// Not allowed to add display only UserLists to shopping campaigns.
        /// </summary>
        [pbr::OriginalName("CANNOT_ADD_DISPLAY_ONLY_LISTS_TO_SHOPPING_CAMPAIGNS")] CannotAddDisplayOnlyListsToShoppingCampaigns = 30,
        /// <summary>
        /// Not allowed to add User interests to search only campaigns.
        /// </summary>
        [pbr::OriginalName("CANNOT_ADD_USER_INTERESTS_TO_SEARCH_CAMPAIGNS")] CannotAddUserInterestsToSearchCampaigns = 31,
        /// <summary>
        /// Not allowed to set bids for this criterion type in search campaigns
        /// </summary>
        [pbr::OriginalName("CANNOT_SET_BIDS_ON_CRITERION_TYPE_IN_SEARCH_CAMPAIGNS")] CannotSetBidsOnCriterionTypeInSearchCampaigns = 32,
        /// <summary>
        /// Final URLs, URL Templates and CustomParameters cannot be set for the
        /// criterion types of Gender, AgeRange, UserList, Placement, MobileApp, and
        /// MobileAppCategory in search campaigns and shopping campaigns.
        /// </summary>
        [pbr::OriginalName("CANNOT_ADD_URLS_TO_CRITERION_TYPE_FOR_CAMPAIGN_TYPE")] CannotAddUrlsToCriterionTypeForCampaignType = 33,
        /// <summary>
        /// Invalid combined audience criterion.
        /// </summary>
        [pbr::OriginalName("INVALID_COMBINED_AUDIENCE")] InvalidCombinedAudience = 122,
        /// <summary>
        /// Invalid custom affinity criterion.
        /// </summary>
        [pbr::OriginalName("INVALID_CUSTOM_AFFINITY")] InvalidCustomAffinity = 96,
        /// <summary>
        /// Invalid custom intent criterion.
        /// </summary>
        [pbr::OriginalName("INVALID_CUSTOM_INTENT")] InvalidCustomIntent = 97,
        /// <summary>
        /// Invalid custom audience criterion.
        /// </summary>
        [pbr::OriginalName("INVALID_CUSTOM_AUDIENCE")] InvalidCustomAudience = 121,
        /// <summary>
        /// IP address is not valid.
        /// </summary>
        [pbr::OriginalName("INVALID_IP_ADDRESS")] InvalidIpAddress = 34,
        /// <summary>
        /// IP format is not valid.
        /// </summary>
        [pbr::OriginalName("INVALID_IP_FORMAT")] InvalidIpFormat = 35,
        /// <summary>
        /// Mobile application is not valid.
        /// </summary>
        [pbr::OriginalName("INVALID_MOBILE_APP")] InvalidMobileApp = 36,
        /// <summary>
        /// Mobile application category is not valid.
        /// </summary>
        [pbr::OriginalName("INVALID_MOBILE_APP_CATEGORY")] InvalidMobileAppCategory = 37,
        /// <summary>
        /// The CriterionId does not exist or is of the incorrect type.
        /// </summary>
        [pbr::OriginalName("INVALID_CRITERION_ID")] InvalidCriterionId = 38,
        /// <summary>
        /// The Criterion is not allowed to be targeted.
        /// </summary>
        [pbr::OriginalName("CANNOT_TARGET_CRITERION")] CannotTargetCriterion = 39,
        /// <summary>
        /// The criterion is not allowed to be targeted as it is deprecated.
        /// </summary>
        [pbr::OriginalName("CANNOT_TARGET_OBSOLETE_CRITERION")] CannotTargetObsoleteCriterion = 40,
        /// <summary>
        /// The CriterionId is not valid for the type.
        /// </summary>
        [pbr::OriginalName("CRITERION_ID_AND_TYPE_MISMATCH")] CriterionIdAndTypeMismatch = 41,
        /// <summary>
        /// Distance for the radius for the proximity criterion is invalid.
        /// </summary>
        [pbr::OriginalName("INVALID_PROXIMITY_RADIUS")] InvalidProximityRadius = 42,
        /// <summary>
        /// Units for the distance for the radius for the proximity criterion is
        /// invalid.
        /// </summary>
        [pbr::OriginalName("INVALID_PROXIMITY_RADIUS_UNITS")] InvalidProximityRadiusUnits = 43,
        /// <summary>
        /// Street address in the address is not valid.
        /// </summary>
        [pbr::OriginalName("INVALID_STREETADDRESS_LENGTH")] InvalidStreetaddressLength = 44,
        /// <summary>
        /// City name in the address is not valid.
        /// </summary>
        [pbr::OriginalName("INVALID_CITYNAME_LENGTH")] InvalidCitynameLength = 45,
        /// <summary>
        /// Region code in the address is not valid.
        /// </summary>
        [pbr::OriginalName("INVALID_REGIONCODE_LENGTH")] InvalidRegioncodeLength = 46,
        /// <summary>
        /// Region name in the address is not valid.
        /// </summary>
        [pbr::OriginalName("INVALID_REGIONNAME_LENGTH")] InvalidRegionnameLength = 47,
        /// <summary>
        /// Postal code in the address is not valid.
        /// </summary>
        [pbr::OriginalName("INVALID_POSTALCODE_LENGTH")] InvalidPostalcodeLength = 48,
        /// <summary>
        /// Country code in the address is not valid.
        /// </summary>
        [pbr::OriginalName("INVALID_COUNTRY_CODE")] InvalidCountryCode = 49,
        /// <summary>
        /// Latitude for the GeoPoint is not valid.
        /// </summary>
        [pbr::OriginalName("INVALID_LATITUDE")] InvalidLatitude = 50,
        /// <summary>
        /// Longitude for the GeoPoint is not valid.
        /// </summary>
        [pbr::OriginalName("INVALID_LONGITUDE")] InvalidLongitude = 51,
        /// <summary>
        /// The Proximity input is not valid. Both address and geoPoint cannot be
        /// null.
        /// </summary>
        [pbr::OriginalName("PROXIMITY_GEOPOINT_AND_ADDRESS_BOTH_CANNOT_BE_NULL")] ProximityGeopointAndAddressBothCannotBeNull = 52,
        /// <summary>
        /// The Proximity address cannot be geocoded to a valid lat/long.
        /// </summary>
        [pbr::OriginalName("INVALID_PROXIMITY_ADDRESS")] InvalidProximityAddress = 53,
        /// <summary>
        /// User domain name is not valid.
        /// </summary>
        [pbr::OriginalName("INVALID_USER_DOMAIN_NAME")] InvalidUserDomainName = 54,
        /// <summary>
        /// Length of serialized criterion parameter exceeded size limit.
        /// </summary>
        [pbr::OriginalName("CRITERION_PARAMETER_TOO_LONG")] CriterionParameterTooLong = 55,
        /// <summary>
        /// Time interval in the AdSchedule overlaps with another AdSchedule.
        /// </summary>
        [pbr::OriginalName("AD_SCHEDULE_TIME_INTERVALS_OVERLAP")] AdScheduleTimeIntervalsOverlap = 56,
        /// <summary>
        /// AdSchedule time interval cannot span multiple days.
        /// </summary>
        [pbr::OriginalName("AD_SCHEDULE_INTERVAL_CANNOT_SPAN_MULTIPLE_DAYS")] AdScheduleIntervalCannotSpanMultipleDays = 57,
        /// <summary>
        /// AdSchedule time interval specified is invalid, endTime cannot be earlier
        /// than startTime.
        /// </summary>
        [pbr::OriginalName("AD_SCHEDULE_INVALID_TIME_INTERVAL")] AdScheduleInvalidTimeInterval = 58,
        /// <summary>
        /// The number of AdSchedule entries in a day exceeds the limit.
        /// </summary>
        [pbr::OriginalName("AD_SCHEDULE_EXCEEDED_INTERVALS_PER_DAY_LIMIT")] AdScheduleExceededIntervalsPerDayLimit = 59,
        /// <summary>
        /// CriteriaId does not match the interval of the AdSchedule specified.
        /// </summary>
        [pbr::OriginalName("AD_SCHEDULE_CRITERION_ID_MISMATCHING_FIELDS")] AdScheduleCriterionIdMismatchingFields = 60,
        /// <summary>
        /// Cannot set bid modifier for this criterion type.
        /// </summary>
        [pbr::OriginalName("CANNOT_BID_MODIFY_CRITERION_TYPE")] CannotBidModifyCriterionType = 61,
        /// <summary>
        /// Cannot bid modify criterion, since it is opted out of the campaign.
        /// </summary>
        [pbr::OriginalName("CANNOT_BID_MODIFY_CRITERION_CAMPAIGN_OPTED_OUT")] CannotBidModifyCriterionCampaignOptedOut = 62,
        /// <summary>
        /// Cannot set bid modifier for a negative criterion.
        /// </summary>
        [pbr::OriginalName("CANNOT_BID_MODIFY_NEGATIVE_CRITERION")] CannotBidModifyNegativeCriterion = 63,
        /// <summary>
        /// Bid Modifier already exists. Use SET operation to update.
        /// </summary>
        [pbr::OriginalName("BID_MODIFIER_ALREADY_EXISTS")] BidModifierAlreadyExists = 64,
        /// <summary>
        /// Feed Id is not allowed in these Location Groups.
        /// </summary>
        [pbr::OriginalName("FEED_ID_NOT_ALLOWED")] FeedIdNotAllowed = 65,
        /// <summary>
        /// The account may not use the requested criteria type. For example, some
        /// accounts are restricted to keywords only.
        /// </summary>
        [pbr::OriginalName("ACCOUNT_INELIGIBLE_FOR_CRITERIA_TYPE")] AccountIneligibleForCriteriaType = 66,
        /// <summary>
        /// The requested criteria type cannot be used with campaign or ad group
        /// bidding strategy.
        /// </summary>
        [pbr::OriginalName("CRITERIA_TYPE_INVALID_FOR_BIDDING_STRATEGY")] CriteriaTypeInvalidForBiddingStrategy = 67,
        /// <summary>
        /// The Criterion is not allowed to be excluded.
        /// </summary>
        [pbr::OriginalName("CANNOT_EXCLUDE_CRITERION")] CannotExcludeCriterion = 68,
        /// <summary>
        /// The criterion is not allowed to be removed. For example, we cannot remove
        /// any of the device criterion.
        /// </summary>
        [pbr::OriginalName("CANNOT_REMOVE_CRITERION")] CannotRemoveCriterion = 69,
        /// <summary>
        /// Bidding categories do not form a valid path in the Shopping bidding
        /// category taxonomy.
        /// </summary>
        [pbr::OriginalName("INVALID_PRODUCT_BIDDING_CATEGORY")] InvalidProductBiddingCategory = 76,
        /// <summary>
        /// ShoppingSetting must be added to the campaign before ProductScope
        /// criteria can be added.
        /// </summary>
        [pbr::OriginalName("MISSING_SHOPPING_SETTING")] MissingShoppingSetting = 77,
        /// <summary>
        /// Matching function is invalid.
        /// </summary>
        [pbr::OriginalName("INVALID_MATCHING_FUNCTION")] InvalidMatchingFunction = 78,
        /// <summary>
        /// Filter parameters not allowed for location groups targeting.
        /// </summary>
        [pbr::OriginalName("LOCATION_FILTER_NOT_ALLOWED")] LocationFilterNotAllowed = 79,
        /// <summary>
        /// Feed not found, or the feed is not an enabled location feed.
        /// </summary>
        [pbr::OriginalName("INVALID_FEED_FOR_LOCATION_FILTER")] InvalidFeedForLocationFilter = 98,
        /// <summary>
        /// Given location filter parameter is invalid for location groups targeting.
        /// </summary>
        [pbr::OriginalName("LOCATION_FILTER_INVALID")] LocationFilterInvalid = 80,
        /// <summary>
        /// Cannot set geo target constants and feed item sets at the same time.
        /// </summary>
        [pbr::OriginalName("CANNOT_SET_GEO_TARGET_CONSTANTS_WITH_FEED_ITEM_SETS")] CannotSetGeoTargetConstantsWithFeedItemSets = 123,
        /// <summary>
        /// Cannot set both assetset and feed at the same time.
        /// </summary>
        [pbr::OriginalName("CANNOT_SET_BOTH_ASSET_SET_AND_FEED")] CannotSetBothAssetSetAndFeed = 140,
        /// <summary>
        /// Cannot set feed or feed item sets for Customer.
        /// </summary>
        [pbr::OriginalName("CANNOT_SET_FEED_OR_FEED_ITEM_SETS_FOR_CUSTOMER")] CannotSetFeedOrFeedItemSetsForCustomer = 142,
        /// <summary>
        /// Cannot set AssetSet criteria for customer.
        /// </summary>
        [pbr::OriginalName("CANNOT_SET_ASSET_SET_FIELD_FOR_CUSTOMER")] CannotSetAssetSetFieldForCustomer = 150,
        /// <summary>
        /// Cannot set geo target constants and asset sets at the same time.
        /// </summary>
        [pbr::OriginalName("CANNOT_SET_GEO_TARGET_CONSTANTS_WITH_ASSET_SETS")] CannotSetGeoTargetConstantsWithAssetSets = 143,
        /// <summary>
        /// Cannot set asset sets and feed item sets at the same time.
        /// </summary>
        [pbr::OriginalName("CANNOT_SET_ASSET_SETS_WITH_FEED_ITEM_SETS")] CannotSetAssetSetsWithFeedItemSets = 144,
        /// <summary>
        /// The location group asset set id is invalid
        /// </summary>
        [pbr::OriginalName("INVALID_LOCATION_GROUP_ASSET_SET")] InvalidLocationGroupAssetSet = 141,
        /// <summary>
        /// The location group radius is in the range but not at the valid increment.
        /// </summary>
        [pbr::OriginalName("INVALID_LOCATION_GROUP_RADIUS")] InvalidLocationGroupRadius = 124,
        /// <summary>
        /// The location group radius unit is invalid.
        /// </summary>
        [pbr::OriginalName("INVALID_LOCATION_GROUP_RADIUS_UNIT")] InvalidLocationGroupRadiusUnit = 125,
        /// <summary>
        /// Criteria type cannot be associated with a campaign and its ad group(s)
        /// simultaneously.
        /// </summary>
        [pbr::OriginalName("CANNOT_ATTACH_CRITERIA_AT_CAMPAIGN_AND_ADGROUP")] CannotAttachCriteriaAtCampaignAndAdgroup = 81,
        /// <summary>
        /// Range represented by hotel length of stay's min nights and max nights
        /// overlaps with an existing criterion.
        /// </summary>
        [pbr::OriginalName("HOTEL_LENGTH_OF_STAY_OVERLAPS_WITH_EXISTING_CRITERION")] HotelLengthOfStayOverlapsWithExistingCriterion = 82,
        /// <summary>
        /// Range represented by hotel advance booking window's min days and max days
        /// overlaps with an existing criterion.
        /// </summary>
        [pbr::OriginalName("HOTEL_ADVANCE_BOOKING_WINDOW_OVERLAPS_WITH_EXISTING_CRITERION")] HotelAdvanceBookingWindowOverlapsWithExistingCriterion = 83,
        /// <summary>
        /// The field is not allowed to be set when the negative field is set to
        /// true, for example, we don't allow bids in negative ad group or campaign
        /// criteria.
        /// </summary>
        [pbr::OriginalName("FIELD_INCOMPATIBLE_WITH_NEGATIVE_TARGETING")] FieldIncompatibleWithNegativeTargeting = 84,
        /// <summary>
        /// The combination of operand and operator in webpage condition is invalid.
        /// </summary>
        [pbr::OriginalName("INVALID_WEBPAGE_CONDITION")] InvalidWebpageCondition = 85,
        /// <summary>
        /// The URL of webpage condition is invalid.
        /// </summary>
        [pbr::OriginalName("INVALID_WEBPAGE_CONDITION_URL")] InvalidWebpageConditionUrl = 86,
        /// <summary>
        /// The URL of webpage condition cannot be empty or contain white space.
        /// </summary>
        [pbr::OriginalName("WEBPAGE_CONDITION_URL_CANNOT_BE_EMPTY")] WebpageConditionUrlCannotBeEmpty = 87,
        /// <summary>
        /// The URL of webpage condition contains an unsupported protocol.
        /// </summary>
        [pbr::OriginalName("WEBPAGE_CONDITION_URL_UNSUPPORTED_PROTOCOL")] WebpageConditionUrlUnsupportedProtocol = 88,
        /// <summary>
        /// The URL of webpage condition cannot be an IP address.
        /// </summary>
        [pbr::OriginalName("WEBPAGE_CONDITION_URL_CANNOT_BE_IP_ADDRESS")] WebpageConditionUrlCannotBeIpAddress = 89,
        /// <summary>
        /// The domain of the URL is not consistent with the domain in campaign
        /// setting.
        /// </summary>
        [pbr::OriginalName("WEBPAGE_CONDITION_URL_DOMAIN_NOT_CONSISTENT_WITH_CAMPAIGN_SETTING")] WebpageConditionUrlDomainNotConsistentWithCampaignSetting = 90,
        /// <summary>
        /// The URL of webpage condition cannot be a public suffix itself.
        /// </summary>
        [pbr::OriginalName("WEBPAGE_CONDITION_URL_CANNOT_BE_PUBLIC_SUFFIX")] WebpageConditionUrlCannotBePublicSuffix = 91,
        /// <summary>
        /// The URL of webpage condition has an invalid public suffix.
        /// </summary>
        [pbr::OriginalName("WEBPAGE_CONDITION_URL_INVALID_PUBLIC_SUFFIX")] WebpageConditionUrlInvalidPublicSuffix = 92,
        /// <summary>
        /// Value track parameter is not supported in webpage condition URL.
        /// </summary>
        [pbr::OriginalName("WEBPAGE_CONDITION_URL_VALUE_TRACK_VALUE_NOT_SUPPORTED")] WebpageConditionUrlValueTrackValueNotSupported = 93,
        /// <summary>
        /// Only one URL-EQUALS webpage condition is allowed in a webpage
        /// criterion and it cannot be combined with other conditions.
        /// </summary>
        [pbr::OriginalName("WEBPAGE_CRITERION_URL_EQUALS_CAN_HAVE_ONLY_ONE_CONDITION")] WebpageCriterionUrlEqualsCanHaveOnlyOneCondition = 94,
        /// <summary>
        /// A webpage criterion cannot be added to a non-DSA ad group.
        /// </summary>
        [pbr::OriginalName("WEBPAGE_CRITERION_NOT_SUPPORTED_ON_NON_DSA_AD_GROUP")] WebpageCriterionNotSupportedOnNonDsaAdGroup = 95,
        /// <summary>
        /// Cannot add positive user list criteria in Smart Display campaigns.
        /// </summary>
        [pbr::OriginalName("CANNOT_TARGET_USER_LIST_FOR_SMART_DISPLAY_CAMPAIGNS")] CannotTargetUserListForSmartDisplayCampaigns = 99,
        /// <summary>
        /// Cannot add positive placement criterion types in search campaigns.
        /// </summary>
        [pbr::OriginalName("CANNOT_TARGET_PLACEMENTS_FOR_SEARCH_CAMPAIGNS")] CannotTargetPlacementsForSearchCampaigns = 126,
        /// <summary>
        /// Listing scope contains too many dimension types.
        /// </summary>
        [pbr::OriginalName("LISTING_SCOPE_TOO_MANY_DIMENSION_TYPES")] ListingScopeTooManyDimensionTypes = 100,
        /// <summary>
        /// Listing scope has too many IN operators.
        /// </summary>
        [pbr::OriginalName("LISTING_SCOPE_TOO_MANY_IN_OPERATORS")] ListingScopeTooManyInOperators = 101,
        /// <summary>
        /// Listing scope contains IN operator on an unsupported dimension type.
        /// </summary>
        [pbr::OriginalName("LISTING_SCOPE_IN_OPERATOR_NOT_SUPPORTED")] ListingScopeInOperatorNotSupported = 102,
        /// <summary>
        /// There are dimensions with duplicate dimension type.
        /// </summary>
        [pbr::OriginalName("DUPLICATE_LISTING_DIMENSION_TYPE")] DuplicateListingDimensionType = 103,
        /// <summary>
        /// There are dimensions with duplicate dimension value.
        /// </summary>
        [pbr::OriginalName("DUPLICATE_LISTING_DIMENSION_VALUE")] DuplicateListingDimensionValue = 104,
        /// <summary>
        /// Listing group SUBDIVISION nodes cannot have bids.
        /// </summary>
        [pbr::OriginalName("CANNOT_SET_BIDS_ON_LISTING_GROUP_SUBDIVISION")] CannotSetBidsOnListingGroupSubdivision = 105,
        /// <summary>
        /// Ad group is invalid due to the listing groups it contains.
        /// </summary>
        [pbr::OriginalName("INVALID_LISTING_GROUP_HIERARCHY")] InvalidListingGroupHierarchy = 106,
        /// <summary>
        /// Listing group unit cannot have children.
        /// </summary>
        [pbr::OriginalName("LISTING_GROUP_UNIT_CANNOT_HAVE_CHILDREN")] ListingGroupUnitCannotHaveChildren = 107,
        /// <summary>
        /// Subdivided listing groups must have an "others" case.
        /// </summary>
        [pbr::OriginalName("LISTING_GROUP_SUBDIVISION_REQUIRES_OTHERS_CASE")] ListingGroupSubdivisionRequiresOthersCase = 108,
        /// <summary>
        /// Dimension type of listing group must be the same as that of its siblings.
        /// </summary>
        [pbr::OriginalName("LISTING_GROUP_REQUIRES_SAME_DIMENSION_TYPE_AS_SIBLINGS")] ListingGroupRequiresSameDimensionTypeAsSiblings = 109,
        /// <summary>
        /// Listing group cannot be added to the ad group because it already exists.
        /// </summary>
        [pbr::OriginalName("LISTING_GROUP_ALREADY_EXISTS")] ListingGroupAlreadyExists = 110,
        /// <summary>
        /// Listing group referenced in the operation was not found in the ad group.
        /// </summary>
        [pbr::OriginalName("LISTING_GROUP_DOES_NOT_EXIST")] ListingGroupDoesNotExist = 111,
        /// <summary>
        /// Recursive removal failed because listing group subdivision is being
        /// created or modified in this request.
        /// </summary>
        [pbr::OriginalName("LISTING_GROUP_CANNOT_BE_REMOVED")] ListingGroupCannotBeRemoved = 112,
        /// <summary>
        /// Listing group type is not allowed for specified ad group criterion type.
        /// </summary>
        [pbr::OriginalName("INVALID_LISTING_GROUP_TYPE")] InvalidListingGroupType = 113,
        /// <summary>
        /// Listing group in an ADD operation specifies a non temporary criterion id.
        /// </summary>
        [pbr::OriginalName("LISTING_GROUP_ADD_MAY_ONLY_USE_TEMP_ID")] ListingGroupAddMayOnlyUseTempId = 114,
        /// <summary>
        /// The combined length of dimension values of the Listing scope criterion
        /// is too long.
        /// </summary>
        [pbr::OriginalName("LISTING_SCOPE_TOO_LONG")] ListingScopeTooLong = 115,
        /// <summary>
        /// Listing scope contains too many dimensions.
        /// </summary>
        [pbr::OriginalName("LISTING_SCOPE_TOO_MANY_DIMENSIONS")] ListingScopeTooManyDimensions = 116,
        /// <summary>
        /// The combined length of dimension values of the Listing group criterion is
        /// too long.
        /// </summary>
        [pbr::OriginalName("LISTING_GROUP_TOO_LONG")] ListingGroupTooLong = 117,
        /// <summary>
        /// Listing group tree is too deep.
        /// </summary>
        [pbr::OriginalName("LISTING_GROUP_TREE_TOO_DEEP")] ListingGroupTreeTooDeep = 118,
        /// <summary>
        /// Listing dimension is invalid (for example, dimension contains illegal
        /// value, dimension type is represented with wrong class, etc). Listing
        /// dimension value can not contain "==" or "&amp;+".
        /// </summary>
        [pbr::OriginalName("INVALID_LISTING_DIMENSION")] InvalidListingDimension = 119,
        /// <summary>
        /// Listing dimension type is either invalid for campaigns of this type or
        /// cannot be used in the current context. BIDDING_CATEGORY_Lx and
        /// PRODUCT_TYPE_Lx dimensions must be used in ascending order of their
        /// levels: L1, L2, L3, L4, L5... The levels must be specified sequentially
        /// and start from L1. Furthermore, an "others" Listing group cannot be
        /// subdivided with a dimension of the same type but of a higher level
        /// ("others" BIDDING_CATEGORY_L3 can be subdivided with BRAND but not with
        /// BIDDING_CATEGORY_L4).
        /// </summary>
        [pbr::OriginalName("INVALID_LISTING_DIMENSION_TYPE")] InvalidListingDimensionType = 120,
        /// <summary>
        /// Customer is not on allowlist for composite audience in display campaigns.
        /// </summary>
        [pbr::OriginalName("ADVERTISER_NOT_ON_ALLOWLIST_FOR_COMBINED_AUDIENCE_ON_DISPLAY")] AdvertiserNotOnAllowlistForCombinedAudienceOnDisplay = 127,
        /// <summary>
        /// Cannot target on a removed combined audience.
        /// </summary>
        [pbr::OriginalName("CANNOT_TARGET_REMOVED_COMBINED_AUDIENCE")] CannotTargetRemovedCombinedAudience = 128,
        /// <summary>
        /// Combined audience ID is invalid.
        /// </summary>
        [pbr::OriginalName("INVALID_COMBINED_AUDIENCE_ID")] InvalidCombinedAudienceId = 129,
        /// <summary>
        /// Can not target removed combined audience.
        /// </summary>
        [pbr::OriginalName("CANNOT_TARGET_REMOVED_CUSTOM_AUDIENCE")] CannotTargetRemovedCustomAudience = 130,
        /// <summary>
        /// Range represented by hotel check-in date's start date and end date
        /// overlaps with an existing criterion.
        /// </summary>
        [pbr::OriginalName("HOTEL_CHECK_IN_DATE_RANGE_OVERLAPS_WITH_EXISTING_CRITERION")] HotelCheckInDateRangeOverlapsWithExistingCriterion = 131,
        /// <summary>
        /// Start date is earlier than earliest allowed value of yesterday UTC.
        /// </summary>
        [pbr::OriginalName("HOTEL_CHECK_IN_DATE_RANGE_START_DATE_TOO_EARLY")] HotelCheckInDateRangeStartDateTooEarly = 132,
        /// <summary>
        /// End date later is than latest allowed day of 330 days in the future UTC.
        /// </summary>
        [pbr::OriginalName("HOTEL_CHECK_IN_DATE_RANGE_END_DATE_TOO_LATE")] HotelCheckInDateRangeEndDateTooLate = 133,
        /// <summary>
        /// Start date is after end date.
        /// </summary>
        [pbr::OriginalName("HOTEL_CHECK_IN_DATE_RANGE_REVERSED")] HotelCheckInDateRangeReversed = 134,
        /// <summary>
        /// Broad match modifier (BMM) keywords can no longer be created. See
        /// https://ads-developers.googleblog.com/2021/06/broad-match-modifier-upcoming-changes.html.
        /// </summary>
        [pbr::OriginalName("BROAD_MATCH_MODIFIER_KEYWORD_NOT_ALLOWED")] BroadMatchModifierKeywordNotAllowed = 135,
        /// <summary>
        /// Only one audience is allowed in an asset group.
        /// </summary>
        [pbr::OriginalName("ONE_AUDIENCE_ALLOWED_PER_ASSET_GROUP")] OneAudienceAllowedPerAssetGroup = 136,
        /// <summary>
        /// Audience is not supported for the specified campaign type.
        /// </summary>
        [pbr::OriginalName("AUDIENCE_NOT_ELIGIBLE_FOR_CAMPAIGN_TYPE")] AudienceNotEligibleForCampaignType = 137,
        /// <summary>
        /// Audience is not allowed to attach when use_audience_grouped bit is set to
        /// false.
        /// </summary>
        [pbr::OriginalName("AUDIENCE_NOT_ALLOWED_TO_ATTACH_WHEN_AUDIENCE_GROUPED_SET_TO_FALSE")] AudienceNotAllowedToAttachWhenAudienceGroupedSetToFalse = 138,
        /// <summary>
        /// Targeting is not allowed for Customer Match lists as per Customer Match
        /// policy. See
        /// https://support.google.com/google-ads/answer/6299717.
        /// </summary>
        [pbr::OriginalName("CANNOT_TARGET_CUSTOMER_MATCH_USER_LIST")] CannotTargetCustomerMatchUserList = 139,
        /// <summary>
        /// Cannot create a negative keyword list criterion with a shared set that
        /// does not exist.
        /// </summary>
        [pbr::OriginalName("NEGATIVE_KEYWORD_SHARED_SET_DOES_NOT_EXIST")] NegativeKeywordSharedSetDoesNotExist = 145,
        /// <summary>
        /// Cannot create a negative keyword list with deleted shared set.
        /// </summary>
        [pbr::OriginalName("CANNOT_ADD_REMOVED_NEGATIVE_KEYWORD_SHARED_SET")] CannotAddRemovedNegativeKeywordSharedSet = 146,
        /// <summary>
        /// Can only have one Negative Keyword List per account.
        /// </summary>
        [pbr::OriginalName("CANNOT_HAVE_MULTIPLE_NEGATIVE_KEYWORD_LIST_PER_ACCOUNT")] CannotHaveMultipleNegativeKeywordListPerAccount = 147,
        /// <summary>
        /// Only allowlisted customers can add criteria of this type.
        /// </summary>
        [pbr::OriginalName("CUSTOMER_CANNOT_ADD_CRITERION_OF_THIS_TYPE")] CustomerCannotAddCriterionOfThisType = 149,
        /// <summary>
        /// Targeting for Similar audiences is not supported, since this feature has
        /// been deprecated. See
        /// https://support.google.com/google-ads/answer/12463119 to learn more.
        /// </summary>
        [pbr::OriginalName("CANNOT_TARGET_SIMILAR_USER_LIST")] CannotTargetSimilarUserList = 151,
        /// <summary>
        /// Audience segment criteria cannot be added when use_audience_grouped bit
        /// is set.
        /// </summary>
        [pbr::OriginalName("CANNOT_ADD_AUDIENCE_SEGMENT_CRITERION_WHEN_AUDIENCE_GROUPED_IS_SET")] CannotAddAudienceSegmentCriterionWhenAudienceGroupedIsSet = 152,
        /// <summary>
        /// Only one audience is allowed in an ad group.
        /// </summary>
        [pbr::OriginalName("ONE_AUDIENCE_ALLOWED_PER_AD_GROUP")] OneAudienceAllowedPerAdGroup = 153,
        /// <summary>
        /// Invalid detailed demographics criterion.
        /// </summary>
        [pbr::OriginalName("INVALID_DETAILED_DEMOGRAPHIC")] InvalidDetailedDemographic = 154,
        /// <summary>
        /// The brand criteria has a brand input that is not recognized as a
        /// valid brand.
        /// </summary>
        [pbr::OriginalName("CANNOT_RECOGNIZE_BRAND")] CannotRecognizeBrand = 155,
        /// <summary>
        /// The brand_list.shared_set_id references a shared set that does not
        /// exist.
        /// </summary>
        [pbr::OriginalName("BRAND_SHARED_SET_DOES_NOT_EXIST")] BrandSharedSetDoesNotExist = 156,
        /// <summary>
        /// Cannot create a brand list with deleted shared set.
        /// </summary>
        [pbr::OriginalName("CANNOT_ADD_REMOVED_BRAND_SHARED_SET")] CannotAddRemovedBrandSharedSet = 157,
        /// <summary>
        /// Brand list can only be negatively targeted for the campaign type.
        /// </summary>
        [pbr::OriginalName("ONLY_EXCLUSION_BRAND_LIST_ALLOWED_FOR_CAMPAIGN_TYPE")] OnlyExclusionBrandListAllowedForCampaignType = 158,
      }

    }
    #endregion

  }

  #endregion

}

#endregion Designer generated code
