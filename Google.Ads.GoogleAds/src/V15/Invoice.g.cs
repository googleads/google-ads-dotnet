// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: google/ads/googleads/v15/resources/invoice.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021, 8981
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Google.Ads.GoogleAds.V15.Resources {

  /// <summary>Holder for reflection information generated from google/ads/googleads/v15/resources/invoice.proto</summary>
  public static partial class InvoiceReflection {

    #region Descriptor
    /// <summary>File descriptor for google/ads/googleads/v15/resources/invoice.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static InvoiceReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CjBnb29nbGUvYWRzL2dvb2dsZWFkcy92MTUvcmVzb3VyY2VzL2ludm9pY2Uu",
            "cHJvdG8SImdvb2dsZS5hZHMuZ29vZ2xlYWRzLnYxNS5yZXNvdXJjZXMaK2dv",
            "b2dsZS9hZHMvZ29vZ2xlYWRzL3YxNS9jb21tb24vZGF0ZXMucHJvdG8aMWdv",
            "b2dsZS9hZHMvZ29vZ2xlYWRzL3YxNS9lbnVtcy9pbnZvaWNlX3R5cGUucHJv",
            "dG8aMmdvb2dsZS9hZHMvZ29vZ2xlYWRzL3YxNS9lbnVtcy9tb250aF9vZl95",
            "ZWFyLnByb3RvGh9nb29nbGUvYXBpL2ZpZWxkX2JlaGF2aW9yLnByb3RvGhln",
            "b29nbGUvYXBpL3Jlc291cmNlLnByb3RvIqUnCgdJbnZvaWNlEj8KDXJlc291",
            "cmNlX25hbWUYASABKAlCKOBBA/pBIgogZ29vZ2xlYWRzLmdvb2dsZWFwaXMu",
            "Y29tL0ludm9pY2USFAoCaWQYGSABKAlCA+BBA0gAiAEBEk4KBHR5cGUYAyAB",
            "KA4yOy5nb29nbGUuYWRzLmdvb2dsZWFkcy52MTUuZW51bXMuSW52b2ljZVR5",
            "cGVFbnVtLkludm9pY2VUeXBlQgPgQQMSHwoNYmlsbGluZ19zZXR1cBgaIAEo",
            "CUID4EEDSAGIAQESJQoTcGF5bWVudHNfYWNjb3VudF9pZBgbIAEoCUID4EED",
            "SAKIAQESJQoTcGF5bWVudHNfcHJvZmlsZV9pZBgcIAEoCUID4EEDSAOIAQES",
            "HAoKaXNzdWVfZGF0ZRgdIAEoCUID4EEDSASIAQESGgoIZHVlX2RhdGUYHiAB",
            "KAlCA+BBA0gFiAEBEksKEnNlcnZpY2VfZGF0ZV9yYW5nZRgJIAEoCzIqLmdv",
            "b2dsZS5hZHMuZ29vZ2xlYWRzLnYxNS5jb21tb24uRGF0ZVJhbmdlQgPgQQMS",
            "HwoNY3VycmVuY3lfY29kZRgfIAEoCUID4EEDSAaIAQESLwoiYWRqdXN0bWVu",
            "dHNfc3VidG90YWxfYW1vdW50X21pY3JvcxgTIAEoA0ID4EEDEioKHWFkanVz",
            "dG1lbnRzX3RheF9hbW91bnRfbWljcm9zGBQgASgDQgPgQQMSLAofYWRqdXN0",
            "bWVudHNfdG90YWxfYW1vdW50X21pY3JvcxgVIAEoA0ID4EEDEjQKJ3JlZ3Vs",
            "YXRvcnlfY29zdHNfc3VidG90YWxfYW1vdW50X21pY3JvcxgWIAEoA0ID4EED",
            "Ei8KInJlZ3VsYXRvcnlfY29zdHNfdGF4X2Ftb3VudF9taWNyb3MYFyABKANC",
            "A+BBAxIxCiRyZWd1bGF0b3J5X2Nvc3RzX3RvdGFsX2Ftb3VudF9taWNyb3MY",
            "GCABKANCA+BBAxI2CiRleHBvcnRfY2hhcmdlX3N1YnRvdGFsX2Ftb3VudF9t",
            "aWNyb3MYKCABKANCA+BBA0gHiAEBEjEKH2V4cG9ydF9jaGFyZ2VfdGF4X2Ft",
            "b3VudF9taWNyb3MYKSABKANCA+BBA0gIiAEBEjMKIWV4cG9ydF9jaGFyZ2Vf",
            "dG90YWxfYW1vdW50X21pY3JvcxgqIAEoA0ID4EEDSAmIAQESKAoWc3VidG90",
            "YWxfYW1vdW50X21pY3JvcxghIAEoA0ID4EEDSAqIAQESIwoRdGF4X2Ftb3Vu",
            "dF9taWNyb3MYIiABKANCA+BBA0gLiAEBEiUKE3RvdGFsX2Ftb3VudF9taWNy",
            "b3MYIyABKANCA+BBA0gMiAEBEiMKEWNvcnJlY3RlZF9pbnZvaWNlGCQgASgJ",
            "QgPgQQNIDYgBARIeChFyZXBsYWNlZF9pbnZvaWNlcxglIAMoCUID4EEDEhkK",
            "B3BkZl91cmwYJiABKAlCA+BBA0gOiAEBEmcKGGFjY291bnRfYnVkZ2V0X3N1",
            "bW1hcmllcxgSIAMoCzJALmdvb2dsZS5hZHMuZ29vZ2xlYWRzLnYxNS5yZXNv",
            "dXJjZXMuSW52b2ljZS5BY2NvdW50QnVkZ2V0U3VtbWFyeUID4EEDEloKEWFj",
            "Y291bnRfc3VtbWFyaWVzGCcgAygLMjouZ29vZ2xlLmFkcy5nb29nbGVhZHMu",
            "djE1LnJlc291cmNlcy5JbnZvaWNlLkFjY291bnRTdW1tYXJ5QgPgQQMa4Q0K",
            "DkFjY291bnRTdW1tYXJ5EhoKCGN1c3RvbWVyGAEgASgJQgPgQQNIAIgBARI7",
            "CiliaWxsaW5nX2NvcnJlY3Rpb25fc3VidG90YWxfYW1vdW50X21pY3JvcxgC",
            "IAEoA0ID4EEDSAGIAQESNgokYmlsbGluZ19jb3JyZWN0aW9uX3RheF9hbW91",
            "bnRfbWljcm9zGAMgASgDQgPgQQNIAogBARI4CiZiaWxsaW5nX2NvcnJlY3Rp",
            "b25fdG90YWxfYW1vdW50X21pY3JvcxgEIAEoA0ID4EEDSAOIAQESOgooY291",
            "cG9uX2FkanVzdG1lbnRfc3VidG90YWxfYW1vdW50X21pY3JvcxgFIAEoA0ID",
            "4EEDSASIAQESNQojY291cG9uX2FkanVzdG1lbnRfdGF4X2Ftb3VudF9taWNy",
            "b3MYBiABKANCA+BBA0gFiAEBEjcKJWNvdXBvbl9hZGp1c3RtZW50X3RvdGFs",
            "X2Ftb3VudF9taWNyb3MYByABKANCA+BBA0gGiAEBEkEKL2V4Y2Vzc19jcmVk",
            "aXRfYWRqdXN0bWVudF9zdWJ0b3RhbF9hbW91bnRfbWljcm9zGAggASgDQgPg",
            "QQNIB4gBARI8CipleGNlc3NfY3JlZGl0X2FkanVzdG1lbnRfdGF4X2Ftb3Vu",
            "dF9taWNyb3MYCSABKANCA+BBA0gIiAEBEj4KLGV4Y2Vzc19jcmVkaXRfYWRq",
            "dXN0bWVudF90b3RhbF9hbW91bnRfbWljcm9zGAogASgDQgPgQQNICYgBARI5",
            "CidyZWd1bGF0b3J5X2Nvc3RzX3N1YnRvdGFsX2Ftb3VudF9taWNyb3MYCyAB",
            "KANCA+BBA0gKiAEBEjQKInJlZ3VsYXRvcnlfY29zdHNfdGF4X2Ftb3VudF9t",
            "aWNyb3MYDCABKANCA+BBA0gLiAEBEjYKJHJlZ3VsYXRvcnlfY29zdHNfdG90",
            "YWxfYW1vdW50X21pY3JvcxgNIAEoA0ID4EEDSAyIAQESNgokZXhwb3J0X2No",
            "YXJnZV9zdWJ0b3RhbF9hbW91bnRfbWljcm9zGBEgASgDQgPgQQNIDYgBARIx",
            "Ch9leHBvcnRfY2hhcmdlX3RheF9hbW91bnRfbWljcm9zGBIgASgDQgPgQQNI",
            "DogBARIzCiFleHBvcnRfY2hhcmdlX3RvdGFsX2Ftb3VudF9taWNyb3MYEyAB",
            "KANCA+BBA0gPiAEBEigKFnN1YnRvdGFsX2Ftb3VudF9taWNyb3MYDiABKANC",
            "A+BBA0gQiAEBEiMKEXRheF9hbW91bnRfbWljcm9zGA8gASgDQgPgQQNIEYgB",
            "ARIlChN0b3RhbF9hbW91bnRfbWljcm9zGBAgASgDQgPgQQNIEogBAUILCglf",
            "Y3VzdG9tZXJCLAoqX2JpbGxpbmdfY29ycmVjdGlvbl9zdWJ0b3RhbF9hbW91",
            "bnRfbWljcm9zQicKJV9iaWxsaW5nX2NvcnJlY3Rpb25fdGF4X2Ftb3VudF9t",
            "aWNyb3NCKQonX2JpbGxpbmdfY29ycmVjdGlvbl90b3RhbF9hbW91bnRfbWlj",
            "cm9zQisKKV9jb3Vwb25fYWRqdXN0bWVudF9zdWJ0b3RhbF9hbW91bnRfbWlj",
            "cm9zQiYKJF9jb3Vwb25fYWRqdXN0bWVudF90YXhfYW1vdW50X21pY3Jvc0Io",
            "CiZfY291cG9uX2FkanVzdG1lbnRfdG90YWxfYW1vdW50X21pY3Jvc0IyCjBf",
            "ZXhjZXNzX2NyZWRpdF9hZGp1c3RtZW50X3N1YnRvdGFsX2Ftb3VudF9taWNy",
            "b3NCLQorX2V4Y2Vzc19jcmVkaXRfYWRqdXN0bWVudF90YXhfYW1vdW50X21p",
            "Y3Jvc0IvCi1fZXhjZXNzX2NyZWRpdF9hZGp1c3RtZW50X3RvdGFsX2Ftb3Vu",
            "dF9taWNyb3NCKgooX3JlZ3VsYXRvcnlfY29zdHNfc3VidG90YWxfYW1vdW50",
            "X21pY3Jvc0IlCiNfcmVndWxhdG9yeV9jb3N0c190YXhfYW1vdW50X21pY3Jv",
            "c0InCiVfcmVndWxhdG9yeV9jb3N0c190b3RhbF9hbW91bnRfbWljcm9zQicK",
            "JV9leHBvcnRfY2hhcmdlX3N1YnRvdGFsX2Ftb3VudF9taWNyb3NCIgogX2V4",
            "cG9ydF9jaGFyZ2VfdGF4X2Ftb3VudF9taWNyb3NCJAoiX2V4cG9ydF9jaGFy",
            "Z2VfdG90YWxfYW1vdW50X21pY3Jvc0IZChdfc3VidG90YWxfYW1vdW50X21p",
            "Y3Jvc0IUChJfdGF4X2Ftb3VudF9taWNyb3NCFgoUX3RvdGFsX2Ftb3VudF9t",
            "aWNyb3Ma6AcKFEFjY291bnRCdWRnZXRTdW1tYXJ5EhoKCGN1c3RvbWVyGAog",
            "ASgJQgPgQQNIAIgBARIrChljdXN0b21lcl9kZXNjcmlwdGl2ZV9uYW1lGAsg",
            "ASgJQgPgQQNIAYgBARIgCg5hY2NvdW50X2J1ZGdldBgMIAEoCUID4EEDSAKI",
            "AQESJQoTYWNjb3VudF9idWRnZXRfbmFtZRgNIAEoCUID4EEDSAOIAQESJwoV",
            "cHVyY2hhc2Vfb3JkZXJfbnVtYmVyGA4gASgJQgPgQQNIBIgBARIoChZzdWJ0",
            "b3RhbF9hbW91bnRfbWljcm9zGA8gASgDQgPgQQNIBYgBARIjChF0YXhfYW1v",
            "dW50X21pY3JvcxgQIAEoA0ID4EEDSAaIAQESJQoTdG90YWxfYW1vdW50X21p",
            "Y3JvcxgRIAEoA0ID4EEDSAeIAQESVQocYmlsbGFibGVfYWN0aXZpdHlfZGF0",
            "ZV9yYW5nZRgJIAEoCzIqLmdvb2dsZS5hZHMuZ29vZ2xlYWRzLnYxNS5jb21t",
            "b24uRGF0ZVJhbmdlQgPgQQMSJgoUc2VydmVkX2Ftb3VudF9taWNyb3MYEiAB",
            "KANCA+BBA0gIiAEBEiYKFGJpbGxlZF9hbW91bnRfbWljcm9zGBMgASgDQgPg",
            "QQNICYgBARIsChpvdmVyZGVsaXZlcnlfYW1vdW50X21pY3JvcxgUIAEoA0ID",
            "4EEDSAqIAQESMAoeaW52YWxpZF9hY3Rpdml0eV9hbW91bnRfbWljcm9zGBUg",
            "ASgDQgPgQQNIC4gBARJrChppbnZhbGlkX2FjdGl2aXR5X3N1bW1hcmllcxgW",
            "IAMoCzJCLmdvb2dsZS5hZHMuZ29vZ2xlYWRzLnYxNS5yZXNvdXJjZXMuSW52",
            "b2ljZS5JbnZhbGlkQWN0aXZpdHlTdW1tYXJ5QgPgQQNCCwoJX2N1c3RvbWVy",
            "QhwKGl9jdXN0b21lcl9kZXNjcmlwdGl2ZV9uYW1lQhEKD19hY2NvdW50X2J1",
            "ZGdldEIWChRfYWNjb3VudF9idWRnZXRfbmFtZUIYChZfcHVyY2hhc2Vfb3Jk",
            "ZXJfbnVtYmVyQhkKF19zdWJ0b3RhbF9hbW91bnRfbWljcm9zQhQKEl90YXhf",
            "YW1vdW50X21pY3Jvc0IWChRfdG90YWxfYW1vdW50X21pY3Jvc0IXChVfc2Vy",
            "dmVkX2Ftb3VudF9taWNyb3NCFwoVX2JpbGxlZF9hbW91bnRfbWljcm9zQh0K",
            "G19vdmVyZGVsaXZlcnlfYW1vdW50X21pY3Jvc0IhCh9faW52YWxpZF9hY3Rp",
            "dml0eV9hbW91bnRfbWljcm9zGoEEChZJbnZhbGlkQWN0aXZpdHlTdW1tYXJ5",
            "EmgKGW9yaWdpbmFsX21vbnRoX29mX3NlcnZpY2UYASABKA4yOy5nb29nbGUu",
            "YWRzLmdvb2dsZWFkcy52MTUuZW51bXMuTW9udGhPZlllYXJFbnVtLk1vbnRo",
            "T2ZZZWFyQgPgQQNIAIgBARIqChhvcmlnaW5hbF95ZWFyX29mX3NlcnZpY2UY",
            "AiABKAlCA+BBA0gBiAEBEiUKE29yaWdpbmFsX2ludm9pY2VfaWQYAyABKAlC",
            "A+BBA0gCiAEBEi4KHG9yaWdpbmFsX2FjY291bnRfYnVkZ2V0X25hbWUYBCAB",
            "KAlCA+BBA0gDiAEBEjAKHm9yaWdpbmFsX3B1cmNoYXNlX29yZGVyX251bWJl",
            "chgFIAEoCUID4EEDSASIAQESHwoNYW1vdW50X21pY3JvcxgGIAEoA0ID4EED",
            "SAWIAQFCHAoaX29yaWdpbmFsX21vbnRoX29mX3NlcnZpY2VCGwoZX29yaWdp",
            "bmFsX3llYXJfb2Zfc2VydmljZUIWChRfb3JpZ2luYWxfaW52b2ljZV9pZEIf",
            "Ch1fb3JpZ2luYWxfYWNjb3VudF9idWRnZXRfbmFtZUIhCh9fb3JpZ2luYWxf",
            "cHVyY2hhc2Vfb3JkZXJfbnVtYmVyQhAKDl9hbW91bnRfbWljcm9zOlTqQVEK",
            "IGdvb2dsZWFkcy5nb29nbGVhcGlzLmNvbS9JbnZvaWNlEi1jdXN0b21lcnMv",
            "e2N1c3RvbWVyX2lkfS9pbnZvaWNlcy97aW52b2ljZV9pZH1CBQoDX2lkQhAK",
            "Dl9iaWxsaW5nX3NldHVwQhYKFF9wYXltZW50c19hY2NvdW50X2lkQhYKFF9w",
            "YXltZW50c19wcm9maWxlX2lkQg0KC19pc3N1ZV9kYXRlQgsKCV9kdWVfZGF0",
            "ZUIQCg5fY3VycmVuY3lfY29kZUInCiVfZXhwb3J0X2NoYXJnZV9zdWJ0b3Rh",
            "bF9hbW91bnRfbWljcm9zQiIKIF9leHBvcnRfY2hhcmdlX3RheF9hbW91bnRf",
            "bWljcm9zQiQKIl9leHBvcnRfY2hhcmdlX3RvdGFsX2Ftb3VudF9taWNyb3NC",
            "GQoXX3N1YnRvdGFsX2Ftb3VudF9taWNyb3NCFAoSX3RheF9hbW91bnRfbWlj",
            "cm9zQhYKFF90b3RhbF9hbW91bnRfbWljcm9zQhQKEl9jb3JyZWN0ZWRfaW52",
            "b2ljZUIKCghfcGRmX3VybEL+AQomY29tLmdvb2dsZS5hZHMuZ29vZ2xlYWRz",
            "LnYxNS5yZXNvdXJjZXNCDEludm9pY2VQcm90b1ABWktnb29nbGUuZ29sYW5n",
            "Lm9yZy9nZW5wcm90by9nb29nbGVhcGlzL2Fkcy9nb29nbGVhZHMvdjE1L3Jl",
            "c291cmNlcztyZXNvdXJjZXOiAgNHQUGqAiJHb29nbGUuQWRzLkdvb2dsZUFk",
            "cy5WMTUuUmVzb3VyY2VzygIiR29vZ2xlXEFkc1xHb29nbGVBZHNcVjE1XFJl",
            "c291cmNlc+oCJkdvb2dsZTo6QWRzOjpHb29nbGVBZHM6OlYxNTo6UmVzb3Vy",
            "Y2VzYgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Google.Ads.GoogleAds.V15.Common.DatesReflection.Descriptor, global::Google.Ads.GoogleAds.V15.Enums.InvoiceTypeReflection.Descriptor, global::Google.Ads.GoogleAds.V15.Enums.MonthOfYearReflection.Descriptor, global::Google.Api.FieldBehaviorReflection.Descriptor, global::Google.Api.ResourceReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Ads.GoogleAds.V15.Resources.Invoice), global::Google.Ads.GoogleAds.V15.Resources.Invoice.Parser, new[]{ "ResourceName", "Id", "Type", "BillingSetup", "PaymentsAccountId", "PaymentsProfileId", "IssueDate", "DueDate", "ServiceDateRange", "CurrencyCode", "AdjustmentsSubtotalAmountMicros", "AdjustmentsTaxAmountMicros", "AdjustmentsTotalAmountMicros", "RegulatoryCostsSubtotalAmountMicros", "RegulatoryCostsTaxAmountMicros", "RegulatoryCostsTotalAmountMicros", "ExportChargeSubtotalAmountMicros", "ExportChargeTaxAmountMicros", "ExportChargeTotalAmountMicros", "SubtotalAmountMicros", "TaxAmountMicros", "TotalAmountMicros", "CorrectedInvoice", "ReplacedInvoices", "PdfUrl", "AccountBudgetSummaries", "AccountSummaries" }, new[]{ "Id", "BillingSetup", "PaymentsAccountId", "PaymentsProfileId", "IssueDate", "DueDate", "CurrencyCode", "ExportChargeSubtotalAmountMicros", "ExportChargeTaxAmountMicros", "ExportChargeTotalAmountMicros", "SubtotalAmountMicros", "TaxAmountMicros", "TotalAmountMicros", "CorrectedInvoice", "PdfUrl" }, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Google.Ads.GoogleAds.V15.Resources.Invoice.Types.AccountSummary), global::Google.Ads.GoogleAds.V15.Resources.Invoice.Types.AccountSummary.Parser, new[]{ "Customer", "BillingCorrectionSubtotalAmountMicros", "BillingCorrectionTaxAmountMicros", "BillingCorrectionTotalAmountMicros", "CouponAdjustmentSubtotalAmountMicros", "CouponAdjustmentTaxAmountMicros", "CouponAdjustmentTotalAmountMicros", "ExcessCreditAdjustmentSubtotalAmountMicros", "ExcessCreditAdjustmentTaxAmountMicros", "ExcessCreditAdjustmentTotalAmountMicros", "RegulatoryCostsSubtotalAmountMicros", "RegulatoryCostsTaxAmountMicros", "RegulatoryCostsTotalAmountMicros", "ExportChargeSubtotalAmountMicros", "ExportChargeTaxAmountMicros", "ExportChargeTotalAmountMicros", "SubtotalAmountMicros", "TaxAmountMicros", "TotalAmountMicros" }, new[]{ "Customer", "BillingCorrectionSubtotalAmountMicros", "BillingCorrectionTaxAmountMicros", "BillingCorrectionTotalAmountMicros", "CouponAdjustmentSubtotalAmountMicros", "CouponAdjustmentTaxAmountMicros", "CouponAdjustmentTotalAmountMicros", "ExcessCreditAdjustmentSubtotalAmountMicros", "ExcessCreditAdjustmentTaxAmountMicros", "ExcessCreditAdjustmentTotalAmountMicros", "RegulatoryCostsSubtotalAmountMicros", "RegulatoryCostsTaxAmountMicros", "RegulatoryCostsTotalAmountMicros", "ExportChargeSubtotalAmountMicros", "ExportChargeTaxAmountMicros", "ExportChargeTotalAmountMicros", "SubtotalAmountMicros", "TaxAmountMicros", "TotalAmountMicros" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Ads.GoogleAds.V15.Resources.Invoice.Types.AccountBudgetSummary), global::Google.Ads.GoogleAds.V15.Resources.Invoice.Types.AccountBudgetSummary.Parser, new[]{ "Customer", "CustomerDescriptiveName", "AccountBudget", "AccountBudgetName", "PurchaseOrderNumber", "SubtotalAmountMicros", "TaxAmountMicros", "TotalAmountMicros", "BillableActivityDateRange", "ServedAmountMicros", "BilledAmountMicros", "OverdeliveryAmountMicros", "InvalidActivityAmountMicros", "InvalidActivitySummaries" }, new[]{ "Customer", "CustomerDescriptiveName", "AccountBudget", "AccountBudgetName", "PurchaseOrderNumber", "SubtotalAmountMicros", "TaxAmountMicros", "TotalAmountMicros", "ServedAmountMicros", "BilledAmountMicros", "OverdeliveryAmountMicros", "InvalidActivityAmountMicros" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Ads.GoogleAds.V15.Resources.Invoice.Types.InvalidActivitySummary), global::Google.Ads.GoogleAds.V15.Resources.Invoice.Types.InvalidActivitySummary.Parser, new[]{ "OriginalMonthOfService", "OriginalYearOfService", "OriginalInvoiceId", "OriginalAccountBudgetName", "OriginalPurchaseOrderNumber", "AmountMicros" }, new[]{ "OriginalMonthOfService", "OriginalYearOfService", "OriginalInvoiceId", "OriginalAccountBudgetName", "OriginalPurchaseOrderNumber", "AmountMicros" }, null, null, null)})
          }));
    }
    #endregion

  }
  #region Messages
  /// <summary>
  /// An invoice. All invoice information is snapshotted to match the PDF invoice.
  /// For invoices older than the launch of InvoiceService, the snapshotted
  /// information may not match the PDF invoice.
  /// </summary>
  public sealed partial class Invoice : pb::IMessage<Invoice>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<Invoice> _parser = new pb::MessageParser<Invoice>(() => new Invoice());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<Invoice> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Ads.GoogleAds.V15.Resources.InvoiceReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public Invoice() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public Invoice(Invoice other) : this() {
      _hasBits0 = other._hasBits0;
      resourceName_ = other.resourceName_;
      id_ = other.id_;
      type_ = other.type_;
      billingSetup_ = other.billingSetup_;
      paymentsAccountId_ = other.paymentsAccountId_;
      paymentsProfileId_ = other.paymentsProfileId_;
      issueDate_ = other.issueDate_;
      dueDate_ = other.dueDate_;
      serviceDateRange_ = other.serviceDateRange_ != null ? other.serviceDateRange_.Clone() : null;
      currencyCode_ = other.currencyCode_;
      adjustmentsSubtotalAmountMicros_ = other.adjustmentsSubtotalAmountMicros_;
      adjustmentsTaxAmountMicros_ = other.adjustmentsTaxAmountMicros_;
      adjustmentsTotalAmountMicros_ = other.adjustmentsTotalAmountMicros_;
      regulatoryCostsSubtotalAmountMicros_ = other.regulatoryCostsSubtotalAmountMicros_;
      regulatoryCostsTaxAmountMicros_ = other.regulatoryCostsTaxAmountMicros_;
      regulatoryCostsTotalAmountMicros_ = other.regulatoryCostsTotalAmountMicros_;
      exportChargeSubtotalAmountMicros_ = other.exportChargeSubtotalAmountMicros_;
      exportChargeTaxAmountMicros_ = other.exportChargeTaxAmountMicros_;
      exportChargeTotalAmountMicros_ = other.exportChargeTotalAmountMicros_;
      subtotalAmountMicros_ = other.subtotalAmountMicros_;
      taxAmountMicros_ = other.taxAmountMicros_;
      totalAmountMicros_ = other.totalAmountMicros_;
      correctedInvoice_ = other.correctedInvoice_;
      replacedInvoices_ = other.replacedInvoices_.Clone();
      pdfUrl_ = other.pdfUrl_;
      accountBudgetSummaries_ = other.accountBudgetSummaries_.Clone();
      accountSummaries_ = other.accountSummaries_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public Invoice Clone() {
      return new Invoice(this);
    }

    /// <summary>Field number for the "resource_name" field.</summary>
    public const int ResourceNameFieldNumber = 1;
    private string resourceName_ = "";
    /// <summary>
    /// Output only. The resource name of the invoice. Multiple customers can share
    /// a given invoice, so multiple resource names may point to the same invoice.
    /// Invoice resource names have the form:
    ///
    /// `customers/{customer_id}/invoices/{invoice_id}`
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string ResourceName {
      get { return resourceName_; }
      set {
        resourceName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 25;
    private readonly static string IdDefaultValue = "";

    private string id_;
    /// <summary>
    /// Output only. The ID of the invoice. It appears on the invoice PDF as
    /// "Invoice number".
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Id {
      get { return id_ ?? IdDefaultValue; }
      set {
        id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasId {
      get { return id_ != null; }
    }
    /// <summary>Clears the value of the "id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearId() {
      id_ = null;
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 3;
    private global::Google.Ads.GoogleAds.V15.Enums.InvoiceTypeEnum.Types.InvoiceType type_ = global::Google.Ads.GoogleAds.V15.Enums.InvoiceTypeEnum.Types.InvoiceType.Unspecified;
    /// <summary>
    /// Output only. The type of invoice.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Google.Ads.GoogleAds.V15.Enums.InvoiceTypeEnum.Types.InvoiceType Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    /// <summary>Field number for the "billing_setup" field.</summary>
    public const int BillingSetupFieldNumber = 26;
    private readonly static string BillingSetupDefaultValue = "";

    private string billingSetup_;
    /// <summary>
    /// Output only. The resource name of this invoice's billing setup.
    ///
    /// `customers/{customer_id}/billingSetups/{billing_setup_id}`
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string BillingSetup {
      get { return billingSetup_ ?? BillingSetupDefaultValue; }
      set {
        billingSetup_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "billing_setup" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasBillingSetup {
      get { return billingSetup_ != null; }
    }
    /// <summary>Clears the value of the "billing_setup" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearBillingSetup() {
      billingSetup_ = null;
    }

    /// <summary>Field number for the "payments_account_id" field.</summary>
    public const int PaymentsAccountIdFieldNumber = 27;
    private readonly static string PaymentsAccountIdDefaultValue = "";

    private string paymentsAccountId_;
    /// <summary>
    /// Output only. A 16 digit ID used to identify the payments account associated
    /// with the billing setup, for example, "1234-5678-9012-3456". It appears on
    /// the invoice PDF as "Billing Account Number".
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string PaymentsAccountId {
      get { return paymentsAccountId_ ?? PaymentsAccountIdDefaultValue; }
      set {
        paymentsAccountId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "payments_account_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasPaymentsAccountId {
      get { return paymentsAccountId_ != null; }
    }
    /// <summary>Clears the value of the "payments_account_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearPaymentsAccountId() {
      paymentsAccountId_ = null;
    }

    /// <summary>Field number for the "payments_profile_id" field.</summary>
    public const int PaymentsProfileIdFieldNumber = 28;
    private readonly static string PaymentsProfileIdDefaultValue = "";

    private string paymentsProfileId_;
    /// <summary>
    /// Output only. A 12 digit ID used to identify the payments profile associated
    /// with the billing setup, for example, "1234-5678-9012". It appears on the
    /// invoice PDF as "Billing ID".
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string PaymentsProfileId {
      get { return paymentsProfileId_ ?? PaymentsProfileIdDefaultValue; }
      set {
        paymentsProfileId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "payments_profile_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasPaymentsProfileId {
      get { return paymentsProfileId_ != null; }
    }
    /// <summary>Clears the value of the "payments_profile_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearPaymentsProfileId() {
      paymentsProfileId_ = null;
    }

    /// <summary>Field number for the "issue_date" field.</summary>
    public const int IssueDateFieldNumber = 29;
    private readonly static string IssueDateDefaultValue = "";

    private string issueDate_;
    /// <summary>
    /// Output only. The issue date in yyyy-mm-dd format. It appears on the invoice
    /// PDF as either "Issue date" or "Invoice date".
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string IssueDate {
      get { return issueDate_ ?? IssueDateDefaultValue; }
      set {
        issueDate_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "issue_date" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasIssueDate {
      get { return issueDate_ != null; }
    }
    /// <summary>Clears the value of the "issue_date" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearIssueDate() {
      issueDate_ = null;
    }

    /// <summary>Field number for the "due_date" field.</summary>
    public const int DueDateFieldNumber = 30;
    private readonly static string DueDateDefaultValue = "";

    private string dueDate_;
    /// <summary>
    /// Output only. The due date in yyyy-mm-dd format.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string DueDate {
      get { return dueDate_ ?? DueDateDefaultValue; }
      set {
        dueDate_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "due_date" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasDueDate {
      get { return dueDate_ != null; }
    }
    /// <summary>Clears the value of the "due_date" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearDueDate() {
      dueDate_ = null;
    }

    /// <summary>Field number for the "service_date_range" field.</summary>
    public const int ServiceDateRangeFieldNumber = 9;
    private global::Google.Ads.GoogleAds.V15.Common.DateRange serviceDateRange_;
    /// <summary>
    /// Output only. The service period date range of this invoice. The end date is
    /// inclusive.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Google.Ads.GoogleAds.V15.Common.DateRange ServiceDateRange {
      get { return serviceDateRange_; }
      set {
        serviceDateRange_ = value;
      }
    }

    /// <summary>Field number for the "currency_code" field.</summary>
    public const int CurrencyCodeFieldNumber = 31;
    private readonly static string CurrencyCodeDefaultValue = "";

    private string currencyCode_;
    /// <summary>
    /// Output only. The currency code. All costs are returned in this currency. A
    /// subset of the currency codes derived from the ISO 4217 standard is
    /// supported.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string CurrencyCode {
      get { return currencyCode_ ?? CurrencyCodeDefaultValue; }
      set {
        currencyCode_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "currency_code" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasCurrencyCode {
      get { return currencyCode_ != null; }
    }
    /// <summary>Clears the value of the "currency_code" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearCurrencyCode() {
      currencyCode_ = null;
    }

    /// <summary>Field number for the "adjustments_subtotal_amount_micros" field.</summary>
    public const int AdjustmentsSubtotalAmountMicrosFieldNumber = 19;
    private long adjustmentsSubtotalAmountMicros_;
    /// <summary>
    /// Output only. The pretax subtotal amount of invoice level adjustments, in
    /// micros.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long AdjustmentsSubtotalAmountMicros {
      get { return adjustmentsSubtotalAmountMicros_; }
      set {
        adjustmentsSubtotalAmountMicros_ = value;
      }
    }

    /// <summary>Field number for the "adjustments_tax_amount_micros" field.</summary>
    public const int AdjustmentsTaxAmountMicrosFieldNumber = 20;
    private long adjustmentsTaxAmountMicros_;
    /// <summary>
    /// Output only. The sum of taxes on the invoice level adjustments, in micros.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long AdjustmentsTaxAmountMicros {
      get { return adjustmentsTaxAmountMicros_; }
      set {
        adjustmentsTaxAmountMicros_ = value;
      }
    }

    /// <summary>Field number for the "adjustments_total_amount_micros" field.</summary>
    public const int AdjustmentsTotalAmountMicrosFieldNumber = 21;
    private long adjustmentsTotalAmountMicros_;
    /// <summary>
    /// Output only. The total amount of invoice level adjustments, in micros.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long AdjustmentsTotalAmountMicros {
      get { return adjustmentsTotalAmountMicros_; }
      set {
        adjustmentsTotalAmountMicros_ = value;
      }
    }

    /// <summary>Field number for the "regulatory_costs_subtotal_amount_micros" field.</summary>
    public const int RegulatoryCostsSubtotalAmountMicrosFieldNumber = 22;
    private long regulatoryCostsSubtotalAmountMicros_;
    /// <summary>
    /// Output only. The pretax subtotal amount of invoice level regulatory costs,
    /// in micros.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long RegulatoryCostsSubtotalAmountMicros {
      get { return regulatoryCostsSubtotalAmountMicros_; }
      set {
        regulatoryCostsSubtotalAmountMicros_ = value;
      }
    }

    /// <summary>Field number for the "regulatory_costs_tax_amount_micros" field.</summary>
    public const int RegulatoryCostsTaxAmountMicrosFieldNumber = 23;
    private long regulatoryCostsTaxAmountMicros_;
    /// <summary>
    /// Output only. The sum of taxes on the invoice level regulatory costs, in
    /// micros.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long RegulatoryCostsTaxAmountMicros {
      get { return regulatoryCostsTaxAmountMicros_; }
      set {
        regulatoryCostsTaxAmountMicros_ = value;
      }
    }

    /// <summary>Field number for the "regulatory_costs_total_amount_micros" field.</summary>
    public const int RegulatoryCostsTotalAmountMicrosFieldNumber = 24;
    private long regulatoryCostsTotalAmountMicros_;
    /// <summary>
    /// Output only. The total amount of invoice level regulatory costs, in micros.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long RegulatoryCostsTotalAmountMicros {
      get { return regulatoryCostsTotalAmountMicros_; }
      set {
        regulatoryCostsTotalAmountMicros_ = value;
      }
    }

    /// <summary>Field number for the "export_charge_subtotal_amount_micros" field.</summary>
    public const int ExportChargeSubtotalAmountMicrosFieldNumber = 40;
    private readonly static long ExportChargeSubtotalAmountMicrosDefaultValue = 0L;

    private long exportChargeSubtotalAmountMicros_;
    /// <summary>
    /// Output only. The pretax subtotal amount of invoice level export charges, in
    /// micros.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long ExportChargeSubtotalAmountMicros {
      get { if ((_hasBits0 & 8) != 0) { return exportChargeSubtotalAmountMicros_; } else { return ExportChargeSubtotalAmountMicrosDefaultValue; } }
      set {
        _hasBits0 |= 8;
        exportChargeSubtotalAmountMicros_ = value;
      }
    }
    /// <summary>Gets whether the "export_charge_subtotal_amount_micros" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasExportChargeSubtotalAmountMicros {
      get { return (_hasBits0 & 8) != 0; }
    }
    /// <summary>Clears the value of the "export_charge_subtotal_amount_micros" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearExportChargeSubtotalAmountMicros() {
      _hasBits0 &= ~8;
    }

    /// <summary>Field number for the "export_charge_tax_amount_micros" field.</summary>
    public const int ExportChargeTaxAmountMicrosFieldNumber = 41;
    private readonly static long ExportChargeTaxAmountMicrosDefaultValue = 0L;

    private long exportChargeTaxAmountMicros_;
    /// <summary>
    /// Output only. The sum of taxes on the invoice level export charges, in
    /// micros.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long ExportChargeTaxAmountMicros {
      get { if ((_hasBits0 & 16) != 0) { return exportChargeTaxAmountMicros_; } else { return ExportChargeTaxAmountMicrosDefaultValue; } }
      set {
        _hasBits0 |= 16;
        exportChargeTaxAmountMicros_ = value;
      }
    }
    /// <summary>Gets whether the "export_charge_tax_amount_micros" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasExportChargeTaxAmountMicros {
      get { return (_hasBits0 & 16) != 0; }
    }
    /// <summary>Clears the value of the "export_charge_tax_amount_micros" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearExportChargeTaxAmountMicros() {
      _hasBits0 &= ~16;
    }

    /// <summary>Field number for the "export_charge_total_amount_micros" field.</summary>
    public const int ExportChargeTotalAmountMicrosFieldNumber = 42;
    private readonly static long ExportChargeTotalAmountMicrosDefaultValue = 0L;

    private long exportChargeTotalAmountMicros_;
    /// <summary>
    /// Output only. The total amount of invoice level export charges, in micros.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long ExportChargeTotalAmountMicros {
      get { if ((_hasBits0 & 32) != 0) { return exportChargeTotalAmountMicros_; } else { return ExportChargeTotalAmountMicrosDefaultValue; } }
      set {
        _hasBits0 |= 32;
        exportChargeTotalAmountMicros_ = value;
      }
    }
    /// <summary>Gets whether the "export_charge_total_amount_micros" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasExportChargeTotalAmountMicros {
      get { return (_hasBits0 & 32) != 0; }
    }
    /// <summary>Clears the value of the "export_charge_total_amount_micros" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearExportChargeTotalAmountMicros() {
      _hasBits0 &= ~32;
    }

    /// <summary>Field number for the "subtotal_amount_micros" field.</summary>
    public const int SubtotalAmountMicrosFieldNumber = 33;
    private readonly static long SubtotalAmountMicrosDefaultValue = 0L;

    private long subtotalAmountMicros_;
    /// <summary>
    /// Output only. The pretax subtotal amount, in micros. This is equal to the
    /// sum of the AccountBudgetSummary subtotal amounts and
    /// Invoice.adjustments_subtotal_amount_micros.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long SubtotalAmountMicros {
      get { if ((_hasBits0 & 1) != 0) { return subtotalAmountMicros_; } else { return SubtotalAmountMicrosDefaultValue; } }
      set {
        _hasBits0 |= 1;
        subtotalAmountMicros_ = value;
      }
    }
    /// <summary>Gets whether the "subtotal_amount_micros" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasSubtotalAmountMicros {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "subtotal_amount_micros" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearSubtotalAmountMicros() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "tax_amount_micros" field.</summary>
    public const int TaxAmountMicrosFieldNumber = 34;
    private readonly static long TaxAmountMicrosDefaultValue = 0L;

    private long taxAmountMicros_;
    /// <summary>
    /// Output only. The sum of all taxes on the invoice, in micros. This equals
    /// the sum of the AccountBudgetSummary tax amounts, plus taxes not associated
    /// with a specific account budget.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long TaxAmountMicros {
      get { if ((_hasBits0 & 2) != 0) { return taxAmountMicros_; } else { return TaxAmountMicrosDefaultValue; } }
      set {
        _hasBits0 |= 2;
        taxAmountMicros_ = value;
      }
    }
    /// <summary>Gets whether the "tax_amount_micros" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasTaxAmountMicros {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "tax_amount_micros" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearTaxAmountMicros() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "total_amount_micros" field.</summary>
    public const int TotalAmountMicrosFieldNumber = 35;
    private readonly static long TotalAmountMicrosDefaultValue = 0L;

    private long totalAmountMicros_;
    /// <summary>
    /// Output only. The total amount, in micros. This equals the sum of
    /// Invoice.subtotal_amount_micros, Invoice.tax_amount_micros,
    /// Invoice.regulatory_costs_subtotal_amount_micros, and
    /// Invoice.export_charge_subtotal_amount_micros (which is separated into a
    /// separate line item starting with V14.1).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long TotalAmountMicros {
      get { if ((_hasBits0 & 4) != 0) { return totalAmountMicros_; } else { return TotalAmountMicrosDefaultValue; } }
      set {
        _hasBits0 |= 4;
        totalAmountMicros_ = value;
      }
    }
    /// <summary>Gets whether the "total_amount_micros" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasTotalAmountMicros {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "total_amount_micros" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearTotalAmountMicros() {
      _hasBits0 &= ~4;
    }

    /// <summary>Field number for the "corrected_invoice" field.</summary>
    public const int CorrectedInvoiceFieldNumber = 36;
    private readonly static string CorrectedInvoiceDefaultValue = "";

    private string correctedInvoice_;
    /// <summary>
    /// Output only. The resource name of the original invoice corrected, wrote
    /// off, or canceled by this invoice, if applicable. If `corrected_invoice` is
    /// set, `replaced_invoices` will not be set. Invoice resource names have the
    /// form:
    ///
    /// `customers/{customer_id}/invoices/{invoice_id}`
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string CorrectedInvoice {
      get { return correctedInvoice_ ?? CorrectedInvoiceDefaultValue; }
      set {
        correctedInvoice_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "corrected_invoice" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasCorrectedInvoice {
      get { return correctedInvoice_ != null; }
    }
    /// <summary>Clears the value of the "corrected_invoice" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearCorrectedInvoice() {
      correctedInvoice_ = null;
    }

    /// <summary>Field number for the "replaced_invoices" field.</summary>
    public const int ReplacedInvoicesFieldNumber = 37;
    private static readonly pb::FieldCodec<string> _repeated_replacedInvoices_codec
        = pb::FieldCodec.ForString(298);
    private readonly pbc::RepeatedField<string> replacedInvoices_ = new pbc::RepeatedField<string>();
    /// <summary>
    /// Output only. The resource name of the original invoice(s) being rebilled or
    /// replaced by this invoice, if applicable. There might be multiple replaced
    /// invoices due to invoice consolidation. The replaced invoices may not belong
    /// to the same payments account. If `replaced_invoices` is set,
    /// `corrected_invoice` will not be set. Invoice resource names have the form:
    ///
    /// `customers/{customer_id}/invoices/{invoice_id}`
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<string> ReplacedInvoices {
      get { return replacedInvoices_; }
    }

    /// <summary>Field number for the "pdf_url" field.</summary>
    public const int PdfUrlFieldNumber = 38;
    private readonly static string PdfUrlDefaultValue = "";

    private string pdfUrl_;
    /// <summary>
    /// Output only. The URL to a PDF copy of the invoice. Users need to pass in
    /// their OAuth token to request the PDF with this URL.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string PdfUrl {
      get { return pdfUrl_ ?? PdfUrlDefaultValue; }
      set {
        pdfUrl_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "pdf_url" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasPdfUrl {
      get { return pdfUrl_ != null; }
    }
    /// <summary>Clears the value of the "pdf_url" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearPdfUrl() {
      pdfUrl_ = null;
    }

    /// <summary>Field number for the "account_budget_summaries" field.</summary>
    public const int AccountBudgetSummariesFieldNumber = 18;
    private static readonly pb::FieldCodec<global::Google.Ads.GoogleAds.V15.Resources.Invoice.Types.AccountBudgetSummary> _repeated_accountBudgetSummaries_codec
        = pb::FieldCodec.ForMessage(146, global::Google.Ads.GoogleAds.V15.Resources.Invoice.Types.AccountBudgetSummary.Parser);
    private readonly pbc::RepeatedField<global::Google.Ads.GoogleAds.V15.Resources.Invoice.Types.AccountBudgetSummary> accountBudgetSummaries_ = new pbc::RepeatedField<global::Google.Ads.GoogleAds.V15.Resources.Invoice.Types.AccountBudgetSummary>();
    /// <summary>
    /// Output only. The list of summarized account budget information associated
    /// with this invoice.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<global::Google.Ads.GoogleAds.V15.Resources.Invoice.Types.AccountBudgetSummary> AccountBudgetSummaries {
      get { return accountBudgetSummaries_; }
    }

    /// <summary>Field number for the "account_summaries" field.</summary>
    public const int AccountSummariesFieldNumber = 39;
    private static readonly pb::FieldCodec<global::Google.Ads.GoogleAds.V15.Resources.Invoice.Types.AccountSummary> _repeated_accountSummaries_codec
        = pb::FieldCodec.ForMessage(314, global::Google.Ads.GoogleAds.V15.Resources.Invoice.Types.AccountSummary.Parser);
    private readonly pbc::RepeatedField<global::Google.Ads.GoogleAds.V15.Resources.Invoice.Types.AccountSummary> accountSummaries_ = new pbc::RepeatedField<global::Google.Ads.GoogleAds.V15.Resources.Invoice.Types.AccountSummary>();
    /// <summary>
    /// Output only. The list of summarized account information associated with
    /// this invoice.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<global::Google.Ads.GoogleAds.V15.Resources.Invoice.Types.AccountSummary> AccountSummaries {
      get { return accountSummaries_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as Invoice);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(Invoice other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ResourceName != other.ResourceName) return false;
      if (Id != other.Id) return false;
      if (Type != other.Type) return false;
      if (BillingSetup != other.BillingSetup) return false;
      if (PaymentsAccountId != other.PaymentsAccountId) return false;
      if (PaymentsProfileId != other.PaymentsProfileId) return false;
      if (IssueDate != other.IssueDate) return false;
      if (DueDate != other.DueDate) return false;
      if (!object.Equals(ServiceDateRange, other.ServiceDateRange)) return false;
      if (CurrencyCode != other.CurrencyCode) return false;
      if (AdjustmentsSubtotalAmountMicros != other.AdjustmentsSubtotalAmountMicros) return false;
      if (AdjustmentsTaxAmountMicros != other.AdjustmentsTaxAmountMicros) return false;
      if (AdjustmentsTotalAmountMicros != other.AdjustmentsTotalAmountMicros) return false;
      if (RegulatoryCostsSubtotalAmountMicros != other.RegulatoryCostsSubtotalAmountMicros) return false;
      if (RegulatoryCostsTaxAmountMicros != other.RegulatoryCostsTaxAmountMicros) return false;
      if (RegulatoryCostsTotalAmountMicros != other.RegulatoryCostsTotalAmountMicros) return false;
      if (ExportChargeSubtotalAmountMicros != other.ExportChargeSubtotalAmountMicros) return false;
      if (ExportChargeTaxAmountMicros != other.ExportChargeTaxAmountMicros) return false;
      if (ExportChargeTotalAmountMicros != other.ExportChargeTotalAmountMicros) return false;
      if (SubtotalAmountMicros != other.SubtotalAmountMicros) return false;
      if (TaxAmountMicros != other.TaxAmountMicros) return false;
      if (TotalAmountMicros != other.TotalAmountMicros) return false;
      if (CorrectedInvoice != other.CorrectedInvoice) return false;
      if(!replacedInvoices_.Equals(other.replacedInvoices_)) return false;
      if (PdfUrl != other.PdfUrl) return false;
      if(!accountBudgetSummaries_.Equals(other.accountBudgetSummaries_)) return false;
      if(!accountSummaries_.Equals(other.accountSummaries_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (ResourceName.Length != 0) hash ^= ResourceName.GetHashCode();
      if (HasId) hash ^= Id.GetHashCode();
      if (Type != global::Google.Ads.GoogleAds.V15.Enums.InvoiceTypeEnum.Types.InvoiceType.Unspecified) hash ^= Type.GetHashCode();
      if (HasBillingSetup) hash ^= BillingSetup.GetHashCode();
      if (HasPaymentsAccountId) hash ^= PaymentsAccountId.GetHashCode();
      if (HasPaymentsProfileId) hash ^= PaymentsProfileId.GetHashCode();
      if (HasIssueDate) hash ^= IssueDate.GetHashCode();
      if (HasDueDate) hash ^= DueDate.GetHashCode();
      if (serviceDateRange_ != null) hash ^= ServiceDateRange.GetHashCode();
      if (HasCurrencyCode) hash ^= CurrencyCode.GetHashCode();
      if (AdjustmentsSubtotalAmountMicros != 0L) hash ^= AdjustmentsSubtotalAmountMicros.GetHashCode();
      if (AdjustmentsTaxAmountMicros != 0L) hash ^= AdjustmentsTaxAmountMicros.GetHashCode();
      if (AdjustmentsTotalAmountMicros != 0L) hash ^= AdjustmentsTotalAmountMicros.GetHashCode();
      if (RegulatoryCostsSubtotalAmountMicros != 0L) hash ^= RegulatoryCostsSubtotalAmountMicros.GetHashCode();
      if (RegulatoryCostsTaxAmountMicros != 0L) hash ^= RegulatoryCostsTaxAmountMicros.GetHashCode();
      if (RegulatoryCostsTotalAmountMicros != 0L) hash ^= RegulatoryCostsTotalAmountMicros.GetHashCode();
      if (HasExportChargeSubtotalAmountMicros) hash ^= ExportChargeSubtotalAmountMicros.GetHashCode();
      if (HasExportChargeTaxAmountMicros) hash ^= ExportChargeTaxAmountMicros.GetHashCode();
      if (HasExportChargeTotalAmountMicros) hash ^= ExportChargeTotalAmountMicros.GetHashCode();
      if (HasSubtotalAmountMicros) hash ^= SubtotalAmountMicros.GetHashCode();
      if (HasTaxAmountMicros) hash ^= TaxAmountMicros.GetHashCode();
      if (HasTotalAmountMicros) hash ^= TotalAmountMicros.GetHashCode();
      if (HasCorrectedInvoice) hash ^= CorrectedInvoice.GetHashCode();
      hash ^= replacedInvoices_.GetHashCode();
      if (HasPdfUrl) hash ^= PdfUrl.GetHashCode();
      hash ^= accountBudgetSummaries_.GetHashCode();
      hash ^= accountSummaries_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (ResourceName.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(ResourceName);
      }
      if (Type != global::Google.Ads.GoogleAds.V15.Enums.InvoiceTypeEnum.Types.InvoiceType.Unspecified) {
        output.WriteRawTag(24);
        output.WriteEnum((int) Type);
      }
      if (serviceDateRange_ != null) {
        output.WriteRawTag(74);
        output.WriteMessage(ServiceDateRange);
      }
      accountBudgetSummaries_.WriteTo(output, _repeated_accountBudgetSummaries_codec);
      if (AdjustmentsSubtotalAmountMicros != 0L) {
        output.WriteRawTag(152, 1);
        output.WriteInt64(AdjustmentsSubtotalAmountMicros);
      }
      if (AdjustmentsTaxAmountMicros != 0L) {
        output.WriteRawTag(160, 1);
        output.WriteInt64(AdjustmentsTaxAmountMicros);
      }
      if (AdjustmentsTotalAmountMicros != 0L) {
        output.WriteRawTag(168, 1);
        output.WriteInt64(AdjustmentsTotalAmountMicros);
      }
      if (RegulatoryCostsSubtotalAmountMicros != 0L) {
        output.WriteRawTag(176, 1);
        output.WriteInt64(RegulatoryCostsSubtotalAmountMicros);
      }
      if (RegulatoryCostsTaxAmountMicros != 0L) {
        output.WriteRawTag(184, 1);
        output.WriteInt64(RegulatoryCostsTaxAmountMicros);
      }
      if (RegulatoryCostsTotalAmountMicros != 0L) {
        output.WriteRawTag(192, 1);
        output.WriteInt64(RegulatoryCostsTotalAmountMicros);
      }
      if (HasId) {
        output.WriteRawTag(202, 1);
        output.WriteString(Id);
      }
      if (HasBillingSetup) {
        output.WriteRawTag(210, 1);
        output.WriteString(BillingSetup);
      }
      if (HasPaymentsAccountId) {
        output.WriteRawTag(218, 1);
        output.WriteString(PaymentsAccountId);
      }
      if (HasPaymentsProfileId) {
        output.WriteRawTag(226, 1);
        output.WriteString(PaymentsProfileId);
      }
      if (HasIssueDate) {
        output.WriteRawTag(234, 1);
        output.WriteString(IssueDate);
      }
      if (HasDueDate) {
        output.WriteRawTag(242, 1);
        output.WriteString(DueDate);
      }
      if (HasCurrencyCode) {
        output.WriteRawTag(250, 1);
        output.WriteString(CurrencyCode);
      }
      if (HasSubtotalAmountMicros) {
        output.WriteRawTag(136, 2);
        output.WriteInt64(SubtotalAmountMicros);
      }
      if (HasTaxAmountMicros) {
        output.WriteRawTag(144, 2);
        output.WriteInt64(TaxAmountMicros);
      }
      if (HasTotalAmountMicros) {
        output.WriteRawTag(152, 2);
        output.WriteInt64(TotalAmountMicros);
      }
      if (HasCorrectedInvoice) {
        output.WriteRawTag(162, 2);
        output.WriteString(CorrectedInvoice);
      }
      replacedInvoices_.WriteTo(output, _repeated_replacedInvoices_codec);
      if (HasPdfUrl) {
        output.WriteRawTag(178, 2);
        output.WriteString(PdfUrl);
      }
      accountSummaries_.WriteTo(output, _repeated_accountSummaries_codec);
      if (HasExportChargeSubtotalAmountMicros) {
        output.WriteRawTag(192, 2);
        output.WriteInt64(ExportChargeSubtotalAmountMicros);
      }
      if (HasExportChargeTaxAmountMicros) {
        output.WriteRawTag(200, 2);
        output.WriteInt64(ExportChargeTaxAmountMicros);
      }
      if (HasExportChargeTotalAmountMicros) {
        output.WriteRawTag(208, 2);
        output.WriteInt64(ExportChargeTotalAmountMicros);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (ResourceName.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(ResourceName);
      }
      if (Type != global::Google.Ads.GoogleAds.V15.Enums.InvoiceTypeEnum.Types.InvoiceType.Unspecified) {
        output.WriteRawTag(24);
        output.WriteEnum((int) Type);
      }
      if (serviceDateRange_ != null) {
        output.WriteRawTag(74);
        output.WriteMessage(ServiceDateRange);
      }
      accountBudgetSummaries_.WriteTo(ref output, _repeated_accountBudgetSummaries_codec);
      if (AdjustmentsSubtotalAmountMicros != 0L) {
        output.WriteRawTag(152, 1);
        output.WriteInt64(AdjustmentsSubtotalAmountMicros);
      }
      if (AdjustmentsTaxAmountMicros != 0L) {
        output.WriteRawTag(160, 1);
        output.WriteInt64(AdjustmentsTaxAmountMicros);
      }
      if (AdjustmentsTotalAmountMicros != 0L) {
        output.WriteRawTag(168, 1);
        output.WriteInt64(AdjustmentsTotalAmountMicros);
      }
      if (RegulatoryCostsSubtotalAmountMicros != 0L) {
        output.WriteRawTag(176, 1);
        output.WriteInt64(RegulatoryCostsSubtotalAmountMicros);
      }
      if (RegulatoryCostsTaxAmountMicros != 0L) {
        output.WriteRawTag(184, 1);
        output.WriteInt64(RegulatoryCostsTaxAmountMicros);
      }
      if (RegulatoryCostsTotalAmountMicros != 0L) {
        output.WriteRawTag(192, 1);
        output.WriteInt64(RegulatoryCostsTotalAmountMicros);
      }
      if (HasId) {
        output.WriteRawTag(202, 1);
        output.WriteString(Id);
      }
      if (HasBillingSetup) {
        output.WriteRawTag(210, 1);
        output.WriteString(BillingSetup);
      }
      if (HasPaymentsAccountId) {
        output.WriteRawTag(218, 1);
        output.WriteString(PaymentsAccountId);
      }
      if (HasPaymentsProfileId) {
        output.WriteRawTag(226, 1);
        output.WriteString(PaymentsProfileId);
      }
      if (HasIssueDate) {
        output.WriteRawTag(234, 1);
        output.WriteString(IssueDate);
      }
      if (HasDueDate) {
        output.WriteRawTag(242, 1);
        output.WriteString(DueDate);
      }
      if (HasCurrencyCode) {
        output.WriteRawTag(250, 1);
        output.WriteString(CurrencyCode);
      }
      if (HasSubtotalAmountMicros) {
        output.WriteRawTag(136, 2);
        output.WriteInt64(SubtotalAmountMicros);
      }
      if (HasTaxAmountMicros) {
        output.WriteRawTag(144, 2);
        output.WriteInt64(TaxAmountMicros);
      }
      if (HasTotalAmountMicros) {
        output.WriteRawTag(152, 2);
        output.WriteInt64(TotalAmountMicros);
      }
      if (HasCorrectedInvoice) {
        output.WriteRawTag(162, 2);
        output.WriteString(CorrectedInvoice);
      }
      replacedInvoices_.WriteTo(ref output, _repeated_replacedInvoices_codec);
      if (HasPdfUrl) {
        output.WriteRawTag(178, 2);
        output.WriteString(PdfUrl);
      }
      accountSummaries_.WriteTo(ref output, _repeated_accountSummaries_codec);
      if (HasExportChargeSubtotalAmountMicros) {
        output.WriteRawTag(192, 2);
        output.WriteInt64(ExportChargeSubtotalAmountMicros);
      }
      if (HasExportChargeTaxAmountMicros) {
        output.WriteRawTag(200, 2);
        output.WriteInt64(ExportChargeTaxAmountMicros);
      }
      if (HasExportChargeTotalAmountMicros) {
        output.WriteRawTag(208, 2);
        output.WriteInt64(ExportChargeTotalAmountMicros);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (ResourceName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ResourceName);
      }
      if (HasId) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Id);
      }
      if (Type != global::Google.Ads.GoogleAds.V15.Enums.InvoiceTypeEnum.Types.InvoiceType.Unspecified) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Type);
      }
      if (HasBillingSetup) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(BillingSetup);
      }
      if (HasPaymentsAccountId) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(PaymentsAccountId);
      }
      if (HasPaymentsProfileId) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(PaymentsProfileId);
      }
      if (HasIssueDate) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(IssueDate);
      }
      if (HasDueDate) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(DueDate);
      }
      if (serviceDateRange_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ServiceDateRange);
      }
      if (HasCurrencyCode) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(CurrencyCode);
      }
      if (AdjustmentsSubtotalAmountMicros != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(AdjustmentsSubtotalAmountMicros);
      }
      if (AdjustmentsTaxAmountMicros != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(AdjustmentsTaxAmountMicros);
      }
      if (AdjustmentsTotalAmountMicros != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(AdjustmentsTotalAmountMicros);
      }
      if (RegulatoryCostsSubtotalAmountMicros != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(RegulatoryCostsSubtotalAmountMicros);
      }
      if (RegulatoryCostsTaxAmountMicros != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(RegulatoryCostsTaxAmountMicros);
      }
      if (RegulatoryCostsTotalAmountMicros != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(RegulatoryCostsTotalAmountMicros);
      }
      if (HasExportChargeSubtotalAmountMicros) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(ExportChargeSubtotalAmountMicros);
      }
      if (HasExportChargeTaxAmountMicros) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(ExportChargeTaxAmountMicros);
      }
      if (HasExportChargeTotalAmountMicros) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(ExportChargeTotalAmountMicros);
      }
      if (HasSubtotalAmountMicros) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(SubtotalAmountMicros);
      }
      if (HasTaxAmountMicros) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(TaxAmountMicros);
      }
      if (HasTotalAmountMicros) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(TotalAmountMicros);
      }
      if (HasCorrectedInvoice) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(CorrectedInvoice);
      }
      size += replacedInvoices_.CalculateSize(_repeated_replacedInvoices_codec);
      if (HasPdfUrl) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(PdfUrl);
      }
      size += accountBudgetSummaries_.CalculateSize(_repeated_accountBudgetSummaries_codec);
      size += accountSummaries_.CalculateSize(_repeated_accountSummaries_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(Invoice other) {
      if (other == null) {
        return;
      }
      if (other.ResourceName.Length != 0) {
        ResourceName = other.ResourceName;
      }
      if (other.HasId) {
        Id = other.Id;
      }
      if (other.Type != global::Google.Ads.GoogleAds.V15.Enums.InvoiceTypeEnum.Types.InvoiceType.Unspecified) {
        Type = other.Type;
      }
      if (other.HasBillingSetup) {
        BillingSetup = other.BillingSetup;
      }
      if (other.HasPaymentsAccountId) {
        PaymentsAccountId = other.PaymentsAccountId;
      }
      if (other.HasPaymentsProfileId) {
        PaymentsProfileId = other.PaymentsProfileId;
      }
      if (other.HasIssueDate) {
        IssueDate = other.IssueDate;
      }
      if (other.HasDueDate) {
        DueDate = other.DueDate;
      }
      if (other.serviceDateRange_ != null) {
        if (serviceDateRange_ == null) {
          ServiceDateRange = new global::Google.Ads.GoogleAds.V15.Common.DateRange();
        }
        ServiceDateRange.MergeFrom(other.ServiceDateRange);
      }
      if (other.HasCurrencyCode) {
        CurrencyCode = other.CurrencyCode;
      }
      if (other.AdjustmentsSubtotalAmountMicros != 0L) {
        AdjustmentsSubtotalAmountMicros = other.AdjustmentsSubtotalAmountMicros;
      }
      if (other.AdjustmentsTaxAmountMicros != 0L) {
        AdjustmentsTaxAmountMicros = other.AdjustmentsTaxAmountMicros;
      }
      if (other.AdjustmentsTotalAmountMicros != 0L) {
        AdjustmentsTotalAmountMicros = other.AdjustmentsTotalAmountMicros;
      }
      if (other.RegulatoryCostsSubtotalAmountMicros != 0L) {
        RegulatoryCostsSubtotalAmountMicros = other.RegulatoryCostsSubtotalAmountMicros;
      }
      if (other.RegulatoryCostsTaxAmountMicros != 0L) {
        RegulatoryCostsTaxAmountMicros = other.RegulatoryCostsTaxAmountMicros;
      }
      if (other.RegulatoryCostsTotalAmountMicros != 0L) {
        RegulatoryCostsTotalAmountMicros = other.RegulatoryCostsTotalAmountMicros;
      }
      if (other.HasExportChargeSubtotalAmountMicros) {
        ExportChargeSubtotalAmountMicros = other.ExportChargeSubtotalAmountMicros;
      }
      if (other.HasExportChargeTaxAmountMicros) {
        ExportChargeTaxAmountMicros = other.ExportChargeTaxAmountMicros;
      }
      if (other.HasExportChargeTotalAmountMicros) {
        ExportChargeTotalAmountMicros = other.ExportChargeTotalAmountMicros;
      }
      if (other.HasSubtotalAmountMicros) {
        SubtotalAmountMicros = other.SubtotalAmountMicros;
      }
      if (other.HasTaxAmountMicros) {
        TaxAmountMicros = other.TaxAmountMicros;
      }
      if (other.HasTotalAmountMicros) {
        TotalAmountMicros = other.TotalAmountMicros;
      }
      if (other.HasCorrectedInvoice) {
        CorrectedInvoice = other.CorrectedInvoice;
      }
      replacedInvoices_.Add(other.replacedInvoices_);
      if (other.HasPdfUrl) {
        PdfUrl = other.PdfUrl;
      }
      accountBudgetSummaries_.Add(other.accountBudgetSummaries_);
      accountSummaries_.Add(other.accountSummaries_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            ResourceName = input.ReadString();
            break;
          }
          case 24: {
            Type = (global::Google.Ads.GoogleAds.V15.Enums.InvoiceTypeEnum.Types.InvoiceType) input.ReadEnum();
            break;
          }
          case 74: {
            if (serviceDateRange_ == null) {
              ServiceDateRange = new global::Google.Ads.GoogleAds.V15.Common.DateRange();
            }
            input.ReadMessage(ServiceDateRange);
            break;
          }
          case 146: {
            accountBudgetSummaries_.AddEntriesFrom(input, _repeated_accountBudgetSummaries_codec);
            break;
          }
          case 152: {
            AdjustmentsSubtotalAmountMicros = input.ReadInt64();
            break;
          }
          case 160: {
            AdjustmentsTaxAmountMicros = input.ReadInt64();
            break;
          }
          case 168: {
            AdjustmentsTotalAmountMicros = input.ReadInt64();
            break;
          }
          case 176: {
            RegulatoryCostsSubtotalAmountMicros = input.ReadInt64();
            break;
          }
          case 184: {
            RegulatoryCostsTaxAmountMicros = input.ReadInt64();
            break;
          }
          case 192: {
            RegulatoryCostsTotalAmountMicros = input.ReadInt64();
            break;
          }
          case 202: {
            Id = input.ReadString();
            break;
          }
          case 210: {
            BillingSetup = input.ReadString();
            break;
          }
          case 218: {
            PaymentsAccountId = input.ReadString();
            break;
          }
          case 226: {
            PaymentsProfileId = input.ReadString();
            break;
          }
          case 234: {
            IssueDate = input.ReadString();
            break;
          }
          case 242: {
            DueDate = input.ReadString();
            break;
          }
          case 250: {
            CurrencyCode = input.ReadString();
            break;
          }
          case 264: {
            SubtotalAmountMicros = input.ReadInt64();
            break;
          }
          case 272: {
            TaxAmountMicros = input.ReadInt64();
            break;
          }
          case 280: {
            TotalAmountMicros = input.ReadInt64();
            break;
          }
          case 290: {
            CorrectedInvoice = input.ReadString();
            break;
          }
          case 298: {
            replacedInvoices_.AddEntriesFrom(input, _repeated_replacedInvoices_codec);
            break;
          }
          case 306: {
            PdfUrl = input.ReadString();
            break;
          }
          case 314: {
            accountSummaries_.AddEntriesFrom(input, _repeated_accountSummaries_codec);
            break;
          }
          case 320: {
            ExportChargeSubtotalAmountMicros = input.ReadInt64();
            break;
          }
          case 328: {
            ExportChargeTaxAmountMicros = input.ReadInt64();
            break;
          }
          case 336: {
            ExportChargeTotalAmountMicros = input.ReadInt64();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            ResourceName = input.ReadString();
            break;
          }
          case 24: {
            Type = (global::Google.Ads.GoogleAds.V15.Enums.InvoiceTypeEnum.Types.InvoiceType) input.ReadEnum();
            break;
          }
          case 74: {
            if (serviceDateRange_ == null) {
              ServiceDateRange = new global::Google.Ads.GoogleAds.V15.Common.DateRange();
            }
            input.ReadMessage(ServiceDateRange);
            break;
          }
          case 146: {
            accountBudgetSummaries_.AddEntriesFrom(ref input, _repeated_accountBudgetSummaries_codec);
            break;
          }
          case 152: {
            AdjustmentsSubtotalAmountMicros = input.ReadInt64();
            break;
          }
          case 160: {
            AdjustmentsTaxAmountMicros = input.ReadInt64();
            break;
          }
          case 168: {
            AdjustmentsTotalAmountMicros = input.ReadInt64();
            break;
          }
          case 176: {
            RegulatoryCostsSubtotalAmountMicros = input.ReadInt64();
            break;
          }
          case 184: {
            RegulatoryCostsTaxAmountMicros = input.ReadInt64();
            break;
          }
          case 192: {
            RegulatoryCostsTotalAmountMicros = input.ReadInt64();
            break;
          }
          case 202: {
            Id = input.ReadString();
            break;
          }
          case 210: {
            BillingSetup = input.ReadString();
            break;
          }
          case 218: {
            PaymentsAccountId = input.ReadString();
            break;
          }
          case 226: {
            PaymentsProfileId = input.ReadString();
            break;
          }
          case 234: {
            IssueDate = input.ReadString();
            break;
          }
          case 242: {
            DueDate = input.ReadString();
            break;
          }
          case 250: {
            CurrencyCode = input.ReadString();
            break;
          }
          case 264: {
            SubtotalAmountMicros = input.ReadInt64();
            break;
          }
          case 272: {
            TaxAmountMicros = input.ReadInt64();
            break;
          }
          case 280: {
            TotalAmountMicros = input.ReadInt64();
            break;
          }
          case 290: {
            CorrectedInvoice = input.ReadString();
            break;
          }
          case 298: {
            replacedInvoices_.AddEntriesFrom(ref input, _repeated_replacedInvoices_codec);
            break;
          }
          case 306: {
            PdfUrl = input.ReadString();
            break;
          }
          case 314: {
            accountSummaries_.AddEntriesFrom(ref input, _repeated_accountSummaries_codec);
            break;
          }
          case 320: {
            ExportChargeSubtotalAmountMicros = input.ReadInt64();
            break;
          }
          case 328: {
            ExportChargeTaxAmountMicros = input.ReadInt64();
            break;
          }
          case 336: {
            ExportChargeTotalAmountMicros = input.ReadInt64();
            break;
          }
        }
      }
    }
    #endif

    #region Nested types
    /// <summary>Container for nested types declared in the Invoice message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static partial class Types {
      /// <summary>
      /// Represents a summarized view at account level.
      /// </summary>
      public sealed partial class AccountSummary : pb::IMessage<AccountSummary>
      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          , pb::IBufferMessage
      #endif
      {
        private static readonly pb::MessageParser<AccountSummary> _parser = new pb::MessageParser<AccountSummary>(() => new AccountSummary());
        private pb::UnknownFieldSet _unknownFields;
        private int _hasBits0;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public static pb::MessageParser<AccountSummary> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Google.Ads.GoogleAds.V15.Resources.Invoice.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public AccountSummary() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public AccountSummary(AccountSummary other) : this() {
          _hasBits0 = other._hasBits0;
          customer_ = other.customer_;
          billingCorrectionSubtotalAmountMicros_ = other.billingCorrectionSubtotalAmountMicros_;
          billingCorrectionTaxAmountMicros_ = other.billingCorrectionTaxAmountMicros_;
          billingCorrectionTotalAmountMicros_ = other.billingCorrectionTotalAmountMicros_;
          couponAdjustmentSubtotalAmountMicros_ = other.couponAdjustmentSubtotalAmountMicros_;
          couponAdjustmentTaxAmountMicros_ = other.couponAdjustmentTaxAmountMicros_;
          couponAdjustmentTotalAmountMicros_ = other.couponAdjustmentTotalAmountMicros_;
          excessCreditAdjustmentSubtotalAmountMicros_ = other.excessCreditAdjustmentSubtotalAmountMicros_;
          excessCreditAdjustmentTaxAmountMicros_ = other.excessCreditAdjustmentTaxAmountMicros_;
          excessCreditAdjustmentTotalAmountMicros_ = other.excessCreditAdjustmentTotalAmountMicros_;
          regulatoryCostsSubtotalAmountMicros_ = other.regulatoryCostsSubtotalAmountMicros_;
          regulatoryCostsTaxAmountMicros_ = other.regulatoryCostsTaxAmountMicros_;
          regulatoryCostsTotalAmountMicros_ = other.regulatoryCostsTotalAmountMicros_;
          exportChargeSubtotalAmountMicros_ = other.exportChargeSubtotalAmountMicros_;
          exportChargeTaxAmountMicros_ = other.exportChargeTaxAmountMicros_;
          exportChargeTotalAmountMicros_ = other.exportChargeTotalAmountMicros_;
          subtotalAmountMicros_ = other.subtotalAmountMicros_;
          taxAmountMicros_ = other.taxAmountMicros_;
          totalAmountMicros_ = other.totalAmountMicros_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public AccountSummary Clone() {
          return new AccountSummary(this);
        }

        /// <summary>Field number for the "customer" field.</summary>
        public const int CustomerFieldNumber = 1;
        private readonly static string CustomerDefaultValue = "";

        private string customer_;
        /// <summary>
        /// Output only. The account associated with the account summary.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public string Customer {
          get { return customer_ ?? CustomerDefaultValue; }
          set {
            customer_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }
        /// <summary>Gets whether the "customer" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public bool HasCustomer {
          get { return customer_ != null; }
        }
        /// <summary>Clears the value of the "customer" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void ClearCustomer() {
          customer_ = null;
        }

        /// <summary>Field number for the "billing_correction_subtotal_amount_micros" field.</summary>
        public const int BillingCorrectionSubtotalAmountMicrosFieldNumber = 2;
        private readonly static long BillingCorrectionSubtotalAmountMicrosDefaultValue = 0L;

        private long billingCorrectionSubtotalAmountMicros_;
        /// <summary>
        /// Output only. Pretax billing correction subtotal amount, in micros.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public long BillingCorrectionSubtotalAmountMicros {
          get { if ((_hasBits0 & 1) != 0) { return billingCorrectionSubtotalAmountMicros_; } else { return BillingCorrectionSubtotalAmountMicrosDefaultValue; } }
          set {
            _hasBits0 |= 1;
            billingCorrectionSubtotalAmountMicros_ = value;
          }
        }
        /// <summary>Gets whether the "billing_correction_subtotal_amount_micros" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public bool HasBillingCorrectionSubtotalAmountMicros {
          get { return (_hasBits0 & 1) != 0; }
        }
        /// <summary>Clears the value of the "billing_correction_subtotal_amount_micros" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void ClearBillingCorrectionSubtotalAmountMicros() {
          _hasBits0 &= ~1;
        }

        /// <summary>Field number for the "billing_correction_tax_amount_micros" field.</summary>
        public const int BillingCorrectionTaxAmountMicrosFieldNumber = 3;
        private readonly static long BillingCorrectionTaxAmountMicrosDefaultValue = 0L;

        private long billingCorrectionTaxAmountMicros_;
        /// <summary>
        /// Output only. Tax on billing correction, in micros.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public long BillingCorrectionTaxAmountMicros {
          get { if ((_hasBits0 & 2) != 0) { return billingCorrectionTaxAmountMicros_; } else { return BillingCorrectionTaxAmountMicrosDefaultValue; } }
          set {
            _hasBits0 |= 2;
            billingCorrectionTaxAmountMicros_ = value;
          }
        }
        /// <summary>Gets whether the "billing_correction_tax_amount_micros" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public bool HasBillingCorrectionTaxAmountMicros {
          get { return (_hasBits0 & 2) != 0; }
        }
        /// <summary>Clears the value of the "billing_correction_tax_amount_micros" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void ClearBillingCorrectionTaxAmountMicros() {
          _hasBits0 &= ~2;
        }

        /// <summary>Field number for the "billing_correction_total_amount_micros" field.</summary>
        public const int BillingCorrectionTotalAmountMicrosFieldNumber = 4;
        private readonly static long BillingCorrectionTotalAmountMicrosDefaultValue = 0L;

        private long billingCorrectionTotalAmountMicros_;
        /// <summary>
        /// Output only. Total billing correction amount, in micros.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public long BillingCorrectionTotalAmountMicros {
          get { if ((_hasBits0 & 4) != 0) { return billingCorrectionTotalAmountMicros_; } else { return BillingCorrectionTotalAmountMicrosDefaultValue; } }
          set {
            _hasBits0 |= 4;
            billingCorrectionTotalAmountMicros_ = value;
          }
        }
        /// <summary>Gets whether the "billing_correction_total_amount_micros" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public bool HasBillingCorrectionTotalAmountMicros {
          get { return (_hasBits0 & 4) != 0; }
        }
        /// <summary>Clears the value of the "billing_correction_total_amount_micros" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void ClearBillingCorrectionTotalAmountMicros() {
          _hasBits0 &= ~4;
        }

        /// <summary>Field number for the "coupon_adjustment_subtotal_amount_micros" field.</summary>
        public const int CouponAdjustmentSubtotalAmountMicrosFieldNumber = 5;
        private readonly static long CouponAdjustmentSubtotalAmountMicrosDefaultValue = 0L;

        private long couponAdjustmentSubtotalAmountMicros_;
        /// <summary>
        /// Output only. Pretax coupon adjustment subtotal amount, in micros.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public long CouponAdjustmentSubtotalAmountMicros {
          get { if ((_hasBits0 & 8) != 0) { return couponAdjustmentSubtotalAmountMicros_; } else { return CouponAdjustmentSubtotalAmountMicrosDefaultValue; } }
          set {
            _hasBits0 |= 8;
            couponAdjustmentSubtotalAmountMicros_ = value;
          }
        }
        /// <summary>Gets whether the "coupon_adjustment_subtotal_amount_micros" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public bool HasCouponAdjustmentSubtotalAmountMicros {
          get { return (_hasBits0 & 8) != 0; }
        }
        /// <summary>Clears the value of the "coupon_adjustment_subtotal_amount_micros" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void ClearCouponAdjustmentSubtotalAmountMicros() {
          _hasBits0 &= ~8;
        }

        /// <summary>Field number for the "coupon_adjustment_tax_amount_micros" field.</summary>
        public const int CouponAdjustmentTaxAmountMicrosFieldNumber = 6;
        private readonly static long CouponAdjustmentTaxAmountMicrosDefaultValue = 0L;

        private long couponAdjustmentTaxAmountMicros_;
        /// <summary>
        /// Output only. Tax on coupon adjustment, in micros.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public long CouponAdjustmentTaxAmountMicros {
          get { if ((_hasBits0 & 16) != 0) { return couponAdjustmentTaxAmountMicros_; } else { return CouponAdjustmentTaxAmountMicrosDefaultValue; } }
          set {
            _hasBits0 |= 16;
            couponAdjustmentTaxAmountMicros_ = value;
          }
        }
        /// <summary>Gets whether the "coupon_adjustment_tax_amount_micros" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public bool HasCouponAdjustmentTaxAmountMicros {
          get { return (_hasBits0 & 16) != 0; }
        }
        /// <summary>Clears the value of the "coupon_adjustment_tax_amount_micros" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void ClearCouponAdjustmentTaxAmountMicros() {
          _hasBits0 &= ~16;
        }

        /// <summary>Field number for the "coupon_adjustment_total_amount_micros" field.</summary>
        public const int CouponAdjustmentTotalAmountMicrosFieldNumber = 7;
        private readonly static long CouponAdjustmentTotalAmountMicrosDefaultValue = 0L;

        private long couponAdjustmentTotalAmountMicros_;
        /// <summary>
        /// Output only. Total coupon adjustment amount, in micros.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public long CouponAdjustmentTotalAmountMicros {
          get { if ((_hasBits0 & 32) != 0) { return couponAdjustmentTotalAmountMicros_; } else { return CouponAdjustmentTotalAmountMicrosDefaultValue; } }
          set {
            _hasBits0 |= 32;
            couponAdjustmentTotalAmountMicros_ = value;
          }
        }
        /// <summary>Gets whether the "coupon_adjustment_total_amount_micros" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public bool HasCouponAdjustmentTotalAmountMicros {
          get { return (_hasBits0 & 32) != 0; }
        }
        /// <summary>Clears the value of the "coupon_adjustment_total_amount_micros" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void ClearCouponAdjustmentTotalAmountMicros() {
          _hasBits0 &= ~32;
        }

        /// <summary>Field number for the "excess_credit_adjustment_subtotal_amount_micros" field.</summary>
        public const int ExcessCreditAdjustmentSubtotalAmountMicrosFieldNumber = 8;
        private readonly static long ExcessCreditAdjustmentSubtotalAmountMicrosDefaultValue = 0L;

        private long excessCreditAdjustmentSubtotalAmountMicros_;
        /// <summary>
        /// Output only. Pretax excess credit adjustment subtotal amount, in micros.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public long ExcessCreditAdjustmentSubtotalAmountMicros {
          get { if ((_hasBits0 & 64) != 0) { return excessCreditAdjustmentSubtotalAmountMicros_; } else { return ExcessCreditAdjustmentSubtotalAmountMicrosDefaultValue; } }
          set {
            _hasBits0 |= 64;
            excessCreditAdjustmentSubtotalAmountMicros_ = value;
          }
        }
        /// <summary>Gets whether the "excess_credit_adjustment_subtotal_amount_micros" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public bool HasExcessCreditAdjustmentSubtotalAmountMicros {
          get { return (_hasBits0 & 64) != 0; }
        }
        /// <summary>Clears the value of the "excess_credit_adjustment_subtotal_amount_micros" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void ClearExcessCreditAdjustmentSubtotalAmountMicros() {
          _hasBits0 &= ~64;
        }

        /// <summary>Field number for the "excess_credit_adjustment_tax_amount_micros" field.</summary>
        public const int ExcessCreditAdjustmentTaxAmountMicrosFieldNumber = 9;
        private readonly static long ExcessCreditAdjustmentTaxAmountMicrosDefaultValue = 0L;

        private long excessCreditAdjustmentTaxAmountMicros_;
        /// <summary>
        /// Output only. Tax on excess credit adjustment, in micros.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public long ExcessCreditAdjustmentTaxAmountMicros {
          get { if ((_hasBits0 & 128) != 0) { return excessCreditAdjustmentTaxAmountMicros_; } else { return ExcessCreditAdjustmentTaxAmountMicrosDefaultValue; } }
          set {
            _hasBits0 |= 128;
            excessCreditAdjustmentTaxAmountMicros_ = value;
          }
        }
        /// <summary>Gets whether the "excess_credit_adjustment_tax_amount_micros" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public bool HasExcessCreditAdjustmentTaxAmountMicros {
          get { return (_hasBits0 & 128) != 0; }
        }
        /// <summary>Clears the value of the "excess_credit_adjustment_tax_amount_micros" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void ClearExcessCreditAdjustmentTaxAmountMicros() {
          _hasBits0 &= ~128;
        }

        /// <summary>Field number for the "excess_credit_adjustment_total_amount_micros" field.</summary>
        public const int ExcessCreditAdjustmentTotalAmountMicrosFieldNumber = 10;
        private readonly static long ExcessCreditAdjustmentTotalAmountMicrosDefaultValue = 0L;

        private long excessCreditAdjustmentTotalAmountMicros_;
        /// <summary>
        /// Output only. Total excess credit adjustment amount, in micros.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public long ExcessCreditAdjustmentTotalAmountMicros {
          get { if ((_hasBits0 & 256) != 0) { return excessCreditAdjustmentTotalAmountMicros_; } else { return ExcessCreditAdjustmentTotalAmountMicrosDefaultValue; } }
          set {
            _hasBits0 |= 256;
            excessCreditAdjustmentTotalAmountMicros_ = value;
          }
        }
        /// <summary>Gets whether the "excess_credit_adjustment_total_amount_micros" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public bool HasExcessCreditAdjustmentTotalAmountMicros {
          get { return (_hasBits0 & 256) != 0; }
        }
        /// <summary>Clears the value of the "excess_credit_adjustment_total_amount_micros" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void ClearExcessCreditAdjustmentTotalAmountMicros() {
          _hasBits0 &= ~256;
        }

        /// <summary>Field number for the "regulatory_costs_subtotal_amount_micros" field.</summary>
        public const int RegulatoryCostsSubtotalAmountMicrosFieldNumber = 11;
        private readonly static long RegulatoryCostsSubtotalAmountMicrosDefaultValue = 0L;

        private long regulatoryCostsSubtotalAmountMicros_;
        /// <summary>
        /// Output only. Pretax regulatory costs subtotal amount, in micros.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public long RegulatoryCostsSubtotalAmountMicros {
          get { if ((_hasBits0 & 512) != 0) { return regulatoryCostsSubtotalAmountMicros_; } else { return RegulatoryCostsSubtotalAmountMicrosDefaultValue; } }
          set {
            _hasBits0 |= 512;
            regulatoryCostsSubtotalAmountMicros_ = value;
          }
        }
        /// <summary>Gets whether the "regulatory_costs_subtotal_amount_micros" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public bool HasRegulatoryCostsSubtotalAmountMicros {
          get { return (_hasBits0 & 512) != 0; }
        }
        /// <summary>Clears the value of the "regulatory_costs_subtotal_amount_micros" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void ClearRegulatoryCostsSubtotalAmountMicros() {
          _hasBits0 &= ~512;
        }

        /// <summary>Field number for the "regulatory_costs_tax_amount_micros" field.</summary>
        public const int RegulatoryCostsTaxAmountMicrosFieldNumber = 12;
        private readonly static long RegulatoryCostsTaxAmountMicrosDefaultValue = 0L;

        private long regulatoryCostsTaxAmountMicros_;
        /// <summary>
        /// Output only. Tax on regulatory costs, in micros.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public long RegulatoryCostsTaxAmountMicros {
          get { if ((_hasBits0 & 1024) != 0) { return regulatoryCostsTaxAmountMicros_; } else { return RegulatoryCostsTaxAmountMicrosDefaultValue; } }
          set {
            _hasBits0 |= 1024;
            regulatoryCostsTaxAmountMicros_ = value;
          }
        }
        /// <summary>Gets whether the "regulatory_costs_tax_amount_micros" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public bool HasRegulatoryCostsTaxAmountMicros {
          get { return (_hasBits0 & 1024) != 0; }
        }
        /// <summary>Clears the value of the "regulatory_costs_tax_amount_micros" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void ClearRegulatoryCostsTaxAmountMicros() {
          _hasBits0 &= ~1024;
        }

        /// <summary>Field number for the "regulatory_costs_total_amount_micros" field.</summary>
        public const int RegulatoryCostsTotalAmountMicrosFieldNumber = 13;
        private readonly static long RegulatoryCostsTotalAmountMicrosDefaultValue = 0L;

        private long regulatoryCostsTotalAmountMicros_;
        /// <summary>
        /// Output only. Total regulatory costs amount, in micros.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public long RegulatoryCostsTotalAmountMicros {
          get { if ((_hasBits0 & 2048) != 0) { return regulatoryCostsTotalAmountMicros_; } else { return RegulatoryCostsTotalAmountMicrosDefaultValue; } }
          set {
            _hasBits0 |= 2048;
            regulatoryCostsTotalAmountMicros_ = value;
          }
        }
        /// <summary>Gets whether the "regulatory_costs_total_amount_micros" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public bool HasRegulatoryCostsTotalAmountMicros {
          get { return (_hasBits0 & 2048) != 0; }
        }
        /// <summary>Clears the value of the "regulatory_costs_total_amount_micros" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void ClearRegulatoryCostsTotalAmountMicros() {
          _hasBits0 &= ~2048;
        }

        /// <summary>Field number for the "export_charge_subtotal_amount_micros" field.</summary>
        public const int ExportChargeSubtotalAmountMicrosFieldNumber = 17;
        private readonly static long ExportChargeSubtotalAmountMicrosDefaultValue = 0L;

        private long exportChargeSubtotalAmountMicros_;
        /// <summary>
        /// Output only. Pretax export charge subtotal amount, in micros.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public long ExportChargeSubtotalAmountMicros {
          get { if ((_hasBits0 & 32768) != 0) { return exportChargeSubtotalAmountMicros_; } else { return ExportChargeSubtotalAmountMicrosDefaultValue; } }
          set {
            _hasBits0 |= 32768;
            exportChargeSubtotalAmountMicros_ = value;
          }
        }
        /// <summary>Gets whether the "export_charge_subtotal_amount_micros" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public bool HasExportChargeSubtotalAmountMicros {
          get { return (_hasBits0 & 32768) != 0; }
        }
        /// <summary>Clears the value of the "export_charge_subtotal_amount_micros" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void ClearExportChargeSubtotalAmountMicros() {
          _hasBits0 &= ~32768;
        }

        /// <summary>Field number for the "export_charge_tax_amount_micros" field.</summary>
        public const int ExportChargeTaxAmountMicrosFieldNumber = 18;
        private readonly static long ExportChargeTaxAmountMicrosDefaultValue = 0L;

        private long exportChargeTaxAmountMicros_;
        /// <summary>
        /// Output only. Tax on export charge, in micros.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public long ExportChargeTaxAmountMicros {
          get { if ((_hasBits0 & 65536) != 0) { return exportChargeTaxAmountMicros_; } else { return ExportChargeTaxAmountMicrosDefaultValue; } }
          set {
            _hasBits0 |= 65536;
            exportChargeTaxAmountMicros_ = value;
          }
        }
        /// <summary>Gets whether the "export_charge_tax_amount_micros" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public bool HasExportChargeTaxAmountMicros {
          get { return (_hasBits0 & 65536) != 0; }
        }
        /// <summary>Clears the value of the "export_charge_tax_amount_micros" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void ClearExportChargeTaxAmountMicros() {
          _hasBits0 &= ~65536;
        }

        /// <summary>Field number for the "export_charge_total_amount_micros" field.</summary>
        public const int ExportChargeTotalAmountMicrosFieldNumber = 19;
        private readonly static long ExportChargeTotalAmountMicrosDefaultValue = 0L;

        private long exportChargeTotalAmountMicros_;
        /// <summary>
        /// Output only. Total export charge amount, in micros.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public long ExportChargeTotalAmountMicros {
          get { if ((_hasBits0 & 131072) != 0) { return exportChargeTotalAmountMicros_; } else { return ExportChargeTotalAmountMicrosDefaultValue; } }
          set {
            _hasBits0 |= 131072;
            exportChargeTotalAmountMicros_ = value;
          }
        }
        /// <summary>Gets whether the "export_charge_total_amount_micros" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public bool HasExportChargeTotalAmountMicros {
          get { return (_hasBits0 & 131072) != 0; }
        }
        /// <summary>Clears the value of the "export_charge_total_amount_micros" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void ClearExportChargeTotalAmountMicros() {
          _hasBits0 &= ~131072;
        }

        /// <summary>Field number for the "subtotal_amount_micros" field.</summary>
        public const int SubtotalAmountMicrosFieldNumber = 14;
        private readonly static long SubtotalAmountMicrosDefaultValue = 0L;

        private long subtotalAmountMicros_;
        /// <summary>
        /// Output only. Total pretax subtotal amount attributable to the account
        /// during the service period, in micros.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public long SubtotalAmountMicros {
          get { if ((_hasBits0 & 4096) != 0) { return subtotalAmountMicros_; } else { return SubtotalAmountMicrosDefaultValue; } }
          set {
            _hasBits0 |= 4096;
            subtotalAmountMicros_ = value;
          }
        }
        /// <summary>Gets whether the "subtotal_amount_micros" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public bool HasSubtotalAmountMicros {
          get { return (_hasBits0 & 4096) != 0; }
        }
        /// <summary>Clears the value of the "subtotal_amount_micros" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void ClearSubtotalAmountMicros() {
          _hasBits0 &= ~4096;
        }

        /// <summary>Field number for the "tax_amount_micros" field.</summary>
        public const int TaxAmountMicrosFieldNumber = 15;
        private readonly static long TaxAmountMicrosDefaultValue = 0L;

        private long taxAmountMicros_;
        /// <summary>
        /// Output only. Total tax amount attributable to the account during the
        /// service period, in micros.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public long TaxAmountMicros {
          get { if ((_hasBits0 & 8192) != 0) { return taxAmountMicros_; } else { return TaxAmountMicrosDefaultValue; } }
          set {
            _hasBits0 |= 8192;
            taxAmountMicros_ = value;
          }
        }
        /// <summary>Gets whether the "tax_amount_micros" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public bool HasTaxAmountMicros {
          get { return (_hasBits0 & 8192) != 0; }
        }
        /// <summary>Clears the value of the "tax_amount_micros" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void ClearTaxAmountMicros() {
          _hasBits0 &= ~8192;
        }

        /// <summary>Field number for the "total_amount_micros" field.</summary>
        public const int TotalAmountMicrosFieldNumber = 16;
        private readonly static long TotalAmountMicrosDefaultValue = 0L;

        private long totalAmountMicros_;
        /// <summary>
        /// Output only. Total amount attributable to the account during the service
        /// period, in micros. This equals the sum of the subtotal_amount_micros and
        /// tax_amount_micros.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public long TotalAmountMicros {
          get { if ((_hasBits0 & 16384) != 0) { return totalAmountMicros_; } else { return TotalAmountMicrosDefaultValue; } }
          set {
            _hasBits0 |= 16384;
            totalAmountMicros_ = value;
          }
        }
        /// <summary>Gets whether the "total_amount_micros" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public bool HasTotalAmountMicros {
          get { return (_hasBits0 & 16384) != 0; }
        }
        /// <summary>Clears the value of the "total_amount_micros" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void ClearTotalAmountMicros() {
          _hasBits0 &= ~16384;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public override bool Equals(object other) {
          return Equals(other as AccountSummary);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public bool Equals(AccountSummary other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Customer != other.Customer) return false;
          if (BillingCorrectionSubtotalAmountMicros != other.BillingCorrectionSubtotalAmountMicros) return false;
          if (BillingCorrectionTaxAmountMicros != other.BillingCorrectionTaxAmountMicros) return false;
          if (BillingCorrectionTotalAmountMicros != other.BillingCorrectionTotalAmountMicros) return false;
          if (CouponAdjustmentSubtotalAmountMicros != other.CouponAdjustmentSubtotalAmountMicros) return false;
          if (CouponAdjustmentTaxAmountMicros != other.CouponAdjustmentTaxAmountMicros) return false;
          if (CouponAdjustmentTotalAmountMicros != other.CouponAdjustmentTotalAmountMicros) return false;
          if (ExcessCreditAdjustmentSubtotalAmountMicros != other.ExcessCreditAdjustmentSubtotalAmountMicros) return false;
          if (ExcessCreditAdjustmentTaxAmountMicros != other.ExcessCreditAdjustmentTaxAmountMicros) return false;
          if (ExcessCreditAdjustmentTotalAmountMicros != other.ExcessCreditAdjustmentTotalAmountMicros) return false;
          if (RegulatoryCostsSubtotalAmountMicros != other.RegulatoryCostsSubtotalAmountMicros) return false;
          if (RegulatoryCostsTaxAmountMicros != other.RegulatoryCostsTaxAmountMicros) return false;
          if (RegulatoryCostsTotalAmountMicros != other.RegulatoryCostsTotalAmountMicros) return false;
          if (ExportChargeSubtotalAmountMicros != other.ExportChargeSubtotalAmountMicros) return false;
          if (ExportChargeTaxAmountMicros != other.ExportChargeTaxAmountMicros) return false;
          if (ExportChargeTotalAmountMicros != other.ExportChargeTotalAmountMicros) return false;
          if (SubtotalAmountMicros != other.SubtotalAmountMicros) return false;
          if (TaxAmountMicros != other.TaxAmountMicros) return false;
          if (TotalAmountMicros != other.TotalAmountMicros) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public override int GetHashCode() {
          int hash = 1;
          if (HasCustomer) hash ^= Customer.GetHashCode();
          if (HasBillingCorrectionSubtotalAmountMicros) hash ^= BillingCorrectionSubtotalAmountMicros.GetHashCode();
          if (HasBillingCorrectionTaxAmountMicros) hash ^= BillingCorrectionTaxAmountMicros.GetHashCode();
          if (HasBillingCorrectionTotalAmountMicros) hash ^= BillingCorrectionTotalAmountMicros.GetHashCode();
          if (HasCouponAdjustmentSubtotalAmountMicros) hash ^= CouponAdjustmentSubtotalAmountMicros.GetHashCode();
          if (HasCouponAdjustmentTaxAmountMicros) hash ^= CouponAdjustmentTaxAmountMicros.GetHashCode();
          if (HasCouponAdjustmentTotalAmountMicros) hash ^= CouponAdjustmentTotalAmountMicros.GetHashCode();
          if (HasExcessCreditAdjustmentSubtotalAmountMicros) hash ^= ExcessCreditAdjustmentSubtotalAmountMicros.GetHashCode();
          if (HasExcessCreditAdjustmentTaxAmountMicros) hash ^= ExcessCreditAdjustmentTaxAmountMicros.GetHashCode();
          if (HasExcessCreditAdjustmentTotalAmountMicros) hash ^= ExcessCreditAdjustmentTotalAmountMicros.GetHashCode();
          if (HasRegulatoryCostsSubtotalAmountMicros) hash ^= RegulatoryCostsSubtotalAmountMicros.GetHashCode();
          if (HasRegulatoryCostsTaxAmountMicros) hash ^= RegulatoryCostsTaxAmountMicros.GetHashCode();
          if (HasRegulatoryCostsTotalAmountMicros) hash ^= RegulatoryCostsTotalAmountMicros.GetHashCode();
          if (HasExportChargeSubtotalAmountMicros) hash ^= ExportChargeSubtotalAmountMicros.GetHashCode();
          if (HasExportChargeTaxAmountMicros) hash ^= ExportChargeTaxAmountMicros.GetHashCode();
          if (HasExportChargeTotalAmountMicros) hash ^= ExportChargeTotalAmountMicros.GetHashCode();
          if (HasSubtotalAmountMicros) hash ^= SubtotalAmountMicros.GetHashCode();
          if (HasTaxAmountMicros) hash ^= TaxAmountMicros.GetHashCode();
          if (HasTotalAmountMicros) hash ^= TotalAmountMicros.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void WriteTo(pb::CodedOutputStream output) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          output.WriteRawMessage(this);
        #else
          if (HasCustomer) {
            output.WriteRawTag(10);
            output.WriteString(Customer);
          }
          if (HasBillingCorrectionSubtotalAmountMicros) {
            output.WriteRawTag(16);
            output.WriteInt64(BillingCorrectionSubtotalAmountMicros);
          }
          if (HasBillingCorrectionTaxAmountMicros) {
            output.WriteRawTag(24);
            output.WriteInt64(BillingCorrectionTaxAmountMicros);
          }
          if (HasBillingCorrectionTotalAmountMicros) {
            output.WriteRawTag(32);
            output.WriteInt64(BillingCorrectionTotalAmountMicros);
          }
          if (HasCouponAdjustmentSubtotalAmountMicros) {
            output.WriteRawTag(40);
            output.WriteInt64(CouponAdjustmentSubtotalAmountMicros);
          }
          if (HasCouponAdjustmentTaxAmountMicros) {
            output.WriteRawTag(48);
            output.WriteInt64(CouponAdjustmentTaxAmountMicros);
          }
          if (HasCouponAdjustmentTotalAmountMicros) {
            output.WriteRawTag(56);
            output.WriteInt64(CouponAdjustmentTotalAmountMicros);
          }
          if (HasExcessCreditAdjustmentSubtotalAmountMicros) {
            output.WriteRawTag(64);
            output.WriteInt64(ExcessCreditAdjustmentSubtotalAmountMicros);
          }
          if (HasExcessCreditAdjustmentTaxAmountMicros) {
            output.WriteRawTag(72);
            output.WriteInt64(ExcessCreditAdjustmentTaxAmountMicros);
          }
          if (HasExcessCreditAdjustmentTotalAmountMicros) {
            output.WriteRawTag(80);
            output.WriteInt64(ExcessCreditAdjustmentTotalAmountMicros);
          }
          if (HasRegulatoryCostsSubtotalAmountMicros) {
            output.WriteRawTag(88);
            output.WriteInt64(RegulatoryCostsSubtotalAmountMicros);
          }
          if (HasRegulatoryCostsTaxAmountMicros) {
            output.WriteRawTag(96);
            output.WriteInt64(RegulatoryCostsTaxAmountMicros);
          }
          if (HasRegulatoryCostsTotalAmountMicros) {
            output.WriteRawTag(104);
            output.WriteInt64(RegulatoryCostsTotalAmountMicros);
          }
          if (HasSubtotalAmountMicros) {
            output.WriteRawTag(112);
            output.WriteInt64(SubtotalAmountMicros);
          }
          if (HasTaxAmountMicros) {
            output.WriteRawTag(120);
            output.WriteInt64(TaxAmountMicros);
          }
          if (HasTotalAmountMicros) {
            output.WriteRawTag(128, 1);
            output.WriteInt64(TotalAmountMicros);
          }
          if (HasExportChargeSubtotalAmountMicros) {
            output.WriteRawTag(136, 1);
            output.WriteInt64(ExportChargeSubtotalAmountMicros);
          }
          if (HasExportChargeTaxAmountMicros) {
            output.WriteRawTag(144, 1);
            output.WriteInt64(ExportChargeTaxAmountMicros);
          }
          if (HasExportChargeTotalAmountMicros) {
            output.WriteRawTag(152, 1);
            output.WriteInt64(ExportChargeTotalAmountMicros);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
          if (HasCustomer) {
            output.WriteRawTag(10);
            output.WriteString(Customer);
          }
          if (HasBillingCorrectionSubtotalAmountMicros) {
            output.WriteRawTag(16);
            output.WriteInt64(BillingCorrectionSubtotalAmountMicros);
          }
          if (HasBillingCorrectionTaxAmountMicros) {
            output.WriteRawTag(24);
            output.WriteInt64(BillingCorrectionTaxAmountMicros);
          }
          if (HasBillingCorrectionTotalAmountMicros) {
            output.WriteRawTag(32);
            output.WriteInt64(BillingCorrectionTotalAmountMicros);
          }
          if (HasCouponAdjustmentSubtotalAmountMicros) {
            output.WriteRawTag(40);
            output.WriteInt64(CouponAdjustmentSubtotalAmountMicros);
          }
          if (HasCouponAdjustmentTaxAmountMicros) {
            output.WriteRawTag(48);
            output.WriteInt64(CouponAdjustmentTaxAmountMicros);
          }
          if (HasCouponAdjustmentTotalAmountMicros) {
            output.WriteRawTag(56);
            output.WriteInt64(CouponAdjustmentTotalAmountMicros);
          }
          if (HasExcessCreditAdjustmentSubtotalAmountMicros) {
            output.WriteRawTag(64);
            output.WriteInt64(ExcessCreditAdjustmentSubtotalAmountMicros);
          }
          if (HasExcessCreditAdjustmentTaxAmountMicros) {
            output.WriteRawTag(72);
            output.WriteInt64(ExcessCreditAdjustmentTaxAmountMicros);
          }
          if (HasExcessCreditAdjustmentTotalAmountMicros) {
            output.WriteRawTag(80);
            output.WriteInt64(ExcessCreditAdjustmentTotalAmountMicros);
          }
          if (HasRegulatoryCostsSubtotalAmountMicros) {
            output.WriteRawTag(88);
            output.WriteInt64(RegulatoryCostsSubtotalAmountMicros);
          }
          if (HasRegulatoryCostsTaxAmountMicros) {
            output.WriteRawTag(96);
            output.WriteInt64(RegulatoryCostsTaxAmountMicros);
          }
          if (HasRegulatoryCostsTotalAmountMicros) {
            output.WriteRawTag(104);
            output.WriteInt64(RegulatoryCostsTotalAmountMicros);
          }
          if (HasSubtotalAmountMicros) {
            output.WriteRawTag(112);
            output.WriteInt64(SubtotalAmountMicros);
          }
          if (HasTaxAmountMicros) {
            output.WriteRawTag(120);
            output.WriteInt64(TaxAmountMicros);
          }
          if (HasTotalAmountMicros) {
            output.WriteRawTag(128, 1);
            output.WriteInt64(TotalAmountMicros);
          }
          if (HasExportChargeSubtotalAmountMicros) {
            output.WriteRawTag(136, 1);
            output.WriteInt64(ExportChargeSubtotalAmountMicros);
          }
          if (HasExportChargeTaxAmountMicros) {
            output.WriteRawTag(144, 1);
            output.WriteInt64(ExportChargeTaxAmountMicros);
          }
          if (HasExportChargeTotalAmountMicros) {
            output.WriteRawTag(152, 1);
            output.WriteInt64(ExportChargeTotalAmountMicros);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(ref output);
          }
        }
        #endif

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public int CalculateSize() {
          int size = 0;
          if (HasCustomer) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(Customer);
          }
          if (HasBillingCorrectionSubtotalAmountMicros) {
            size += 1 + pb::CodedOutputStream.ComputeInt64Size(BillingCorrectionSubtotalAmountMicros);
          }
          if (HasBillingCorrectionTaxAmountMicros) {
            size += 1 + pb::CodedOutputStream.ComputeInt64Size(BillingCorrectionTaxAmountMicros);
          }
          if (HasBillingCorrectionTotalAmountMicros) {
            size += 1 + pb::CodedOutputStream.ComputeInt64Size(BillingCorrectionTotalAmountMicros);
          }
          if (HasCouponAdjustmentSubtotalAmountMicros) {
            size += 1 + pb::CodedOutputStream.ComputeInt64Size(CouponAdjustmentSubtotalAmountMicros);
          }
          if (HasCouponAdjustmentTaxAmountMicros) {
            size += 1 + pb::CodedOutputStream.ComputeInt64Size(CouponAdjustmentTaxAmountMicros);
          }
          if (HasCouponAdjustmentTotalAmountMicros) {
            size += 1 + pb::CodedOutputStream.ComputeInt64Size(CouponAdjustmentTotalAmountMicros);
          }
          if (HasExcessCreditAdjustmentSubtotalAmountMicros) {
            size += 1 + pb::CodedOutputStream.ComputeInt64Size(ExcessCreditAdjustmentSubtotalAmountMicros);
          }
          if (HasExcessCreditAdjustmentTaxAmountMicros) {
            size += 1 + pb::CodedOutputStream.ComputeInt64Size(ExcessCreditAdjustmentTaxAmountMicros);
          }
          if (HasExcessCreditAdjustmentTotalAmountMicros) {
            size += 1 + pb::CodedOutputStream.ComputeInt64Size(ExcessCreditAdjustmentTotalAmountMicros);
          }
          if (HasRegulatoryCostsSubtotalAmountMicros) {
            size += 1 + pb::CodedOutputStream.ComputeInt64Size(RegulatoryCostsSubtotalAmountMicros);
          }
          if (HasRegulatoryCostsTaxAmountMicros) {
            size += 1 + pb::CodedOutputStream.ComputeInt64Size(RegulatoryCostsTaxAmountMicros);
          }
          if (HasRegulatoryCostsTotalAmountMicros) {
            size += 1 + pb::CodedOutputStream.ComputeInt64Size(RegulatoryCostsTotalAmountMicros);
          }
          if (HasExportChargeSubtotalAmountMicros) {
            size += 2 + pb::CodedOutputStream.ComputeInt64Size(ExportChargeSubtotalAmountMicros);
          }
          if (HasExportChargeTaxAmountMicros) {
            size += 2 + pb::CodedOutputStream.ComputeInt64Size(ExportChargeTaxAmountMicros);
          }
          if (HasExportChargeTotalAmountMicros) {
            size += 2 + pb::CodedOutputStream.ComputeInt64Size(ExportChargeTotalAmountMicros);
          }
          if (HasSubtotalAmountMicros) {
            size += 1 + pb::CodedOutputStream.ComputeInt64Size(SubtotalAmountMicros);
          }
          if (HasTaxAmountMicros) {
            size += 1 + pb::CodedOutputStream.ComputeInt64Size(TaxAmountMicros);
          }
          if (HasTotalAmountMicros) {
            size += 2 + pb::CodedOutputStream.ComputeInt64Size(TotalAmountMicros);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void MergeFrom(AccountSummary other) {
          if (other == null) {
            return;
          }
          if (other.HasCustomer) {
            Customer = other.Customer;
          }
          if (other.HasBillingCorrectionSubtotalAmountMicros) {
            BillingCorrectionSubtotalAmountMicros = other.BillingCorrectionSubtotalAmountMicros;
          }
          if (other.HasBillingCorrectionTaxAmountMicros) {
            BillingCorrectionTaxAmountMicros = other.BillingCorrectionTaxAmountMicros;
          }
          if (other.HasBillingCorrectionTotalAmountMicros) {
            BillingCorrectionTotalAmountMicros = other.BillingCorrectionTotalAmountMicros;
          }
          if (other.HasCouponAdjustmentSubtotalAmountMicros) {
            CouponAdjustmentSubtotalAmountMicros = other.CouponAdjustmentSubtotalAmountMicros;
          }
          if (other.HasCouponAdjustmentTaxAmountMicros) {
            CouponAdjustmentTaxAmountMicros = other.CouponAdjustmentTaxAmountMicros;
          }
          if (other.HasCouponAdjustmentTotalAmountMicros) {
            CouponAdjustmentTotalAmountMicros = other.CouponAdjustmentTotalAmountMicros;
          }
          if (other.HasExcessCreditAdjustmentSubtotalAmountMicros) {
            ExcessCreditAdjustmentSubtotalAmountMicros = other.ExcessCreditAdjustmentSubtotalAmountMicros;
          }
          if (other.HasExcessCreditAdjustmentTaxAmountMicros) {
            ExcessCreditAdjustmentTaxAmountMicros = other.ExcessCreditAdjustmentTaxAmountMicros;
          }
          if (other.HasExcessCreditAdjustmentTotalAmountMicros) {
            ExcessCreditAdjustmentTotalAmountMicros = other.ExcessCreditAdjustmentTotalAmountMicros;
          }
          if (other.HasRegulatoryCostsSubtotalAmountMicros) {
            RegulatoryCostsSubtotalAmountMicros = other.RegulatoryCostsSubtotalAmountMicros;
          }
          if (other.HasRegulatoryCostsTaxAmountMicros) {
            RegulatoryCostsTaxAmountMicros = other.RegulatoryCostsTaxAmountMicros;
          }
          if (other.HasRegulatoryCostsTotalAmountMicros) {
            RegulatoryCostsTotalAmountMicros = other.RegulatoryCostsTotalAmountMicros;
          }
          if (other.HasExportChargeSubtotalAmountMicros) {
            ExportChargeSubtotalAmountMicros = other.ExportChargeSubtotalAmountMicros;
          }
          if (other.HasExportChargeTaxAmountMicros) {
            ExportChargeTaxAmountMicros = other.ExportChargeTaxAmountMicros;
          }
          if (other.HasExportChargeTotalAmountMicros) {
            ExportChargeTotalAmountMicros = other.ExportChargeTotalAmountMicros;
          }
          if (other.HasSubtotalAmountMicros) {
            SubtotalAmountMicros = other.SubtotalAmountMicros;
          }
          if (other.HasTaxAmountMicros) {
            TaxAmountMicros = other.TaxAmountMicros;
          }
          if (other.HasTotalAmountMicros) {
            TotalAmountMicros = other.TotalAmountMicros;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void MergeFrom(pb::CodedInputStream input) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          input.ReadRawMessage(this);
        #else
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                Customer = input.ReadString();
                break;
              }
              case 16: {
                BillingCorrectionSubtotalAmountMicros = input.ReadInt64();
                break;
              }
              case 24: {
                BillingCorrectionTaxAmountMicros = input.ReadInt64();
                break;
              }
              case 32: {
                BillingCorrectionTotalAmountMicros = input.ReadInt64();
                break;
              }
              case 40: {
                CouponAdjustmentSubtotalAmountMicros = input.ReadInt64();
                break;
              }
              case 48: {
                CouponAdjustmentTaxAmountMicros = input.ReadInt64();
                break;
              }
              case 56: {
                CouponAdjustmentTotalAmountMicros = input.ReadInt64();
                break;
              }
              case 64: {
                ExcessCreditAdjustmentSubtotalAmountMicros = input.ReadInt64();
                break;
              }
              case 72: {
                ExcessCreditAdjustmentTaxAmountMicros = input.ReadInt64();
                break;
              }
              case 80: {
                ExcessCreditAdjustmentTotalAmountMicros = input.ReadInt64();
                break;
              }
              case 88: {
                RegulatoryCostsSubtotalAmountMicros = input.ReadInt64();
                break;
              }
              case 96: {
                RegulatoryCostsTaxAmountMicros = input.ReadInt64();
                break;
              }
              case 104: {
                RegulatoryCostsTotalAmountMicros = input.ReadInt64();
                break;
              }
              case 112: {
                SubtotalAmountMicros = input.ReadInt64();
                break;
              }
              case 120: {
                TaxAmountMicros = input.ReadInt64();
                break;
              }
              case 128: {
                TotalAmountMicros = input.ReadInt64();
                break;
              }
              case 136: {
                ExportChargeSubtotalAmountMicros = input.ReadInt64();
                break;
              }
              case 144: {
                ExportChargeTaxAmountMicros = input.ReadInt64();
                break;
              }
              case 152: {
                ExportChargeTotalAmountMicros = input.ReadInt64();
                break;
              }
            }
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
                break;
              case 10: {
                Customer = input.ReadString();
                break;
              }
              case 16: {
                BillingCorrectionSubtotalAmountMicros = input.ReadInt64();
                break;
              }
              case 24: {
                BillingCorrectionTaxAmountMicros = input.ReadInt64();
                break;
              }
              case 32: {
                BillingCorrectionTotalAmountMicros = input.ReadInt64();
                break;
              }
              case 40: {
                CouponAdjustmentSubtotalAmountMicros = input.ReadInt64();
                break;
              }
              case 48: {
                CouponAdjustmentTaxAmountMicros = input.ReadInt64();
                break;
              }
              case 56: {
                CouponAdjustmentTotalAmountMicros = input.ReadInt64();
                break;
              }
              case 64: {
                ExcessCreditAdjustmentSubtotalAmountMicros = input.ReadInt64();
                break;
              }
              case 72: {
                ExcessCreditAdjustmentTaxAmountMicros = input.ReadInt64();
                break;
              }
              case 80: {
                ExcessCreditAdjustmentTotalAmountMicros = input.ReadInt64();
                break;
              }
              case 88: {
                RegulatoryCostsSubtotalAmountMicros = input.ReadInt64();
                break;
              }
              case 96: {
                RegulatoryCostsTaxAmountMicros = input.ReadInt64();
                break;
              }
              case 104: {
                RegulatoryCostsTotalAmountMicros = input.ReadInt64();
                break;
              }
              case 112: {
                SubtotalAmountMicros = input.ReadInt64();
                break;
              }
              case 120: {
                TaxAmountMicros = input.ReadInt64();
                break;
              }
              case 128: {
                TotalAmountMicros = input.ReadInt64();
                break;
              }
              case 136: {
                ExportChargeSubtotalAmountMicros = input.ReadInt64();
                break;
              }
              case 144: {
                ExportChargeTaxAmountMicros = input.ReadInt64();
                break;
              }
              case 152: {
                ExportChargeTotalAmountMicros = input.ReadInt64();
                break;
              }
            }
          }
        }
        #endif

      }

      /// <summary>
      /// Represents a summarized account budget billable cost.
      /// </summary>
      public sealed partial class AccountBudgetSummary : pb::IMessage<AccountBudgetSummary>
      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          , pb::IBufferMessage
      #endif
      {
        private static readonly pb::MessageParser<AccountBudgetSummary> _parser = new pb::MessageParser<AccountBudgetSummary>(() => new AccountBudgetSummary());
        private pb::UnknownFieldSet _unknownFields;
        private int _hasBits0;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public static pb::MessageParser<AccountBudgetSummary> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Google.Ads.GoogleAds.V15.Resources.Invoice.Descriptor.NestedTypes[1]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public AccountBudgetSummary() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public AccountBudgetSummary(AccountBudgetSummary other) : this() {
          _hasBits0 = other._hasBits0;
          customer_ = other.customer_;
          customerDescriptiveName_ = other.customerDescriptiveName_;
          accountBudget_ = other.accountBudget_;
          accountBudgetName_ = other.accountBudgetName_;
          purchaseOrderNumber_ = other.purchaseOrderNumber_;
          subtotalAmountMicros_ = other.subtotalAmountMicros_;
          taxAmountMicros_ = other.taxAmountMicros_;
          totalAmountMicros_ = other.totalAmountMicros_;
          billableActivityDateRange_ = other.billableActivityDateRange_ != null ? other.billableActivityDateRange_.Clone() : null;
          servedAmountMicros_ = other.servedAmountMicros_;
          billedAmountMicros_ = other.billedAmountMicros_;
          overdeliveryAmountMicros_ = other.overdeliveryAmountMicros_;
          invalidActivityAmountMicros_ = other.invalidActivityAmountMicros_;
          invalidActivitySummaries_ = other.invalidActivitySummaries_.Clone();
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public AccountBudgetSummary Clone() {
          return new AccountBudgetSummary(this);
        }

        /// <summary>Field number for the "customer" field.</summary>
        public const int CustomerFieldNumber = 10;
        private readonly static string CustomerDefaultValue = "";

        private string customer_;
        /// <summary>
        /// Output only. The resource name of the customer associated with this
        /// account budget. This contains the customer ID, which appears on the
        /// invoice PDF as "Account ID". Customer resource names have the form:
        ///
        /// `customers/{customer_id}`
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public string Customer {
          get { return customer_ ?? CustomerDefaultValue; }
          set {
            customer_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }
        /// <summary>Gets whether the "customer" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public bool HasCustomer {
          get { return customer_ != null; }
        }
        /// <summary>Clears the value of the "customer" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void ClearCustomer() {
          customer_ = null;
        }

        /// <summary>Field number for the "customer_descriptive_name" field.</summary>
        public const int CustomerDescriptiveNameFieldNumber = 11;
        private readonly static string CustomerDescriptiveNameDefaultValue = "";

        private string customerDescriptiveName_;
        /// <summary>
        /// Output only. The descriptive name of the account budget's customer. It
        /// appears on the invoice PDF as "Account".
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public string CustomerDescriptiveName {
          get { return customerDescriptiveName_ ?? CustomerDescriptiveNameDefaultValue; }
          set {
            customerDescriptiveName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }
        /// <summary>Gets whether the "customer_descriptive_name" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public bool HasCustomerDescriptiveName {
          get { return customerDescriptiveName_ != null; }
        }
        /// <summary>Clears the value of the "customer_descriptive_name" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void ClearCustomerDescriptiveName() {
          customerDescriptiveName_ = null;
        }

        /// <summary>Field number for the "account_budget" field.</summary>
        public const int AccountBudgetFieldNumber = 12;
        private readonly static string AccountBudgetDefaultValue = "";

        private string accountBudget_;
        /// <summary>
        /// Output only. The resource name of the account budget associated with this
        /// summarized billable cost. AccountBudget resource names have the form:
        ///
        /// `customers/{customer_id}/accountBudgets/{account_budget_id}`
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public string AccountBudget {
          get { return accountBudget_ ?? AccountBudgetDefaultValue; }
          set {
            accountBudget_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }
        /// <summary>Gets whether the "account_budget" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public bool HasAccountBudget {
          get { return accountBudget_ != null; }
        }
        /// <summary>Clears the value of the "account_budget" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void ClearAccountBudget() {
          accountBudget_ = null;
        }

        /// <summary>Field number for the "account_budget_name" field.</summary>
        public const int AccountBudgetNameFieldNumber = 13;
        private readonly static string AccountBudgetNameDefaultValue = "";

        private string accountBudgetName_;
        /// <summary>
        /// Output only. The name of the account budget. It appears on the invoice
        /// PDF as "Account budget".
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public string AccountBudgetName {
          get { return accountBudgetName_ ?? AccountBudgetNameDefaultValue; }
          set {
            accountBudgetName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }
        /// <summary>Gets whether the "account_budget_name" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public bool HasAccountBudgetName {
          get { return accountBudgetName_ != null; }
        }
        /// <summary>Clears the value of the "account_budget_name" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void ClearAccountBudgetName() {
          accountBudgetName_ = null;
        }

        /// <summary>Field number for the "purchase_order_number" field.</summary>
        public const int PurchaseOrderNumberFieldNumber = 14;
        private readonly static string PurchaseOrderNumberDefaultValue = "";

        private string purchaseOrderNumber_;
        /// <summary>
        /// Output only. The purchase order number of the account budget. It appears
        /// on the invoice PDF as "Purchase order".
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public string PurchaseOrderNumber {
          get { return purchaseOrderNumber_ ?? PurchaseOrderNumberDefaultValue; }
          set {
            purchaseOrderNumber_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }
        /// <summary>Gets whether the "purchase_order_number" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public bool HasPurchaseOrderNumber {
          get { return purchaseOrderNumber_ != null; }
        }
        /// <summary>Clears the value of the "purchase_order_number" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void ClearPurchaseOrderNumber() {
          purchaseOrderNumber_ = null;
        }

        /// <summary>Field number for the "subtotal_amount_micros" field.</summary>
        public const int SubtotalAmountMicrosFieldNumber = 15;
        private readonly static long SubtotalAmountMicrosDefaultValue = 0L;

        private long subtotalAmountMicros_;
        /// <summary>
        /// Output only. The pretax subtotal amount attributable to this budget
        /// during the service period, in micros.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public long SubtotalAmountMicros {
          get { if ((_hasBits0 & 1) != 0) { return subtotalAmountMicros_; } else { return SubtotalAmountMicrosDefaultValue; } }
          set {
            _hasBits0 |= 1;
            subtotalAmountMicros_ = value;
          }
        }
        /// <summary>Gets whether the "subtotal_amount_micros" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public bool HasSubtotalAmountMicros {
          get { return (_hasBits0 & 1) != 0; }
        }
        /// <summary>Clears the value of the "subtotal_amount_micros" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void ClearSubtotalAmountMicros() {
          _hasBits0 &= ~1;
        }

        /// <summary>Field number for the "tax_amount_micros" field.</summary>
        public const int TaxAmountMicrosFieldNumber = 16;
        private readonly static long TaxAmountMicrosDefaultValue = 0L;

        private long taxAmountMicros_;
        /// <summary>
        /// Output only. The tax amount attributable to this budget during the
        /// service period, in micros.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public long TaxAmountMicros {
          get { if ((_hasBits0 & 2) != 0) { return taxAmountMicros_; } else { return TaxAmountMicrosDefaultValue; } }
          set {
            _hasBits0 |= 2;
            taxAmountMicros_ = value;
          }
        }
        /// <summary>Gets whether the "tax_amount_micros" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public bool HasTaxAmountMicros {
          get { return (_hasBits0 & 2) != 0; }
        }
        /// <summary>Clears the value of the "tax_amount_micros" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void ClearTaxAmountMicros() {
          _hasBits0 &= ~2;
        }

        /// <summary>Field number for the "total_amount_micros" field.</summary>
        public const int TotalAmountMicrosFieldNumber = 17;
        private readonly static long TotalAmountMicrosDefaultValue = 0L;

        private long totalAmountMicros_;
        /// <summary>
        /// Output only. The total amount attributable to this budget during the
        /// service period, in micros. This equals the sum of the account budget
        /// subtotal amount and the account budget tax amount.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public long TotalAmountMicros {
          get { if ((_hasBits0 & 4) != 0) { return totalAmountMicros_; } else { return TotalAmountMicrosDefaultValue; } }
          set {
            _hasBits0 |= 4;
            totalAmountMicros_ = value;
          }
        }
        /// <summary>Gets whether the "total_amount_micros" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public bool HasTotalAmountMicros {
          get { return (_hasBits0 & 4) != 0; }
        }
        /// <summary>Clears the value of the "total_amount_micros" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void ClearTotalAmountMicros() {
          _hasBits0 &= ~4;
        }

        /// <summary>Field number for the "billable_activity_date_range" field.</summary>
        public const int BillableActivityDateRangeFieldNumber = 9;
        private global::Google.Ads.GoogleAds.V15.Common.DateRange billableActivityDateRange_;
        /// <summary>
        /// Output only. The billable activity date range of the account budget,
        /// within the service date range of this invoice. The end date is inclusive.
        /// This can be different from the account budget's start and end time.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public global::Google.Ads.GoogleAds.V15.Common.DateRange BillableActivityDateRange {
          get { return billableActivityDateRange_; }
          set {
            billableActivityDateRange_ = value;
          }
        }

        /// <summary>Field number for the "served_amount_micros" field.</summary>
        public const int ServedAmountMicrosFieldNumber = 18;
        private readonly static long ServedAmountMicrosDefaultValue = 0L;

        private long servedAmountMicros_;
        /// <summary>
        /// Output only. The pretax served amount attributable to this budget during
        /// the service period, in micros. This is only useful to reconcile invoice
        /// and delivery data.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public long ServedAmountMicros {
          get { if ((_hasBits0 & 8) != 0) { return servedAmountMicros_; } else { return ServedAmountMicrosDefaultValue; } }
          set {
            _hasBits0 |= 8;
            servedAmountMicros_ = value;
          }
        }
        /// <summary>Gets whether the "served_amount_micros" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public bool HasServedAmountMicros {
          get { return (_hasBits0 & 8) != 0; }
        }
        /// <summary>Clears the value of the "served_amount_micros" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void ClearServedAmountMicros() {
          _hasBits0 &= ~8;
        }

        /// <summary>Field number for the "billed_amount_micros" field.</summary>
        public const int BilledAmountMicrosFieldNumber = 19;
        private readonly static long BilledAmountMicrosDefaultValue = 0L;

        private long billedAmountMicros_;
        /// <summary>
        /// Output only. The pretax billed amount attributable to this budget during
        /// the service period, in micros. This does not account for any adjustments.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public long BilledAmountMicros {
          get { if ((_hasBits0 & 16) != 0) { return billedAmountMicros_; } else { return BilledAmountMicrosDefaultValue; } }
          set {
            _hasBits0 |= 16;
            billedAmountMicros_ = value;
          }
        }
        /// <summary>Gets whether the "billed_amount_micros" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public bool HasBilledAmountMicros {
          get { return (_hasBits0 & 16) != 0; }
        }
        /// <summary>Clears the value of the "billed_amount_micros" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void ClearBilledAmountMicros() {
          _hasBits0 &= ~16;
        }

        /// <summary>Field number for the "overdelivery_amount_micros" field.</summary>
        public const int OverdeliveryAmountMicrosFieldNumber = 20;
        private readonly static long OverdeliveryAmountMicrosDefaultValue = 0L;

        private long overdeliveryAmountMicros_;
        /// <summary>
        /// Output only. The pretax overdelivery amount attributable to this budget
        /// during the service period, in micros (negative value).
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public long OverdeliveryAmountMicros {
          get { if ((_hasBits0 & 32) != 0) { return overdeliveryAmountMicros_; } else { return OverdeliveryAmountMicrosDefaultValue; } }
          set {
            _hasBits0 |= 32;
            overdeliveryAmountMicros_ = value;
          }
        }
        /// <summary>Gets whether the "overdelivery_amount_micros" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public bool HasOverdeliveryAmountMicros {
          get { return (_hasBits0 & 32) != 0; }
        }
        /// <summary>Clears the value of the "overdelivery_amount_micros" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void ClearOverdeliveryAmountMicros() {
          _hasBits0 &= ~32;
        }

        /// <summary>Field number for the "invalid_activity_amount_micros" field.</summary>
        public const int InvalidActivityAmountMicrosFieldNumber = 21;
        private readonly static long InvalidActivityAmountMicrosDefaultValue = 0L;

        private long invalidActivityAmountMicros_;
        /// <summary>
        /// Output only. The pretax invalid activity amount attributable to this
        /// budget in previous months, in micros (negative value).
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public long InvalidActivityAmountMicros {
          get { if ((_hasBits0 & 64) != 0) { return invalidActivityAmountMicros_; } else { return InvalidActivityAmountMicrosDefaultValue; } }
          set {
            _hasBits0 |= 64;
            invalidActivityAmountMicros_ = value;
          }
        }
        /// <summary>Gets whether the "invalid_activity_amount_micros" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public bool HasInvalidActivityAmountMicros {
          get { return (_hasBits0 & 64) != 0; }
        }
        /// <summary>Clears the value of the "invalid_activity_amount_micros" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void ClearInvalidActivityAmountMicros() {
          _hasBits0 &= ~64;
        }

        /// <summary>Field number for the "invalid_activity_summaries" field.</summary>
        public const int InvalidActivitySummariesFieldNumber = 22;
        private static readonly pb::FieldCodec<global::Google.Ads.GoogleAds.V15.Resources.Invoice.Types.InvalidActivitySummary> _repeated_invalidActivitySummaries_codec
            = pb::FieldCodec.ForMessage(178, global::Google.Ads.GoogleAds.V15.Resources.Invoice.Types.InvalidActivitySummary.Parser);
        private readonly pbc::RepeatedField<global::Google.Ads.GoogleAds.V15.Resources.Invoice.Types.InvalidActivitySummary> invalidActivitySummaries_ = new pbc::RepeatedField<global::Google.Ads.GoogleAds.V15.Resources.Invoice.Types.InvalidActivitySummary>();
        /// <summary>
        /// Output only. The list of summarized invalid activity credits with
        /// original linkages.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public pbc::RepeatedField<global::Google.Ads.GoogleAds.V15.Resources.Invoice.Types.InvalidActivitySummary> InvalidActivitySummaries {
          get { return invalidActivitySummaries_; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public override bool Equals(object other) {
          return Equals(other as AccountBudgetSummary);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public bool Equals(AccountBudgetSummary other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Customer != other.Customer) return false;
          if (CustomerDescriptiveName != other.CustomerDescriptiveName) return false;
          if (AccountBudget != other.AccountBudget) return false;
          if (AccountBudgetName != other.AccountBudgetName) return false;
          if (PurchaseOrderNumber != other.PurchaseOrderNumber) return false;
          if (SubtotalAmountMicros != other.SubtotalAmountMicros) return false;
          if (TaxAmountMicros != other.TaxAmountMicros) return false;
          if (TotalAmountMicros != other.TotalAmountMicros) return false;
          if (!object.Equals(BillableActivityDateRange, other.BillableActivityDateRange)) return false;
          if (ServedAmountMicros != other.ServedAmountMicros) return false;
          if (BilledAmountMicros != other.BilledAmountMicros) return false;
          if (OverdeliveryAmountMicros != other.OverdeliveryAmountMicros) return false;
          if (InvalidActivityAmountMicros != other.InvalidActivityAmountMicros) return false;
          if(!invalidActivitySummaries_.Equals(other.invalidActivitySummaries_)) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public override int GetHashCode() {
          int hash = 1;
          if (HasCustomer) hash ^= Customer.GetHashCode();
          if (HasCustomerDescriptiveName) hash ^= CustomerDescriptiveName.GetHashCode();
          if (HasAccountBudget) hash ^= AccountBudget.GetHashCode();
          if (HasAccountBudgetName) hash ^= AccountBudgetName.GetHashCode();
          if (HasPurchaseOrderNumber) hash ^= PurchaseOrderNumber.GetHashCode();
          if (HasSubtotalAmountMicros) hash ^= SubtotalAmountMicros.GetHashCode();
          if (HasTaxAmountMicros) hash ^= TaxAmountMicros.GetHashCode();
          if (HasTotalAmountMicros) hash ^= TotalAmountMicros.GetHashCode();
          if (billableActivityDateRange_ != null) hash ^= BillableActivityDateRange.GetHashCode();
          if (HasServedAmountMicros) hash ^= ServedAmountMicros.GetHashCode();
          if (HasBilledAmountMicros) hash ^= BilledAmountMicros.GetHashCode();
          if (HasOverdeliveryAmountMicros) hash ^= OverdeliveryAmountMicros.GetHashCode();
          if (HasInvalidActivityAmountMicros) hash ^= InvalidActivityAmountMicros.GetHashCode();
          hash ^= invalidActivitySummaries_.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void WriteTo(pb::CodedOutputStream output) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          output.WriteRawMessage(this);
        #else
          if (billableActivityDateRange_ != null) {
            output.WriteRawTag(74);
            output.WriteMessage(BillableActivityDateRange);
          }
          if (HasCustomer) {
            output.WriteRawTag(82);
            output.WriteString(Customer);
          }
          if (HasCustomerDescriptiveName) {
            output.WriteRawTag(90);
            output.WriteString(CustomerDescriptiveName);
          }
          if (HasAccountBudget) {
            output.WriteRawTag(98);
            output.WriteString(AccountBudget);
          }
          if (HasAccountBudgetName) {
            output.WriteRawTag(106);
            output.WriteString(AccountBudgetName);
          }
          if (HasPurchaseOrderNumber) {
            output.WriteRawTag(114);
            output.WriteString(PurchaseOrderNumber);
          }
          if (HasSubtotalAmountMicros) {
            output.WriteRawTag(120);
            output.WriteInt64(SubtotalAmountMicros);
          }
          if (HasTaxAmountMicros) {
            output.WriteRawTag(128, 1);
            output.WriteInt64(TaxAmountMicros);
          }
          if (HasTotalAmountMicros) {
            output.WriteRawTag(136, 1);
            output.WriteInt64(TotalAmountMicros);
          }
          if (HasServedAmountMicros) {
            output.WriteRawTag(144, 1);
            output.WriteInt64(ServedAmountMicros);
          }
          if (HasBilledAmountMicros) {
            output.WriteRawTag(152, 1);
            output.WriteInt64(BilledAmountMicros);
          }
          if (HasOverdeliveryAmountMicros) {
            output.WriteRawTag(160, 1);
            output.WriteInt64(OverdeliveryAmountMicros);
          }
          if (HasInvalidActivityAmountMicros) {
            output.WriteRawTag(168, 1);
            output.WriteInt64(InvalidActivityAmountMicros);
          }
          invalidActivitySummaries_.WriteTo(output, _repeated_invalidActivitySummaries_codec);
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
          if (billableActivityDateRange_ != null) {
            output.WriteRawTag(74);
            output.WriteMessage(BillableActivityDateRange);
          }
          if (HasCustomer) {
            output.WriteRawTag(82);
            output.WriteString(Customer);
          }
          if (HasCustomerDescriptiveName) {
            output.WriteRawTag(90);
            output.WriteString(CustomerDescriptiveName);
          }
          if (HasAccountBudget) {
            output.WriteRawTag(98);
            output.WriteString(AccountBudget);
          }
          if (HasAccountBudgetName) {
            output.WriteRawTag(106);
            output.WriteString(AccountBudgetName);
          }
          if (HasPurchaseOrderNumber) {
            output.WriteRawTag(114);
            output.WriteString(PurchaseOrderNumber);
          }
          if (HasSubtotalAmountMicros) {
            output.WriteRawTag(120);
            output.WriteInt64(SubtotalAmountMicros);
          }
          if (HasTaxAmountMicros) {
            output.WriteRawTag(128, 1);
            output.WriteInt64(TaxAmountMicros);
          }
          if (HasTotalAmountMicros) {
            output.WriteRawTag(136, 1);
            output.WriteInt64(TotalAmountMicros);
          }
          if (HasServedAmountMicros) {
            output.WriteRawTag(144, 1);
            output.WriteInt64(ServedAmountMicros);
          }
          if (HasBilledAmountMicros) {
            output.WriteRawTag(152, 1);
            output.WriteInt64(BilledAmountMicros);
          }
          if (HasOverdeliveryAmountMicros) {
            output.WriteRawTag(160, 1);
            output.WriteInt64(OverdeliveryAmountMicros);
          }
          if (HasInvalidActivityAmountMicros) {
            output.WriteRawTag(168, 1);
            output.WriteInt64(InvalidActivityAmountMicros);
          }
          invalidActivitySummaries_.WriteTo(ref output, _repeated_invalidActivitySummaries_codec);
          if (_unknownFields != null) {
            _unknownFields.WriteTo(ref output);
          }
        }
        #endif

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public int CalculateSize() {
          int size = 0;
          if (HasCustomer) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(Customer);
          }
          if (HasCustomerDescriptiveName) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(CustomerDescriptiveName);
          }
          if (HasAccountBudget) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(AccountBudget);
          }
          if (HasAccountBudgetName) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(AccountBudgetName);
          }
          if (HasPurchaseOrderNumber) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(PurchaseOrderNumber);
          }
          if (HasSubtotalAmountMicros) {
            size += 1 + pb::CodedOutputStream.ComputeInt64Size(SubtotalAmountMicros);
          }
          if (HasTaxAmountMicros) {
            size += 2 + pb::CodedOutputStream.ComputeInt64Size(TaxAmountMicros);
          }
          if (HasTotalAmountMicros) {
            size += 2 + pb::CodedOutputStream.ComputeInt64Size(TotalAmountMicros);
          }
          if (billableActivityDateRange_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(BillableActivityDateRange);
          }
          if (HasServedAmountMicros) {
            size += 2 + pb::CodedOutputStream.ComputeInt64Size(ServedAmountMicros);
          }
          if (HasBilledAmountMicros) {
            size += 2 + pb::CodedOutputStream.ComputeInt64Size(BilledAmountMicros);
          }
          if (HasOverdeliveryAmountMicros) {
            size += 2 + pb::CodedOutputStream.ComputeInt64Size(OverdeliveryAmountMicros);
          }
          if (HasInvalidActivityAmountMicros) {
            size += 2 + pb::CodedOutputStream.ComputeInt64Size(InvalidActivityAmountMicros);
          }
          size += invalidActivitySummaries_.CalculateSize(_repeated_invalidActivitySummaries_codec);
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void MergeFrom(AccountBudgetSummary other) {
          if (other == null) {
            return;
          }
          if (other.HasCustomer) {
            Customer = other.Customer;
          }
          if (other.HasCustomerDescriptiveName) {
            CustomerDescriptiveName = other.CustomerDescriptiveName;
          }
          if (other.HasAccountBudget) {
            AccountBudget = other.AccountBudget;
          }
          if (other.HasAccountBudgetName) {
            AccountBudgetName = other.AccountBudgetName;
          }
          if (other.HasPurchaseOrderNumber) {
            PurchaseOrderNumber = other.PurchaseOrderNumber;
          }
          if (other.HasSubtotalAmountMicros) {
            SubtotalAmountMicros = other.SubtotalAmountMicros;
          }
          if (other.HasTaxAmountMicros) {
            TaxAmountMicros = other.TaxAmountMicros;
          }
          if (other.HasTotalAmountMicros) {
            TotalAmountMicros = other.TotalAmountMicros;
          }
          if (other.billableActivityDateRange_ != null) {
            if (billableActivityDateRange_ == null) {
              BillableActivityDateRange = new global::Google.Ads.GoogleAds.V15.Common.DateRange();
            }
            BillableActivityDateRange.MergeFrom(other.BillableActivityDateRange);
          }
          if (other.HasServedAmountMicros) {
            ServedAmountMicros = other.ServedAmountMicros;
          }
          if (other.HasBilledAmountMicros) {
            BilledAmountMicros = other.BilledAmountMicros;
          }
          if (other.HasOverdeliveryAmountMicros) {
            OverdeliveryAmountMicros = other.OverdeliveryAmountMicros;
          }
          if (other.HasInvalidActivityAmountMicros) {
            InvalidActivityAmountMicros = other.InvalidActivityAmountMicros;
          }
          invalidActivitySummaries_.Add(other.invalidActivitySummaries_);
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void MergeFrom(pb::CodedInputStream input) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          input.ReadRawMessage(this);
        #else
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 74: {
                if (billableActivityDateRange_ == null) {
                  BillableActivityDateRange = new global::Google.Ads.GoogleAds.V15.Common.DateRange();
                }
                input.ReadMessage(BillableActivityDateRange);
                break;
              }
              case 82: {
                Customer = input.ReadString();
                break;
              }
              case 90: {
                CustomerDescriptiveName = input.ReadString();
                break;
              }
              case 98: {
                AccountBudget = input.ReadString();
                break;
              }
              case 106: {
                AccountBudgetName = input.ReadString();
                break;
              }
              case 114: {
                PurchaseOrderNumber = input.ReadString();
                break;
              }
              case 120: {
                SubtotalAmountMicros = input.ReadInt64();
                break;
              }
              case 128: {
                TaxAmountMicros = input.ReadInt64();
                break;
              }
              case 136: {
                TotalAmountMicros = input.ReadInt64();
                break;
              }
              case 144: {
                ServedAmountMicros = input.ReadInt64();
                break;
              }
              case 152: {
                BilledAmountMicros = input.ReadInt64();
                break;
              }
              case 160: {
                OverdeliveryAmountMicros = input.ReadInt64();
                break;
              }
              case 168: {
                InvalidActivityAmountMicros = input.ReadInt64();
                break;
              }
              case 178: {
                invalidActivitySummaries_.AddEntriesFrom(input, _repeated_invalidActivitySummaries_codec);
                break;
              }
            }
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
                break;
              case 74: {
                if (billableActivityDateRange_ == null) {
                  BillableActivityDateRange = new global::Google.Ads.GoogleAds.V15.Common.DateRange();
                }
                input.ReadMessage(BillableActivityDateRange);
                break;
              }
              case 82: {
                Customer = input.ReadString();
                break;
              }
              case 90: {
                CustomerDescriptiveName = input.ReadString();
                break;
              }
              case 98: {
                AccountBudget = input.ReadString();
                break;
              }
              case 106: {
                AccountBudgetName = input.ReadString();
                break;
              }
              case 114: {
                PurchaseOrderNumber = input.ReadString();
                break;
              }
              case 120: {
                SubtotalAmountMicros = input.ReadInt64();
                break;
              }
              case 128: {
                TaxAmountMicros = input.ReadInt64();
                break;
              }
              case 136: {
                TotalAmountMicros = input.ReadInt64();
                break;
              }
              case 144: {
                ServedAmountMicros = input.ReadInt64();
                break;
              }
              case 152: {
                BilledAmountMicros = input.ReadInt64();
                break;
              }
              case 160: {
                OverdeliveryAmountMicros = input.ReadInt64();
                break;
              }
              case 168: {
                InvalidActivityAmountMicros = input.ReadInt64();
                break;
              }
              case 178: {
                invalidActivitySummaries_.AddEntriesFrom(ref input, _repeated_invalidActivitySummaries_codec);
                break;
              }
            }
          }
        }
        #endif

      }

      /// <summary>
      /// Details about the invalid activity for the invoice that contain
      /// additional details about invoice against which corrections are made.
      /// </summary>
      public sealed partial class InvalidActivitySummary : pb::IMessage<InvalidActivitySummary>
      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          , pb::IBufferMessage
      #endif
      {
        private static readonly pb::MessageParser<InvalidActivitySummary> _parser = new pb::MessageParser<InvalidActivitySummary>(() => new InvalidActivitySummary());
        private pb::UnknownFieldSet _unknownFields;
        private int _hasBits0;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public static pb::MessageParser<InvalidActivitySummary> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Google.Ads.GoogleAds.V15.Resources.Invoice.Descriptor.NestedTypes[2]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public InvalidActivitySummary() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public InvalidActivitySummary(InvalidActivitySummary other) : this() {
          _hasBits0 = other._hasBits0;
          originalMonthOfService_ = other.originalMonthOfService_;
          originalYearOfService_ = other.originalYearOfService_;
          originalInvoiceId_ = other.originalInvoiceId_;
          originalAccountBudgetName_ = other.originalAccountBudgetName_;
          originalPurchaseOrderNumber_ = other.originalPurchaseOrderNumber_;
          amountMicros_ = other.amountMicros_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public InvalidActivitySummary Clone() {
          return new InvalidActivitySummary(this);
        }

        /// <summary>Field number for the "original_month_of_service" field.</summary>
        public const int OriginalMonthOfServiceFieldNumber = 1;
        private readonly static global::Google.Ads.GoogleAds.V15.Enums.MonthOfYearEnum.Types.MonthOfYear OriginalMonthOfServiceDefaultValue = global::Google.Ads.GoogleAds.V15.Enums.MonthOfYearEnum.Types.MonthOfYear.Unspecified;

        private global::Google.Ads.GoogleAds.V15.Enums.MonthOfYearEnum.Types.MonthOfYear originalMonthOfService_;
        /// <summary>
        /// Output only. Original month of service related to this invalid activity
        /// credit.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public global::Google.Ads.GoogleAds.V15.Enums.MonthOfYearEnum.Types.MonthOfYear OriginalMonthOfService {
          get { if ((_hasBits0 & 1) != 0) { return originalMonthOfService_; } else { return OriginalMonthOfServiceDefaultValue; } }
          set {
            _hasBits0 |= 1;
            originalMonthOfService_ = value;
          }
        }
        /// <summary>Gets whether the "original_month_of_service" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public bool HasOriginalMonthOfService {
          get { return (_hasBits0 & 1) != 0; }
        }
        /// <summary>Clears the value of the "original_month_of_service" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void ClearOriginalMonthOfService() {
          _hasBits0 &= ~1;
        }

        /// <summary>Field number for the "original_year_of_service" field.</summary>
        public const int OriginalYearOfServiceFieldNumber = 2;
        private readonly static string OriginalYearOfServiceDefaultValue = "";

        private string originalYearOfService_;
        /// <summary>
        /// Output only. Original year of service related to this invalid activity
        /// credit.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public string OriginalYearOfService {
          get { return originalYearOfService_ ?? OriginalYearOfServiceDefaultValue; }
          set {
            originalYearOfService_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }
        /// <summary>Gets whether the "original_year_of_service" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public bool HasOriginalYearOfService {
          get { return originalYearOfService_ != null; }
        }
        /// <summary>Clears the value of the "original_year_of_service" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void ClearOriginalYearOfService() {
          originalYearOfService_ = null;
        }

        /// <summary>Field number for the "original_invoice_id" field.</summary>
        public const int OriginalInvoiceIdFieldNumber = 3;
        private readonly static string OriginalInvoiceIdDefaultValue = "";

        private string originalInvoiceId_;
        /// <summary>
        /// Output only. Original invoice number related to this invalid activity
        /// credit.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public string OriginalInvoiceId {
          get { return originalInvoiceId_ ?? OriginalInvoiceIdDefaultValue; }
          set {
            originalInvoiceId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }
        /// <summary>Gets whether the "original_invoice_id" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public bool HasOriginalInvoiceId {
          get { return originalInvoiceId_ != null; }
        }
        /// <summary>Clears the value of the "original_invoice_id" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void ClearOriginalInvoiceId() {
          originalInvoiceId_ = null;
        }

        /// <summary>Field number for the "original_account_budget_name" field.</summary>
        public const int OriginalAccountBudgetNameFieldNumber = 4;
        private readonly static string OriginalAccountBudgetNameDefaultValue = "";

        private string originalAccountBudgetName_;
        /// <summary>
        /// Output only. Original account budget name related to this invalid
        /// activity credit.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public string OriginalAccountBudgetName {
          get { return originalAccountBudgetName_ ?? OriginalAccountBudgetNameDefaultValue; }
          set {
            originalAccountBudgetName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }
        /// <summary>Gets whether the "original_account_budget_name" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public bool HasOriginalAccountBudgetName {
          get { return originalAccountBudgetName_ != null; }
        }
        /// <summary>Clears the value of the "original_account_budget_name" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void ClearOriginalAccountBudgetName() {
          originalAccountBudgetName_ = null;
        }

        /// <summary>Field number for the "original_purchase_order_number" field.</summary>
        public const int OriginalPurchaseOrderNumberFieldNumber = 5;
        private readonly static string OriginalPurchaseOrderNumberDefaultValue = "";

        private string originalPurchaseOrderNumber_;
        /// <summary>
        /// Output only. Original purchase order number related to this invalid
        /// activity credit.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public string OriginalPurchaseOrderNumber {
          get { return originalPurchaseOrderNumber_ ?? OriginalPurchaseOrderNumberDefaultValue; }
          set {
            originalPurchaseOrderNumber_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }
        /// <summary>Gets whether the "original_purchase_order_number" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public bool HasOriginalPurchaseOrderNumber {
          get { return originalPurchaseOrderNumber_ != null; }
        }
        /// <summary>Clears the value of the "original_purchase_order_number" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void ClearOriginalPurchaseOrderNumber() {
          originalPurchaseOrderNumber_ = null;
        }

        /// <summary>Field number for the "amount_micros" field.</summary>
        public const int AmountMicrosFieldNumber = 6;
        private readonly static long AmountMicrosDefaultValue = 0L;

        private long amountMicros_;
        /// <summary>
        /// Output only. Invalid activity amount in micros.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public long AmountMicros {
          get { if ((_hasBits0 & 2) != 0) { return amountMicros_; } else { return AmountMicrosDefaultValue; } }
          set {
            _hasBits0 |= 2;
            amountMicros_ = value;
          }
        }
        /// <summary>Gets whether the "amount_micros" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public bool HasAmountMicros {
          get { return (_hasBits0 & 2) != 0; }
        }
        /// <summary>Clears the value of the "amount_micros" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void ClearAmountMicros() {
          _hasBits0 &= ~2;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public override bool Equals(object other) {
          return Equals(other as InvalidActivitySummary);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public bool Equals(InvalidActivitySummary other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (OriginalMonthOfService != other.OriginalMonthOfService) return false;
          if (OriginalYearOfService != other.OriginalYearOfService) return false;
          if (OriginalInvoiceId != other.OriginalInvoiceId) return false;
          if (OriginalAccountBudgetName != other.OriginalAccountBudgetName) return false;
          if (OriginalPurchaseOrderNumber != other.OriginalPurchaseOrderNumber) return false;
          if (AmountMicros != other.AmountMicros) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public override int GetHashCode() {
          int hash = 1;
          if (HasOriginalMonthOfService) hash ^= OriginalMonthOfService.GetHashCode();
          if (HasOriginalYearOfService) hash ^= OriginalYearOfService.GetHashCode();
          if (HasOriginalInvoiceId) hash ^= OriginalInvoiceId.GetHashCode();
          if (HasOriginalAccountBudgetName) hash ^= OriginalAccountBudgetName.GetHashCode();
          if (HasOriginalPurchaseOrderNumber) hash ^= OriginalPurchaseOrderNumber.GetHashCode();
          if (HasAmountMicros) hash ^= AmountMicros.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void WriteTo(pb::CodedOutputStream output) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          output.WriteRawMessage(this);
        #else
          if (HasOriginalMonthOfService) {
            output.WriteRawTag(8);
            output.WriteEnum((int) OriginalMonthOfService);
          }
          if (HasOriginalYearOfService) {
            output.WriteRawTag(18);
            output.WriteString(OriginalYearOfService);
          }
          if (HasOriginalInvoiceId) {
            output.WriteRawTag(26);
            output.WriteString(OriginalInvoiceId);
          }
          if (HasOriginalAccountBudgetName) {
            output.WriteRawTag(34);
            output.WriteString(OriginalAccountBudgetName);
          }
          if (HasOriginalPurchaseOrderNumber) {
            output.WriteRawTag(42);
            output.WriteString(OriginalPurchaseOrderNumber);
          }
          if (HasAmountMicros) {
            output.WriteRawTag(48);
            output.WriteInt64(AmountMicros);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
          if (HasOriginalMonthOfService) {
            output.WriteRawTag(8);
            output.WriteEnum((int) OriginalMonthOfService);
          }
          if (HasOriginalYearOfService) {
            output.WriteRawTag(18);
            output.WriteString(OriginalYearOfService);
          }
          if (HasOriginalInvoiceId) {
            output.WriteRawTag(26);
            output.WriteString(OriginalInvoiceId);
          }
          if (HasOriginalAccountBudgetName) {
            output.WriteRawTag(34);
            output.WriteString(OriginalAccountBudgetName);
          }
          if (HasOriginalPurchaseOrderNumber) {
            output.WriteRawTag(42);
            output.WriteString(OriginalPurchaseOrderNumber);
          }
          if (HasAmountMicros) {
            output.WriteRawTag(48);
            output.WriteInt64(AmountMicros);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(ref output);
          }
        }
        #endif

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public int CalculateSize() {
          int size = 0;
          if (HasOriginalMonthOfService) {
            size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) OriginalMonthOfService);
          }
          if (HasOriginalYearOfService) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(OriginalYearOfService);
          }
          if (HasOriginalInvoiceId) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(OriginalInvoiceId);
          }
          if (HasOriginalAccountBudgetName) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(OriginalAccountBudgetName);
          }
          if (HasOriginalPurchaseOrderNumber) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(OriginalPurchaseOrderNumber);
          }
          if (HasAmountMicros) {
            size += 1 + pb::CodedOutputStream.ComputeInt64Size(AmountMicros);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void MergeFrom(InvalidActivitySummary other) {
          if (other == null) {
            return;
          }
          if (other.HasOriginalMonthOfService) {
            OriginalMonthOfService = other.OriginalMonthOfService;
          }
          if (other.HasOriginalYearOfService) {
            OriginalYearOfService = other.OriginalYearOfService;
          }
          if (other.HasOriginalInvoiceId) {
            OriginalInvoiceId = other.OriginalInvoiceId;
          }
          if (other.HasOriginalAccountBudgetName) {
            OriginalAccountBudgetName = other.OriginalAccountBudgetName;
          }
          if (other.HasOriginalPurchaseOrderNumber) {
            OriginalPurchaseOrderNumber = other.OriginalPurchaseOrderNumber;
          }
          if (other.HasAmountMicros) {
            AmountMicros = other.AmountMicros;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void MergeFrom(pb::CodedInputStream input) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          input.ReadRawMessage(this);
        #else
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 8: {
                OriginalMonthOfService = (global::Google.Ads.GoogleAds.V15.Enums.MonthOfYearEnum.Types.MonthOfYear) input.ReadEnum();
                break;
              }
              case 18: {
                OriginalYearOfService = input.ReadString();
                break;
              }
              case 26: {
                OriginalInvoiceId = input.ReadString();
                break;
              }
              case 34: {
                OriginalAccountBudgetName = input.ReadString();
                break;
              }
              case 42: {
                OriginalPurchaseOrderNumber = input.ReadString();
                break;
              }
              case 48: {
                AmountMicros = input.ReadInt64();
                break;
              }
            }
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
                break;
              case 8: {
                OriginalMonthOfService = (global::Google.Ads.GoogleAds.V15.Enums.MonthOfYearEnum.Types.MonthOfYear) input.ReadEnum();
                break;
              }
              case 18: {
                OriginalYearOfService = input.ReadString();
                break;
              }
              case 26: {
                OriginalInvoiceId = input.ReadString();
                break;
              }
              case 34: {
                OriginalAccountBudgetName = input.ReadString();
                break;
              }
              case 42: {
                OriginalPurchaseOrderNumber = input.ReadString();
                break;
              }
              case 48: {
                AmountMicros = input.ReadInt64();
                break;
              }
            }
          }
        }
        #endif

      }

    }
    #endregion

  }

  #endregion

}

#endregion Designer generated code
