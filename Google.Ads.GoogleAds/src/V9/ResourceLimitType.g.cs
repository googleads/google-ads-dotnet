// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: google/ads/googleads/v9/enums/resource_limit_type.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Google.Ads.GoogleAds.V9.Enums {

  /// <summary>Holder for reflection information generated from google/ads/googleads/v9/enums/resource_limit_type.proto</summary>
  public static partial class ResourceLimitTypeReflection {

    #region Descriptor
    /// <summary>File descriptor for google/ads/googleads/v9/enums/resource_limit_type.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static ResourceLimitTypeReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Cjdnb29nbGUvYWRzL2dvb2dsZWFkcy92OS9lbnVtcy9yZXNvdXJjZV9saW1p",
            "dF90eXBlLnByb3RvEh1nb29nbGUuYWRzLmdvb2dsZWFkcy52OS5lbnVtcyKA",
            "IwoVUmVzb3VyY2VMaW1pdFR5cGVFbnVtIuYiChFSZXNvdXJjZUxpbWl0VHlw",
            "ZRIPCgtVTlNQRUNJRklFRBAAEgsKB1VOS05PV04QARIaChZDQU1QQUlHTlNf",
            "UEVSX0NVU1RPTUVSEAISHwobQkFTRV9DQU1QQUlHTlNfUEVSX0NVU1RPTUVS",
            "EAMSJQohRVhQRVJJTUVOVF9DQU1QQUlHTlNfUEVSX0NVU1RPTUVSEGkSIAoc",
            "SE9URUxfQ0FNUEFJR05TX1BFUl9DVVNUT01FUhAEEikKJVNNQVJUX1NIT1BQ",
            "SU5HX0NBTVBBSUdOU19QRVJfQ1VTVE9NRVIQBRIaChZBRF9HUk9VUFNfUEVS",
            "X0NBTVBBSUdOEAYSIwofQURfR1JPVVBTX1BFUl9TSE9QUElOR19DQU1QQUlH",
            "ThAIEiAKHEFEX0dST1VQU19QRVJfSE9URUxfQ0FNUEFJR04QCRIqCiZSRVBP",
            "UlRJTkdfQURfR1JPVVBTX1BFUl9MT0NBTF9DQU1QQUlHThAKEigKJFJFUE9S",
            "VElOR19BRF9HUk9VUFNfUEVSX0FQUF9DQU1QQUlHThALEigKJE1BTkFHRURf",
            "QURfR1JPVVBTX1BFUl9TTUFSVF9DQU1QQUlHThA0EiIKHkFEX0dST1VQX0NS",
            "SVRFUklBX1BFUl9DVVNUT01FUhAMEicKI0JBU0VfQURfR1JPVVBfQ1JJVEVS",
            "SUFfUEVSX0NVU1RPTUVSEA0SLQopRVhQRVJJTUVOVF9BRF9HUk9VUF9DUklU",
            "RVJJQV9QRVJfQ1VTVE9NRVIQaxIiCh5BRF9HUk9VUF9DUklURVJJQV9QRVJf",
            "Q0FNUEFJR04QDhIiCh5DQU1QQUlHTl9DUklURVJJQV9QRVJfQ1VTVE9NRVIQ",
            "DxInCiNCQVNFX0NBTVBBSUdOX0NSSVRFUklBX1BFUl9DVVNUT01FUhAQEi0K",
            "KUVYUEVSSU1FTlRfQ0FNUEFJR05fQ1JJVEVSSUFfUEVSX0NVU1RPTUVSEGwS",
            "IQodV0VCUEFHRV9DUklURVJJQV9QRVJfQ1VTVE9NRVIQERImCiJCQVNFX1dF",
            "QlBBR0VfQ1JJVEVSSUFfUEVSX0NVU1RPTUVSEBISLAooRVhQRVJJTUVOVF9X",
            "RUJQQUdFX0NSSVRFUklBX1BFUl9DVVNUT01FUhATEisKJ0NPTUJJTkVEX0FV",
            "RElFTkNFX0NSSVRFUklBX1BFUl9BRF9HUk9VUBAUEjUKMUNVU1RPTUVSX05F",
            "R0FUSVZFX1BMQUNFTUVOVF9DUklURVJJQV9QRVJfQ1VTVE9NRVIQFRI7CjdD",
            "VVNUT01FUl9ORUdBVElWRV9ZT1VUVUJFX0NIQU5ORUxfQ1JJVEVSSUFfUEVS",
            "X0NVU1RPTUVSEBYSGQoVQ1JJVEVSSUFfUEVSX0FEX0dST1VQEBcSHwobTElT",
            "VElOR19HUk9VUFNfUEVSX0FEX0dST1VQEBgSKgomRVhQTElDSVRMWV9TSEFS",
            "RURfQlVER0VUU19QRVJfQ1VTVE9NRVIQGRIqCiZJTVBMSUNJVExZX1NIQVJF",
            "RF9CVURHRVRTX1BFUl9DVVNUT01FUhAaEisKJ0NPTUJJTkVEX0FVRElFTkNF",
            "X0NSSVRFUklBX1BFUl9DQU1QQUlHThAbEiIKHk5FR0FUSVZFX0tFWVdPUkRT",
            "X1BFUl9DQU1QQUlHThAcEiQKIE5FR0FUSVZFX1BMQUNFTUVOVFNfUEVSX0NB",
            "TVBBSUdOEB0SHAoYR0VPX1RBUkdFVFNfUEVSX0NBTVBBSUdOEB4SIwofTkVH",
            "QVRJVkVfSVBfQkxPQ0tTX1BFUl9DQU1QQUlHThAgEhwKGFBST1hJTUlUSUVT",
            "X1BFUl9DQU1QQUlHThAhEigKJExJU1RJTkdfU0NPUEVTX1BFUl9TSE9QUElO",
            "R19DQU1QQUlHThAiEiwKKExJU1RJTkdfU0NPUEVTX1BFUl9OT05fU0hPUFBJ",
            "TkdfQ0FNUEFJR04QIxIkCiBORUdBVElWRV9LRVlXT1JEU19QRVJfU0hBUkVE",
            "X1NFVBAkEiYKIk5FR0FUSVZFX1BMQUNFTUVOVFNfUEVSX1NIQVJFRF9TRVQQ",
            "JRItCilTSEFSRURfU0VUU19QRVJfQ1VTVE9NRVJfRk9SX1RZUEVfREVGQVVM",
            "VBAoEj4KOlNIQVJFRF9TRVRTX1BFUl9DVVNUT01FUl9GT1JfTkVHQVRJVkVf",
            "UExBQ0VNRU5UX0xJU1RfTE9XRVIQKRI7CjdIT1RFTF9BRFZBTkNFX0JPT0tJ",
            "TkdfV0lORE9XX0JJRF9NT0RJRklFUlNfUEVSX0FEX0dST1VQECwSIwofQklE",
            "RElOR19TVFJBVEVHSUVTX1BFUl9DVVNUT01FUhAtEiEKHUJBU0lDX1VTRVJf",
            "TElTVFNfUEVSX0NVU1RPTUVSEC8SIwofTE9HSUNBTF9VU0VSX0xJU1RTX1BF",
            "Ul9DVVNUT01FUhAwEiIKHkJBU0VfQURfR1JPVVBfQURTX1BFUl9DVVNUT01F",
            "UhA1EigKJEVYUEVSSU1FTlRfQURfR1JPVVBfQURTX1BFUl9DVVNUT01FUhA2",
            "Eh0KGUFEX0dST1VQX0FEU19QRVJfQ0FNUEFJR04QNxIjCh9URVhUX0FORF9P",
            "VEhFUl9BRFNfUEVSX0FEX0dST1VQEDgSGgoWSU1BR0VfQURTX1BFUl9BRF9H",
            "Uk9VUBA5EiMKH1NIT1BQSU5HX1NNQVJUX0FEU19QRVJfQURfR1JPVVAQOhIm",
            "CiJSRVNQT05TSVZFX1NFQVJDSF9BRFNfUEVSX0FEX0dST1VQEDsSGAoUQVBQ",
            "X0FEU19QRVJfQURfR1JPVVAQPBIjCh9BUFBfRU5HQUdFTUVOVF9BRFNfUEVS",
            "X0FEX0dST1VQED0SGgoWTE9DQUxfQURTX1BFUl9BRF9HUk9VUBA+EhoKFlZJ",
            "REVPX0FEU19QRVJfQURfR1JPVVAQPxIrCiZMRUFEX0ZPUk1fQ0FNUEFJR05f",
            "QVNTRVRTX1BFUl9DQU1QQUlHThCPARIqCiZQUk9NT1RJT05fQ1VTVE9NRVJf",
            "QVNTRVRTX1BFUl9DVVNUT01FUhBPEioKJlBST01PVElPTl9DQU1QQUlHTl9B",
            "U1NFVFNfUEVSX0NBTVBBSUdOEFASKgomUFJPTU9USU9OX0FEX0dST1VQX0FT",
            "U0VUU19QRVJfQURfR1JPVVAQURIpCiRDQUxMT1VUX0NVU1RPTUVSX0FTU0VU",
            "U19QRVJfQ1VTVE9NRVIQhgESKQokQ0FMTE9VVF9DQU1QQUlHTl9BU1NFVFNf",
            "UEVSX0NBTVBBSUdOEIcBEikKJENBTExPVVRfQURfR1JPVVBfQVNTRVRTX1BF",
            "Ul9BRF9HUk9VUBCIARIqCiVTSVRFTElOS19DVVNUT01FUl9BU1NFVFNfUEVS",
            "X0NVU1RPTUVSEIkBEioKJVNJVEVMSU5LX0NBTVBBSUdOX0FTU0VUU19QRVJf",
            "Q0FNUEFJR04QigESKgolU0lURUxJTktfQURfR1JPVVBfQVNTRVRTX1BFUl9B",
            "RF9HUk9VUBCLARI0Ci9TVFJVQ1RVUkVEX1NOSVBQRVRfQ1VTVE9NRVJfQVNT",
            "RVRTX1BFUl9DVVNUT01FUhCMARI0Ci9TVFJVQ1RVUkVEX1NOSVBQRVRfQ0FN",
            "UEFJR05fQVNTRVRTX1BFUl9DQU1QQUlHThCNARI0Ci9TVFJVQ1RVUkVEX1NO",
            "SVBQRVRfQURfR1JPVVBfQVNTRVRTX1BFUl9BRF9HUk9VUBCOARIsCidNT0JJ",
            "TEVfQVBQX0NVU1RPTUVSX0FTU0VUU19QRVJfQ1VTVE9NRVIQkAESLAonTU9C",
            "SUxFX0FQUF9DQU1QQUlHTl9BU1NFVFNfUEVSX0NBTVBBSUdOEJEBEiwKJ01P",
            "QklMRV9BUFBfQURfR1JPVVBfQVNTRVRTX1BFUl9BRF9HUk9VUBCSARIvCipI",
            "T1RFTF9DQUxMT1VUX0NVU1RPTUVSX0FTU0VUU19QRVJfQ1VTVE9NRVIQkwES",
            "LwoqSE9URUxfQ0FMTE9VVF9DQU1QQUlHTl9BU1NFVFNfUEVSX0NBTVBBSUdO",
            "EJQBEi8KKkhPVEVMX0NBTExPVVRfQURfR1JPVVBfQVNTRVRTX1BFUl9BRF9H",
            "Uk9VUBCVARImCiFDQUxMX0NVU1RPTUVSX0FTU0VUU19QRVJfQ1VTVE9NRVIQ",
            "lgESJgohQ0FMTF9DQU1QQUlHTl9BU1NFVFNfUEVSX0NBTVBBSUdOEJcBEiYK",
            "IUNBTExfQURfR1JPVVBfQVNTRVRTX1BFUl9BRF9HUk9VUBCYARInCiJQUklD",
            "RV9DVVNUT01FUl9BU1NFVFNfUEVSX0NVU1RPTUVSEJoBEicKIlBSSUNFX0NB",
            "TVBBSUdOX0FTU0VUU19QRVJfQ0FNUEFJR04QmwESJwoiUFJJQ0VfQURfR1JP",
            "VVBfQVNTRVRTX1BFUl9BRF9HUk9VUBCcARITCg9WRVJTSU9OU19QRVJfQUQQ",
            "UhIbChdVU0VSX0ZFRURTX1BFUl9DVVNUT01FUhBaEh0KGVNZU1RFTV9GRUVE",
            "U19QRVJfQ1VTVE9NRVIQWxIcChhGRUVEX0FUVFJJQlVURVNfUEVSX0ZFRUQQ",
            "XBIbChdGRUVEX0lURU1TX1BFUl9DVVNUT01FUhBeEh8KG0NBTVBBSUdOX0ZF",
            "RURTX1BFUl9DVVNUT01FUhBfEiQKIEJBU0VfQ0FNUEFJR05fRkVFRFNfUEVS",
            "X0NVU1RPTUVSEGASKgomRVhQRVJJTUVOVF9DQU1QQUlHTl9GRUVEU19QRVJf",
            "Q1VTVE9NRVIQbRIfChtBRF9HUk9VUF9GRUVEU19QRVJfQ1VTVE9NRVIQYRIk",
            "CiBCQVNFX0FEX0dST1VQX0ZFRURTX1BFUl9DVVNUT01FUhBiEioKJkVYUEVS",
            "SU1FTlRfQURfR1JPVVBfRkVFRFNfUEVSX0NVU1RPTUVSEG4SHwobQURfR1JP",
            "VVBfRkVFRFNfUEVSX0NBTVBBSUdOEGMSHwobRkVFRF9JVEVNX1NFVFNfUEVS",
            "X0NVU1RPTUVSEGQSIAocRkVFRF9JVEVNU19QRVJfRkVFRF9JVEVNX1NFVBBl",
            "EiUKIUNBTVBBSUdOX0VYUEVSSU1FTlRTX1BFUl9DVVNUT01FUhBwEigKJEVY",
            "UEVSSU1FTlRfQVJNU19QRVJfVklERU9fRVhQRVJJTUVOVBBxEh0KGU9XTkVE",
            "X0xBQkVMU19QRVJfQ1VTVE9NRVIQcxIXChNMQUJFTFNfUEVSX0NBTVBBSUdO",
            "EHUSFwoTTEFCRUxTX1BFUl9BRF9HUk9VUBB2EhoKFkxBQkVMU19QRVJfQURf",
            "R1JPVVBfQUQQdxIhCh1MQUJFTFNfUEVSX0FEX0dST1VQX0NSSVRFUklPThB4",
            "Eh4KGlRBUkdFVF9DVVNUT01FUlNfUEVSX0xBQkVMEHkSJwojS0VZV09SRF9Q",
            "TEFOU19QRVJfVVNFUl9QRVJfQ1VTVE9NRVIQehIzCi9LRVlXT1JEX1BMQU5f",
            "QURfR1JPVVBfS0VZV09SRFNfUEVSX0tFWVdPUkRfUExBThB7EisKJ0tFWVdP",
            "UkRfUExBTl9BRF9HUk9VUFNfUEVSX0tFWVdPUkRfUExBThB8EjMKL0tFWVdP",
            "UkRfUExBTl9ORUdBVElWRV9LRVlXT1JEU19QRVJfS0VZV09SRF9QTEFOEH0S",
            "KwonS0VZV09SRF9QTEFOX0NBTVBBSUdOU19QRVJfS0VZV09SRF9QTEFOEH4S",
            "JAofQ09OVkVSU0lPTl9BQ1RJT05TX1BFUl9DVVNUT01FUhCAARIhChxCQVRD",
            "SF9KT0JfT1BFUkFUSU9OU19QRVJfSk9CEIIBEhwKF0JBVENIX0pPQlNfUEVS",
            "X0NVU1RPTUVSEIMBEjkKNEhPVEVMX0NIRUNLX0lOX0RBVEVfUkFOR0VfQklE",
            "X01PRElGSUVSU19QRVJfQURfR1JPVVAQhAFC6wEKIWNvbS5nb29nbGUuYWRz",
            "Lmdvb2dsZWFkcy52OS5lbnVtc0IWUmVzb3VyY2VMaW1pdFR5cGVQcm90b1AB",
            "WkJnb29nbGUuZ29sYW5nLm9yZy9nZW5wcm90by9nb29nbGVhcGlzL2Fkcy9n",
            "b29nbGVhZHMvdjkvZW51bXM7ZW51bXOiAgNHQUGqAh1Hb29nbGUuQWRzLkdv",
            "b2dsZUFkcy5WOS5FbnVtc8oCHUdvb2dsZVxBZHNcR29vZ2xlQWRzXFY5XEVu",
            "dW1z6gIhR29vZ2xlOjpBZHM6Okdvb2dsZUFkczo6Vjk6OkVudW1zYgZwcm90",
            "bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Ads.GoogleAds.V9.Enums.ResourceLimitTypeEnum), global::Google.Ads.GoogleAds.V9.Enums.ResourceLimitTypeEnum.Parser, null, null, new[]{ typeof(global::Google.Ads.GoogleAds.V9.Enums.ResourceLimitTypeEnum.Types.ResourceLimitType) }, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  /// <summary>
  /// Container for enum describing possible resource limit types.
  /// </summary>
  public sealed partial class ResourceLimitTypeEnum : pb::IMessage<ResourceLimitTypeEnum>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<ResourceLimitTypeEnum> _parser = new pb::MessageParser<ResourceLimitTypeEnum>(() => new ResourceLimitTypeEnum());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<ResourceLimitTypeEnum> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Ads.GoogleAds.V9.Enums.ResourceLimitTypeReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ResourceLimitTypeEnum() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ResourceLimitTypeEnum(ResourceLimitTypeEnum other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ResourceLimitTypeEnum Clone() {
      return new ResourceLimitTypeEnum(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as ResourceLimitTypeEnum);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(ResourceLimitTypeEnum other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(ResourceLimitTypeEnum other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
        }
      }
    }
    #endif

    #region Nested types
    /// <summary>Container for nested types declared in the ResourceLimitTypeEnum message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static partial class Types {
      /// <summary>
      /// Resource limit type.
      /// </summary>
      public enum ResourceLimitType {
        /// <summary>
        /// No value has been specified.
        /// </summary>
        [pbr::OriginalName("UNSPECIFIED")] Unspecified = 0,
        /// <summary>
        /// Used for return value only. Represents an unclassified operation unknown
        /// in this version.
        /// </summary>
        [pbr::OriginalName("UNKNOWN")] Unknown = 1,
        /// <summary>
        /// Number of ENABLED and PAUSED campaigns per customer.
        /// </summary>
        [pbr::OriginalName("CAMPAIGNS_PER_CUSTOMER")] CampaignsPerCustomer = 2,
        /// <summary>
        /// Number of ENABLED and PAUSED base campaigns per customer.
        /// </summary>
        [pbr::OriginalName("BASE_CAMPAIGNS_PER_CUSTOMER")] BaseCampaignsPerCustomer = 3,
        /// <summary>
        /// Number of ENABLED and PAUSED experiment campaigns per customer.
        /// </summary>
        [pbr::OriginalName("EXPERIMENT_CAMPAIGNS_PER_CUSTOMER")] ExperimentCampaignsPerCustomer = 105,
        /// <summary>
        /// Number of ENABLED and PAUSED Hotel campaigns per customer.
        /// </summary>
        [pbr::OriginalName("HOTEL_CAMPAIGNS_PER_CUSTOMER")] HotelCampaignsPerCustomer = 4,
        /// <summary>
        /// Number of ENABLED and PAUSED Smart Shopping campaigns per customer.
        /// </summary>
        [pbr::OriginalName("SMART_SHOPPING_CAMPAIGNS_PER_CUSTOMER")] SmartShoppingCampaignsPerCustomer = 5,
        /// <summary>
        /// Number of ENABLED ad groups per campaign.
        /// </summary>
        [pbr::OriginalName("AD_GROUPS_PER_CAMPAIGN")] AdGroupsPerCampaign = 6,
        /// <summary>
        /// Number of ENABLED ad groups per Shopping campaign.
        /// </summary>
        [pbr::OriginalName("AD_GROUPS_PER_SHOPPING_CAMPAIGN")] AdGroupsPerShoppingCampaign = 8,
        /// <summary>
        /// Number of ENABLED ad groups per Hotel campaign.
        /// </summary>
        [pbr::OriginalName("AD_GROUPS_PER_HOTEL_CAMPAIGN")] AdGroupsPerHotelCampaign = 9,
        /// <summary>
        /// Number of ENABLED reporting ad groups per local campaign.
        /// </summary>
        [pbr::OriginalName("REPORTING_AD_GROUPS_PER_LOCAL_CAMPAIGN")] ReportingAdGroupsPerLocalCampaign = 10,
        /// <summary>
        /// Number of ENABLED reporting ad groups per App campaign. It includes app
        /// campaign and app campaign for engagement.
        /// </summary>
        [pbr::OriginalName("REPORTING_AD_GROUPS_PER_APP_CAMPAIGN")] ReportingAdGroupsPerAppCampaign = 11,
        /// <summary>
        /// Number of ENABLED managed ad groups per smart campaign.
        /// </summary>
        [pbr::OriginalName("MANAGED_AD_GROUPS_PER_SMART_CAMPAIGN")] ManagedAdGroupsPerSmartCampaign = 52,
        /// <summary>
        /// Number of ENABLED ad group criteria per customer.
        /// An ad group criterion is considered as ENABLED if:
        /// 1. it's not REMOVED
        /// 2. its ad group is not REMOVED
        /// 3. its campaign is not REMOVED.
        /// </summary>
        [pbr::OriginalName("AD_GROUP_CRITERIA_PER_CUSTOMER")] AdGroupCriteriaPerCustomer = 12,
        /// <summary>
        /// Number of ad group criteria across all base campaigns for a customer.
        /// </summary>
        [pbr::OriginalName("BASE_AD_GROUP_CRITERIA_PER_CUSTOMER")] BaseAdGroupCriteriaPerCustomer = 13,
        /// <summary>
        /// Number of ad group criteria across all experiment campaigns for a
        /// customer.
        /// </summary>
        [pbr::OriginalName("EXPERIMENT_AD_GROUP_CRITERIA_PER_CUSTOMER")] ExperimentAdGroupCriteriaPerCustomer = 107,
        /// <summary>
        /// Number of ENABLED ad group criteria per campaign.
        /// An ad group criterion is considered as ENABLED if:
        /// 1. it's not REMOVED
        /// 2. its ad group is not REMOVED.
        /// </summary>
        [pbr::OriginalName("AD_GROUP_CRITERIA_PER_CAMPAIGN")] AdGroupCriteriaPerCampaign = 14,
        /// <summary>
        /// Number of ENABLED campaign criteria per customer.
        /// </summary>
        [pbr::OriginalName("CAMPAIGN_CRITERIA_PER_CUSTOMER")] CampaignCriteriaPerCustomer = 15,
        /// <summary>
        /// Number of ENABLED campaign criteria across all base campaigns for a
        /// customer.
        /// </summary>
        [pbr::OriginalName("BASE_CAMPAIGN_CRITERIA_PER_CUSTOMER")] BaseCampaignCriteriaPerCustomer = 16,
        /// <summary>
        /// Number of ENABLED campaign criteria across all experiment campaigns for a
        /// customer.
        /// </summary>
        [pbr::OriginalName("EXPERIMENT_CAMPAIGN_CRITERIA_PER_CUSTOMER")] ExperimentCampaignCriteriaPerCustomer = 108,
        /// <summary>
        /// Number of ENABLED webpage criteria per customer, including
        /// campaign level and ad group level.
        /// </summary>
        [pbr::OriginalName("WEBPAGE_CRITERIA_PER_CUSTOMER")] WebpageCriteriaPerCustomer = 17,
        /// <summary>
        /// Number of ENABLED webpage criteria across all base campaigns for
        /// a customer.
        /// </summary>
        [pbr::OriginalName("BASE_WEBPAGE_CRITERIA_PER_CUSTOMER")] BaseWebpageCriteriaPerCustomer = 18,
        /// <summary>
        /// Meximum number of ENABLED webpage criteria across all experiment
        /// campaigns for a customer.
        /// </summary>
        [pbr::OriginalName("EXPERIMENT_WEBPAGE_CRITERIA_PER_CUSTOMER")] ExperimentWebpageCriteriaPerCustomer = 19,
        /// <summary>
        /// Number of combined audience criteria per ad group.
        /// </summary>
        [pbr::OriginalName("COMBINED_AUDIENCE_CRITERIA_PER_AD_GROUP")] CombinedAudienceCriteriaPerAdGroup = 20,
        /// <summary>
        /// Limit for placement criterion type group in customer negative criterion.
        /// </summary>
        [pbr::OriginalName("CUSTOMER_NEGATIVE_PLACEMENT_CRITERIA_PER_CUSTOMER")] CustomerNegativePlacementCriteriaPerCustomer = 21,
        /// <summary>
        /// Limit for YouTube TV channels in customer negative criterion.
        /// </summary>
        [pbr::OriginalName("CUSTOMER_NEGATIVE_YOUTUBE_CHANNEL_CRITERIA_PER_CUSTOMER")] CustomerNegativeYoutubeChannelCriteriaPerCustomer = 22,
        /// <summary>
        /// Number of ENABLED criteria per ad group.
        /// </summary>
        [pbr::OriginalName("CRITERIA_PER_AD_GROUP")] CriteriaPerAdGroup = 23,
        /// <summary>
        /// Number of listing group criteria per ad group.
        /// </summary>
        [pbr::OriginalName("LISTING_GROUPS_PER_AD_GROUP")] ListingGroupsPerAdGroup = 24,
        /// <summary>
        /// Number of ENABLED explicitly shared budgets per customer.
        /// </summary>
        [pbr::OriginalName("EXPLICITLY_SHARED_BUDGETS_PER_CUSTOMER")] ExplicitlySharedBudgetsPerCustomer = 25,
        /// <summary>
        /// Number of ENABLED implicitly shared budgets per customer.
        /// </summary>
        [pbr::OriginalName("IMPLICITLY_SHARED_BUDGETS_PER_CUSTOMER")] ImplicitlySharedBudgetsPerCustomer = 26,
        /// <summary>
        /// Number of combined audience criteria per campaign.
        /// </summary>
        [pbr::OriginalName("COMBINED_AUDIENCE_CRITERIA_PER_CAMPAIGN")] CombinedAudienceCriteriaPerCampaign = 27,
        /// <summary>
        /// Number of negative keywords per campaign.
        /// </summary>
        [pbr::OriginalName("NEGATIVE_KEYWORDS_PER_CAMPAIGN")] NegativeKeywordsPerCampaign = 28,
        /// <summary>
        /// Number of excluded campaign criteria in placement dimension, e.g.
        /// placement, mobile application, YouTube channel, etc. The API criterion
        /// type is NOT limited to placement only, and this does not include
        /// exclusions at the ad group or other levels.
        /// </summary>
        [pbr::OriginalName("NEGATIVE_PLACEMENTS_PER_CAMPAIGN")] NegativePlacementsPerCampaign = 29,
        /// <summary>
        /// Number of geo targets per campaign.
        /// </summary>
        [pbr::OriginalName("GEO_TARGETS_PER_CAMPAIGN")] GeoTargetsPerCampaign = 30,
        /// <summary>
        /// Number of negative IP blocks per campaign.
        /// </summary>
        [pbr::OriginalName("NEGATIVE_IP_BLOCKS_PER_CAMPAIGN")] NegativeIpBlocksPerCampaign = 32,
        /// <summary>
        /// Number of proximity targets per campaign.
        /// </summary>
        [pbr::OriginalName("PROXIMITIES_PER_CAMPAIGN")] ProximitiesPerCampaign = 33,
        /// <summary>
        /// Number of listing scopes per Shopping campaign.
        /// </summary>
        [pbr::OriginalName("LISTING_SCOPES_PER_SHOPPING_CAMPAIGN")] ListingScopesPerShoppingCampaign = 34,
        /// <summary>
        /// Number of listing scopes per non-Shopping campaign.
        /// </summary>
        [pbr::OriginalName("LISTING_SCOPES_PER_NON_SHOPPING_CAMPAIGN")] ListingScopesPerNonShoppingCampaign = 35,
        /// <summary>
        /// Number of criteria per negative keyword shared set.
        /// </summary>
        [pbr::OriginalName("NEGATIVE_KEYWORDS_PER_SHARED_SET")] NegativeKeywordsPerSharedSet = 36,
        /// <summary>
        /// Number of criteria per negative placement shared set.
        /// </summary>
        [pbr::OriginalName("NEGATIVE_PLACEMENTS_PER_SHARED_SET")] NegativePlacementsPerSharedSet = 37,
        /// <summary>
        /// Default number of shared sets allowed per type per customer.
        /// </summary>
        [pbr::OriginalName("SHARED_SETS_PER_CUSTOMER_FOR_TYPE_DEFAULT")] SharedSetsPerCustomerForTypeDefault = 40,
        /// <summary>
        /// Number of shared sets of negative placement list type for a
        /// manager customer.
        /// </summary>
        [pbr::OriginalName("SHARED_SETS_PER_CUSTOMER_FOR_NEGATIVE_PLACEMENT_LIST_LOWER")] SharedSetsPerCustomerForNegativePlacementListLower = 41,
        /// <summary>
        /// Number of hotel_advance_booking_window bid modifiers per ad group.
        /// </summary>
        [pbr::OriginalName("HOTEL_ADVANCE_BOOKING_WINDOW_BID_MODIFIERS_PER_AD_GROUP")] HotelAdvanceBookingWindowBidModifiersPerAdGroup = 44,
        /// <summary>
        /// Number of ENABLED shared bidding strategies per customer.
        /// </summary>
        [pbr::OriginalName("BIDDING_STRATEGIES_PER_CUSTOMER")] BiddingStrategiesPerCustomer = 45,
        /// <summary>
        /// Number of open basic user lists per customer.
        /// </summary>
        [pbr::OriginalName("BASIC_USER_LISTS_PER_CUSTOMER")] BasicUserListsPerCustomer = 47,
        /// <summary>
        /// Number of open logical user lists per customer.
        /// </summary>
        [pbr::OriginalName("LOGICAL_USER_LISTS_PER_CUSTOMER")] LogicalUserListsPerCustomer = 48,
        /// <summary>
        /// Number of ENABLED and PAUSED ad group ads across all base campaigns for a
        /// customer.
        /// </summary>
        [pbr::OriginalName("BASE_AD_GROUP_ADS_PER_CUSTOMER")] BaseAdGroupAdsPerCustomer = 53,
        /// <summary>
        /// Number of ENABLED and PAUSED ad group ads across all experiment campaigns
        /// for a customer.
        /// </summary>
        [pbr::OriginalName("EXPERIMENT_AD_GROUP_ADS_PER_CUSTOMER")] ExperimentAdGroupAdsPerCustomer = 54,
        /// <summary>
        /// Number of ENABLED and PAUSED ad group ads per campaign.
        /// </summary>
        [pbr::OriginalName("AD_GROUP_ADS_PER_CAMPAIGN")] AdGroupAdsPerCampaign = 55,
        /// <summary>
        /// Number of ENABLED ads per ad group that do not fall in to other buckets.
        /// Includes text and many other types.
        /// </summary>
        [pbr::OriginalName("TEXT_AND_OTHER_ADS_PER_AD_GROUP")] TextAndOtherAdsPerAdGroup = 56,
        /// <summary>
        /// Number of ENABLED image ads per ad group.
        /// </summary>
        [pbr::OriginalName("IMAGE_ADS_PER_AD_GROUP")] ImageAdsPerAdGroup = 57,
        /// <summary>
        /// Number of ENABLED shopping smart ads per ad group.
        /// </summary>
        [pbr::OriginalName("SHOPPING_SMART_ADS_PER_AD_GROUP")] ShoppingSmartAdsPerAdGroup = 58,
        /// <summary>
        /// Number of ENABLED responsive search ads per ad group.
        /// </summary>
        [pbr::OriginalName("RESPONSIVE_SEARCH_ADS_PER_AD_GROUP")] ResponsiveSearchAdsPerAdGroup = 59,
        /// <summary>
        /// Number of ENABLED app ads per ad group.
        /// </summary>
        [pbr::OriginalName("APP_ADS_PER_AD_GROUP")] AppAdsPerAdGroup = 60,
        /// <summary>
        /// Number of ENABLED app engagement ads per ad group.
        /// </summary>
        [pbr::OriginalName("APP_ENGAGEMENT_ADS_PER_AD_GROUP")] AppEngagementAdsPerAdGroup = 61,
        /// <summary>
        /// Number of ENABLED local ads per ad group.
        /// </summary>
        [pbr::OriginalName("LOCAL_ADS_PER_AD_GROUP")] LocalAdsPerAdGroup = 62,
        /// <summary>
        /// Number of ENABLED video ads per ad group.
        /// </summary>
        [pbr::OriginalName("VIDEO_ADS_PER_AD_GROUP")] VideoAdsPerAdGroup = 63,
        /// <summary>
        /// Number of ENABLED lead form CampaignAssets per campaign.
        /// </summary>
        [pbr::OriginalName("LEAD_FORM_CAMPAIGN_ASSETS_PER_CAMPAIGN")] LeadFormCampaignAssetsPerCampaign = 143,
        /// <summary>
        /// Number of ENABLED promotion CustomerAssets per customer.
        /// </summary>
        [pbr::OriginalName("PROMOTION_CUSTOMER_ASSETS_PER_CUSTOMER")] PromotionCustomerAssetsPerCustomer = 79,
        /// <summary>
        /// Number of ENABLED promotion CampaignAssets per campaign.
        /// </summary>
        [pbr::OriginalName("PROMOTION_CAMPAIGN_ASSETS_PER_CAMPAIGN")] PromotionCampaignAssetsPerCampaign = 80,
        /// <summary>
        /// Number of ENABLED promotion AdGroupAssets per ad group.
        /// </summary>
        [pbr::OriginalName("PROMOTION_AD_GROUP_ASSETS_PER_AD_GROUP")] PromotionAdGroupAssetsPerAdGroup = 81,
        /// <summary>
        /// Number of ENABLED callout CustomerAssets per customer.
        /// </summary>
        [pbr::OriginalName("CALLOUT_CUSTOMER_ASSETS_PER_CUSTOMER")] CalloutCustomerAssetsPerCustomer = 134,
        /// <summary>
        /// Number of ENABLED callout CampaignAssets per campaign.
        /// </summary>
        [pbr::OriginalName("CALLOUT_CAMPAIGN_ASSETS_PER_CAMPAIGN")] CalloutCampaignAssetsPerCampaign = 135,
        /// <summary>
        /// Number of ENABLED callout AdGroupAssets per ad group.
        /// </summary>
        [pbr::OriginalName("CALLOUT_AD_GROUP_ASSETS_PER_AD_GROUP")] CalloutAdGroupAssetsPerAdGroup = 136,
        /// <summary>
        /// Number of ENABLED sitelink CustomerAssets per customer.
        /// </summary>
        [pbr::OriginalName("SITELINK_CUSTOMER_ASSETS_PER_CUSTOMER")] SitelinkCustomerAssetsPerCustomer = 137,
        /// <summary>
        /// Number of ENABLED sitelink CampaignAssets per campaign.
        /// </summary>
        [pbr::OriginalName("SITELINK_CAMPAIGN_ASSETS_PER_CAMPAIGN")] SitelinkCampaignAssetsPerCampaign = 138,
        /// <summary>
        /// Number of ENABLED sitelink AdGroupAssets per ad group.
        /// </summary>
        [pbr::OriginalName("SITELINK_AD_GROUP_ASSETS_PER_AD_GROUP")] SitelinkAdGroupAssetsPerAdGroup = 139,
        /// <summary>
        /// Number of ENABLED structured snippet CustomerAssets per customer.
        /// </summary>
        [pbr::OriginalName("STRUCTURED_SNIPPET_CUSTOMER_ASSETS_PER_CUSTOMER")] StructuredSnippetCustomerAssetsPerCustomer = 140,
        /// <summary>
        /// Number of ENABLED structured snippet CampaignAssets per campaign.
        /// </summary>
        [pbr::OriginalName("STRUCTURED_SNIPPET_CAMPAIGN_ASSETS_PER_CAMPAIGN")] StructuredSnippetCampaignAssetsPerCampaign = 141,
        /// <summary>
        /// Number of ENABLED structured snippet AdGroupAssets per ad group.
        /// </summary>
        [pbr::OriginalName("STRUCTURED_SNIPPET_AD_GROUP_ASSETS_PER_AD_GROUP")] StructuredSnippetAdGroupAssetsPerAdGroup = 142,
        /// <summary>
        /// Number of ENABLED mobile app CustomerAssets per customer.
        /// </summary>
        [pbr::OriginalName("MOBILE_APP_CUSTOMER_ASSETS_PER_CUSTOMER")] MobileAppCustomerAssetsPerCustomer = 144,
        /// <summary>
        /// Number of ENABLED mobile app CampaignAssets per campaign.
        /// </summary>
        [pbr::OriginalName("MOBILE_APP_CAMPAIGN_ASSETS_PER_CAMPAIGN")] MobileAppCampaignAssetsPerCampaign = 145,
        /// <summary>
        /// Number of ENABLED mobile app AdGroupAssets per ad group.
        /// </summary>
        [pbr::OriginalName("MOBILE_APP_AD_GROUP_ASSETS_PER_AD_GROUP")] MobileAppAdGroupAssetsPerAdGroup = 146,
        /// <summary>
        /// Number of ENABLED hotel callout CustomerAssets per customer.
        /// </summary>
        [pbr::OriginalName("HOTEL_CALLOUT_CUSTOMER_ASSETS_PER_CUSTOMER")] HotelCalloutCustomerAssetsPerCustomer = 147,
        /// <summary>
        /// Number of ENABLED hotel callout CampaignAssets per campaign.
        /// </summary>
        [pbr::OriginalName("HOTEL_CALLOUT_CAMPAIGN_ASSETS_PER_CAMPAIGN")] HotelCalloutCampaignAssetsPerCampaign = 148,
        /// <summary>
        /// Number of ENABLED hotel callout AdGroupAssets per ad group.
        /// </summary>
        [pbr::OriginalName("HOTEL_CALLOUT_AD_GROUP_ASSETS_PER_AD_GROUP")] HotelCalloutAdGroupAssetsPerAdGroup = 149,
        /// <summary>
        /// Number of ENABLED call CustomerAssets per customer.
        /// </summary>
        [pbr::OriginalName("CALL_CUSTOMER_ASSETS_PER_CUSTOMER")] CallCustomerAssetsPerCustomer = 150,
        /// <summary>
        /// Number of ENABLED call CampaignAssets per campaign.
        /// </summary>
        [pbr::OriginalName("CALL_CAMPAIGN_ASSETS_PER_CAMPAIGN")] CallCampaignAssetsPerCampaign = 151,
        /// <summary>
        /// Number of ENABLED call AdGroupAssets per ad group.
        /// </summary>
        [pbr::OriginalName("CALL_AD_GROUP_ASSETS_PER_AD_GROUP")] CallAdGroupAssetsPerAdGroup = 152,
        /// <summary>
        /// Number of ENABLED price CustomerAssets per customer.
        /// </summary>
        [pbr::OriginalName("PRICE_CUSTOMER_ASSETS_PER_CUSTOMER")] PriceCustomerAssetsPerCustomer = 154,
        /// <summary>
        /// Number of ENABLED price CampaignAssets per campaign.
        /// </summary>
        [pbr::OriginalName("PRICE_CAMPAIGN_ASSETS_PER_CAMPAIGN")] PriceCampaignAssetsPerCampaign = 155,
        /// <summary>
        /// Number of ENABLED price AdGroupAssets per ad group.
        /// </summary>
        [pbr::OriginalName("PRICE_AD_GROUP_ASSETS_PER_AD_GROUP")] PriceAdGroupAssetsPerAdGroup = 156,
        /// <summary>
        /// Number of versions per ad.
        /// </summary>
        [pbr::OriginalName("VERSIONS_PER_AD")] VersionsPerAd = 82,
        /// <summary>
        /// Number of ENABLED user feeds per customer.
        /// </summary>
        [pbr::OriginalName("USER_FEEDS_PER_CUSTOMER")] UserFeedsPerCustomer = 90,
        /// <summary>
        /// Number of ENABLED system feeds per customer.
        /// </summary>
        [pbr::OriginalName("SYSTEM_FEEDS_PER_CUSTOMER")] SystemFeedsPerCustomer = 91,
        /// <summary>
        /// Number of feed attributes per feed.
        /// </summary>
        [pbr::OriginalName("FEED_ATTRIBUTES_PER_FEED")] FeedAttributesPerFeed = 92,
        /// <summary>
        /// Number of ENABLED feed items per customer.
        /// </summary>
        [pbr::OriginalName("FEED_ITEMS_PER_CUSTOMER")] FeedItemsPerCustomer = 94,
        /// <summary>
        /// Number of ENABLED campaign feeds per customer.
        /// </summary>
        [pbr::OriginalName("CAMPAIGN_FEEDS_PER_CUSTOMER")] CampaignFeedsPerCustomer = 95,
        /// <summary>
        /// Number of ENABLED campaign feeds across all base campaigns for a
        /// customer.
        /// </summary>
        [pbr::OriginalName("BASE_CAMPAIGN_FEEDS_PER_CUSTOMER")] BaseCampaignFeedsPerCustomer = 96,
        /// <summary>
        /// Number of ENABLED campaign feeds across all experiment campaigns for a
        /// customer.
        /// </summary>
        [pbr::OriginalName("EXPERIMENT_CAMPAIGN_FEEDS_PER_CUSTOMER")] ExperimentCampaignFeedsPerCustomer = 109,
        /// <summary>
        /// Number of ENABLED ad group feeds per customer.
        /// </summary>
        [pbr::OriginalName("AD_GROUP_FEEDS_PER_CUSTOMER")] AdGroupFeedsPerCustomer = 97,
        /// <summary>
        /// Number of ENABLED ad group feeds across all base campaigns for a
        /// customer.
        /// </summary>
        [pbr::OriginalName("BASE_AD_GROUP_FEEDS_PER_CUSTOMER")] BaseAdGroupFeedsPerCustomer = 98,
        /// <summary>
        /// Number of ENABLED ad group feeds across all experiment campaigns for a
        /// customer.
        /// </summary>
        [pbr::OriginalName("EXPERIMENT_AD_GROUP_FEEDS_PER_CUSTOMER")] ExperimentAdGroupFeedsPerCustomer = 110,
        /// <summary>
        /// Number of ENABLED ad group feeds per campaign.
        /// </summary>
        [pbr::OriginalName("AD_GROUP_FEEDS_PER_CAMPAIGN")] AdGroupFeedsPerCampaign = 99,
        /// <summary>
        /// Number of ENABLED feed items per customer.
        /// </summary>
        [pbr::OriginalName("FEED_ITEM_SETS_PER_CUSTOMER")] FeedItemSetsPerCustomer = 100,
        /// <summary>
        /// Number of feed items per feed item set.
        /// </summary>
        [pbr::OriginalName("FEED_ITEMS_PER_FEED_ITEM_SET")] FeedItemsPerFeedItemSet = 101,
        /// <summary>
        /// Number of ENABLED campaign experiments per customer.
        /// </summary>
        [pbr::OriginalName("CAMPAIGN_EXPERIMENTS_PER_CUSTOMER")] CampaignExperimentsPerCustomer = 112,
        /// <summary>
        /// Number of video experiment arms per experiment.
        /// </summary>
        [pbr::OriginalName("EXPERIMENT_ARMS_PER_VIDEO_EXPERIMENT")] ExperimentArmsPerVideoExperiment = 113,
        /// <summary>
        /// Number of owned labels per customer.
        /// </summary>
        [pbr::OriginalName("OWNED_LABELS_PER_CUSTOMER")] OwnedLabelsPerCustomer = 115,
        /// <summary>
        /// Number of applied labels per campaign.
        /// </summary>
        [pbr::OriginalName("LABELS_PER_CAMPAIGN")] LabelsPerCampaign = 117,
        /// <summary>
        /// Number of applied labels per ad group.
        /// </summary>
        [pbr::OriginalName("LABELS_PER_AD_GROUP")] LabelsPerAdGroup = 118,
        /// <summary>
        /// Number of applied labels per ad group ad.
        /// </summary>
        [pbr::OriginalName("LABELS_PER_AD_GROUP_AD")] LabelsPerAdGroupAd = 119,
        /// <summary>
        /// Number of applied labels per ad group criterion.
        /// </summary>
        [pbr::OriginalName("LABELS_PER_AD_GROUP_CRITERION")] LabelsPerAdGroupCriterion = 120,
        /// <summary>
        /// Number of customers with a single label applied.
        /// </summary>
        [pbr::OriginalName("TARGET_CUSTOMERS_PER_LABEL")] TargetCustomersPerLabel = 121,
        /// <summary>
        /// Number of ENABLED keyword plans per user per customer.
        /// The limit is applied per &lt;user, customer> pair because by default a plan
        /// is private to a user of a customer. Each user of a customer has his or
        /// her own independent limit.
        /// </summary>
        [pbr::OriginalName("KEYWORD_PLANS_PER_USER_PER_CUSTOMER")] KeywordPlansPerUserPerCustomer = 122,
        /// <summary>
        /// Number of keyword plan ad group keywords per keyword plan.
        /// </summary>
        [pbr::OriginalName("KEYWORD_PLAN_AD_GROUP_KEYWORDS_PER_KEYWORD_PLAN")] KeywordPlanAdGroupKeywordsPerKeywordPlan = 123,
        /// <summary>
        /// Number of keyword plan ad groups per keyword plan.
        /// </summary>
        [pbr::OriginalName("KEYWORD_PLAN_AD_GROUPS_PER_KEYWORD_PLAN")] KeywordPlanAdGroupsPerKeywordPlan = 124,
        /// <summary>
        /// Number of keyword plan negative keywords (both campaign and ad group) per
        /// keyword plan.
        /// </summary>
        [pbr::OriginalName("KEYWORD_PLAN_NEGATIVE_KEYWORDS_PER_KEYWORD_PLAN")] KeywordPlanNegativeKeywordsPerKeywordPlan = 125,
        /// <summary>
        /// Number of keyword plan campaigns per keyword plan.
        /// </summary>
        [pbr::OriginalName("KEYWORD_PLAN_CAMPAIGNS_PER_KEYWORD_PLAN")] KeywordPlanCampaignsPerKeywordPlan = 126,
        /// <summary>
        /// Number of ENABLED conversion actions per customer.
        /// </summary>
        [pbr::OriginalName("CONVERSION_ACTIONS_PER_CUSTOMER")] ConversionActionsPerCustomer = 128,
        /// <summary>
        /// Number of operations in a single batch job.
        /// </summary>
        [pbr::OriginalName("BATCH_JOB_OPERATIONS_PER_JOB")] BatchJobOperationsPerJob = 130,
        /// <summary>
        /// Number of PENDING or ENABLED batch jobs per customer.
        /// </summary>
        [pbr::OriginalName("BATCH_JOBS_PER_CUSTOMER")] BatchJobsPerCustomer = 131,
        /// <summary>
        /// Number of hotel check-in date range bid modifiers per ad agroup.
        /// </summary>
        [pbr::OriginalName("HOTEL_CHECK_IN_DATE_RANGE_BID_MODIFIERS_PER_AD_GROUP")] HotelCheckInDateRangeBidModifiersPerAdGroup = 132,
      }

    }
    #endregion

  }

  #endregion

}

#endregion Designer generated code
