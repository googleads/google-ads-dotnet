// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: google/ads/googleads/v0/common/ad_type_infos.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Google.Ads.GoogleAds.V0.Common {

  /// <summary>Holder for reflection information generated from google/ads/googleads/v0/common/ad_type_infos.proto</summary>
  public static partial class AdTypeInfosReflection {

    #region Descriptor
    /// <summary>File descriptor for google/ads/googleads/v0/common/ad_type_infos.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static AdTypeInfosReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CjJnb29nbGUvYWRzL2dvb2dsZWFkcy92MC9jb21tb24vYWRfdHlwZV9pbmZv",
            "cy5wcm90bxIeZ29vZ2xlLmFkcy5nb29nbGVhZHMudjAuY29tbW9uGkNnb29n",
            "bGUvYWRzL2dvb2dsZWFkcy92MC9lbnVtcy9jYWxsX2NvbnZlcnNpb25fcmVw",
            "b3J0aW5nX3N0YXRlLnByb3RvGj1nb29nbGUvYWRzL2dvb2dsZWFkcy92MC9l",
            "bnVtcy9kaXNwbGF5X2FkX2Zvcm1hdF9zZXR0aW5nLnByb3RvGi1nb29nbGUv",
            "YWRzL2dvb2dsZWFkcy92MC9lbnVtcy9taW1lX3R5cGUucHJvdG8aHmdvb2ds",
            "ZS9wcm90b2J1Zi93cmFwcGVycy5wcm90byKkAQoKVGV4dEFkSW5mbxIuCgho",
            "ZWFkbGluZRgBIAEoCzIcLmdvb2dsZS5wcm90b2J1Zi5TdHJpbmdWYWx1ZRIy",
            "CgxkZXNjcmlwdGlvbjEYAiABKAsyHC5nb29nbGUucHJvdG9idWYuU3RyaW5n",
            "VmFsdWUSMgoMZGVzY3JpcHRpb24yGAMgASgLMhwuZ29vZ2xlLnByb3RvYnVm",
            "LlN0cmluZ1ZhbHVlIvcCChJFeHBhbmRlZFRleHRBZEluZm8SNAoOaGVhZGxp",
            "bmVfcGFydDEYASABKAsyHC5nb29nbGUucHJvdG9idWYuU3RyaW5nVmFsdWUS",
            "NAoOaGVhZGxpbmVfcGFydDIYAiABKAsyHC5nb29nbGUucHJvdG9idWYuU3Ry",
            "aW5nVmFsdWUSNAoOaGVhZGxpbmVfcGFydDMYBiABKAsyHC5nb29nbGUucHJv",
            "dG9idWYuU3RyaW5nVmFsdWUSMQoLZGVzY3JpcHRpb24YAyABKAsyHC5nb29n",
            "bGUucHJvdG9idWYuU3RyaW5nVmFsdWUSMgoMZGVzY3JpcHRpb24yGAcgASgL",
            "MhwuZ29vZ2xlLnByb3RvYnVmLlN0cmluZ1ZhbHVlEisKBXBhdGgxGAQgASgL",
            "MhwuZ29vZ2xlLnByb3RvYnVmLlN0cmluZ1ZhbHVlEisKBXBhdGgyGAUgASgL",
            "MhwuZ29vZ2xlLnByb3RvYnVmLlN0cmluZ1ZhbHVlIn0KE0R5bmFtaWNTZWFy",
            "Y2hBZEluZm8SMgoMZGVzY3JpcHRpb24xGAEgASgLMhwuZ29vZ2xlLnByb3Rv",
            "YnVmLlN0cmluZ1ZhbHVlEjIKDGRlc2NyaXB0aW9uMhgCIAEoCzIcLmdvb2ds",
            "ZS5wcm90b2J1Zi5TdHJpbmdWYWx1ZSL3BgoXUmVzcG9uc2l2ZURpc3BsYXlB",
            "ZEluZm8SNAoOc2hvcnRfaGVhZGxpbmUYASABKAsyHC5nb29nbGUucHJvdG9i",
            "dWYuU3RyaW5nVmFsdWUSMwoNbG9uZ19oZWFkbGluZRgCIAEoCzIcLmdvb2ds",
            "ZS5wcm90b2J1Zi5TdHJpbmdWYWx1ZRIxCgtkZXNjcmlwdGlvbhgDIAEoCzIc",
            "Lmdvb2dsZS5wcm90b2J1Zi5TdHJpbmdWYWx1ZRIzCg1idXNpbmVzc19uYW1l",
            "GAQgASgLMhwuZ29vZ2xlLnByb3RvYnVmLlN0cmluZ1ZhbHVlEjgKFGFsbG93",
            "X2ZsZXhpYmxlX2NvbG9yGAUgASgLMhouZ29vZ2xlLnByb3RvYnVmLkJvb2xW",
            "YWx1ZRIyCgxhY2NlbnRfY29sb3IYBiABKAsyHC5nb29nbGUucHJvdG9idWYu",
            "U3RyaW5nVmFsdWUSMAoKbWFpbl9jb2xvchgHIAEoCzIcLmdvb2dsZS5wcm90",
            "b2J1Zi5TdHJpbmdWYWx1ZRI5ChNjYWxsX3RvX2FjdGlvbl90ZXh0GAggASgL",
            "MhwuZ29vZ2xlLnByb3RvYnVmLlN0cmluZ1ZhbHVlEjAKCmxvZ29faW1hZ2UY",
            "CSABKAsyHC5nb29nbGUucHJvdG9idWYuU3RyaW5nVmFsdWUSNwoRc3F1YXJl",
            "X2xvZ29faW1hZ2UYCiABKAsyHC5nb29nbGUucHJvdG9idWYuU3RyaW5nVmFs",
            "dWUSNQoPbWFya2V0aW5nX2ltYWdlGAsgASgLMhwuZ29vZ2xlLnByb3RvYnVm",
            "LlN0cmluZ1ZhbHVlEjwKFnNxdWFyZV9tYXJrZXRpbmdfaW1hZ2UYDCABKAsy",
            "HC5nb29nbGUucHJvdG9idWYuU3RyaW5nVmFsdWUSaAoOZm9ybWF0X3NldHRp",
            "bmcYDSABKA4yUC5nb29nbGUuYWRzLmdvb2dsZWFkcy52MC5lbnVtcy5EaXNw",
            "bGF5QWRGb3JtYXRTZXR0aW5nRW51bS5EaXNwbGF5QWRGb3JtYXRTZXR0aW5n",
            "EjIKDHByaWNlX3ByZWZpeBgOIAEoCzIcLmdvb2dsZS5wcm90b2J1Zi5TdHJp",
            "bmdWYWx1ZRIwCgpwcm9tb190ZXh0GA8gASgLMhwuZ29vZ2xlLnByb3RvYnVm",
            "LlN0cmluZ1ZhbHVlIoUFCg5DYWxsT25seUFkSW5mbxIyCgxjb3VudHJ5X2Nv",
            "ZGUYASABKAsyHC5nb29nbGUucHJvdG9idWYuU3RyaW5nVmFsdWUSMgoMcGhv",
            "bmVfbnVtYmVyGAIgASgLMhwuZ29vZ2xlLnByb3RvYnVmLlN0cmluZ1ZhbHVl",
            "EjMKDWJ1c2luZXNzX25hbWUYAyABKAsyHC5nb29nbGUucHJvdG9idWYuU3Ry",
            "aW5nVmFsdWUSMgoMZGVzY3JpcHRpb24xGAQgASgLMhwuZ29vZ2xlLnByb3Rv",
            "YnVmLlN0cmluZ1ZhbHVlEjIKDGRlc2NyaXB0aW9uMhgFIAEoCzIcLmdvb2ds",
            "ZS5wcm90b2J1Zi5TdHJpbmdWYWx1ZRIwCgxjYWxsX3RyYWNrZWQYBiABKAsy",
            "Gi5nb29nbGUucHJvdG9idWYuQm9vbFZhbHVlEjsKF2Rpc2FibGVfY2FsbF9j",
            "b252ZXJzaW9uGAcgASgLMhouZ29vZ2xlLnByb3RvYnVmLkJvb2xWYWx1ZRJD",
            "Ch1waG9uZV9udW1iZXJfdmVyaWZpY2F0aW9uX3VybBgIIAEoCzIcLmdvb2ds",
            "ZS5wcm90b2J1Zi5TdHJpbmdWYWx1ZRI3ChFjb252ZXJzaW9uX2FjdGlvbhgJ",
            "IAEoCzIcLmdvb2dsZS5wcm90b2J1Zi5TdHJpbmdWYWx1ZRKAAQoaY29udmVy",
            "c2lvbl9yZXBvcnRpbmdfc3RhdGUYCiABKA4yXC5nb29nbGUuYWRzLmdvb2ds",
            "ZWFkcy52MC5lbnVtcy5DYWxsQ29udmVyc2lvblJlcG9ydGluZ1N0YXRlRW51",
            "bS5DYWxsQ29udmVyc2lvblJlcG9ydGluZ1N0YXRlIlAKG0V4cGFuZGVkRHlu",
            "YW1pY1NlYXJjaEFkSW5mbxIxCgtkZXNjcmlwdGlvbhgBIAEoCzIcLmdvb2ds",
            "ZS5wcm90b2J1Zi5TdHJpbmdWYWx1ZSINCgtIb3RlbEFkSW5mbyIVChNTaG9w",
            "cGluZ1NtYXJ0QWRJbmZvIhcKFVNob3BwaW5nUHJvZHVjdEFkSW5mbyKdAwoL",
            "R21haWxBZEluZm8SOwoGdGVhc2VyGAEgASgLMisuZ29vZ2xlLmFkcy5nb29n",
            "bGVhZHMudjAuY29tbW9uLkdtYWlsVGVhc2VyEjIKDGhlYWRlcl9pbWFnZRgC",
            "IAEoCzIcLmdvb2dsZS5wcm90b2J1Zi5TdHJpbmdWYWx1ZRI1Cg9tYXJrZXRp",
            "bmdfaW1hZ2UYAyABKAsyHC5nb29nbGUucHJvdG9idWYuU3RyaW5nVmFsdWUS",
            "PgoYbWFya2V0aW5nX2ltYWdlX2hlYWRsaW5lGAQgASgLMhwuZ29vZ2xlLnBy",
            "b3RvYnVmLlN0cmluZ1ZhbHVlEkEKG21hcmtldGluZ19pbWFnZV9kZXNjcmlw",
            "dGlvbhgFIAEoCzIcLmdvb2dsZS5wcm90b2J1Zi5TdHJpbmdWYWx1ZRJjCiZt",
            "YXJrZXRpbmdfaW1hZ2VfZGlzcGxheV9jYWxsX3RvX2FjdGlvbhgGIAEoCzIz",
            "Lmdvb2dsZS5hZHMuZ29vZ2xlYWRzLnYwLmNvbW1vbi5EaXNwbGF5Q2FsbFRv",
            "QWN0aW9uItcBCgtHbWFpbFRlYXNlchIuCghoZWFkbGluZRgBIAEoCzIcLmdv",
            "b2dsZS5wcm90b2J1Zi5TdHJpbmdWYWx1ZRIxCgtkZXNjcmlwdGlvbhgCIAEo",
            "CzIcLmdvb2dsZS5wcm90b2J1Zi5TdHJpbmdWYWx1ZRIzCg1idXNpbmVzc19u",
            "YW1lGAMgASgLMhwuZ29vZ2xlLnByb3RvYnVmLlN0cmluZ1ZhbHVlEjAKCmxv",
            "Z29faW1hZ2UYBCABKAsyHC5nb29nbGUucHJvdG9idWYuU3RyaW5nVmFsdWUi",
            "cwoTRGlzcGxheUNhbGxUb0FjdGlvbhIqCgR0ZXh0GAEgASgLMhwuZ29vZ2xl",
            "LnByb3RvYnVmLlN0cmluZ1ZhbHVlEjAKCnRleHRfY29sb3IYAiABKAsyHC5n",
            "b29nbGUucHJvdG9idWYuU3RyaW5nVmFsdWUisAQKC0ltYWdlQWRJbmZvEjAK",
            "C3BpeGVsX3dpZHRoGAQgASgLMhsuZ29vZ2xlLnByb3RvYnVmLkludDY0VmFs",
            "dWUSMQoMcGl4ZWxfaGVpZ2h0GAUgASgLMhsuZ29vZ2xlLnByb3RvYnVmLklu",
            "dDY0VmFsdWUSLwoJaW1hZ2VfdXJsGAYgASgLMhwuZ29vZ2xlLnByb3RvYnVm",
            "LlN0cmluZ1ZhbHVlEjgKE3ByZXZpZXdfcGl4ZWxfd2lkdGgYByABKAsyGy5n",
            "b29nbGUucHJvdG9idWYuSW50NjRWYWx1ZRI5ChRwcmV2aWV3X3BpeGVsX2hl",
            "aWdodBgIIAEoCzIbLmdvb2dsZS5wcm90b2J1Zi5JbnQ2NFZhbHVlEjcKEXBy",
            "ZXZpZXdfaW1hZ2VfdXJsGAkgASgLMhwuZ29vZ2xlLnByb3RvYnVmLlN0cmlu",
            "Z1ZhbHVlEkcKCW1pbWVfdHlwZRgKIAEoDjI0Lmdvb2dsZS5hZHMuZ29vZ2xl",
            "YWRzLnYwLmVudW1zLk1pbWVUeXBlRW51bS5NaW1lVHlwZRIqCgRuYW1lGAsg",
            "ASgLMhwuZ29vZ2xlLnByb3RvYnVmLlN0cmluZ1ZhbHVlEjIKCm1lZGlhX2Zp",
            "bGUYASABKAsyHC5nb29nbGUucHJvdG9idWYuU3RyaW5nVmFsdWVIABIrCgRk",
            "YXRhGAIgASgLMhsuZ29vZ2xlLnByb3RvYnVmLkJ5dGVzVmFsdWVIAEIHCgVp",
            "bWFnZSKPAQobVmlkZW9UcnVlVmlld0luU3RyZWFtQWRJbmZvEjkKE2FjdGlv",
            "bl9idXR0b25fbGFiZWwYASABKAsyHC5nb29nbGUucHJvdG9idWYuU3RyaW5n",
            "VmFsdWUSNQoPYWN0aW9uX2hlYWRsaW5lGAIgASgLMhwuZ29vZ2xlLnByb3Rv",
            "YnVmLlN0cmluZ1ZhbHVlIpsBCgtWaWRlb0FkSW5mbxIwCgptZWRpYV9maWxl",
            "GAEgASgLMhwuZ29vZ2xlLnByb3RvYnVmLlN0cmluZ1ZhbHVlElAKCWluX3N0",
            "cmVhbRgCIAEoCzI7Lmdvb2dsZS5hZHMuZ29vZ2xlYWRzLnYwLmNvbW1vbi5W",
            "aWRlb1RydWVWaWV3SW5TdHJlYW1BZEluZm9IAEIICgZmb3JtYXRC6wEKImNv",
            "bS5nb29nbGUuYWRzLmdvb2dsZWFkcy52MC5jb21tb25CEEFkVHlwZUluZm9z",
            "UHJvdG9QAVpEZ29vZ2xlLmdvbGFuZy5vcmcvZ2VucHJvdG8vZ29vZ2xlYXBp",
            "cy9hZHMvZ29vZ2xlYWRzL3YwL2NvbW1vbjtjb21tb26iAgNHQUGqAh5Hb29n",
            "bGUuQWRzLkdvb2dsZUFkcy5WMC5Db21tb27KAh5Hb29nbGVcQWRzXEdvb2ds",
            "ZUFkc1xWMFxDb21tb27qAiJHb29nbGU6OkFkczo6R29vZ2xlQWRzOjpWMDo6",
            "Q29tbW9uYgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Google.Ads.GoogleAds.V0.Enums.CallConversionReportingStateReflection.Descriptor, global::Google.Ads.GoogleAds.V0.Enums.DisplayAdFormatSettingReflection.Descriptor, global::Google.Ads.GoogleAds.V0.Enums.MimeTypeReflection.Descriptor, global::Google.Protobuf.WellKnownTypes.WrappersReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Ads.GoogleAds.V0.Common.TextAdInfo), global::Google.Ads.GoogleAds.V0.Common.TextAdInfo.Parser, new[]{ "Headline", "Description1", "Description2" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Ads.GoogleAds.V0.Common.ExpandedTextAdInfo), global::Google.Ads.GoogleAds.V0.Common.ExpandedTextAdInfo.Parser, new[]{ "HeadlinePart1", "HeadlinePart2", "HeadlinePart3", "Description", "Description2", "Path1", "Path2" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Ads.GoogleAds.V0.Common.DynamicSearchAdInfo), global::Google.Ads.GoogleAds.V0.Common.DynamicSearchAdInfo.Parser, new[]{ "Description1", "Description2" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Ads.GoogleAds.V0.Common.ResponsiveDisplayAdInfo), global::Google.Ads.GoogleAds.V0.Common.ResponsiveDisplayAdInfo.Parser, new[]{ "ShortHeadline", "LongHeadline", "Description", "BusinessName", "AllowFlexibleColor", "AccentColor", "MainColor", "CallToActionText", "LogoImage", "SquareLogoImage", "MarketingImage", "SquareMarketingImage", "FormatSetting", "PricePrefix", "PromoText" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Ads.GoogleAds.V0.Common.CallOnlyAdInfo), global::Google.Ads.GoogleAds.V0.Common.CallOnlyAdInfo.Parser, new[]{ "CountryCode", "PhoneNumber", "BusinessName", "Description1", "Description2", "CallTracked", "DisableCallConversion", "PhoneNumberVerificationUrl", "ConversionAction", "ConversionReportingState" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Ads.GoogleAds.V0.Common.ExpandedDynamicSearchAdInfo), global::Google.Ads.GoogleAds.V0.Common.ExpandedDynamicSearchAdInfo.Parser, new[]{ "Description" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Ads.GoogleAds.V0.Common.HotelAdInfo), global::Google.Ads.GoogleAds.V0.Common.HotelAdInfo.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Ads.GoogleAds.V0.Common.ShoppingSmartAdInfo), global::Google.Ads.GoogleAds.V0.Common.ShoppingSmartAdInfo.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Ads.GoogleAds.V0.Common.ShoppingProductAdInfo), global::Google.Ads.GoogleAds.V0.Common.ShoppingProductAdInfo.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Ads.GoogleAds.V0.Common.GmailAdInfo), global::Google.Ads.GoogleAds.V0.Common.GmailAdInfo.Parser, new[]{ "Teaser", "HeaderImage", "MarketingImage", "MarketingImageHeadline", "MarketingImageDescription", "MarketingImageDisplayCallToAction" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Ads.GoogleAds.V0.Common.GmailTeaser), global::Google.Ads.GoogleAds.V0.Common.GmailTeaser.Parser, new[]{ "Headline", "Description", "BusinessName", "LogoImage" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Ads.GoogleAds.V0.Common.DisplayCallToAction), global::Google.Ads.GoogleAds.V0.Common.DisplayCallToAction.Parser, new[]{ "Text", "TextColor" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Ads.GoogleAds.V0.Common.ImageAdInfo), global::Google.Ads.GoogleAds.V0.Common.ImageAdInfo.Parser, new[]{ "PixelWidth", "PixelHeight", "ImageUrl", "PreviewPixelWidth", "PreviewPixelHeight", "PreviewImageUrl", "MimeType", "Name", "MediaFile", "Data" }, new[]{ "Image" }, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Ads.GoogleAds.V0.Common.VideoTrueViewInStreamAdInfo), global::Google.Ads.GoogleAds.V0.Common.VideoTrueViewInStreamAdInfo.Parser, new[]{ "ActionButtonLabel", "ActionHeadline" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Ads.GoogleAds.V0.Common.VideoAdInfo), global::Google.Ads.GoogleAds.V0.Common.VideoAdInfo.Parser, new[]{ "MediaFile", "InStream" }, new[]{ "Format" }, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  /// <summary>
  /// A text ad.
  /// </summary>
  public sealed partial class TextAdInfo : pb::IMessage<TextAdInfo> {
    private static readonly pb::MessageParser<TextAdInfo> _parser = new pb::MessageParser<TextAdInfo>(() => new TextAdInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TextAdInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Ads.GoogleAds.V0.Common.AdTypeInfosReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TextAdInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TextAdInfo(TextAdInfo other) : this() {
      Headline = other.Headline;
      Description1 = other.Description1;
      Description2 = other.Description2;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TextAdInfo Clone() {
      return new TextAdInfo(this);
    }

    /// <summary>Field number for the "headline" field.</summary>
    public const int HeadlineFieldNumber = 1;
    private static readonly pb::FieldCodec<string> _single_headline_codec = pb::FieldCodec.ForClassWrapper<string>(10);
    private string headline_;
    /// <summary>
    /// The headline of the ad.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Headline {
      get { return headline_; }
      set {
        headline_ = value;
      }
    }

    /// <summary>Field number for the "description1" field.</summary>
    public const int Description1FieldNumber = 2;
    private static readonly pb::FieldCodec<string> _single_description1_codec = pb::FieldCodec.ForClassWrapper<string>(18);
    private string description1_;
    /// <summary>
    /// The first line of the ad's description.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Description1 {
      get { return description1_; }
      set {
        description1_ = value;
      }
    }

    /// <summary>Field number for the "description2" field.</summary>
    public const int Description2FieldNumber = 3;
    private static readonly pb::FieldCodec<string> _single_description2_codec = pb::FieldCodec.ForClassWrapper<string>(26);
    private string description2_;
    /// <summary>
    /// The second line of the ad's description.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Description2 {
      get { return description2_; }
      set {
        description2_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TextAdInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TextAdInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Headline != other.Headline) return false;
      if (Description1 != other.Description1) return false;
      if (Description2 != other.Description2) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (headline_ != null) hash ^= Headline.GetHashCode();
      if (description1_ != null) hash ^= Description1.GetHashCode();
      if (description2_ != null) hash ^= Description2.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (headline_ != null) {
        _single_headline_codec.WriteTagAndValue(output, Headline);
      }
      if (description1_ != null) {
        _single_description1_codec.WriteTagAndValue(output, Description1);
      }
      if (description2_ != null) {
        _single_description2_codec.WriteTagAndValue(output, Description2);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (headline_ != null) {
        size += _single_headline_codec.CalculateSizeWithTag(Headline);
      }
      if (description1_ != null) {
        size += _single_description1_codec.CalculateSizeWithTag(Description1);
      }
      if (description2_ != null) {
        size += _single_description2_codec.CalculateSizeWithTag(Description2);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TextAdInfo other) {
      if (other == null) {
        return;
      }
      if (other.headline_ != null) {
        if (headline_ == null || other.Headline != "") {
          Headline = other.Headline;
        }
      }
      if (other.description1_ != null) {
        if (description1_ == null || other.Description1 != "") {
          Description1 = other.Description1;
        }
      }
      if (other.description2_ != null) {
        if (description2_ == null || other.Description2 != "") {
          Description2 = other.Description2;
        }
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            string value = _single_headline_codec.Read(input);
            if (headline_ == null || value != "") {
              Headline = value;
            }
            break;
          }
          case 18: {
            string value = _single_description1_codec.Read(input);
            if (description1_ == null || value != "") {
              Description1 = value;
            }
            break;
          }
          case 26: {
            string value = _single_description2_codec.Read(input);
            if (description2_ == null || value != "") {
              Description2 = value;
            }
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// An expanded text ad.
  /// </summary>
  public sealed partial class ExpandedTextAdInfo : pb::IMessage<ExpandedTextAdInfo> {
    private static readonly pb::MessageParser<ExpandedTextAdInfo> _parser = new pb::MessageParser<ExpandedTextAdInfo>(() => new ExpandedTextAdInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ExpandedTextAdInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Ads.GoogleAds.V0.Common.AdTypeInfosReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ExpandedTextAdInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ExpandedTextAdInfo(ExpandedTextAdInfo other) : this() {
      HeadlinePart1 = other.HeadlinePart1;
      HeadlinePart2 = other.HeadlinePart2;
      HeadlinePart3 = other.HeadlinePart3;
      Description = other.Description;
      Description2 = other.Description2;
      Path1 = other.Path1;
      Path2 = other.Path2;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ExpandedTextAdInfo Clone() {
      return new ExpandedTextAdInfo(this);
    }

    /// <summary>Field number for the "headline_part1" field.</summary>
    public const int HeadlinePart1FieldNumber = 1;
    private static readonly pb::FieldCodec<string> _single_headlinePart1_codec = pb::FieldCodec.ForClassWrapper<string>(10);
    private string headlinePart1_;
    /// <summary>
    /// The first part of the ad's headline.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string HeadlinePart1 {
      get { return headlinePart1_; }
      set {
        headlinePart1_ = value;
      }
    }

    /// <summary>Field number for the "headline_part2" field.</summary>
    public const int HeadlinePart2FieldNumber = 2;
    private static readonly pb::FieldCodec<string> _single_headlinePart2_codec = pb::FieldCodec.ForClassWrapper<string>(18);
    private string headlinePart2_;
    /// <summary>
    /// The second part of the ad's headline.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string HeadlinePart2 {
      get { return headlinePart2_; }
      set {
        headlinePart2_ = value;
      }
    }

    /// <summary>Field number for the "headline_part3" field.</summary>
    public const int HeadlinePart3FieldNumber = 6;
    private static readonly pb::FieldCodec<string> _single_headlinePart3_codec = pb::FieldCodec.ForClassWrapper<string>(50);
    private string headlinePart3_;
    /// <summary>
    /// The third part of the ad's headline.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string HeadlinePart3 {
      get { return headlinePart3_; }
      set {
        headlinePart3_ = value;
      }
    }

    /// <summary>Field number for the "description" field.</summary>
    public const int DescriptionFieldNumber = 3;
    private static readonly pb::FieldCodec<string> _single_description_codec = pb::FieldCodec.ForClassWrapper<string>(26);
    private string description_;
    /// <summary>
    /// The description of the ad.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Description {
      get { return description_; }
      set {
        description_ = value;
      }
    }

    /// <summary>Field number for the "description2" field.</summary>
    public const int Description2FieldNumber = 7;
    private static readonly pb::FieldCodec<string> _single_description2_codec = pb::FieldCodec.ForClassWrapper<string>(58);
    private string description2_;
    /// <summary>
    /// The second description of the ad.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Description2 {
      get { return description2_; }
      set {
        description2_ = value;
      }
    }

    /// <summary>Field number for the "path1" field.</summary>
    public const int Path1FieldNumber = 4;
    private static readonly pb::FieldCodec<string> _single_path1_codec = pb::FieldCodec.ForClassWrapper<string>(34);
    private string path1_;
    /// <summary>
    /// The text that can appear alongside the ad's displayed URL.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Path1 {
      get { return path1_; }
      set {
        path1_ = value;
      }
    }

    /// <summary>Field number for the "path2" field.</summary>
    public const int Path2FieldNumber = 5;
    private static readonly pb::FieldCodec<string> _single_path2_codec = pb::FieldCodec.ForClassWrapper<string>(42);
    private string path2_;
    /// <summary>
    /// Additional text that can appear alongside the ad's displayed URL.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Path2 {
      get { return path2_; }
      set {
        path2_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ExpandedTextAdInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ExpandedTextAdInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (HeadlinePart1 != other.HeadlinePart1) return false;
      if (HeadlinePart2 != other.HeadlinePart2) return false;
      if (HeadlinePart3 != other.HeadlinePart3) return false;
      if (Description != other.Description) return false;
      if (Description2 != other.Description2) return false;
      if (Path1 != other.Path1) return false;
      if (Path2 != other.Path2) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (headlinePart1_ != null) hash ^= HeadlinePart1.GetHashCode();
      if (headlinePart2_ != null) hash ^= HeadlinePart2.GetHashCode();
      if (headlinePart3_ != null) hash ^= HeadlinePart3.GetHashCode();
      if (description_ != null) hash ^= Description.GetHashCode();
      if (description2_ != null) hash ^= Description2.GetHashCode();
      if (path1_ != null) hash ^= Path1.GetHashCode();
      if (path2_ != null) hash ^= Path2.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (headlinePart1_ != null) {
        _single_headlinePart1_codec.WriteTagAndValue(output, HeadlinePart1);
      }
      if (headlinePart2_ != null) {
        _single_headlinePart2_codec.WriteTagAndValue(output, HeadlinePart2);
      }
      if (description_ != null) {
        _single_description_codec.WriteTagAndValue(output, Description);
      }
      if (path1_ != null) {
        _single_path1_codec.WriteTagAndValue(output, Path1);
      }
      if (path2_ != null) {
        _single_path2_codec.WriteTagAndValue(output, Path2);
      }
      if (headlinePart3_ != null) {
        _single_headlinePart3_codec.WriteTagAndValue(output, HeadlinePart3);
      }
      if (description2_ != null) {
        _single_description2_codec.WriteTagAndValue(output, Description2);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (headlinePart1_ != null) {
        size += _single_headlinePart1_codec.CalculateSizeWithTag(HeadlinePart1);
      }
      if (headlinePart2_ != null) {
        size += _single_headlinePart2_codec.CalculateSizeWithTag(HeadlinePart2);
      }
      if (headlinePart3_ != null) {
        size += _single_headlinePart3_codec.CalculateSizeWithTag(HeadlinePart3);
      }
      if (description_ != null) {
        size += _single_description_codec.CalculateSizeWithTag(Description);
      }
      if (description2_ != null) {
        size += _single_description2_codec.CalculateSizeWithTag(Description2);
      }
      if (path1_ != null) {
        size += _single_path1_codec.CalculateSizeWithTag(Path1);
      }
      if (path2_ != null) {
        size += _single_path2_codec.CalculateSizeWithTag(Path2);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ExpandedTextAdInfo other) {
      if (other == null) {
        return;
      }
      if (other.headlinePart1_ != null) {
        if (headlinePart1_ == null || other.HeadlinePart1 != "") {
          HeadlinePart1 = other.HeadlinePart1;
        }
      }
      if (other.headlinePart2_ != null) {
        if (headlinePart2_ == null || other.HeadlinePart2 != "") {
          HeadlinePart2 = other.HeadlinePart2;
        }
      }
      if (other.headlinePart3_ != null) {
        if (headlinePart3_ == null || other.HeadlinePart3 != "") {
          HeadlinePart3 = other.HeadlinePart3;
        }
      }
      if (other.description_ != null) {
        if (description_ == null || other.Description != "") {
          Description = other.Description;
        }
      }
      if (other.description2_ != null) {
        if (description2_ == null || other.Description2 != "") {
          Description2 = other.Description2;
        }
      }
      if (other.path1_ != null) {
        if (path1_ == null || other.Path1 != "") {
          Path1 = other.Path1;
        }
      }
      if (other.path2_ != null) {
        if (path2_ == null || other.Path2 != "") {
          Path2 = other.Path2;
        }
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            string value = _single_headlinePart1_codec.Read(input);
            if (headlinePart1_ == null || value != "") {
              HeadlinePart1 = value;
            }
            break;
          }
          case 18: {
            string value = _single_headlinePart2_codec.Read(input);
            if (headlinePart2_ == null || value != "") {
              HeadlinePart2 = value;
            }
            break;
          }
          case 26: {
            string value = _single_description_codec.Read(input);
            if (description_ == null || value != "") {
              Description = value;
            }
            break;
          }
          case 34: {
            string value = _single_path1_codec.Read(input);
            if (path1_ == null || value != "") {
              Path1 = value;
            }
            break;
          }
          case 42: {
            string value = _single_path2_codec.Read(input);
            if (path2_ == null || value != "") {
              Path2 = value;
            }
            break;
          }
          case 50: {
            string value = _single_headlinePart3_codec.Read(input);
            if (headlinePart3_ == null || value != "") {
              HeadlinePart3 = value;
            }
            break;
          }
          case 58: {
            string value = _single_description2_codec.Read(input);
            if (description2_ == null || value != "") {
              Description2 = value;
            }
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// A dynamic search ad.
  /// </summary>
  public sealed partial class DynamicSearchAdInfo : pb::IMessage<DynamicSearchAdInfo> {
    private static readonly pb::MessageParser<DynamicSearchAdInfo> _parser = new pb::MessageParser<DynamicSearchAdInfo>(() => new DynamicSearchAdInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DynamicSearchAdInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Ads.GoogleAds.V0.Common.AdTypeInfosReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DynamicSearchAdInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DynamicSearchAdInfo(DynamicSearchAdInfo other) : this() {
      Description1 = other.Description1;
      Description2 = other.Description2;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DynamicSearchAdInfo Clone() {
      return new DynamicSearchAdInfo(this);
    }

    /// <summary>Field number for the "description1" field.</summary>
    public const int Description1FieldNumber = 1;
    private static readonly pb::FieldCodec<string> _single_description1_codec = pb::FieldCodec.ForClassWrapper<string>(10);
    private string description1_;
    /// <summary>
    /// The first line of the ad's description.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Description1 {
      get { return description1_; }
      set {
        description1_ = value;
      }
    }

    /// <summary>Field number for the "description2" field.</summary>
    public const int Description2FieldNumber = 2;
    private static readonly pb::FieldCodec<string> _single_description2_codec = pb::FieldCodec.ForClassWrapper<string>(18);
    private string description2_;
    /// <summary>
    /// The second line of the ad's description.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Description2 {
      get { return description2_; }
      set {
        description2_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DynamicSearchAdInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DynamicSearchAdInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Description1 != other.Description1) return false;
      if (Description2 != other.Description2) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (description1_ != null) hash ^= Description1.GetHashCode();
      if (description2_ != null) hash ^= Description2.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (description1_ != null) {
        _single_description1_codec.WriteTagAndValue(output, Description1);
      }
      if (description2_ != null) {
        _single_description2_codec.WriteTagAndValue(output, Description2);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (description1_ != null) {
        size += _single_description1_codec.CalculateSizeWithTag(Description1);
      }
      if (description2_ != null) {
        size += _single_description2_codec.CalculateSizeWithTag(Description2);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DynamicSearchAdInfo other) {
      if (other == null) {
        return;
      }
      if (other.description1_ != null) {
        if (description1_ == null || other.Description1 != "") {
          Description1 = other.Description1;
        }
      }
      if (other.description2_ != null) {
        if (description2_ == null || other.Description2 != "") {
          Description2 = other.Description2;
        }
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            string value = _single_description1_codec.Read(input);
            if (description1_ == null || value != "") {
              Description1 = value;
            }
            break;
          }
          case 18: {
            string value = _single_description2_codec.Read(input);
            if (description2_ == null || value != "") {
              Description2 = value;
            }
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// A responsive display ad.
  /// </summary>
  public sealed partial class ResponsiveDisplayAdInfo : pb::IMessage<ResponsiveDisplayAdInfo> {
    private static readonly pb::MessageParser<ResponsiveDisplayAdInfo> _parser = new pb::MessageParser<ResponsiveDisplayAdInfo>(() => new ResponsiveDisplayAdInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ResponsiveDisplayAdInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Ads.GoogleAds.V0.Common.AdTypeInfosReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ResponsiveDisplayAdInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ResponsiveDisplayAdInfo(ResponsiveDisplayAdInfo other) : this() {
      ShortHeadline = other.ShortHeadline;
      LongHeadline = other.LongHeadline;
      Description = other.Description;
      BusinessName = other.BusinessName;
      AllowFlexibleColor = other.AllowFlexibleColor;
      AccentColor = other.AccentColor;
      MainColor = other.MainColor;
      CallToActionText = other.CallToActionText;
      LogoImage = other.LogoImage;
      SquareLogoImage = other.SquareLogoImage;
      MarketingImage = other.MarketingImage;
      SquareMarketingImage = other.SquareMarketingImage;
      formatSetting_ = other.formatSetting_;
      PricePrefix = other.PricePrefix;
      PromoText = other.PromoText;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ResponsiveDisplayAdInfo Clone() {
      return new ResponsiveDisplayAdInfo(this);
    }

    /// <summary>Field number for the "short_headline" field.</summary>
    public const int ShortHeadlineFieldNumber = 1;
    private static readonly pb::FieldCodec<string> _single_shortHeadline_codec = pb::FieldCodec.ForClassWrapper<string>(10);
    private string shortHeadline_;
    /// <summary>
    /// The short version of the ad's headline.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ShortHeadline {
      get { return shortHeadline_; }
      set {
        shortHeadline_ = value;
      }
    }

    /// <summary>Field number for the "long_headline" field.</summary>
    public const int LongHeadlineFieldNumber = 2;
    private static readonly pb::FieldCodec<string> _single_longHeadline_codec = pb::FieldCodec.ForClassWrapper<string>(18);
    private string longHeadline_;
    /// <summary>
    /// The long version of the ad's headline.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string LongHeadline {
      get { return longHeadline_; }
      set {
        longHeadline_ = value;
      }
    }

    /// <summary>Field number for the "description" field.</summary>
    public const int DescriptionFieldNumber = 3;
    private static readonly pb::FieldCodec<string> _single_description_codec = pb::FieldCodec.ForClassWrapper<string>(26);
    private string description_;
    /// <summary>
    /// The description of the ad.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Description {
      get { return description_; }
      set {
        description_ = value;
      }
    }

    /// <summary>Field number for the "business_name" field.</summary>
    public const int BusinessNameFieldNumber = 4;
    private static readonly pb::FieldCodec<string> _single_businessName_codec = pb::FieldCodec.ForClassWrapper<string>(34);
    private string businessName_;
    /// <summary>
    /// The business name in the ad.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string BusinessName {
      get { return businessName_; }
      set {
        businessName_ = value;
      }
    }

    /// <summary>Field number for the "allow_flexible_color" field.</summary>
    public const int AllowFlexibleColorFieldNumber = 5;
    private static readonly pb::FieldCodec<bool?> _single_allowFlexibleColor_codec = pb::FieldCodec.ForStructWrapper<bool>(42);
    private bool? allowFlexibleColor_;
    /// <summary>
    /// Advertiser's consent to allow flexible color. When true, the ad may be
    /// served with different color if necessary. When false, the ad will be served
    /// with the specified colors or a neutral color.
    /// The default value is true.
    /// Must be true if main_color and accent_color are not set.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool? AllowFlexibleColor {
      get { return allowFlexibleColor_; }
      set {
        allowFlexibleColor_ = value;
      }
    }

    /// <summary>Field number for the "accent_color" field.</summary>
    public const int AccentColorFieldNumber = 6;
    private static readonly pb::FieldCodec<string> _single_accentColor_codec = pb::FieldCodec.ForClassWrapper<string>(50);
    private string accentColor_;
    /// <summary>
    /// The accent color of the ad in hexadecimal, e.g. #ffffff for white.
    /// If one of main_color and accent_color is set, the other is required as
    /// well.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string AccentColor {
      get { return accentColor_; }
      set {
        accentColor_ = value;
      }
    }

    /// <summary>Field number for the "main_color" field.</summary>
    public const int MainColorFieldNumber = 7;
    private static readonly pb::FieldCodec<string> _single_mainColor_codec = pb::FieldCodec.ForClassWrapper<string>(58);
    private string mainColor_;
    /// <summary>
    /// The main color of the ad in hexadecimal, e.g. #ffffff for white.
    /// If one of main_color and accent_color is set, the other is required as
    /// well.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string MainColor {
      get { return mainColor_; }
      set {
        mainColor_ = value;
      }
    }

    /// <summary>Field number for the "call_to_action_text" field.</summary>
    public const int CallToActionTextFieldNumber = 8;
    private static readonly pb::FieldCodec<string> _single_callToActionText_codec = pb::FieldCodec.ForClassWrapper<string>(66);
    private string callToActionText_;
    /// <summary>
    /// The call-to-action text for the ad.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string CallToActionText {
      get { return callToActionText_; }
      set {
        callToActionText_ = value;
      }
    }

    /// <summary>Field number for the "logo_image" field.</summary>
    public const int LogoImageFieldNumber = 9;
    private static readonly pb::FieldCodec<string> _single_logoImage_codec = pb::FieldCodec.ForClassWrapper<string>(74);
    private string logoImage_;
    /// <summary>
    /// The MediaFile resource name of the logo image used in the ad.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string LogoImage {
      get { return logoImage_; }
      set {
        logoImage_ = value;
      }
    }

    /// <summary>Field number for the "square_logo_image" field.</summary>
    public const int SquareLogoImageFieldNumber = 10;
    private static readonly pb::FieldCodec<string> _single_squareLogoImage_codec = pb::FieldCodec.ForClassWrapper<string>(82);
    private string squareLogoImage_;
    /// <summary>
    /// The MediaFile resource name of the square logo image used in the ad.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SquareLogoImage {
      get { return squareLogoImage_; }
      set {
        squareLogoImage_ = value;
      }
    }

    /// <summary>Field number for the "marketing_image" field.</summary>
    public const int MarketingImageFieldNumber = 11;
    private static readonly pb::FieldCodec<string> _single_marketingImage_codec = pb::FieldCodec.ForClassWrapper<string>(90);
    private string marketingImage_;
    /// <summary>
    /// The MediaFile resource name of the marketing image used in the ad.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string MarketingImage {
      get { return marketingImage_; }
      set {
        marketingImage_ = value;
      }
    }

    /// <summary>Field number for the "square_marketing_image" field.</summary>
    public const int SquareMarketingImageFieldNumber = 12;
    private static readonly pb::FieldCodec<string> _single_squareMarketingImage_codec = pb::FieldCodec.ForClassWrapper<string>(98);
    private string squareMarketingImage_;
    /// <summary>
    /// The MediaFile resource name of the square marketing image used in the ad.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SquareMarketingImage {
      get { return squareMarketingImage_; }
      set {
        squareMarketingImage_ = value;
      }
    }

    /// <summary>Field number for the "format_setting" field.</summary>
    public const int FormatSettingFieldNumber = 13;
    private global::Google.Ads.GoogleAds.V0.Enums.DisplayAdFormatSettingEnum.Types.DisplayAdFormatSetting formatSetting_ = 0;
    /// <summary>
    /// Specifies which format the ad will be served in. Default is ALL_FORMATS.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Ads.GoogleAds.V0.Enums.DisplayAdFormatSettingEnum.Types.DisplayAdFormatSetting FormatSetting {
      get { return formatSetting_; }
      set {
        formatSetting_ = value;
      }
    }

    /// <summary>Field number for the "price_prefix" field.</summary>
    public const int PricePrefixFieldNumber = 14;
    private static readonly pb::FieldCodec<string> _single_pricePrefix_codec = pb::FieldCodec.ForClassWrapper<string>(114);
    private string pricePrefix_;
    /// <summary>
    /// Prefix before price. E.g. 'as low as'.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PricePrefix {
      get { return pricePrefix_; }
      set {
        pricePrefix_ = value;
      }
    }

    /// <summary>Field number for the "promo_text" field.</summary>
    public const int PromoTextFieldNumber = 15;
    private static readonly pb::FieldCodec<string> _single_promoText_codec = pb::FieldCodec.ForClassWrapper<string>(122);
    private string promoText_;
    /// <summary>
    /// Promotion text used for dyanmic formats of responsive ads. For example
    /// 'Free two-day shipping'.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PromoText {
      get { return promoText_; }
      set {
        promoText_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ResponsiveDisplayAdInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ResponsiveDisplayAdInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ShortHeadline != other.ShortHeadline) return false;
      if (LongHeadline != other.LongHeadline) return false;
      if (Description != other.Description) return false;
      if (BusinessName != other.BusinessName) return false;
      if (AllowFlexibleColor != other.AllowFlexibleColor) return false;
      if (AccentColor != other.AccentColor) return false;
      if (MainColor != other.MainColor) return false;
      if (CallToActionText != other.CallToActionText) return false;
      if (LogoImage != other.LogoImage) return false;
      if (SquareLogoImage != other.SquareLogoImage) return false;
      if (MarketingImage != other.MarketingImage) return false;
      if (SquareMarketingImage != other.SquareMarketingImage) return false;
      if (FormatSetting != other.FormatSetting) return false;
      if (PricePrefix != other.PricePrefix) return false;
      if (PromoText != other.PromoText) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (shortHeadline_ != null) hash ^= ShortHeadline.GetHashCode();
      if (longHeadline_ != null) hash ^= LongHeadline.GetHashCode();
      if (description_ != null) hash ^= Description.GetHashCode();
      if (businessName_ != null) hash ^= BusinessName.GetHashCode();
      if (allowFlexibleColor_ != null) hash ^= AllowFlexibleColor.GetHashCode();
      if (accentColor_ != null) hash ^= AccentColor.GetHashCode();
      if (mainColor_ != null) hash ^= MainColor.GetHashCode();
      if (callToActionText_ != null) hash ^= CallToActionText.GetHashCode();
      if (logoImage_ != null) hash ^= LogoImage.GetHashCode();
      if (squareLogoImage_ != null) hash ^= SquareLogoImage.GetHashCode();
      if (marketingImage_ != null) hash ^= MarketingImage.GetHashCode();
      if (squareMarketingImage_ != null) hash ^= SquareMarketingImage.GetHashCode();
      if (FormatSetting != 0) hash ^= FormatSetting.GetHashCode();
      if (pricePrefix_ != null) hash ^= PricePrefix.GetHashCode();
      if (promoText_ != null) hash ^= PromoText.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (shortHeadline_ != null) {
        _single_shortHeadline_codec.WriteTagAndValue(output, ShortHeadline);
      }
      if (longHeadline_ != null) {
        _single_longHeadline_codec.WriteTagAndValue(output, LongHeadline);
      }
      if (description_ != null) {
        _single_description_codec.WriteTagAndValue(output, Description);
      }
      if (businessName_ != null) {
        _single_businessName_codec.WriteTagAndValue(output, BusinessName);
      }
      if (allowFlexibleColor_ != null) {
        _single_allowFlexibleColor_codec.WriteTagAndValue(output, AllowFlexibleColor);
      }
      if (accentColor_ != null) {
        _single_accentColor_codec.WriteTagAndValue(output, AccentColor);
      }
      if (mainColor_ != null) {
        _single_mainColor_codec.WriteTagAndValue(output, MainColor);
      }
      if (callToActionText_ != null) {
        _single_callToActionText_codec.WriteTagAndValue(output, CallToActionText);
      }
      if (logoImage_ != null) {
        _single_logoImage_codec.WriteTagAndValue(output, LogoImage);
      }
      if (squareLogoImage_ != null) {
        _single_squareLogoImage_codec.WriteTagAndValue(output, SquareLogoImage);
      }
      if (marketingImage_ != null) {
        _single_marketingImage_codec.WriteTagAndValue(output, MarketingImage);
      }
      if (squareMarketingImage_ != null) {
        _single_squareMarketingImage_codec.WriteTagAndValue(output, SquareMarketingImage);
      }
      if (FormatSetting != 0) {
        output.WriteRawTag(104);
        output.WriteEnum((int) FormatSetting);
      }
      if (pricePrefix_ != null) {
        _single_pricePrefix_codec.WriteTagAndValue(output, PricePrefix);
      }
      if (promoText_ != null) {
        _single_promoText_codec.WriteTagAndValue(output, PromoText);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (shortHeadline_ != null) {
        size += _single_shortHeadline_codec.CalculateSizeWithTag(ShortHeadline);
      }
      if (longHeadline_ != null) {
        size += _single_longHeadline_codec.CalculateSizeWithTag(LongHeadline);
      }
      if (description_ != null) {
        size += _single_description_codec.CalculateSizeWithTag(Description);
      }
      if (businessName_ != null) {
        size += _single_businessName_codec.CalculateSizeWithTag(BusinessName);
      }
      if (allowFlexibleColor_ != null) {
        size += _single_allowFlexibleColor_codec.CalculateSizeWithTag(AllowFlexibleColor);
      }
      if (accentColor_ != null) {
        size += _single_accentColor_codec.CalculateSizeWithTag(AccentColor);
      }
      if (mainColor_ != null) {
        size += _single_mainColor_codec.CalculateSizeWithTag(MainColor);
      }
      if (callToActionText_ != null) {
        size += _single_callToActionText_codec.CalculateSizeWithTag(CallToActionText);
      }
      if (logoImage_ != null) {
        size += _single_logoImage_codec.CalculateSizeWithTag(LogoImage);
      }
      if (squareLogoImage_ != null) {
        size += _single_squareLogoImage_codec.CalculateSizeWithTag(SquareLogoImage);
      }
      if (marketingImage_ != null) {
        size += _single_marketingImage_codec.CalculateSizeWithTag(MarketingImage);
      }
      if (squareMarketingImage_ != null) {
        size += _single_squareMarketingImage_codec.CalculateSizeWithTag(SquareMarketingImage);
      }
      if (FormatSetting != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) FormatSetting);
      }
      if (pricePrefix_ != null) {
        size += _single_pricePrefix_codec.CalculateSizeWithTag(PricePrefix);
      }
      if (promoText_ != null) {
        size += _single_promoText_codec.CalculateSizeWithTag(PromoText);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ResponsiveDisplayAdInfo other) {
      if (other == null) {
        return;
      }
      if (other.shortHeadline_ != null) {
        if (shortHeadline_ == null || other.ShortHeadline != "") {
          ShortHeadline = other.ShortHeadline;
        }
      }
      if (other.longHeadline_ != null) {
        if (longHeadline_ == null || other.LongHeadline != "") {
          LongHeadline = other.LongHeadline;
        }
      }
      if (other.description_ != null) {
        if (description_ == null || other.Description != "") {
          Description = other.Description;
        }
      }
      if (other.businessName_ != null) {
        if (businessName_ == null || other.BusinessName != "") {
          BusinessName = other.BusinessName;
        }
      }
      if (other.allowFlexibleColor_ != null) {
        if (allowFlexibleColor_ == null || other.AllowFlexibleColor != false) {
          AllowFlexibleColor = other.AllowFlexibleColor;
        }
      }
      if (other.accentColor_ != null) {
        if (accentColor_ == null || other.AccentColor != "") {
          AccentColor = other.AccentColor;
        }
      }
      if (other.mainColor_ != null) {
        if (mainColor_ == null || other.MainColor != "") {
          MainColor = other.MainColor;
        }
      }
      if (other.callToActionText_ != null) {
        if (callToActionText_ == null || other.CallToActionText != "") {
          CallToActionText = other.CallToActionText;
        }
      }
      if (other.logoImage_ != null) {
        if (logoImage_ == null || other.LogoImage != "") {
          LogoImage = other.LogoImage;
        }
      }
      if (other.squareLogoImage_ != null) {
        if (squareLogoImage_ == null || other.SquareLogoImage != "") {
          SquareLogoImage = other.SquareLogoImage;
        }
      }
      if (other.marketingImage_ != null) {
        if (marketingImage_ == null || other.MarketingImage != "") {
          MarketingImage = other.MarketingImage;
        }
      }
      if (other.squareMarketingImage_ != null) {
        if (squareMarketingImage_ == null || other.SquareMarketingImage != "") {
          SquareMarketingImage = other.SquareMarketingImage;
        }
      }
      if (other.FormatSetting != 0) {
        FormatSetting = other.FormatSetting;
      }
      if (other.pricePrefix_ != null) {
        if (pricePrefix_ == null || other.PricePrefix != "") {
          PricePrefix = other.PricePrefix;
        }
      }
      if (other.promoText_ != null) {
        if (promoText_ == null || other.PromoText != "") {
          PromoText = other.PromoText;
        }
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            string value = _single_shortHeadline_codec.Read(input);
            if (shortHeadline_ == null || value != "") {
              ShortHeadline = value;
            }
            break;
          }
          case 18: {
            string value = _single_longHeadline_codec.Read(input);
            if (longHeadline_ == null || value != "") {
              LongHeadline = value;
            }
            break;
          }
          case 26: {
            string value = _single_description_codec.Read(input);
            if (description_ == null || value != "") {
              Description = value;
            }
            break;
          }
          case 34: {
            string value = _single_businessName_codec.Read(input);
            if (businessName_ == null || value != "") {
              BusinessName = value;
            }
            break;
          }
          case 42: {
            bool? value = _single_allowFlexibleColor_codec.Read(input);
            if (allowFlexibleColor_ == null || value != false) {
              AllowFlexibleColor = value;
            }
            break;
          }
          case 50: {
            string value = _single_accentColor_codec.Read(input);
            if (accentColor_ == null || value != "") {
              AccentColor = value;
            }
            break;
          }
          case 58: {
            string value = _single_mainColor_codec.Read(input);
            if (mainColor_ == null || value != "") {
              MainColor = value;
            }
            break;
          }
          case 66: {
            string value = _single_callToActionText_codec.Read(input);
            if (callToActionText_ == null || value != "") {
              CallToActionText = value;
            }
            break;
          }
          case 74: {
            string value = _single_logoImage_codec.Read(input);
            if (logoImage_ == null || value != "") {
              LogoImage = value;
            }
            break;
          }
          case 82: {
            string value = _single_squareLogoImage_codec.Read(input);
            if (squareLogoImage_ == null || value != "") {
              SquareLogoImage = value;
            }
            break;
          }
          case 90: {
            string value = _single_marketingImage_codec.Read(input);
            if (marketingImage_ == null || value != "") {
              MarketingImage = value;
            }
            break;
          }
          case 98: {
            string value = _single_squareMarketingImage_codec.Read(input);
            if (squareMarketingImage_ == null || value != "") {
              SquareMarketingImage = value;
            }
            break;
          }
          case 104: {
            formatSetting_ = (global::Google.Ads.GoogleAds.V0.Enums.DisplayAdFormatSettingEnum.Types.DisplayAdFormatSetting) input.ReadEnum();
            break;
          }
          case 114: {
            string value = _single_pricePrefix_codec.Read(input);
            if (pricePrefix_ == null || value != "") {
              PricePrefix = value;
            }
            break;
          }
          case 122: {
            string value = _single_promoText_codec.Read(input);
            if (promoText_ == null || value != "") {
              PromoText = value;
            }
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// A call-only ad.
  /// </summary>
  public sealed partial class CallOnlyAdInfo : pb::IMessage<CallOnlyAdInfo> {
    private static readonly pb::MessageParser<CallOnlyAdInfo> _parser = new pb::MessageParser<CallOnlyAdInfo>(() => new CallOnlyAdInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CallOnlyAdInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Ads.GoogleAds.V0.Common.AdTypeInfosReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CallOnlyAdInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CallOnlyAdInfo(CallOnlyAdInfo other) : this() {
      CountryCode = other.CountryCode;
      PhoneNumber = other.PhoneNumber;
      BusinessName = other.BusinessName;
      Description1 = other.Description1;
      Description2 = other.Description2;
      CallTracked = other.CallTracked;
      DisableCallConversion = other.DisableCallConversion;
      PhoneNumberVerificationUrl = other.PhoneNumberVerificationUrl;
      ConversionAction = other.ConversionAction;
      conversionReportingState_ = other.conversionReportingState_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CallOnlyAdInfo Clone() {
      return new CallOnlyAdInfo(this);
    }

    /// <summary>Field number for the "country_code" field.</summary>
    public const int CountryCodeFieldNumber = 1;
    private static readonly pb::FieldCodec<string> _single_countryCode_codec = pb::FieldCodec.ForClassWrapper<string>(10);
    private string countryCode_;
    /// <summary>
    /// The country code in the ad.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string CountryCode {
      get { return countryCode_; }
      set {
        countryCode_ = value;
      }
    }

    /// <summary>Field number for the "phone_number" field.</summary>
    public const int PhoneNumberFieldNumber = 2;
    private static readonly pb::FieldCodec<string> _single_phoneNumber_codec = pb::FieldCodec.ForClassWrapper<string>(18);
    private string phoneNumber_;
    /// <summary>
    /// The phone number in the ad.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PhoneNumber {
      get { return phoneNumber_; }
      set {
        phoneNumber_ = value;
      }
    }

    /// <summary>Field number for the "business_name" field.</summary>
    public const int BusinessNameFieldNumber = 3;
    private static readonly pb::FieldCodec<string> _single_businessName_codec = pb::FieldCodec.ForClassWrapper<string>(26);
    private string businessName_;
    /// <summary>
    /// The business name in the ad.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string BusinessName {
      get { return businessName_; }
      set {
        businessName_ = value;
      }
    }

    /// <summary>Field number for the "description1" field.</summary>
    public const int Description1FieldNumber = 4;
    private static readonly pb::FieldCodec<string> _single_description1_codec = pb::FieldCodec.ForClassWrapper<string>(34);
    private string description1_;
    /// <summary>
    /// The first line of the ad's description.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Description1 {
      get { return description1_; }
      set {
        description1_ = value;
      }
    }

    /// <summary>Field number for the "description2" field.</summary>
    public const int Description2FieldNumber = 5;
    private static readonly pb::FieldCodec<string> _single_description2_codec = pb::FieldCodec.ForClassWrapper<string>(42);
    private string description2_;
    /// <summary>
    /// The second line of the ad's description.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Description2 {
      get { return description2_; }
      set {
        description2_ = value;
      }
    }

    /// <summary>Field number for the "call_tracked" field.</summary>
    public const int CallTrackedFieldNumber = 6;
    private static readonly pb::FieldCodec<bool?> _single_callTracked_codec = pb::FieldCodec.ForStructWrapper<bool>(50);
    private bool? callTracked_;
    /// <summary>
    /// Whether to enable call tracking for the creative. Enabling call
    /// tracking also enables call conversions.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool? CallTracked {
      get { return callTracked_; }
      set {
        callTracked_ = value;
      }
    }

    /// <summary>Field number for the "disable_call_conversion" field.</summary>
    public const int DisableCallConversionFieldNumber = 7;
    private static readonly pb::FieldCodec<bool?> _single_disableCallConversion_codec = pb::FieldCodec.ForStructWrapper<bool>(58);
    private bool? disableCallConversion_;
    /// <summary>
    /// Whether to disable call conversion for the creative.
    /// If set to `true`, disables call conversions even when `call_tracked` is
    /// `true`.
    /// If `call_tracked` is `false`, this field is ignored.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool? DisableCallConversion {
      get { return disableCallConversion_; }
      set {
        disableCallConversion_ = value;
      }
    }

    /// <summary>Field number for the "phone_number_verification_url" field.</summary>
    public const int PhoneNumberVerificationUrlFieldNumber = 8;
    private static readonly pb::FieldCodec<string> _single_phoneNumberVerificationUrl_codec = pb::FieldCodec.ForClassWrapper<string>(66);
    private string phoneNumberVerificationUrl_;
    /// <summary>
    /// The URL to be used for phone number verification.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PhoneNumberVerificationUrl {
      get { return phoneNumberVerificationUrl_; }
      set {
        phoneNumberVerificationUrl_ = value;
      }
    }

    /// <summary>Field number for the "conversion_action" field.</summary>
    public const int ConversionActionFieldNumber = 9;
    private static readonly pb::FieldCodec<string> _single_conversionAction_codec = pb::FieldCodec.ForClassWrapper<string>(74);
    private string conversionAction_;
    /// <summary>
    /// The conversion action to attribute a call conversion to. If not set a
    /// default conversion action is used. This field only has effect if
    /// call_tracked is set to true. Otherwise this field is ignored.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ConversionAction {
      get { return conversionAction_; }
      set {
        conversionAction_ = value;
      }
    }

    /// <summary>Field number for the "conversion_reporting_state" field.</summary>
    public const int ConversionReportingStateFieldNumber = 10;
    private global::Google.Ads.GoogleAds.V0.Enums.CallConversionReportingStateEnum.Types.CallConversionReportingState conversionReportingState_ = 0;
    /// <summary>
    /// The call conversion behavior of this call only ad. It can use its own call
    /// conversion setting, inherit the account level setting, or be disabled.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Ads.GoogleAds.V0.Enums.CallConversionReportingStateEnum.Types.CallConversionReportingState ConversionReportingState {
      get { return conversionReportingState_; }
      set {
        conversionReportingState_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CallOnlyAdInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CallOnlyAdInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (CountryCode != other.CountryCode) return false;
      if (PhoneNumber != other.PhoneNumber) return false;
      if (BusinessName != other.BusinessName) return false;
      if (Description1 != other.Description1) return false;
      if (Description2 != other.Description2) return false;
      if (CallTracked != other.CallTracked) return false;
      if (DisableCallConversion != other.DisableCallConversion) return false;
      if (PhoneNumberVerificationUrl != other.PhoneNumberVerificationUrl) return false;
      if (ConversionAction != other.ConversionAction) return false;
      if (ConversionReportingState != other.ConversionReportingState) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (countryCode_ != null) hash ^= CountryCode.GetHashCode();
      if (phoneNumber_ != null) hash ^= PhoneNumber.GetHashCode();
      if (businessName_ != null) hash ^= BusinessName.GetHashCode();
      if (description1_ != null) hash ^= Description1.GetHashCode();
      if (description2_ != null) hash ^= Description2.GetHashCode();
      if (callTracked_ != null) hash ^= CallTracked.GetHashCode();
      if (disableCallConversion_ != null) hash ^= DisableCallConversion.GetHashCode();
      if (phoneNumberVerificationUrl_ != null) hash ^= PhoneNumberVerificationUrl.GetHashCode();
      if (conversionAction_ != null) hash ^= ConversionAction.GetHashCode();
      if (ConversionReportingState != 0) hash ^= ConversionReportingState.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (countryCode_ != null) {
        _single_countryCode_codec.WriteTagAndValue(output, CountryCode);
      }
      if (phoneNumber_ != null) {
        _single_phoneNumber_codec.WriteTagAndValue(output, PhoneNumber);
      }
      if (businessName_ != null) {
        _single_businessName_codec.WriteTagAndValue(output, BusinessName);
      }
      if (description1_ != null) {
        _single_description1_codec.WriteTagAndValue(output, Description1);
      }
      if (description2_ != null) {
        _single_description2_codec.WriteTagAndValue(output, Description2);
      }
      if (callTracked_ != null) {
        _single_callTracked_codec.WriteTagAndValue(output, CallTracked);
      }
      if (disableCallConversion_ != null) {
        _single_disableCallConversion_codec.WriteTagAndValue(output, DisableCallConversion);
      }
      if (phoneNumberVerificationUrl_ != null) {
        _single_phoneNumberVerificationUrl_codec.WriteTagAndValue(output, PhoneNumberVerificationUrl);
      }
      if (conversionAction_ != null) {
        _single_conversionAction_codec.WriteTagAndValue(output, ConversionAction);
      }
      if (ConversionReportingState != 0) {
        output.WriteRawTag(80);
        output.WriteEnum((int) ConversionReportingState);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (countryCode_ != null) {
        size += _single_countryCode_codec.CalculateSizeWithTag(CountryCode);
      }
      if (phoneNumber_ != null) {
        size += _single_phoneNumber_codec.CalculateSizeWithTag(PhoneNumber);
      }
      if (businessName_ != null) {
        size += _single_businessName_codec.CalculateSizeWithTag(BusinessName);
      }
      if (description1_ != null) {
        size += _single_description1_codec.CalculateSizeWithTag(Description1);
      }
      if (description2_ != null) {
        size += _single_description2_codec.CalculateSizeWithTag(Description2);
      }
      if (callTracked_ != null) {
        size += _single_callTracked_codec.CalculateSizeWithTag(CallTracked);
      }
      if (disableCallConversion_ != null) {
        size += _single_disableCallConversion_codec.CalculateSizeWithTag(DisableCallConversion);
      }
      if (phoneNumberVerificationUrl_ != null) {
        size += _single_phoneNumberVerificationUrl_codec.CalculateSizeWithTag(PhoneNumberVerificationUrl);
      }
      if (conversionAction_ != null) {
        size += _single_conversionAction_codec.CalculateSizeWithTag(ConversionAction);
      }
      if (ConversionReportingState != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) ConversionReportingState);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CallOnlyAdInfo other) {
      if (other == null) {
        return;
      }
      if (other.countryCode_ != null) {
        if (countryCode_ == null || other.CountryCode != "") {
          CountryCode = other.CountryCode;
        }
      }
      if (other.phoneNumber_ != null) {
        if (phoneNumber_ == null || other.PhoneNumber != "") {
          PhoneNumber = other.PhoneNumber;
        }
      }
      if (other.businessName_ != null) {
        if (businessName_ == null || other.BusinessName != "") {
          BusinessName = other.BusinessName;
        }
      }
      if (other.description1_ != null) {
        if (description1_ == null || other.Description1 != "") {
          Description1 = other.Description1;
        }
      }
      if (other.description2_ != null) {
        if (description2_ == null || other.Description2 != "") {
          Description2 = other.Description2;
        }
      }
      if (other.callTracked_ != null) {
        if (callTracked_ == null || other.CallTracked != false) {
          CallTracked = other.CallTracked;
        }
      }
      if (other.disableCallConversion_ != null) {
        if (disableCallConversion_ == null || other.DisableCallConversion != false) {
          DisableCallConversion = other.DisableCallConversion;
        }
      }
      if (other.phoneNumberVerificationUrl_ != null) {
        if (phoneNumberVerificationUrl_ == null || other.PhoneNumberVerificationUrl != "") {
          PhoneNumberVerificationUrl = other.PhoneNumberVerificationUrl;
        }
      }
      if (other.conversionAction_ != null) {
        if (conversionAction_ == null || other.ConversionAction != "") {
          ConversionAction = other.ConversionAction;
        }
      }
      if (other.ConversionReportingState != 0) {
        ConversionReportingState = other.ConversionReportingState;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            string value = _single_countryCode_codec.Read(input);
            if (countryCode_ == null || value != "") {
              CountryCode = value;
            }
            break;
          }
          case 18: {
            string value = _single_phoneNumber_codec.Read(input);
            if (phoneNumber_ == null || value != "") {
              PhoneNumber = value;
            }
            break;
          }
          case 26: {
            string value = _single_businessName_codec.Read(input);
            if (businessName_ == null || value != "") {
              BusinessName = value;
            }
            break;
          }
          case 34: {
            string value = _single_description1_codec.Read(input);
            if (description1_ == null || value != "") {
              Description1 = value;
            }
            break;
          }
          case 42: {
            string value = _single_description2_codec.Read(input);
            if (description2_ == null || value != "") {
              Description2 = value;
            }
            break;
          }
          case 50: {
            bool? value = _single_callTracked_codec.Read(input);
            if (callTracked_ == null || value != false) {
              CallTracked = value;
            }
            break;
          }
          case 58: {
            bool? value = _single_disableCallConversion_codec.Read(input);
            if (disableCallConversion_ == null || value != false) {
              DisableCallConversion = value;
            }
            break;
          }
          case 66: {
            string value = _single_phoneNumberVerificationUrl_codec.Read(input);
            if (phoneNumberVerificationUrl_ == null || value != "") {
              PhoneNumberVerificationUrl = value;
            }
            break;
          }
          case 74: {
            string value = _single_conversionAction_codec.Read(input);
            if (conversionAction_ == null || value != "") {
              ConversionAction = value;
            }
            break;
          }
          case 80: {
            conversionReportingState_ = (global::Google.Ads.GoogleAds.V0.Enums.CallConversionReportingStateEnum.Types.CallConversionReportingState) input.ReadEnum();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// An expanded dynamic search ad.
  /// </summary>
  public sealed partial class ExpandedDynamicSearchAdInfo : pb::IMessage<ExpandedDynamicSearchAdInfo> {
    private static readonly pb::MessageParser<ExpandedDynamicSearchAdInfo> _parser = new pb::MessageParser<ExpandedDynamicSearchAdInfo>(() => new ExpandedDynamicSearchAdInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ExpandedDynamicSearchAdInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Ads.GoogleAds.V0.Common.AdTypeInfosReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ExpandedDynamicSearchAdInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ExpandedDynamicSearchAdInfo(ExpandedDynamicSearchAdInfo other) : this() {
      Description = other.Description;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ExpandedDynamicSearchAdInfo Clone() {
      return new ExpandedDynamicSearchAdInfo(this);
    }

    /// <summary>Field number for the "description" field.</summary>
    public const int DescriptionFieldNumber = 1;
    private static readonly pb::FieldCodec<string> _single_description_codec = pb::FieldCodec.ForClassWrapper<string>(10);
    private string description_;
    /// <summary>
    /// The description of the ad.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Description {
      get { return description_; }
      set {
        description_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ExpandedDynamicSearchAdInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ExpandedDynamicSearchAdInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Description != other.Description) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (description_ != null) hash ^= Description.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (description_ != null) {
        _single_description_codec.WriteTagAndValue(output, Description);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (description_ != null) {
        size += _single_description_codec.CalculateSizeWithTag(Description);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ExpandedDynamicSearchAdInfo other) {
      if (other == null) {
        return;
      }
      if (other.description_ != null) {
        if (description_ == null || other.Description != "") {
          Description = other.Description;
        }
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            string value = _single_description_codec.Read(input);
            if (description_ == null || value != "") {
              Description = value;
            }
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// A hotel ad.
  /// </summary>
  public sealed partial class HotelAdInfo : pb::IMessage<HotelAdInfo> {
    private static readonly pb::MessageParser<HotelAdInfo> _parser = new pb::MessageParser<HotelAdInfo>(() => new HotelAdInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<HotelAdInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Ads.GoogleAds.V0.Common.AdTypeInfosReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HotelAdInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HotelAdInfo(HotelAdInfo other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HotelAdInfo Clone() {
      return new HotelAdInfo(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as HotelAdInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(HotelAdInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(HotelAdInfo other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    }

  }

  /// <summary>
  /// A Smart Shopping ad.
  /// </summary>
  public sealed partial class ShoppingSmartAdInfo : pb::IMessage<ShoppingSmartAdInfo> {
    private static readonly pb::MessageParser<ShoppingSmartAdInfo> _parser = new pb::MessageParser<ShoppingSmartAdInfo>(() => new ShoppingSmartAdInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ShoppingSmartAdInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Ads.GoogleAds.V0.Common.AdTypeInfosReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ShoppingSmartAdInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ShoppingSmartAdInfo(ShoppingSmartAdInfo other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ShoppingSmartAdInfo Clone() {
      return new ShoppingSmartAdInfo(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ShoppingSmartAdInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ShoppingSmartAdInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ShoppingSmartAdInfo other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    }

  }

  /// <summary>
  /// A standard Shopping ad.
  /// </summary>
  public sealed partial class ShoppingProductAdInfo : pb::IMessage<ShoppingProductAdInfo> {
    private static readonly pb::MessageParser<ShoppingProductAdInfo> _parser = new pb::MessageParser<ShoppingProductAdInfo>(() => new ShoppingProductAdInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ShoppingProductAdInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Ads.GoogleAds.V0.Common.AdTypeInfosReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ShoppingProductAdInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ShoppingProductAdInfo(ShoppingProductAdInfo other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ShoppingProductAdInfo Clone() {
      return new ShoppingProductAdInfo(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ShoppingProductAdInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ShoppingProductAdInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ShoppingProductAdInfo other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    }

  }

  /// <summary>
  /// A Gmail ad.
  /// </summary>
  public sealed partial class GmailAdInfo : pb::IMessage<GmailAdInfo> {
    private static readonly pb::MessageParser<GmailAdInfo> _parser = new pb::MessageParser<GmailAdInfo>(() => new GmailAdInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GmailAdInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Ads.GoogleAds.V0.Common.AdTypeInfosReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GmailAdInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GmailAdInfo(GmailAdInfo other) : this() {
      teaser_ = other.teaser_ != null ? other.teaser_.Clone() : null;
      HeaderImage = other.HeaderImage;
      MarketingImage = other.MarketingImage;
      MarketingImageHeadline = other.MarketingImageHeadline;
      MarketingImageDescription = other.MarketingImageDescription;
      marketingImageDisplayCallToAction_ = other.marketingImageDisplayCallToAction_ != null ? other.marketingImageDisplayCallToAction_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GmailAdInfo Clone() {
      return new GmailAdInfo(this);
    }

    /// <summary>Field number for the "teaser" field.</summary>
    public const int TeaserFieldNumber = 1;
    private global::Google.Ads.GoogleAds.V0.Common.GmailTeaser teaser_;
    /// <summary>
    /// The Gmail teaser.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Ads.GoogleAds.V0.Common.GmailTeaser Teaser {
      get { return teaser_; }
      set {
        teaser_ = value;
      }
    }

    /// <summary>Field number for the "header_image" field.</summary>
    public const int HeaderImageFieldNumber = 2;
    private static readonly pb::FieldCodec<string> _single_headerImage_codec = pb::FieldCodec.ForClassWrapper<string>(18);
    private string headerImage_;
    /// <summary>
    /// The MediaFile resource name of the header image. Valid image types are GIF,
    /// JPEG and PNG. The minimum size is 300x100 pixels and the aspect ratio must
    /// be between 3:1 and 5:1 (+-1%).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string HeaderImage {
      get { return headerImage_; }
      set {
        headerImage_ = value;
      }
    }

    /// <summary>Field number for the "marketing_image" field.</summary>
    public const int MarketingImageFieldNumber = 3;
    private static readonly pb::FieldCodec<string> _single_marketingImage_codec = pb::FieldCodec.ForClassWrapper<string>(26);
    private string marketingImage_;
    /// <summary>
    /// The MediaFile resource name of the marketing image. Valid image types are
    /// GIF, JPEG and PNG. The image must either be landscape with a minimum size
    /// of 600x314 pixels and aspect ratio of 600:314 (+-1%) or square with a
    /// minimum size of 300x300 pixels and aspect ratio of 1:1 (+-1%)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string MarketingImage {
      get { return marketingImage_; }
      set {
        marketingImage_ = value;
      }
    }

    /// <summary>Field number for the "marketing_image_headline" field.</summary>
    public const int MarketingImageHeadlineFieldNumber = 4;
    private static readonly pb::FieldCodec<string> _single_marketingImageHeadline_codec = pb::FieldCodec.ForClassWrapper<string>(34);
    private string marketingImageHeadline_;
    /// <summary>
    /// Headline of the marketing image.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string MarketingImageHeadline {
      get { return marketingImageHeadline_; }
      set {
        marketingImageHeadline_ = value;
      }
    }

    /// <summary>Field number for the "marketing_image_description" field.</summary>
    public const int MarketingImageDescriptionFieldNumber = 5;
    private static readonly pb::FieldCodec<string> _single_marketingImageDescription_codec = pb::FieldCodec.ForClassWrapper<string>(42);
    private string marketingImageDescription_;
    /// <summary>
    /// Description of the marketing image.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string MarketingImageDescription {
      get { return marketingImageDescription_; }
      set {
        marketingImageDescription_ = value;
      }
    }

    /// <summary>Field number for the "marketing_image_display_call_to_action" field.</summary>
    public const int MarketingImageDisplayCallToActionFieldNumber = 6;
    private global::Google.Ads.GoogleAds.V0.Common.DisplayCallToAction marketingImageDisplayCallToAction_;
    /// <summary>
    /// Display-call-to-action of the marketing image.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Ads.GoogleAds.V0.Common.DisplayCallToAction MarketingImageDisplayCallToAction {
      get { return marketingImageDisplayCallToAction_; }
      set {
        marketingImageDisplayCallToAction_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GmailAdInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GmailAdInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Teaser, other.Teaser)) return false;
      if (HeaderImage != other.HeaderImage) return false;
      if (MarketingImage != other.MarketingImage) return false;
      if (MarketingImageHeadline != other.MarketingImageHeadline) return false;
      if (MarketingImageDescription != other.MarketingImageDescription) return false;
      if (!object.Equals(MarketingImageDisplayCallToAction, other.MarketingImageDisplayCallToAction)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (teaser_ != null) hash ^= Teaser.GetHashCode();
      if (headerImage_ != null) hash ^= HeaderImage.GetHashCode();
      if (marketingImage_ != null) hash ^= MarketingImage.GetHashCode();
      if (marketingImageHeadline_ != null) hash ^= MarketingImageHeadline.GetHashCode();
      if (marketingImageDescription_ != null) hash ^= MarketingImageDescription.GetHashCode();
      if (marketingImageDisplayCallToAction_ != null) hash ^= MarketingImageDisplayCallToAction.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (teaser_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Teaser);
      }
      if (headerImage_ != null) {
        _single_headerImage_codec.WriteTagAndValue(output, HeaderImage);
      }
      if (marketingImage_ != null) {
        _single_marketingImage_codec.WriteTagAndValue(output, MarketingImage);
      }
      if (marketingImageHeadline_ != null) {
        _single_marketingImageHeadline_codec.WriteTagAndValue(output, MarketingImageHeadline);
      }
      if (marketingImageDescription_ != null) {
        _single_marketingImageDescription_codec.WriteTagAndValue(output, MarketingImageDescription);
      }
      if (marketingImageDisplayCallToAction_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(MarketingImageDisplayCallToAction);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (teaser_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Teaser);
      }
      if (headerImage_ != null) {
        size += _single_headerImage_codec.CalculateSizeWithTag(HeaderImage);
      }
      if (marketingImage_ != null) {
        size += _single_marketingImage_codec.CalculateSizeWithTag(MarketingImage);
      }
      if (marketingImageHeadline_ != null) {
        size += _single_marketingImageHeadline_codec.CalculateSizeWithTag(MarketingImageHeadline);
      }
      if (marketingImageDescription_ != null) {
        size += _single_marketingImageDescription_codec.CalculateSizeWithTag(MarketingImageDescription);
      }
      if (marketingImageDisplayCallToAction_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(MarketingImageDisplayCallToAction);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GmailAdInfo other) {
      if (other == null) {
        return;
      }
      if (other.teaser_ != null) {
        if (teaser_ == null) {
          teaser_ = new global::Google.Ads.GoogleAds.V0.Common.GmailTeaser();
        }
        Teaser.MergeFrom(other.Teaser);
      }
      if (other.headerImage_ != null) {
        if (headerImage_ == null || other.HeaderImage != "") {
          HeaderImage = other.HeaderImage;
        }
      }
      if (other.marketingImage_ != null) {
        if (marketingImage_ == null || other.MarketingImage != "") {
          MarketingImage = other.MarketingImage;
        }
      }
      if (other.marketingImageHeadline_ != null) {
        if (marketingImageHeadline_ == null || other.MarketingImageHeadline != "") {
          MarketingImageHeadline = other.MarketingImageHeadline;
        }
      }
      if (other.marketingImageDescription_ != null) {
        if (marketingImageDescription_ == null || other.MarketingImageDescription != "") {
          MarketingImageDescription = other.MarketingImageDescription;
        }
      }
      if (other.marketingImageDisplayCallToAction_ != null) {
        if (marketingImageDisplayCallToAction_ == null) {
          marketingImageDisplayCallToAction_ = new global::Google.Ads.GoogleAds.V0.Common.DisplayCallToAction();
        }
        MarketingImageDisplayCallToAction.MergeFrom(other.MarketingImageDisplayCallToAction);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (teaser_ == null) {
              teaser_ = new global::Google.Ads.GoogleAds.V0.Common.GmailTeaser();
            }
            input.ReadMessage(teaser_);
            break;
          }
          case 18: {
            string value = _single_headerImage_codec.Read(input);
            if (headerImage_ == null || value != "") {
              HeaderImage = value;
            }
            break;
          }
          case 26: {
            string value = _single_marketingImage_codec.Read(input);
            if (marketingImage_ == null || value != "") {
              MarketingImage = value;
            }
            break;
          }
          case 34: {
            string value = _single_marketingImageHeadline_codec.Read(input);
            if (marketingImageHeadline_ == null || value != "") {
              MarketingImageHeadline = value;
            }
            break;
          }
          case 42: {
            string value = _single_marketingImageDescription_codec.Read(input);
            if (marketingImageDescription_ == null || value != "") {
              MarketingImageDescription = value;
            }
            break;
          }
          case 50: {
            if (marketingImageDisplayCallToAction_ == null) {
              marketingImageDisplayCallToAction_ = new global::Google.Ads.GoogleAds.V0.Common.DisplayCallToAction();
            }
            input.ReadMessage(marketingImageDisplayCallToAction_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Gmail teaser data. The teaser is a small header that acts as an invitation
  /// to view the rest of the ad (the body).
  /// </summary>
  public sealed partial class GmailTeaser : pb::IMessage<GmailTeaser> {
    private static readonly pb::MessageParser<GmailTeaser> _parser = new pb::MessageParser<GmailTeaser>(() => new GmailTeaser());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GmailTeaser> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Ads.GoogleAds.V0.Common.AdTypeInfosReflection.Descriptor.MessageTypes[10]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GmailTeaser() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GmailTeaser(GmailTeaser other) : this() {
      Headline = other.Headline;
      Description = other.Description;
      BusinessName = other.BusinessName;
      LogoImage = other.LogoImage;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GmailTeaser Clone() {
      return new GmailTeaser(this);
    }

    /// <summary>Field number for the "headline" field.</summary>
    public const int HeadlineFieldNumber = 1;
    private static readonly pb::FieldCodec<string> _single_headline_codec = pb::FieldCodec.ForClassWrapper<string>(10);
    private string headline_;
    /// <summary>
    /// Headline of the teaser.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Headline {
      get { return headline_; }
      set {
        headline_ = value;
      }
    }

    /// <summary>Field number for the "description" field.</summary>
    public const int DescriptionFieldNumber = 2;
    private static readonly pb::FieldCodec<string> _single_description_codec = pb::FieldCodec.ForClassWrapper<string>(18);
    private string description_;
    /// <summary>
    /// Description of the teaser.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Description {
      get { return description_; }
      set {
        description_ = value;
      }
    }

    /// <summary>Field number for the "business_name" field.</summary>
    public const int BusinessNameFieldNumber = 3;
    private static readonly pb::FieldCodec<string> _single_businessName_codec = pb::FieldCodec.ForClassWrapper<string>(26);
    private string businessName_;
    /// <summary>
    /// Business name of the advertiser.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string BusinessName {
      get { return businessName_; }
      set {
        businessName_ = value;
      }
    }

    /// <summary>Field number for the "logo_image" field.</summary>
    public const int LogoImageFieldNumber = 4;
    private static readonly pb::FieldCodec<string> _single_logoImage_codec = pb::FieldCodec.ForClassWrapper<string>(34);
    private string logoImage_;
    /// <summary>
    /// The MediaFile resource name of the logo image. Valid image types are GIF,
    /// JPEG and PNG. The minimum size is 144x144 pixels and the aspect ratio must
    /// be 1:1 (+-1%).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string LogoImage {
      get { return logoImage_; }
      set {
        logoImage_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GmailTeaser);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GmailTeaser other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Headline != other.Headline) return false;
      if (Description != other.Description) return false;
      if (BusinessName != other.BusinessName) return false;
      if (LogoImage != other.LogoImage) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (headline_ != null) hash ^= Headline.GetHashCode();
      if (description_ != null) hash ^= Description.GetHashCode();
      if (businessName_ != null) hash ^= BusinessName.GetHashCode();
      if (logoImage_ != null) hash ^= LogoImage.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (headline_ != null) {
        _single_headline_codec.WriteTagAndValue(output, Headline);
      }
      if (description_ != null) {
        _single_description_codec.WriteTagAndValue(output, Description);
      }
      if (businessName_ != null) {
        _single_businessName_codec.WriteTagAndValue(output, BusinessName);
      }
      if (logoImage_ != null) {
        _single_logoImage_codec.WriteTagAndValue(output, LogoImage);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (headline_ != null) {
        size += _single_headline_codec.CalculateSizeWithTag(Headline);
      }
      if (description_ != null) {
        size += _single_description_codec.CalculateSizeWithTag(Description);
      }
      if (businessName_ != null) {
        size += _single_businessName_codec.CalculateSizeWithTag(BusinessName);
      }
      if (logoImage_ != null) {
        size += _single_logoImage_codec.CalculateSizeWithTag(LogoImage);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GmailTeaser other) {
      if (other == null) {
        return;
      }
      if (other.headline_ != null) {
        if (headline_ == null || other.Headline != "") {
          Headline = other.Headline;
        }
      }
      if (other.description_ != null) {
        if (description_ == null || other.Description != "") {
          Description = other.Description;
        }
      }
      if (other.businessName_ != null) {
        if (businessName_ == null || other.BusinessName != "") {
          BusinessName = other.BusinessName;
        }
      }
      if (other.logoImage_ != null) {
        if (logoImage_ == null || other.LogoImage != "") {
          LogoImage = other.LogoImage;
        }
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            string value = _single_headline_codec.Read(input);
            if (headline_ == null || value != "") {
              Headline = value;
            }
            break;
          }
          case 18: {
            string value = _single_description_codec.Read(input);
            if (description_ == null || value != "") {
              Description = value;
            }
            break;
          }
          case 26: {
            string value = _single_businessName_codec.Read(input);
            if (businessName_ == null || value != "") {
              BusinessName = value;
            }
            break;
          }
          case 34: {
            string value = _single_logoImage_codec.Read(input);
            if (logoImage_ == null || value != "") {
              LogoImage = value;
            }
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Data for display call to action. The call to action is a piece of the ad
  /// that prompts the user to do something. Like clicking a link or making a phone
  /// call.
  /// </summary>
  public sealed partial class DisplayCallToAction : pb::IMessage<DisplayCallToAction> {
    private static readonly pb::MessageParser<DisplayCallToAction> _parser = new pb::MessageParser<DisplayCallToAction>(() => new DisplayCallToAction());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DisplayCallToAction> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Ads.GoogleAds.V0.Common.AdTypeInfosReflection.Descriptor.MessageTypes[11]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DisplayCallToAction() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DisplayCallToAction(DisplayCallToAction other) : this() {
      Text = other.Text;
      TextColor = other.TextColor;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DisplayCallToAction Clone() {
      return new DisplayCallToAction(this);
    }

    /// <summary>Field number for the "text" field.</summary>
    public const int TextFieldNumber = 1;
    private static readonly pb::FieldCodec<string> _single_text_codec = pb::FieldCodec.ForClassWrapper<string>(10);
    private string text_;
    /// <summary>
    /// Text for the display-call-to-action.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Text {
      get { return text_; }
      set {
        text_ = value;
      }
    }

    /// <summary>Field number for the "text_color" field.</summary>
    public const int TextColorFieldNumber = 2;
    private static readonly pb::FieldCodec<string> _single_textColor_codec = pb::FieldCodec.ForClassWrapper<string>(18);
    private string textColor_;
    /// <summary>
    /// Text color for the display-call-to-action in hexadecimal, e.g. #ffffff for
    /// white.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string TextColor {
      get { return textColor_; }
      set {
        textColor_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DisplayCallToAction);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DisplayCallToAction other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Text != other.Text) return false;
      if (TextColor != other.TextColor) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (text_ != null) hash ^= Text.GetHashCode();
      if (textColor_ != null) hash ^= TextColor.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (text_ != null) {
        _single_text_codec.WriteTagAndValue(output, Text);
      }
      if (textColor_ != null) {
        _single_textColor_codec.WriteTagAndValue(output, TextColor);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (text_ != null) {
        size += _single_text_codec.CalculateSizeWithTag(Text);
      }
      if (textColor_ != null) {
        size += _single_textColor_codec.CalculateSizeWithTag(TextColor);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DisplayCallToAction other) {
      if (other == null) {
        return;
      }
      if (other.text_ != null) {
        if (text_ == null || other.Text != "") {
          Text = other.Text;
        }
      }
      if (other.textColor_ != null) {
        if (textColor_ == null || other.TextColor != "") {
          TextColor = other.TextColor;
        }
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            string value = _single_text_codec.Read(input);
            if (text_ == null || value != "") {
              Text = value;
            }
            break;
          }
          case 18: {
            string value = _single_textColor_codec.Read(input);
            if (textColor_ == null || value != "") {
              TextColor = value;
            }
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// An image ad.
  /// </summary>
  public sealed partial class ImageAdInfo : pb::IMessage<ImageAdInfo> {
    private static readonly pb::MessageParser<ImageAdInfo> _parser = new pb::MessageParser<ImageAdInfo>(() => new ImageAdInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ImageAdInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Ads.GoogleAds.V0.Common.AdTypeInfosReflection.Descriptor.MessageTypes[12]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ImageAdInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ImageAdInfo(ImageAdInfo other) : this() {
      PixelWidth = other.PixelWidth;
      PixelHeight = other.PixelHeight;
      ImageUrl = other.ImageUrl;
      PreviewPixelWidth = other.PreviewPixelWidth;
      PreviewPixelHeight = other.PreviewPixelHeight;
      PreviewImageUrl = other.PreviewImageUrl;
      mimeType_ = other.mimeType_;
      Name = other.Name;
      switch (other.ImageCase) {
        case ImageOneofCase.MediaFile:
          MediaFile = other.MediaFile;
          break;
        case ImageOneofCase.Data:
          Data = other.Data;
          break;
      }

      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ImageAdInfo Clone() {
      return new ImageAdInfo(this);
    }

    /// <summary>Field number for the "pixel_width" field.</summary>
    public const int PixelWidthFieldNumber = 4;
    private static readonly pb::FieldCodec<long?> _single_pixelWidth_codec = pb::FieldCodec.ForStructWrapper<long>(34);
    private long? pixelWidth_;
    /// <summary>
    /// Width in pixels of the full size image.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long? PixelWidth {
      get { return pixelWidth_; }
      set {
        pixelWidth_ = value;
      }
    }

    /// <summary>Field number for the "pixel_height" field.</summary>
    public const int PixelHeightFieldNumber = 5;
    private static readonly pb::FieldCodec<long?> _single_pixelHeight_codec = pb::FieldCodec.ForStructWrapper<long>(42);
    private long? pixelHeight_;
    /// <summary>
    /// Height in pixels of the full size image.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long? PixelHeight {
      get { return pixelHeight_; }
      set {
        pixelHeight_ = value;
      }
    }

    /// <summary>Field number for the "image_url" field.</summary>
    public const int ImageUrlFieldNumber = 6;
    private static readonly pb::FieldCodec<string> _single_imageUrl_codec = pb::FieldCodec.ForClassWrapper<string>(50);
    private string imageUrl_;
    /// <summary>
    /// URL of the full size image.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ImageUrl {
      get { return imageUrl_; }
      set {
        imageUrl_ = value;
      }
    }

    /// <summary>Field number for the "preview_pixel_width" field.</summary>
    public const int PreviewPixelWidthFieldNumber = 7;
    private static readonly pb::FieldCodec<long?> _single_previewPixelWidth_codec = pb::FieldCodec.ForStructWrapper<long>(58);
    private long? previewPixelWidth_;
    /// <summary>
    /// Width in pixels of the preview size image.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long? PreviewPixelWidth {
      get { return previewPixelWidth_; }
      set {
        previewPixelWidth_ = value;
      }
    }

    /// <summary>Field number for the "preview_pixel_height" field.</summary>
    public const int PreviewPixelHeightFieldNumber = 8;
    private static readonly pb::FieldCodec<long?> _single_previewPixelHeight_codec = pb::FieldCodec.ForStructWrapper<long>(66);
    private long? previewPixelHeight_;
    /// <summary>
    /// Height in pixels of the preview size image.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long? PreviewPixelHeight {
      get { return previewPixelHeight_; }
      set {
        previewPixelHeight_ = value;
      }
    }

    /// <summary>Field number for the "preview_image_url" field.</summary>
    public const int PreviewImageUrlFieldNumber = 9;
    private static readonly pb::FieldCodec<string> _single_previewImageUrl_codec = pb::FieldCodec.ForClassWrapper<string>(74);
    private string previewImageUrl_;
    /// <summary>
    /// URL of the preview size image.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PreviewImageUrl {
      get { return previewImageUrl_; }
      set {
        previewImageUrl_ = value;
      }
    }

    /// <summary>Field number for the "mime_type" field.</summary>
    public const int MimeTypeFieldNumber = 10;
    private global::Google.Ads.GoogleAds.V0.Enums.MimeTypeEnum.Types.MimeType mimeType_ = 0;
    /// <summary>
    /// The mime type of the image.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Ads.GoogleAds.V0.Enums.MimeTypeEnum.Types.MimeType MimeType {
      get { return mimeType_; }
      set {
        mimeType_ = value;
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 11;
    private static readonly pb::FieldCodec<string> _single_name_codec = pb::FieldCodec.ForClassWrapper<string>(90);
    private string name_;
    /// <summary>
    /// The name of the image. If the image was created from a MediaFile, this is
    /// the MediaFile's name. If the image was created from bytes, this is empty.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = value;
      }
    }

    /// <summary>Field number for the "media_file" field.</summary>
    public const int MediaFileFieldNumber = 1;
    private static readonly pb::FieldCodec<string> _oneof_mediaFile_codec = pb::FieldCodec.ForClassWrapper<string>(10);
    /// <summary>
    /// The MediaFile resource to use for the image.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string MediaFile {
      get { return imageCase_ == ImageOneofCase.MediaFile ? (string) image_ : (string) null; }
      set {
        image_ = value;
        imageCase_ = value == null ? ImageOneofCase.None : ImageOneofCase.MediaFile;
      }
    }

    /// <summary>Field number for the "data" field.</summary>
    public const int DataFieldNumber = 2;
    private static readonly pb::FieldCodec<pb::ByteString> _oneof_data_codec = pb::FieldCodec.ForClassWrapper<pb::ByteString>(18);
    /// <summary>
    /// Raw image data as bytes.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Data {
      get { return imageCase_ == ImageOneofCase.Data ? (pb::ByteString) image_ : (pb::ByteString) null; }
      set {
        image_ = value;
        imageCase_ = value == null ? ImageOneofCase.None : ImageOneofCase.Data;
      }
    }

    private object image_;
    /// <summary>Enum of possible cases for the "image" oneof.</summary>
    public enum ImageOneofCase {
      None = 0,
      MediaFile = 1,
      Data = 2,
    }
    private ImageOneofCase imageCase_ = ImageOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ImageOneofCase ImageCase {
      get { return imageCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearImage() {
      imageCase_ = ImageOneofCase.None;
      image_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ImageAdInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ImageAdInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (PixelWidth != other.PixelWidth) return false;
      if (PixelHeight != other.PixelHeight) return false;
      if (ImageUrl != other.ImageUrl) return false;
      if (PreviewPixelWidth != other.PreviewPixelWidth) return false;
      if (PreviewPixelHeight != other.PreviewPixelHeight) return false;
      if (PreviewImageUrl != other.PreviewImageUrl) return false;
      if (MimeType != other.MimeType) return false;
      if (Name != other.Name) return false;
      if (MediaFile != other.MediaFile) return false;
      if (Data != other.Data) return false;
      if (ImageCase != other.ImageCase) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (pixelWidth_ != null) hash ^= PixelWidth.GetHashCode();
      if (pixelHeight_ != null) hash ^= PixelHeight.GetHashCode();
      if (imageUrl_ != null) hash ^= ImageUrl.GetHashCode();
      if (previewPixelWidth_ != null) hash ^= PreviewPixelWidth.GetHashCode();
      if (previewPixelHeight_ != null) hash ^= PreviewPixelHeight.GetHashCode();
      if (previewImageUrl_ != null) hash ^= PreviewImageUrl.GetHashCode();
      if (MimeType != 0) hash ^= MimeType.GetHashCode();
      if (name_ != null) hash ^= Name.GetHashCode();
      if (imageCase_ == ImageOneofCase.MediaFile) hash ^= MediaFile.GetHashCode();
      if (imageCase_ == ImageOneofCase.Data) hash ^= Data.GetHashCode();
      hash ^= (int) imageCase_;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (imageCase_ == ImageOneofCase.MediaFile) {
        _oneof_mediaFile_codec.WriteTagAndValue(output, (string) image_);
      }
      if (imageCase_ == ImageOneofCase.Data) {
        _oneof_data_codec.WriteTagAndValue(output, (pb::ByteString) image_);
      }
      if (pixelWidth_ != null) {
        _single_pixelWidth_codec.WriteTagAndValue(output, PixelWidth);
      }
      if (pixelHeight_ != null) {
        _single_pixelHeight_codec.WriteTagAndValue(output, PixelHeight);
      }
      if (imageUrl_ != null) {
        _single_imageUrl_codec.WriteTagAndValue(output, ImageUrl);
      }
      if (previewPixelWidth_ != null) {
        _single_previewPixelWidth_codec.WriteTagAndValue(output, PreviewPixelWidth);
      }
      if (previewPixelHeight_ != null) {
        _single_previewPixelHeight_codec.WriteTagAndValue(output, PreviewPixelHeight);
      }
      if (previewImageUrl_ != null) {
        _single_previewImageUrl_codec.WriteTagAndValue(output, PreviewImageUrl);
      }
      if (MimeType != 0) {
        output.WriteRawTag(80);
        output.WriteEnum((int) MimeType);
      }
      if (name_ != null) {
        _single_name_codec.WriteTagAndValue(output, Name);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (pixelWidth_ != null) {
        size += _single_pixelWidth_codec.CalculateSizeWithTag(PixelWidth);
      }
      if (pixelHeight_ != null) {
        size += _single_pixelHeight_codec.CalculateSizeWithTag(PixelHeight);
      }
      if (imageUrl_ != null) {
        size += _single_imageUrl_codec.CalculateSizeWithTag(ImageUrl);
      }
      if (previewPixelWidth_ != null) {
        size += _single_previewPixelWidth_codec.CalculateSizeWithTag(PreviewPixelWidth);
      }
      if (previewPixelHeight_ != null) {
        size += _single_previewPixelHeight_codec.CalculateSizeWithTag(PreviewPixelHeight);
      }
      if (previewImageUrl_ != null) {
        size += _single_previewImageUrl_codec.CalculateSizeWithTag(PreviewImageUrl);
      }
      if (MimeType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) MimeType);
      }
      if (name_ != null) {
        size += _single_name_codec.CalculateSizeWithTag(Name);
      }
      if (imageCase_ == ImageOneofCase.MediaFile) {
        size += _oneof_mediaFile_codec.CalculateSizeWithTag(MediaFile);
      }
      if (imageCase_ == ImageOneofCase.Data) {
        size += _oneof_data_codec.CalculateSizeWithTag(Data);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ImageAdInfo other) {
      if (other == null) {
        return;
      }
      if (other.pixelWidth_ != null) {
        if (pixelWidth_ == null || other.PixelWidth != 0L) {
          PixelWidth = other.PixelWidth;
        }
      }
      if (other.pixelHeight_ != null) {
        if (pixelHeight_ == null || other.PixelHeight != 0L) {
          PixelHeight = other.PixelHeight;
        }
      }
      if (other.imageUrl_ != null) {
        if (imageUrl_ == null || other.ImageUrl != "") {
          ImageUrl = other.ImageUrl;
        }
      }
      if (other.previewPixelWidth_ != null) {
        if (previewPixelWidth_ == null || other.PreviewPixelWidth != 0L) {
          PreviewPixelWidth = other.PreviewPixelWidth;
        }
      }
      if (other.previewPixelHeight_ != null) {
        if (previewPixelHeight_ == null || other.PreviewPixelHeight != 0L) {
          PreviewPixelHeight = other.PreviewPixelHeight;
        }
      }
      if (other.previewImageUrl_ != null) {
        if (previewImageUrl_ == null || other.PreviewImageUrl != "") {
          PreviewImageUrl = other.PreviewImageUrl;
        }
      }
      if (other.MimeType != 0) {
        MimeType = other.MimeType;
      }
      if (other.name_ != null) {
        if (name_ == null || other.Name != "") {
          Name = other.Name;
        }
      }
      switch (other.ImageCase) {
        case ImageOneofCase.MediaFile:
          MediaFile = other.MediaFile;
          break;
        case ImageOneofCase.Data:
          Data = other.Data;
          break;
      }

      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            MediaFile = _oneof_mediaFile_codec.Read(input);
            break;
          }
          case 18: {
            Data = _oneof_data_codec.Read(input);
            break;
          }
          case 34: {
            long? value = _single_pixelWidth_codec.Read(input);
            if (pixelWidth_ == null || value != 0L) {
              PixelWidth = value;
            }
            break;
          }
          case 42: {
            long? value = _single_pixelHeight_codec.Read(input);
            if (pixelHeight_ == null || value != 0L) {
              PixelHeight = value;
            }
            break;
          }
          case 50: {
            string value = _single_imageUrl_codec.Read(input);
            if (imageUrl_ == null || value != "") {
              ImageUrl = value;
            }
            break;
          }
          case 58: {
            long? value = _single_previewPixelWidth_codec.Read(input);
            if (previewPixelWidth_ == null || value != 0L) {
              PreviewPixelWidth = value;
            }
            break;
          }
          case 66: {
            long? value = _single_previewPixelHeight_codec.Read(input);
            if (previewPixelHeight_ == null || value != 0L) {
              PreviewPixelHeight = value;
            }
            break;
          }
          case 74: {
            string value = _single_previewImageUrl_codec.Read(input);
            if (previewImageUrl_ == null || value != "") {
              PreviewImageUrl = value;
            }
            break;
          }
          case 80: {
            mimeType_ = (global::Google.Ads.GoogleAds.V0.Enums.MimeTypeEnum.Types.MimeType) input.ReadEnum();
            break;
          }
          case 90: {
            string value = _single_name_codec.Read(input);
            if (name_ == null || value != "") {
              Name = value;
            }
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Representation of video TrueView in-stream ad format (ad shown during video
  /// playback, often at beginning, which displays a skip button a few seconds into
  /// the video).
  /// </summary>
  public sealed partial class VideoTrueViewInStreamAdInfo : pb::IMessage<VideoTrueViewInStreamAdInfo> {
    private static readonly pb::MessageParser<VideoTrueViewInStreamAdInfo> _parser = new pb::MessageParser<VideoTrueViewInStreamAdInfo>(() => new VideoTrueViewInStreamAdInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<VideoTrueViewInStreamAdInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Ads.GoogleAds.V0.Common.AdTypeInfosReflection.Descriptor.MessageTypes[13]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public VideoTrueViewInStreamAdInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public VideoTrueViewInStreamAdInfo(VideoTrueViewInStreamAdInfo other) : this() {
      ActionButtonLabel = other.ActionButtonLabel;
      ActionHeadline = other.ActionHeadline;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public VideoTrueViewInStreamAdInfo Clone() {
      return new VideoTrueViewInStreamAdInfo(this);
    }

    /// <summary>Field number for the "action_button_label" field.</summary>
    public const int ActionButtonLabelFieldNumber = 1;
    private static readonly pb::FieldCodec<string> _single_actionButtonLabel_codec = pb::FieldCodec.ForClassWrapper<string>(10);
    private string actionButtonLabel_;
    /// <summary>
    /// Label on the CTA (call-to-action) button taking the user to the video ad's
    /// final URL.
    /// Required for TrueView for action campaigns, optional otherwise.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ActionButtonLabel {
      get { return actionButtonLabel_; }
      set {
        actionButtonLabel_ = value;
      }
    }

    /// <summary>Field number for the "action_headline" field.</summary>
    public const int ActionHeadlineFieldNumber = 2;
    private static readonly pb::FieldCodec<string> _single_actionHeadline_codec = pb::FieldCodec.ForClassWrapper<string>(18);
    private string actionHeadline_;
    /// <summary>
    /// Additional text displayed with the CTA (call-to-action) button to give
    /// context and encourage clicking on the button.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ActionHeadline {
      get { return actionHeadline_; }
      set {
        actionHeadline_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as VideoTrueViewInStreamAdInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(VideoTrueViewInStreamAdInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ActionButtonLabel != other.ActionButtonLabel) return false;
      if (ActionHeadline != other.ActionHeadline) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (actionButtonLabel_ != null) hash ^= ActionButtonLabel.GetHashCode();
      if (actionHeadline_ != null) hash ^= ActionHeadline.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (actionButtonLabel_ != null) {
        _single_actionButtonLabel_codec.WriteTagAndValue(output, ActionButtonLabel);
      }
      if (actionHeadline_ != null) {
        _single_actionHeadline_codec.WriteTagAndValue(output, ActionHeadline);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (actionButtonLabel_ != null) {
        size += _single_actionButtonLabel_codec.CalculateSizeWithTag(ActionButtonLabel);
      }
      if (actionHeadline_ != null) {
        size += _single_actionHeadline_codec.CalculateSizeWithTag(ActionHeadline);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(VideoTrueViewInStreamAdInfo other) {
      if (other == null) {
        return;
      }
      if (other.actionButtonLabel_ != null) {
        if (actionButtonLabel_ == null || other.ActionButtonLabel != "") {
          ActionButtonLabel = other.ActionButtonLabel;
        }
      }
      if (other.actionHeadline_ != null) {
        if (actionHeadline_ == null || other.ActionHeadline != "") {
          ActionHeadline = other.ActionHeadline;
        }
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            string value = _single_actionButtonLabel_codec.Read(input);
            if (actionButtonLabel_ == null || value != "") {
              ActionButtonLabel = value;
            }
            break;
          }
          case 18: {
            string value = _single_actionHeadline_codec.Read(input);
            if (actionHeadline_ == null || value != "") {
              ActionHeadline = value;
            }
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// A video ad.
  /// </summary>
  public sealed partial class VideoAdInfo : pb::IMessage<VideoAdInfo> {
    private static readonly pb::MessageParser<VideoAdInfo> _parser = new pb::MessageParser<VideoAdInfo>(() => new VideoAdInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<VideoAdInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Ads.GoogleAds.V0.Common.AdTypeInfosReflection.Descriptor.MessageTypes[14]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public VideoAdInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public VideoAdInfo(VideoAdInfo other) : this() {
      MediaFile = other.MediaFile;
      switch (other.FormatCase) {
        case FormatOneofCase.InStream:
          InStream = other.InStream.Clone();
          break;
      }

      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public VideoAdInfo Clone() {
      return new VideoAdInfo(this);
    }

    /// <summary>Field number for the "media_file" field.</summary>
    public const int MediaFileFieldNumber = 1;
    private static readonly pb::FieldCodec<string> _single_mediaFile_codec = pb::FieldCodec.ForClassWrapper<string>(10);
    private string mediaFile_;
    /// <summary>
    /// The MediaFile resource to use for the video.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string MediaFile {
      get { return mediaFile_; }
      set {
        mediaFile_ = value;
      }
    }

    /// <summary>Field number for the "in_stream" field.</summary>
    public const int InStreamFieldNumber = 2;
    /// <summary>
    /// Video TrueView in-stream format.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Ads.GoogleAds.V0.Common.VideoTrueViewInStreamAdInfo InStream {
      get { return formatCase_ == FormatOneofCase.InStream ? (global::Google.Ads.GoogleAds.V0.Common.VideoTrueViewInStreamAdInfo) format_ : null; }
      set {
        format_ = value;
        formatCase_ = value == null ? FormatOneofCase.None : FormatOneofCase.InStream;
      }
    }

    private object format_;
    /// <summary>Enum of possible cases for the "format" oneof.</summary>
    public enum FormatOneofCase {
      None = 0,
      InStream = 2,
    }
    private FormatOneofCase formatCase_ = FormatOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FormatOneofCase FormatCase {
      get { return formatCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearFormat() {
      formatCase_ = FormatOneofCase.None;
      format_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as VideoAdInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(VideoAdInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (MediaFile != other.MediaFile) return false;
      if (!object.Equals(InStream, other.InStream)) return false;
      if (FormatCase != other.FormatCase) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (mediaFile_ != null) hash ^= MediaFile.GetHashCode();
      if (formatCase_ == FormatOneofCase.InStream) hash ^= InStream.GetHashCode();
      hash ^= (int) formatCase_;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (mediaFile_ != null) {
        _single_mediaFile_codec.WriteTagAndValue(output, MediaFile);
      }
      if (formatCase_ == FormatOneofCase.InStream) {
        output.WriteRawTag(18);
        output.WriteMessage(InStream);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (mediaFile_ != null) {
        size += _single_mediaFile_codec.CalculateSizeWithTag(MediaFile);
      }
      if (formatCase_ == FormatOneofCase.InStream) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(InStream);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(VideoAdInfo other) {
      if (other == null) {
        return;
      }
      if (other.mediaFile_ != null) {
        if (mediaFile_ == null || other.MediaFile != "") {
          MediaFile = other.MediaFile;
        }
      }
      switch (other.FormatCase) {
        case FormatOneofCase.InStream:
          if (InStream == null) {
            InStream = new global::Google.Ads.GoogleAds.V0.Common.VideoTrueViewInStreamAdInfo();
          }
          InStream.MergeFrom(other.InStream);
          break;
      }

      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            string value = _single_mediaFile_codec.Read(input);
            if (mediaFile_ == null || value != "") {
              MediaFile = value;
            }
            break;
          }
          case 18: {
            global::Google.Ads.GoogleAds.V0.Common.VideoTrueViewInStreamAdInfo subBuilder = new global::Google.Ads.GoogleAds.V0.Common.VideoTrueViewInStreamAdInfo();
            if (formatCase_ == FormatOneofCase.InStream) {
              subBuilder.MergeFrom(InStream);
            }
            input.ReadMessage(subBuilder);
            InStream = subBuilder;
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
