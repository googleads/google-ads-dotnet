// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: google/ads/googleads/v0/resources/budget.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Google.Ads.GoogleAds.V0.Resources {

  /// <summary>Holder for reflection information generated from google/ads/googleads/v0/resources/budget.proto</summary>
  public static partial class BudgetReflection {

    #region Descriptor
    /// <summary>File descriptor for google/ads/googleads/v0/resources/budget.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static BudgetReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Ci5nb29nbGUvYWRzL2dvb2dsZWFkcy92MC9yZXNvdXJjZXMvYnVkZ2V0LnBy",
            "b3RvEiFnb29nbGUuYWRzLmdvb2dsZWFkcy52MC5yZXNvdXJjZXMaOmdvb2ds",
            "ZS9hZHMvZ29vZ2xlYWRzL3YwL2VudW1zL2J1ZGdldF9kZWxpdmVyeV9tZXRo",
            "b2QucHJvdG8aMWdvb2dsZS9hZHMvZ29vZ2xlYWRzL3YwL2VudW1zL2J1ZGdl",
            "dF9zdGF0dXMucHJvdG8aHmdvb2dsZS9wcm90b2J1Zi93cmFwcGVycy5wcm90",
            "byLKAwoGQnVkZ2V0EhUKDXJlc291cmNlX25hbWUYASABKAkSJwoCaWQYAyAB",
            "KAsyGy5nb29nbGUucHJvdG9idWYuSW50NjRWYWx1ZRIqCgRuYW1lGAQgASgL",
            "MhwuZ29vZ2xlLnByb3RvYnVmLlN0cmluZ1ZhbHVlEjIKDWFtb3VudF9taWNy",
            "b3MYBSABKAsyGy5nb29nbGUucHJvdG9idWYuSW50NjRWYWx1ZRJMCgZzdGF0",
            "dXMYBiABKA4yPC5nb29nbGUuYWRzLmdvb2dsZWFkcy52MC5lbnVtcy5CdWRn",
            "ZXRTdGF0dXNFbnVtLkJ1ZGdldFN0YXR1cxJlCg9kZWxpdmVyeV9tZXRob2QY",
            "ByABKA4yTC5nb29nbGUuYWRzLmdvb2dsZWFkcy52MC5lbnVtcy5CdWRnZXRE",
            "ZWxpdmVyeU1ldGhvZEVudW0uQnVkZ2V0RGVsaXZlcnlNZXRob2QSNQoRZXhw",
            "bGljaXRseV9zaGFyZWQYCCABKAsyGi5nb29nbGUucHJvdG9idWYuQm9vbFZh",
            "bHVlEjQKD3JlZmVyZW5jZV9jb3VudBgJIAEoCzIbLmdvb2dsZS5wcm90b2J1",
            "Zi5JbnQ2NFZhbHVlQtABCiVjb20uZ29vZ2xlLmFkcy5nb29nbGVhZHMudjAu",
            "cmVzb3VyY2VzQgtCdWRnZXRQcm90b1ABWkpnb29nbGUuZ29sYW5nLm9yZy9n",
            "ZW5wcm90by9nb29nbGVhcGlzL2Fkcy9nb29nbGVhZHMvdjAvcmVzb3VyY2Vz",
            "O3Jlc291cmNlc6ICA0dBQaoCIUdvb2dsZS5BZHMuR29vZ2xlQWRzLlYwLlJl",
            "c291cmNlc8oCIUdvb2dsZVxBZHNcR29vZ2xlQWRzXFYwXFJlc291cmNlc2IG",
            "cHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Google.Ads.GoogleAds.V0.Enums.BudgetDeliveryMethodReflection.Descriptor, global::Google.Ads.GoogleAds.V0.Enums.BudgetStatusReflection.Descriptor, global::Google.Protobuf.WellKnownTypes.WrappersReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Ads.GoogleAds.V0.Resources.Budget), global::Google.Ads.GoogleAds.V0.Resources.Budget.Parser, new[]{ "ResourceName", "Id", "Name", "AmountMicros", "Status", "DeliveryMethod", "ExplicitlyShared", "ReferenceCount" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  /// <summary>
  /// Represents an AdWords Budget.
  /// </summary>
  public sealed partial class Budget : pb::IMessage<Budget> {
    private static readonly pb::MessageParser<Budget> _parser = new pb::MessageParser<Budget>(() => new Budget());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Budget> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Ads.GoogleAds.V0.Resources.BudgetReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Budget() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Budget(Budget other) : this() {
      resourceName_ = other.resourceName_;
      Id = other.Id;
      Name = other.Name;
      AmountMicros = other.AmountMicros;
      status_ = other.status_;
      deliveryMethod_ = other.deliveryMethod_;
      ExplicitlyShared = other.ExplicitlyShared;
      ReferenceCount = other.ReferenceCount;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Budget Clone() {
      return new Budget(this);
    }

    /// <summary>Field number for the "resource_name" field.</summary>
    public const int ResourceNameFieldNumber = 1;
    private string resourceName_ = "";
    /// <summary>
    /// Name of the resource; can be used to fetch the resource from
    /// Campaign Management API. For Budgets,
    /// the resource name looks like
    /// "customers/&lt;customer id>/budgets/&lt;budget id>"
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ResourceName {
      get { return resourceName_; }
      set {
        resourceName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 3;
    private static readonly pb::FieldCodec<long?> _single_id_codec = pb::FieldCodec.ForStructWrapper<long>(26);
    private long? id_;
    /// <summary>
    /// A Budget is created using the BudgetService ADD operation and is
    /// assigned a Budget ID. The Budget ID is used when modifying the
    /// Budget with BudgetService, or associating the Budget to a
    /// Campaign with CampaignService. A Budget ID can be shared across
    /// different campaigns - the system will then allocate the Budget
    /// among the Campaigns to get the optimum result.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long? Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 4;
    private static readonly pb::FieldCodec<string> _single_name_codec = pb::FieldCodec.ForClassWrapper<string>(34);
    private string name_;
    /// <summary>
    /// Name of the Budget. When creating a Budget through BudgetService,
    /// every explicitly shared Budget must have a non-null non-empty name.
    /// In addition, all explicitly shared Budget names owned by an account
    /// must be distinct. Budgets that are not explicitly shared derive
    /// their name from the attached Campaign's name.
    ///
    /// The length of this string should be between 1 and 255, inclusive,
    /// in UTF-8 bytes, (trimmed).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = value;
      }
    }

    /// <summary>Field number for the "amount_micros" field.</summary>
    public const int AmountMicrosFieldNumber = 5;
    private static readonly pb::FieldCodec<long?> _single_amountMicros_codec = pb::FieldCodec.ForStructWrapper<long>(42);
    private long? amountMicros_;
    /// <summary>
    /// Amount of budget in the local currency for the account.
    /// Amount is specified in micros and one million is equivalent to one unit.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long? AmountMicros {
      get { return amountMicros_; }
      set {
        amountMicros_ = value;
      }
    }

    /// <summary>Field number for the "status" field.</summary>
    public const int StatusFieldNumber = 6;
    private global::Google.Ads.GoogleAds.V0.Enums.BudgetStatusEnum.Types.BudgetStatus status_ = 0;
    /// <summary>
    /// Status of this Budget.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Ads.GoogleAds.V0.Enums.BudgetStatusEnum.Types.BudgetStatus Status {
      get { return status_; }
      set {
        status_ = value;
      }
    }

    /// <summary>Field number for the "delivery_method" field.</summary>
    public const int DeliveryMethodFieldNumber = 7;
    private global::Google.Ads.GoogleAds.V0.Enums.BudgetDeliveryMethodEnum.Types.BudgetDeliveryMethod deliveryMethod_ = 0;
    /// <summary>
    /// Delivery method determines the rate at which the Budget is spent.
    /// Defaults to STANDARD if unspecified in a create operation.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Ads.GoogleAds.V0.Enums.BudgetDeliveryMethodEnum.Types.BudgetDeliveryMethod DeliveryMethod {
      get { return deliveryMethod_; }
      set {
        deliveryMethod_ = value;
      }
    }

    /// <summary>Field number for the "explicitly_shared" field.</summary>
    public const int ExplicitlySharedFieldNumber = 8;
    private static readonly pb::FieldCodec<bool?> _single_explicitlyShared_codec = pb::FieldCodec.ForStructWrapper<bool>(66);
    private bool? explicitlyShared_;
    /// <summary>
    /// If true, this budget was created with the purpose of sharing
    /// this budget across one or more campaigns.
    /// If false, this budget was created with the intention of only being used
    /// with a single campaign. The budget's name and status will stay in sync
    /// with the campaign's name and status.
    /// Attempting to share this budget with a second campaign
    /// will result in an error.
    /// Non-shared budget can become an explicitly shared.
    /// The same operation is also required to assign this budget a name.
    /// Shared Budget can never become non-shared.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool? ExplicitlyShared {
      get { return explicitlyShared_; }
      set {
        explicitlyShared_ = value;
      }
    }

    /// <summary>Field number for the "reference_count" field.</summary>
    public const int ReferenceCountFieldNumber = 9;
    private static readonly pb::FieldCodec<long?> _single_referenceCount_codec = pb::FieldCodec.ForStructWrapper<long>(74);
    private long? referenceCount_;
    /// <summary>
    /// Number of campaigns actively using this budget.
    /// This field is read only.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long? ReferenceCount {
      get { return referenceCount_; }
      set {
        referenceCount_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Budget);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Budget other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ResourceName != other.ResourceName) return false;
      if (Id != other.Id) return false;
      if (Name != other.Name) return false;
      if (AmountMicros != other.AmountMicros) return false;
      if (Status != other.Status) return false;
      if (DeliveryMethod != other.DeliveryMethod) return false;
      if (ExplicitlyShared != other.ExplicitlyShared) return false;
      if (ReferenceCount != other.ReferenceCount) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ResourceName.Length != 0) hash ^= ResourceName.GetHashCode();
      if (id_ != null) hash ^= Id.GetHashCode();
      if (name_ != null) hash ^= Name.GetHashCode();
      if (amountMicros_ != null) hash ^= AmountMicros.GetHashCode();
      if (Status != 0) hash ^= Status.GetHashCode();
      if (DeliveryMethod != 0) hash ^= DeliveryMethod.GetHashCode();
      if (explicitlyShared_ != null) hash ^= ExplicitlyShared.GetHashCode();
      if (referenceCount_ != null) hash ^= ReferenceCount.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ResourceName.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(ResourceName);
      }
      if (id_ != null) {
        _single_id_codec.WriteTagAndValue(output, Id);
      }
      if (name_ != null) {
        _single_name_codec.WriteTagAndValue(output, Name);
      }
      if (amountMicros_ != null) {
        _single_amountMicros_codec.WriteTagAndValue(output, AmountMicros);
      }
      if (Status != 0) {
        output.WriteRawTag(48);
        output.WriteEnum((int) Status);
      }
      if (DeliveryMethod != 0) {
        output.WriteRawTag(56);
        output.WriteEnum((int) DeliveryMethod);
      }
      if (explicitlyShared_ != null) {
        _single_explicitlyShared_codec.WriteTagAndValue(output, ExplicitlyShared);
      }
      if (referenceCount_ != null) {
        _single_referenceCount_codec.WriteTagAndValue(output, ReferenceCount);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ResourceName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ResourceName);
      }
      if (id_ != null) {
        size += _single_id_codec.CalculateSizeWithTag(Id);
      }
      if (name_ != null) {
        size += _single_name_codec.CalculateSizeWithTag(Name);
      }
      if (amountMicros_ != null) {
        size += _single_amountMicros_codec.CalculateSizeWithTag(AmountMicros);
      }
      if (Status != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Status);
      }
      if (DeliveryMethod != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) DeliveryMethod);
      }
      if (explicitlyShared_ != null) {
        size += _single_explicitlyShared_codec.CalculateSizeWithTag(ExplicitlyShared);
      }
      if (referenceCount_ != null) {
        size += _single_referenceCount_codec.CalculateSizeWithTag(ReferenceCount);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Budget other) {
      if (other == null) {
        return;
      }
      if (other.ResourceName.Length != 0) {
        ResourceName = other.ResourceName;
      }
      if (other.id_ != null) {
        if (id_ == null || other.Id != 0L) {
          Id = other.Id;
        }
      }
      if (other.name_ != null) {
        if (name_ == null || other.Name != "") {
          Name = other.Name;
        }
      }
      if (other.amountMicros_ != null) {
        if (amountMicros_ == null || other.AmountMicros != 0L) {
          AmountMicros = other.AmountMicros;
        }
      }
      if (other.Status != 0) {
        Status = other.Status;
      }
      if (other.DeliveryMethod != 0) {
        DeliveryMethod = other.DeliveryMethod;
      }
      if (other.explicitlyShared_ != null) {
        if (explicitlyShared_ == null || other.ExplicitlyShared != false) {
          ExplicitlyShared = other.ExplicitlyShared;
        }
      }
      if (other.referenceCount_ != null) {
        if (referenceCount_ == null || other.ReferenceCount != 0L) {
          ReferenceCount = other.ReferenceCount;
        }
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            ResourceName = input.ReadString();
            break;
          }
          case 26: {
            long? value = _single_id_codec.Read(input);
            if (id_ == null || value != 0L) {
              Id = value;
            }
            break;
          }
          case 34: {
            string value = _single_name_codec.Read(input);
            if (name_ == null || value != "") {
              Name = value;
            }
            break;
          }
          case 42: {
            long? value = _single_amountMicros_codec.Read(input);
            if (amountMicros_ == null || value != 0L) {
              AmountMicros = value;
            }
            break;
          }
          case 48: {
            status_ = (global::Google.Ads.GoogleAds.V0.Enums.BudgetStatusEnum.Types.BudgetStatus) input.ReadEnum();
            break;
          }
          case 56: {
            deliveryMethod_ = (global::Google.Ads.GoogleAds.V0.Enums.BudgetDeliveryMethodEnum.Types.BudgetDeliveryMethod) input.ReadEnum();
            break;
          }
          case 66: {
            bool? value = _single_explicitlyShared_codec.Read(input);
            if (explicitlyShared_ == null || value != false) {
              ExplicitlyShared = value;
            }
            break;
          }
          case 74: {
            long? value = _single_referenceCount_codec.Read(input);
            if (referenceCount_ == null || value != 0L) {
              ReferenceCount = value;
            }
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
