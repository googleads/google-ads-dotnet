// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: google/ads/googleads/v0/errors/media_error.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Google.Ads.GoogleAds.V0.Errors {

  /// <summary>Holder for reflection information generated from google/ads/googleads/v0/errors/media_error.proto</summary>
  public static partial class MediaErrorReflection {

    #region Descriptor
    /// <summary>File descriptor for google/ads/googleads/v0/errors/media_error.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static MediaErrorReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CjBnb29nbGUvYWRzL2dvb2dsZWFkcy92MC9lcnJvcnMvbWVkaWFfZXJyb3Iu",
            "cHJvdG8SHmdvb2dsZS5hZHMuZ29vZ2xlYWRzLnYwLmVycm9ycyKPBgoOTWVk",
            "aWFFcnJvckVudW0i/AUKCk1lZGlhRXJyb3ISDwoLVU5TUEVDSUZJRUQQABIL",
            "CgdVTktOT1dOEAESHAoYQ0FOTk9UX0FERF9TVEFOREFSRF9JQ09OEAISMAos",
            "Q0FOTk9UX1NFTEVDVF9TVEFOREFSRF9JQ09OX1dJVEhfT1RIRVJfVFlQRVMQ",
            "AxIkCiBDQU5OT1RfU1BFQ0lGWV9NRURJQV9JRF9BTkRfREFUQRAEEhMKD0RV",
            "UExJQ0FURV9NRURJQRAFEg8KC0VNUFRZX0ZJRUxEEAYSJwojUkVTT1VSQ0Vf",
            "UkVGRVJFTkNFRF9JTl9NVUxUSVBMRV9PUFMQBxIqCiZGSUVMRF9OT1RfU1VQ",
            "UE9SVEVEX0ZPUl9NRURJQV9TVUJfVFlQRRAIEhQKEElOVkFMSURfTUVESUFf",
            "SUQQCRIaChZJTlZBTElEX01FRElBX1NVQl9UWVBFEAoSFgoSSU5WQUxJRF9N",
            "RURJQV9UWVBFEAsSFQoRSU5WQUxJRF9NSU1FX1RZUEUQDBIYChRJTlZBTElE",
            "X1JFRkVSRU5DRV9JRBANEhcKE0lOVkFMSURfWU9VX1RVQkVfSUQQDhIcChhN",
            "RURJQV9GQUlMRURfVFJBTlNDT0RJTkcQDxIYChRNRURJQV9OT1RfVFJBTlND",
            "T0RFRBAQEikKJU1FRElBX1RZUEVfRE9FU19OT1RfTUFUQ0hfT0JKRUNUX1RZ",
            "UEUQERIXChNOT19GSUVMRFNfU1BFQ0lGSUVEEBISIgoeTlVMTF9SRUZFUkVO",
            "Q0VfSURfQU5EX01FRElBX0lEEBMSDAoIVE9PX0xPTkcQFBIZChVVTlNVUFBP",
            "UlRFRF9PUEVSQVRJT04QFRIUChBVTlNVUFBPUlRFRF9UWVBFEBYSIAocWU9V",
            "X1RVQkVfU0VSVklDRV9VTkFWQUlMQUJMRRAXEiwKKFlPVV9UVUJFX1ZJREVP",
            "X0hBU19OT05fUE9TSVRJVkVfRFVSQVRJT04QGBIcChhZT1VfVFVCRV9WSURF",
            "T19OT1RfRk9VTkQQGULFAQoiY29tLmdvb2dsZS5hZHMuZ29vZ2xlYWRzLnYw",
            "LmVycm9yc0IPTWVkaWFFcnJvclByb3RvUAFaRGdvb2dsZS5nb2xhbmcub3Jn",
            "L2dlbnByb3RvL2dvb2dsZWFwaXMvYWRzL2dvb2dsZWFkcy92MC9lcnJvcnM7",
            "ZXJyb3JzogIDR0FBqgIeR29vZ2xlLkFkcy5Hb29nbGVBZHMuVjAuRXJyb3Jz",
            "ygIeR29vZ2xlXEFkc1xHb29nbGVBZHNcVjBcRXJyb3JzYgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Ads.GoogleAds.V0.Errors.MediaErrorEnum), global::Google.Ads.GoogleAds.V0.Errors.MediaErrorEnum.Parser, null, null, new[]{ typeof(global::Google.Ads.GoogleAds.V0.Errors.MediaErrorEnum.Types.MediaError) }, null)
          }));
    }
    #endregion

  }
  #region Messages
  /// <summary>
  /// Container for enum describing possible media errors.
  /// </summary>
  public sealed partial class MediaErrorEnum : pb::IMessage<MediaErrorEnum> {
    private static readonly pb::MessageParser<MediaErrorEnum> _parser = new pb::MessageParser<MediaErrorEnum>(() => new MediaErrorEnum());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MediaErrorEnum> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Ads.GoogleAds.V0.Errors.MediaErrorReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MediaErrorEnum() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MediaErrorEnum(MediaErrorEnum other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MediaErrorEnum Clone() {
      return new MediaErrorEnum(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MediaErrorEnum);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MediaErrorEnum other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MediaErrorEnum other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the MediaErrorEnum message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      /// <summary>
      /// Enum describing possible media errors.
      /// </summary>
      public enum MediaError {
        /// <summary>
        /// Enum unspecified.
        /// </summary>
        [pbr::OriginalName("UNSPECIFIED")] Unspecified = 0,
        /// <summary>
        /// The received error code is not known in this version.
        /// </summary>
        [pbr::OriginalName("UNKNOWN")] Unknown = 1,
        /// <summary>
        /// Cannot add a standard icon type
        /// </summary>
        [pbr::OriginalName("CANNOT_ADD_STANDARD_ICON")] CannotAddStandardIcon = 2,
        /// <summary>
        /// May only select Standard Icons alone
        /// </summary>
        [pbr::OriginalName("CANNOT_SELECT_STANDARD_ICON_WITH_OTHER_TYPES")] CannotSelectStandardIconWithOtherTypes = 3,
        /// <summary>
        /// Image contains both a media ID and media data.
        /// </summary>
        [pbr::OriginalName("CANNOT_SPECIFY_MEDIA_ID_AND_DATA")] CannotSpecifyMediaIdAndData = 4,
        /// <summary>
        /// A media with given type and reference id already exists
        /// </summary>
        [pbr::OriginalName("DUPLICATE_MEDIA")] DuplicateMedia = 5,
        /// <summary>
        /// A required field was not specified or is an empty string.
        /// </summary>
        [pbr::OriginalName("EMPTY_FIELD")] EmptyField = 6,
        /// <summary>
        /// A media may only be modified once per call
        /// </summary>
        [pbr::OriginalName("RESOURCE_REFERENCED_IN_MULTIPLE_OPS")] ResourceReferencedInMultipleOps = 7,
        /// <summary>
        /// Field is not supported for the media sub type.
        /// </summary>
        [pbr::OriginalName("FIELD_NOT_SUPPORTED_FOR_MEDIA_SUB_TYPE")] FieldNotSupportedForMediaSubType = 8,
        /// <summary>
        /// The media id is invalid
        /// </summary>
        [pbr::OriginalName("INVALID_MEDIA_ID")] InvalidMediaId = 9,
        /// <summary>
        /// The media subtype is invalid
        /// </summary>
        [pbr::OriginalName("INVALID_MEDIA_SUB_TYPE")] InvalidMediaSubType = 10,
        /// <summary>
        /// The media type is invalid
        /// </summary>
        [pbr::OriginalName("INVALID_MEDIA_TYPE")] InvalidMediaType = 11,
        /// <summary>
        /// The mimetype is invalid
        /// </summary>
        [pbr::OriginalName("INVALID_MIME_TYPE")] InvalidMimeType = 12,
        /// <summary>
        /// The media reference id is invalid
        /// </summary>
        [pbr::OriginalName("INVALID_REFERENCE_ID")] InvalidReferenceId = 13,
        /// <summary>
        /// The YouTube video id is invalid
        /// </summary>
        [pbr::OriginalName("INVALID_YOU_TUBE_ID")] InvalidYouTubeId = 14,
        /// <summary>
        /// Media has failed transcoding
        /// </summary>
        [pbr::OriginalName("MEDIA_FAILED_TRANSCODING")] MediaFailedTranscoding = 15,
        /// <summary>
        /// Media has not been transcoded
        /// </summary>
        [pbr::OriginalName("MEDIA_NOT_TRANSCODED")] MediaNotTranscoded = 16,
        /// <summary>
        /// The MediaType does not match the actual media object's type
        /// </summary>
        [pbr::OriginalName("MEDIA_TYPE_DOES_NOT_MATCH_OBJECT_TYPE")] MediaTypeDoesNotMatchObjectType = 17,
        /// <summary>
        /// None of the fields have been specified.
        /// </summary>
        [pbr::OriginalName("NO_FIELDS_SPECIFIED")] NoFieldsSpecified = 18,
        /// <summary>
        /// One of reference Id or media Id must be specified
        /// </summary>
        [pbr::OriginalName("NULL_REFERENCE_ID_AND_MEDIA_ID")] NullReferenceIdAndMediaId = 19,
        /// <summary>
        /// The string has too many characters.
        /// </summary>
        [pbr::OriginalName("TOO_LONG")] TooLong = 20,
        /// <summary>
        /// The specified operation is not supported. Only ADD, SET, and REMOVE are
        /// supported
        /// </summary>
        [pbr::OriginalName("UNSUPPORTED_OPERATION")] UnsupportedOperation = 21,
        /// <summary>
        /// The specified type is not supported.
        /// </summary>
        [pbr::OriginalName("UNSUPPORTED_TYPE")] UnsupportedType = 22,
        /// <summary>
        /// YouTube is unavailable for requesting video data.
        /// </summary>
        [pbr::OriginalName("YOU_TUBE_SERVICE_UNAVAILABLE")] YouTubeServiceUnavailable = 23,
        /// <summary>
        /// The YouTube video has a non positive duration.
        /// </summary>
        [pbr::OriginalName("YOU_TUBE_VIDEO_HAS_NON_POSITIVE_DURATION")] YouTubeVideoHasNonPositiveDuration = 24,
        /// <summary>
        /// The YouTube video id is syntactically valid but the video was not found.
        /// </summary>
        [pbr::OriginalName("YOU_TUBE_VIDEO_NOT_FOUND")] YouTubeVideoNotFound = 25,
      }

    }
    #endregion

  }

  #endregion

}

#endregion Designer generated code
