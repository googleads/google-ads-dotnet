// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: google/ads/googleads/v0/common/metrics.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Google.Ads.GoogleAds.V0.Common {

  /// <summary>Holder for reflection information generated from google/ads/googleads/v0/common/metrics.proto</summary>
  public static partial class MetricsReflection {

    #region Descriptor
    /// <summary>File descriptor for google/ads/googleads/v0/common/metrics.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static MetricsReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Cixnb29nbGUvYWRzL2dvb2dsZWFkcy92MC9jb21tb24vbWV0cmljcy5wcm90",
            "bxIeZ29vZ2xlLmFkcy5nb29nbGVhZHMudjAuY29tbW9uGh5nb29nbGUvcHJv",
            "dG9idWYvd3JhcHBlcnMucHJvdG8ivBoKB01ldHJpY3MSTAomYWxsX2NvbnZl",
            "cnNpb25zX2Zyb21faW50ZXJhY3Rpb25zX3JhdGUYQSABKAsyHC5nb29nbGUu",
            "cHJvdG9idWYuRG91YmxlVmFsdWUSOwoVYWxsX2NvbnZlcnNpb25zX3ZhbHVl",
            "GEIgASgLMhwuZ29vZ2xlLnByb3RvYnVmLkRvdWJsZVZhbHVlEjUKD2FsbF9j",
            "b252ZXJzaW9ucxgHIAEoCzIcLmdvb2dsZS5wcm90b2J1Zi5Eb3VibGVWYWx1",
            "ZRJECh5hbGxfY29udmVyc2lvbnNfdmFsdWVfcGVyX2Nvc3QYPiABKAsyHC5n",
            "b29nbGUucHJvdG9idWYuRG91YmxlVmFsdWUSXQo3YWxsX2NvbnZlcnNpb25z",
            "X2Zyb21faW50ZXJhY3Rpb25zX3ZhbHVlX3Blcl9pbnRlcmFjdGlvbhhDIAEo",
            "CzIcLmdvb2dsZS5wcm90b2J1Zi5Eb3VibGVWYWx1ZRIyCgxhdmVyYWdlX2Nv",
            "c3QYCCABKAsyHC5nb29nbGUucHJvdG9idWYuRG91YmxlVmFsdWUSMQoLYXZl",
            "cmFnZV9jcGMYCSABKAsyHC5nb29nbGUucHJvdG9idWYuRG91YmxlVmFsdWUS",
            "MQoLYXZlcmFnZV9jcG0YCiABKAsyHC5nb29nbGUucHJvdG9idWYuRG91Ymxl",
            "VmFsdWUSMQoLYXZlcmFnZV9jcHYYCyABKAsyHC5nb29nbGUucHJvdG9idWYu",
            "RG91YmxlVmFsdWUSNgoQYXZlcmFnZV9wb3NpdGlvbhgNIAEoCzIcLmdvb2ds",
            "ZS5wcm90b2J1Zi5Eb3VibGVWYWx1ZRIzCg1iZW5jaG1hcmtfY3RyGE0gASgL",
            "MhwuZ29vZ2xlLnByb3RvYnVmLkRvdWJsZVZhbHVlEjEKC2JvdW5jZV9yYXRl",
            "GA8gASgLMhwuZ29vZ2xlLnByb3RvYnVmLkRvdWJsZVZhbHVlEisKBmNsaWNr",
            "cxgTIAEoCzIbLmdvb2dsZS5wcm90b2J1Zi5JbnQ2NFZhbHVlEkoKJGNvbnRl",
            "bnRfYnVkZ2V0X2xvc3RfaW1wcmVzc2lvbl9zaGFyZRgUIAEoCzIcLmdvb2ds",
            "ZS5wcm90b2J1Zi5Eb3VibGVWYWx1ZRI+Chhjb250ZW50X2ltcHJlc3Npb25f",
            "c2hhcmUYFSABKAsyHC5nb29nbGUucHJvdG9idWYuRG91YmxlVmFsdWUSUAoq",
            "Y29udmVyc2lvbl9sYXN0X3JlY2VpdmVkX3JlcXVlc3RfZGF0ZV90aW1lGEkg",
            "ASgLMhwuZ29vZ2xlLnByb3RvYnVmLlN0cmluZ1ZhbHVlEkUKH2NvbnZlcnNp",
            "b25fbGFzdF9jb252ZXJzaW9uX2RhdGUYSiABKAsyHC5nb29nbGUucHJvdG9i",
            "dWYuU3RyaW5nVmFsdWUSSAoiY29udGVudF9yYW5rX2xvc3RfaW1wcmVzc2lv",
            "bl9zaGFyZRgWIAEoCzIcLmdvb2dsZS5wcm90b2J1Zi5Eb3VibGVWYWx1ZRJI",
            "CiJjb252ZXJzaW9uc19mcm9tX2ludGVyYWN0aW9uc19yYXRlGEUgASgLMhwu",
            "Z29vZ2xlLnByb3RvYnVmLkRvdWJsZVZhbHVlEjcKEWNvbnZlcnNpb25zX3Zh",
            "bHVlGEYgASgLMhwuZ29vZ2xlLnByb3RvYnVmLkRvdWJsZVZhbHVlEkAKGmNv",
            "bnZlcnNpb25zX3ZhbHVlX3Blcl9jb3N0GEcgASgLMhwuZ29vZ2xlLnByb3Rv",
            "YnVmLkRvdWJsZVZhbHVlElkKM2NvbnZlcnNpb25zX2Zyb21faW50ZXJhY3Rp",
            "b25zX3ZhbHVlX3Blcl9pbnRlcmFjdGlvbhhIIAEoCzIcLmdvb2dsZS5wcm90",
            "b2J1Zi5Eb3VibGVWYWx1ZRIxCgtjb252ZXJzaW9ucxgZIAEoCzIcLmdvb2ds",
            "ZS5wcm90b2J1Zi5Eb3VibGVWYWx1ZRIwCgtjb3N0X21pY3JvcxgaIAEoCzIb",
            "Lmdvb2dsZS5wcm90b2J1Zi5JbnQ2NFZhbHVlEj4KGGNvc3RfcGVyX2FsbF9j",
            "b252ZXJzaW9ucxhEIAEoCzIcLmdvb2dsZS5wcm90b2J1Zi5Eb3VibGVWYWx1",
            "ZRI5ChNjb3N0X3Blcl9jb252ZXJzaW9uGBwgASgLMhwuZ29vZ2xlLnByb3Rv",
            "YnVmLkRvdWJsZVZhbHVlEj4KGGNyb3NzX2RldmljZV9jb252ZXJzaW9ucxgd",
            "IAEoCzIcLmdvb2dsZS5wcm90b2J1Zi5Eb3VibGVWYWx1ZRIpCgNjdHIYHiAB",
            "KAsyHC5nb29nbGUucHJvdG9idWYuRG91YmxlVmFsdWUSNQoPZW5nYWdlbWVu",
            "dF9yYXRlGB8gASgLMhwuZ29vZ2xlLnByb3RvYnVmLkRvdWJsZVZhbHVlEjAK",
            "C2VuZ2FnZW1lbnRzGCAgASgLMhsuZ29vZ2xlLnByb3RvYnVmLkludDY0VmFs",
            "dWUSRQofaG90ZWxfYXZlcmFnZV9sZWFkX3ZhbHVlX21pY3JvcxhLIAEoCzIc",
            "Lmdvb2dsZS5wcm90b2J1Zi5Eb3VibGVWYWx1ZRIwCgtpbXByZXNzaW9ucxgl",
            "IAEoCzIbLmdvb2dsZS5wcm90b2J1Zi5JbnQ2NFZhbHVlEjYKEGludGVyYWN0",
            "aW9uX3JhdGUYJiABKAsyHC5nb29nbGUucHJvdG9idWYuRG91YmxlVmFsdWUS",
            "MQoMaW50ZXJhY3Rpb25zGCcgASgLMhsuZ29vZ2xlLnByb3RvYnVmLkludDY0",
            "VmFsdWUSOAoSaW52YWxpZF9jbGlja19yYXRlGCggASgLMhwuZ29vZ2xlLnBy",
            "b3RvYnVmLkRvdWJsZVZhbHVlEjMKDmludmFsaWRfY2xpY2tzGCkgASgLMhsu",
            "Z29vZ2xlLnByb3RvYnVmLkludDY0VmFsdWUSOgoUcGVyY2VudF9uZXdfdmlz",
            "aXRvcnMYKiABKAsyHC5nb29nbGUucHJvdG9idWYuRG91YmxlVmFsdWUSMAoL",
            "cGhvbmVfY2FsbHMYKyABKAsyGy5nb29nbGUucHJvdG9idWYuSW50NjRWYWx1",
            "ZRI2ChFwaG9uZV9pbXByZXNzaW9ucxgsIAEoCzIbLmdvb2dsZS5wcm90b2J1",
            "Zi5JbnQ2NFZhbHVlEjgKEnBob25lX3Rocm91Z2hfcmF0ZRgtIAEoCzIcLmdv",
            "b2dsZS5wcm90b2J1Zi5Eb3VibGVWYWx1ZRIyCgxyZWxhdGl2ZV9jdHIYLiAB",
            "KAsyHC5nb29nbGUucHJvdG9idWYuRG91YmxlVmFsdWUSSgokc2VhcmNoX2Fi",
            "c29sdXRlX3RvcF9pbXByZXNzaW9uX3NoYXJlGE4gASgLMhwuZ29vZ2xlLnBy",
            "b3RvYnVmLkRvdWJsZVZhbHVlEkkKI3NlYXJjaF9idWRnZXRfbG9zdF9pbXBy",
            "ZXNzaW9uX3NoYXJlGC8gASgLMhwuZ29vZ2xlLnByb3RvYnVmLkRvdWJsZVZh",
            "bHVlEkkKI3NlYXJjaF9leGFjdF9tYXRjaF9pbXByZXNzaW9uX3NoYXJlGDEg",
            "ASgLMhwuZ29vZ2xlLnByb3RvYnVmLkRvdWJsZVZhbHVlEj0KF3NlYXJjaF9p",
            "bXByZXNzaW9uX3NoYXJlGDIgASgLMhwuZ29vZ2xlLnByb3RvYnVmLkRvdWJs",
            "ZVZhbHVlEkcKIXNlYXJjaF9yYW5rX2xvc3RfaW1wcmVzc2lvbl9zaGFyZRgz",
            "IAEoCzIcLmdvb2dsZS5wcm90b2J1Zi5Eb3VibGVWYWx1ZRI/Chl2YWx1ZV9w",
            "ZXJfYWxsX2NvbnZlcnNpb25zGDQgASgLMhwuZ29vZ2xlLnByb3RvYnVmLkRv",
            "dWJsZVZhbHVlEjoKFHZhbHVlX3Blcl9jb252ZXJzaW9uGDUgASgLMhwuZ29v",
            "Z2xlLnByb3RvYnVmLkRvdWJsZVZhbHVlEj0KF3ZpZGVvX3F1YXJ0aWxlXzEw",
            "MF9yYXRlGDYgASgLMhwuZ29vZ2xlLnByb3RvYnVmLkRvdWJsZVZhbHVlEjwK",
            "FnZpZGVvX3F1YXJ0aWxlXzI1X3JhdGUYNyABKAsyHC5nb29nbGUucHJvdG9i",
            "dWYuRG91YmxlVmFsdWUSPAoWdmlkZW9fcXVhcnRpbGVfNTBfcmF0ZRg4IAEo",
            "CzIcLmdvb2dsZS5wcm90b2J1Zi5Eb3VibGVWYWx1ZRI8ChZ2aWRlb19xdWFy",
            "dGlsZV83NV9yYXRlGDkgASgLMhwuZ29vZ2xlLnByb3RvYnVmLkRvdWJsZVZh",
            "bHVlEjUKD3ZpZGVvX3ZpZXdfcmF0ZRg6IAEoCzIcLmdvb2dsZS5wcm90b2J1",
            "Zi5Eb3VibGVWYWx1ZRIwCgt2aWRlb192aWV3cxg7IAEoCzIbLmdvb2dsZS5w",
            "cm90b2J1Zi5JbnQ2NFZhbHVlEj0KGHZpZXdfdGhyb3VnaF9jb252ZXJzaW9u",
            "cxg8IAEoCzIbLmdvb2dsZS5wcm90b2J1Zi5JbnQ2NFZhbHVlQsIBCiJjb20u",
            "Z29vZ2xlLmFkcy5nb29nbGVhZHMudjAuY29tbW9uQgxNZXRyaWNzUHJvdG9Q",
            "AVpEZ29vZ2xlLmdvbGFuZy5vcmcvZ2VucHJvdG8vZ29vZ2xlYXBpcy9hZHMv",
            "Z29vZ2xlYWRzL3YwL2NvbW1vbjtjb21tb26iAgNHQUGqAh5Hb29nbGUuQWRz",
            "Lkdvb2dsZUFkcy5WMC5Db21tb27KAh5Hb29nbGVcQWRzXEdvb2dsZUFkc1xW",
            "MFxDb21tb25iBnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Google.Protobuf.WellKnownTypes.WrappersReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Ads.GoogleAds.V0.Common.Metrics), global::Google.Ads.GoogleAds.V0.Common.Metrics.Parser, new[]{ "AllConversionsFromInteractionsRate", "AllConversionsValue", "AllConversions", "AllConversionsValuePerCost", "AllConversionsFromInteractionsValuePerInteraction", "AverageCost", "AverageCpc", "AverageCpm", "AverageCpv", "AveragePosition", "BenchmarkCtr", "BounceRate", "Clicks", "ContentBudgetLostImpressionShare", "ContentImpressionShare", "ConversionLastReceivedRequestDateTime", "ConversionLastConversionDate", "ContentRankLostImpressionShare", "ConversionsFromInteractionsRate", "ConversionsValue", "ConversionsValuePerCost", "ConversionsFromInteractionsValuePerInteraction", "Conversions", "CostMicros", "CostPerAllConversions", "CostPerConversion", "CrossDeviceConversions", "Ctr", "EngagementRate", "Engagements", "HotelAverageLeadValueMicros", "Impressions", "InteractionRate", "Interactions", "InvalidClickRate", "InvalidClicks", "PercentNewVisitors", "PhoneCalls", "PhoneImpressions", "PhoneThroughRate", "RelativeCtr", "SearchAbsoluteTopImpressionShare", "SearchBudgetLostImpressionShare", "SearchExactMatchImpressionShare", "SearchImpressionShare", "SearchRankLostImpressionShare", "ValuePerAllConversions", "ValuePerConversion", "VideoQuartile100Rate", "VideoQuartile25Rate", "VideoQuartile50Rate", "VideoQuartile75Rate", "VideoViewRate", "VideoViews", "ViewThroughConversions" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  /// <summary>
  /// Metrics data.
  /// </summary>
  public sealed partial class Metrics : pb::IMessage<Metrics> {
    private static readonly pb::MessageParser<Metrics> _parser = new pb::MessageParser<Metrics>(() => new Metrics());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Metrics> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Ads.GoogleAds.V0.Common.MetricsReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Metrics() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Metrics(Metrics other) : this() {
      AllConversionsFromInteractionsRate = other.AllConversionsFromInteractionsRate;
      AllConversionsValue = other.AllConversionsValue;
      AllConversions = other.AllConversions;
      AllConversionsValuePerCost = other.AllConversionsValuePerCost;
      AllConversionsFromInteractionsValuePerInteraction = other.AllConversionsFromInteractionsValuePerInteraction;
      AverageCost = other.AverageCost;
      AverageCpc = other.AverageCpc;
      AverageCpm = other.AverageCpm;
      AverageCpv = other.AverageCpv;
      AveragePosition = other.AveragePosition;
      BenchmarkCtr = other.BenchmarkCtr;
      BounceRate = other.BounceRate;
      Clicks = other.Clicks;
      ContentBudgetLostImpressionShare = other.ContentBudgetLostImpressionShare;
      ContentImpressionShare = other.ContentImpressionShare;
      ConversionLastReceivedRequestDateTime = other.ConversionLastReceivedRequestDateTime;
      ConversionLastConversionDate = other.ConversionLastConversionDate;
      ContentRankLostImpressionShare = other.ContentRankLostImpressionShare;
      ConversionsFromInteractionsRate = other.ConversionsFromInteractionsRate;
      ConversionsValue = other.ConversionsValue;
      ConversionsValuePerCost = other.ConversionsValuePerCost;
      ConversionsFromInteractionsValuePerInteraction = other.ConversionsFromInteractionsValuePerInteraction;
      Conversions = other.Conversions;
      CostMicros = other.CostMicros;
      CostPerAllConversions = other.CostPerAllConversions;
      CostPerConversion = other.CostPerConversion;
      CrossDeviceConversions = other.CrossDeviceConversions;
      Ctr = other.Ctr;
      EngagementRate = other.EngagementRate;
      Engagements = other.Engagements;
      HotelAverageLeadValueMicros = other.HotelAverageLeadValueMicros;
      Impressions = other.Impressions;
      InteractionRate = other.InteractionRate;
      Interactions = other.Interactions;
      InvalidClickRate = other.InvalidClickRate;
      InvalidClicks = other.InvalidClicks;
      PercentNewVisitors = other.PercentNewVisitors;
      PhoneCalls = other.PhoneCalls;
      PhoneImpressions = other.PhoneImpressions;
      PhoneThroughRate = other.PhoneThroughRate;
      RelativeCtr = other.RelativeCtr;
      SearchAbsoluteTopImpressionShare = other.SearchAbsoluteTopImpressionShare;
      SearchBudgetLostImpressionShare = other.SearchBudgetLostImpressionShare;
      SearchExactMatchImpressionShare = other.SearchExactMatchImpressionShare;
      SearchImpressionShare = other.SearchImpressionShare;
      SearchRankLostImpressionShare = other.SearchRankLostImpressionShare;
      ValuePerAllConversions = other.ValuePerAllConversions;
      ValuePerConversion = other.ValuePerConversion;
      VideoQuartile100Rate = other.VideoQuartile100Rate;
      VideoQuartile25Rate = other.VideoQuartile25Rate;
      VideoQuartile50Rate = other.VideoQuartile50Rate;
      VideoQuartile75Rate = other.VideoQuartile75Rate;
      VideoViewRate = other.VideoViewRate;
      VideoViews = other.VideoViews;
      ViewThroughConversions = other.ViewThroughConversions;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Metrics Clone() {
      return new Metrics(this);
    }

    /// <summary>Field number for the "all_conversions_from_interactions_rate" field.</summary>
    public const int AllConversionsFromInteractionsRateFieldNumber = 65;
    private static readonly pb::FieldCodec<double?> _single_allConversionsFromInteractionsRate_codec = pb::FieldCodec.ForStructWrapper<double>(522);
    private double? allConversionsFromInteractionsRate_;
    /// <summary>
    /// All conversions from interactions (as oppose to view through conversions)
    /// divided by the number of ad interactions.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double? AllConversionsFromInteractionsRate {
      get { return allConversionsFromInteractionsRate_; }
      set {
        allConversionsFromInteractionsRate_ = value;
      }
    }

    /// <summary>Field number for the "all_conversions_value" field.</summary>
    public const int AllConversionsValueFieldNumber = 66;
    private static readonly pb::FieldCodec<double?> _single_allConversionsValue_codec = pb::FieldCodec.ForStructWrapper<double>(530);
    private double? allConversionsValue_;
    /// <summary>
    /// The total value of all conversions.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double? AllConversionsValue {
      get { return allConversionsValue_; }
      set {
        allConversionsValue_ = value;
      }
    }

    /// <summary>Field number for the "all_conversions" field.</summary>
    public const int AllConversionsFieldNumber = 7;
    private static readonly pb::FieldCodec<double?> _single_allConversions_codec = pb::FieldCodec.ForStructWrapper<double>(58);
    private double? allConversions_;
    /// <summary>
    /// The total number of conversions. This includes "Conversions" plus
    /// conversions that have their "Include in Conversions" setting unchecked.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double? AllConversions {
      get { return allConversions_; }
      set {
        allConversions_ = value;
      }
    }

    /// <summary>Field number for the "all_conversions_value_per_cost" field.</summary>
    public const int AllConversionsValuePerCostFieldNumber = 62;
    private static readonly pb::FieldCodec<double?> _single_allConversionsValuePerCost_codec = pb::FieldCodec.ForStructWrapper<double>(498);
    private double? allConversionsValuePerCost_;
    /// <summary>
    /// The value of all conversions divided by the total cost of ad interactions
    /// (such as clicks for text ads or views for video ads).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double? AllConversionsValuePerCost {
      get { return allConversionsValuePerCost_; }
      set {
        allConversionsValuePerCost_ = value;
      }
    }

    /// <summary>Field number for the "all_conversions_from_interactions_value_per_interaction" field.</summary>
    public const int AllConversionsFromInteractionsValuePerInteractionFieldNumber = 67;
    private static readonly pb::FieldCodec<double?> _single_allConversionsFromInteractionsValuePerInteraction_codec = pb::FieldCodec.ForStructWrapper<double>(538);
    private double? allConversionsFromInteractionsValuePerInteraction_;
    /// <summary>
    /// The value of all conversions from interactions divided by the total number
    /// of interactions.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double? AllConversionsFromInteractionsValuePerInteraction {
      get { return allConversionsFromInteractionsValuePerInteraction_; }
      set {
        allConversionsFromInteractionsValuePerInteraction_ = value;
      }
    }

    /// <summary>Field number for the "average_cost" field.</summary>
    public const int AverageCostFieldNumber = 8;
    private static readonly pb::FieldCodec<double?> _single_averageCost_codec = pb::FieldCodec.ForStructWrapper<double>(66);
    private double? averageCost_;
    /// <summary>
    /// The average amount you pay per interaction. This amount is the total cost
    /// of your ads divided by the total number of interactions.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double? AverageCost {
      get { return averageCost_; }
      set {
        averageCost_ = value;
      }
    }

    /// <summary>Field number for the "average_cpc" field.</summary>
    public const int AverageCpcFieldNumber = 9;
    private static readonly pb::FieldCodec<double?> _single_averageCpc_codec = pb::FieldCodec.ForStructWrapper<double>(74);
    private double? averageCpc_;
    /// <summary>
    /// The total cost of all clicks divided by the total number of clicks
    /// received.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double? AverageCpc {
      get { return averageCpc_; }
      set {
        averageCpc_ = value;
      }
    }

    /// <summary>Field number for the "average_cpm" field.</summary>
    public const int AverageCpmFieldNumber = 10;
    private static readonly pb::FieldCodec<double?> _single_averageCpm_codec = pb::FieldCodec.ForStructWrapper<double>(82);
    private double? averageCpm_;
    /// <summary>
    /// Average cost-per-thousand impressions (CPM).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double? AverageCpm {
      get { return averageCpm_; }
      set {
        averageCpm_ = value;
      }
    }

    /// <summary>Field number for the "average_cpv" field.</summary>
    public const int AverageCpvFieldNumber = 11;
    private static readonly pb::FieldCodec<double?> _single_averageCpv_codec = pb::FieldCodec.ForStructWrapper<double>(90);
    private double? averageCpv_;
    /// <summary>
    /// The average amount you pay each time someone views your ad.
    /// The average CPV is defined by the total cost of all ad views divided by
    /// the number of views.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double? AverageCpv {
      get { return averageCpv_; }
      set {
        averageCpv_ = value;
      }
    }

    /// <summary>Field number for the "average_position" field.</summary>
    public const int AveragePositionFieldNumber = 13;
    private static readonly pb::FieldCodec<double?> _single_averagePosition_codec = pb::FieldCodec.ForStructWrapper<double>(106);
    private double? averagePosition_;
    /// <summary>
    /// Your ad's position relative to those of other advertisers.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double? AveragePosition {
      get { return averagePosition_; }
      set {
        averagePosition_ = value;
      }
    }

    /// <summary>Field number for the "benchmark_ctr" field.</summary>
    public const int BenchmarkCtrFieldNumber = 77;
    private static readonly pb::FieldCodec<double?> _single_benchmarkCtr_codec = pb::FieldCodec.ForStructWrapper<double>(618);
    private double? benchmarkCtr_;
    /// <summary>
    /// An indication on how other advertisers' Shopping ads for similar products
    /// are performing based on how often people who see their ad click on it.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double? BenchmarkCtr {
      get { return benchmarkCtr_; }
      set {
        benchmarkCtr_ = value;
      }
    }

    /// <summary>Field number for the "bounce_rate" field.</summary>
    public const int BounceRateFieldNumber = 15;
    private static readonly pb::FieldCodec<double?> _single_bounceRate_codec = pb::FieldCodec.ForStructWrapper<double>(122);
    private double? bounceRate_;
    /// <summary>
    /// Percentage of clicks where the user only visited a single page on your
    /// site. Imported from Google Analytics.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double? BounceRate {
      get { return bounceRate_; }
      set {
        bounceRate_ = value;
      }
    }

    /// <summary>Field number for the "clicks" field.</summary>
    public const int ClicksFieldNumber = 19;
    private static readonly pb::FieldCodec<long?> _single_clicks_codec = pb::FieldCodec.ForStructWrapper<long>(154);
    private long? clicks_;
    /// <summary>
    /// The number of clicks.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long? Clicks {
      get { return clicks_; }
      set {
        clicks_ = value;
      }
    }

    /// <summary>Field number for the "content_budget_lost_impression_share" field.</summary>
    public const int ContentBudgetLostImpressionShareFieldNumber = 20;
    private static readonly pb::FieldCodec<double?> _single_contentBudgetLostImpressionShare_codec = pb::FieldCodec.ForStructWrapper<double>(162);
    private double? contentBudgetLostImpressionShare_;
    /// <summary>
    /// The estimated percent of times that your ad was eligible to show
    /// on the Display Network but didn't because your budget was too low.
    /// Note: Content budget lost impression share is reported in the range of 0
    /// to 0.9. Any value above 0.9 is reported as 0.9001.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double? ContentBudgetLostImpressionShare {
      get { return contentBudgetLostImpressionShare_; }
      set {
        contentBudgetLostImpressionShare_ = value;
      }
    }

    /// <summary>Field number for the "content_impression_share" field.</summary>
    public const int ContentImpressionShareFieldNumber = 21;
    private static readonly pb::FieldCodec<double?> _single_contentImpressionShare_codec = pb::FieldCodec.ForStructWrapper<double>(170);
    private double? contentImpressionShare_;
    /// <summary>
    /// The impressions you've received on the Display Network divided
    /// by the estimated number of impressions you were eligible to receive.
    /// Note: Content impression share is reported in the range of 0.1 to 1. Any
    /// value below 0.1 is reported as 0.0999.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double? ContentImpressionShare {
      get { return contentImpressionShare_; }
      set {
        contentImpressionShare_ = value;
      }
    }

    /// <summary>Field number for the "conversion_last_received_request_date_time" field.</summary>
    public const int ConversionLastReceivedRequestDateTimeFieldNumber = 73;
    private static readonly pb::FieldCodec<string> _single_conversionLastReceivedRequestDateTime_codec = pb::FieldCodec.ForClassWrapper<string>(586);
    private string conversionLastReceivedRequestDateTime_;
    /// <summary>
    /// The last date/time a conversion tag for this conversion action successfully
    /// fired and was seen by Google Ads. This firing event may not have been the
    /// result of an attributable conversion (e.g. because the tag was fired from a
    /// browser that did not previously click an ad from an appropriate
    /// advertiser). The date/time is in the customer's time zone.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ConversionLastReceivedRequestDateTime {
      get { return conversionLastReceivedRequestDateTime_; }
      set {
        conversionLastReceivedRequestDateTime_ = value;
      }
    }

    /// <summary>Field number for the "conversion_last_conversion_date" field.</summary>
    public const int ConversionLastConversionDateFieldNumber = 74;
    private static readonly pb::FieldCodec<string> _single_conversionLastConversionDate_codec = pb::FieldCodec.ForClassWrapper<string>(594);
    private string conversionLastConversionDate_;
    /// <summary>
    /// The date of the most recent conversion for this conversion action. The date
    /// is in the customer's time zone.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ConversionLastConversionDate {
      get { return conversionLastConversionDate_; }
      set {
        conversionLastConversionDate_ = value;
      }
    }

    /// <summary>Field number for the "content_rank_lost_impression_share" field.</summary>
    public const int ContentRankLostImpressionShareFieldNumber = 22;
    private static readonly pb::FieldCodec<double?> _single_contentRankLostImpressionShare_codec = pb::FieldCodec.ForStructWrapper<double>(178);
    private double? contentRankLostImpressionShare_;
    /// <summary>
    /// The estimated percentage of impressions on the Display Network
    /// that your ads didn't receive due to poor Ad Rank.
    /// Note: Content rank lost impression share is reported in the range of 0
    /// to 0.9. Any value above 0.9 is reported as 0.9001.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double? ContentRankLostImpressionShare {
      get { return contentRankLostImpressionShare_; }
      set {
        contentRankLostImpressionShare_ = value;
      }
    }

    /// <summary>Field number for the "conversions_from_interactions_rate" field.</summary>
    public const int ConversionsFromInteractionsRateFieldNumber = 69;
    private static readonly pb::FieldCodec<double?> _single_conversionsFromInteractionsRate_codec = pb::FieldCodec.ForStructWrapper<double>(554);
    private double? conversionsFromInteractionsRate_;
    /// <summary>
    /// Conversions from interactions divided by the number of ad interactions
    /// (such as clicks for text ads or views for video ads).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double? ConversionsFromInteractionsRate {
      get { return conversionsFromInteractionsRate_; }
      set {
        conversionsFromInteractionsRate_ = value;
      }
    }

    /// <summary>Field number for the "conversions_value" field.</summary>
    public const int ConversionsValueFieldNumber = 70;
    private static readonly pb::FieldCodec<double?> _single_conversionsValue_codec = pb::FieldCodec.ForStructWrapper<double>(562);
    private double? conversionsValue_;
    /// <summary>
    /// The total value of conversions.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double? ConversionsValue {
      get { return conversionsValue_; }
      set {
        conversionsValue_ = value;
      }
    }

    /// <summary>Field number for the "conversions_value_per_cost" field.</summary>
    public const int ConversionsValuePerCostFieldNumber = 71;
    private static readonly pb::FieldCodec<double?> _single_conversionsValuePerCost_codec = pb::FieldCodec.ForStructWrapper<double>(570);
    private double? conversionsValuePerCost_;
    /// <summary>
    /// The value of conversions divided by the cost of ad interactions.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double? ConversionsValuePerCost {
      get { return conversionsValuePerCost_; }
      set {
        conversionsValuePerCost_ = value;
      }
    }

    /// <summary>Field number for the "conversions_from_interactions_value_per_interaction" field.</summary>
    public const int ConversionsFromInteractionsValuePerInteractionFieldNumber = 72;
    private static readonly pb::FieldCodec<double?> _single_conversionsFromInteractionsValuePerInteraction_codec = pb::FieldCodec.ForStructWrapper<double>(578);
    private double? conversionsFromInteractionsValuePerInteraction_;
    /// <summary>
    /// The value of conversions from interactions divided by the number of ad
    /// interactions.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double? ConversionsFromInteractionsValuePerInteraction {
      get { return conversionsFromInteractionsValuePerInteraction_; }
      set {
        conversionsFromInteractionsValuePerInteraction_ = value;
      }
    }

    /// <summary>Field number for the "conversions" field.</summary>
    public const int ConversionsFieldNumber = 25;
    private static readonly pb::FieldCodec<double?> _single_conversions_codec = pb::FieldCodec.ForStructWrapper<double>(202);
    private double? conversions_;
    /// <summary>
    /// The number of conversions. This only includes conversion actions which have
    /// "Include in Conversions" checked.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double? Conversions {
      get { return conversions_; }
      set {
        conversions_ = value;
      }
    }

    /// <summary>Field number for the "cost_micros" field.</summary>
    public const int CostMicrosFieldNumber = 26;
    private static readonly pb::FieldCodec<long?> _single_costMicros_codec = pb::FieldCodec.ForStructWrapper<long>(210);
    private long? costMicros_;
    /// <summary>
    /// The sum of your cost-per-click (CPC) and cost-per-thousand impressions
    /// (CPM) costs during this period.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long? CostMicros {
      get { return costMicros_; }
      set {
        costMicros_ = value;
      }
    }

    /// <summary>Field number for the "cost_per_all_conversions" field.</summary>
    public const int CostPerAllConversionsFieldNumber = 68;
    private static readonly pb::FieldCodec<double?> _single_costPerAllConversions_codec = pb::FieldCodec.ForStructWrapper<double>(546);
    private double? costPerAllConversions_;
    /// <summary>
    /// The cost of ad interactions divided by all conversions.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double? CostPerAllConversions {
      get { return costPerAllConversions_; }
      set {
        costPerAllConversions_ = value;
      }
    }

    /// <summary>Field number for the "cost_per_conversion" field.</summary>
    public const int CostPerConversionFieldNumber = 28;
    private static readonly pb::FieldCodec<double?> _single_costPerConversion_codec = pb::FieldCodec.ForStructWrapper<double>(226);
    private double? costPerConversion_;
    /// <summary>
    /// The cost of ad interactions divided by conversions.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double? CostPerConversion {
      get { return costPerConversion_; }
      set {
        costPerConversion_ = value;
      }
    }

    /// <summary>Field number for the "cross_device_conversions" field.</summary>
    public const int CrossDeviceConversionsFieldNumber = 29;
    private static readonly pb::FieldCodec<double?> _single_crossDeviceConversions_codec = pb::FieldCodec.ForStructWrapper<double>(234);
    private double? crossDeviceConversions_;
    /// <summary>
    /// Conversions from when a customer clicks on a Google Ads ad on one device,
    /// then converts on a different device or browser.
    /// Cross-device conversions are already included in all_conversions.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double? CrossDeviceConversions {
      get { return crossDeviceConversions_; }
      set {
        crossDeviceConversions_ = value;
      }
    }

    /// <summary>Field number for the "ctr" field.</summary>
    public const int CtrFieldNumber = 30;
    private static readonly pb::FieldCodec<double?> _single_ctr_codec = pb::FieldCodec.ForStructWrapper<double>(242);
    private double? ctr_;
    /// <summary>
    /// The number of clicks your ad receives (Clicks) divided by the number
    /// of times your ad is shown (Impressions).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double? Ctr {
      get { return ctr_; }
      set {
        ctr_ = value;
      }
    }

    /// <summary>Field number for the "engagement_rate" field.</summary>
    public const int EngagementRateFieldNumber = 31;
    private static readonly pb::FieldCodec<double?> _single_engagementRate_codec = pb::FieldCodec.ForStructWrapper<double>(250);
    private double? engagementRate_;
    /// <summary>
    /// How often people engage with your ad after it's shown to them. This is the
    /// number of ad expansions divided by the number of times your ad is shown.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double? EngagementRate {
      get { return engagementRate_; }
      set {
        engagementRate_ = value;
      }
    }

    /// <summary>Field number for the "engagements" field.</summary>
    public const int EngagementsFieldNumber = 32;
    private static readonly pb::FieldCodec<long?> _single_engagements_codec = pb::FieldCodec.ForStructWrapper<long>(258);
    private long? engagements_;
    /// <summary>
    /// The number of engagements.
    /// An engagement occurs when a viewer expands your Lightbox ad. Also, in the
    /// future, other ad types may support engagement metrics.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long? Engagements {
      get { return engagements_; }
      set {
        engagements_ = value;
      }
    }

    /// <summary>Field number for the "hotel_average_lead_value_micros" field.</summary>
    public const int HotelAverageLeadValueMicrosFieldNumber = 75;
    private static readonly pb::FieldCodec<double?> _single_hotelAverageLeadValueMicros_codec = pb::FieldCodec.ForStructWrapper<double>(602);
    private double? hotelAverageLeadValueMicros_;
    /// <summary>
    /// Average lead value of hotel.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double? HotelAverageLeadValueMicros {
      get { return hotelAverageLeadValueMicros_; }
      set {
        hotelAverageLeadValueMicros_ = value;
      }
    }

    /// <summary>Field number for the "impressions" field.</summary>
    public const int ImpressionsFieldNumber = 37;
    private static readonly pb::FieldCodec<long?> _single_impressions_codec = pb::FieldCodec.ForStructWrapper<long>(298);
    private long? impressions_;
    /// <summary>
    /// Count of how often your ad has appeared on a search results page or
    /// website on the Google Network.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long? Impressions {
      get { return impressions_; }
      set {
        impressions_ = value;
      }
    }

    /// <summary>Field number for the "interaction_rate" field.</summary>
    public const int InteractionRateFieldNumber = 38;
    private static readonly pb::FieldCodec<double?> _single_interactionRate_codec = pb::FieldCodec.ForStructWrapper<double>(306);
    private double? interactionRate_;
    /// <summary>
    /// How often people interact with your ad after it is shown to them.
    /// This is the number of interactions divided by the number of times your ad
    /// is shown.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double? InteractionRate {
      get { return interactionRate_; }
      set {
        interactionRate_ = value;
      }
    }

    /// <summary>Field number for the "interactions" field.</summary>
    public const int InteractionsFieldNumber = 39;
    private static readonly pb::FieldCodec<long?> _single_interactions_codec = pb::FieldCodec.ForStructWrapper<long>(314);
    private long? interactions_;
    /// <summary>
    /// The number of interactions.
    /// An interaction is the main user action associated with an ad format-clicks
    /// for text and shopping ads, views for video ads, and so on.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long? Interactions {
      get { return interactions_; }
      set {
        interactions_ = value;
      }
    }

    /// <summary>Field number for the "invalid_click_rate" field.</summary>
    public const int InvalidClickRateFieldNumber = 40;
    private static readonly pb::FieldCodec<double?> _single_invalidClickRate_codec = pb::FieldCodec.ForStructWrapper<double>(322);
    private double? invalidClickRate_;
    /// <summary>
    /// The percentage of clicks filtered out of your total number of clicks
    /// (filtered + non-filtered clicks) during the reporting period.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double? InvalidClickRate {
      get { return invalidClickRate_; }
      set {
        invalidClickRate_ = value;
      }
    }

    /// <summary>Field number for the "invalid_clicks" field.</summary>
    public const int InvalidClicksFieldNumber = 41;
    private static readonly pb::FieldCodec<long?> _single_invalidClicks_codec = pb::FieldCodec.ForStructWrapper<long>(330);
    private long? invalidClicks_;
    /// <summary>
    /// Number of clicks Google considers illegitimate and doesn't charge you for.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long? InvalidClicks {
      get { return invalidClicks_; }
      set {
        invalidClicks_ = value;
      }
    }

    /// <summary>Field number for the "percent_new_visitors" field.</summary>
    public const int PercentNewVisitorsFieldNumber = 42;
    private static readonly pb::FieldCodec<double?> _single_percentNewVisitors_codec = pb::FieldCodec.ForStructWrapper<double>(338);
    private double? percentNewVisitors_;
    /// <summary>
    /// Percentage of first-time sessions (from people who had never visited your
    /// site before). Imported from Google Analytics.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double? PercentNewVisitors {
      get { return percentNewVisitors_; }
      set {
        percentNewVisitors_ = value;
      }
    }

    /// <summary>Field number for the "phone_calls" field.</summary>
    public const int PhoneCallsFieldNumber = 43;
    private static readonly pb::FieldCodec<long?> _single_phoneCalls_codec = pb::FieldCodec.ForStructWrapper<long>(346);
    private long? phoneCalls_;
    /// <summary>
    /// Number of offline phone calls.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long? PhoneCalls {
      get { return phoneCalls_; }
      set {
        phoneCalls_ = value;
      }
    }

    /// <summary>Field number for the "phone_impressions" field.</summary>
    public const int PhoneImpressionsFieldNumber = 44;
    private static readonly pb::FieldCodec<long?> _single_phoneImpressions_codec = pb::FieldCodec.ForStructWrapper<long>(354);
    private long? phoneImpressions_;
    /// <summary>
    /// Number of offline phone impressions.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long? PhoneImpressions {
      get { return phoneImpressions_; }
      set {
        phoneImpressions_ = value;
      }
    }

    /// <summary>Field number for the "phone_through_rate" field.</summary>
    public const int PhoneThroughRateFieldNumber = 45;
    private static readonly pb::FieldCodec<double?> _single_phoneThroughRate_codec = pb::FieldCodec.ForStructWrapper<double>(362);
    private double? phoneThroughRate_;
    /// <summary>
    /// Number of phone calls received (phone_calls) divided by the number of
    /// times your phone number is shown (phone_impressions).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double? PhoneThroughRate {
      get { return phoneThroughRate_; }
      set {
        phoneThroughRate_ = value;
      }
    }

    /// <summary>Field number for the "relative_ctr" field.</summary>
    public const int RelativeCtrFieldNumber = 46;
    private static readonly pb::FieldCodec<double?> _single_relativeCtr_codec = pb::FieldCodec.ForStructWrapper<double>(370);
    private double? relativeCtr_;
    /// <summary>
    /// Your clickthrough rate (Ctr) divided by the average clickthrough rate of
    /// all advertisers on the websites that show your ads. Measures how your ads
    /// perform on Display Network sites compared to other ads on the same sites.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double? RelativeCtr {
      get { return relativeCtr_; }
      set {
        relativeCtr_ = value;
      }
    }

    /// <summary>Field number for the "search_absolute_top_impression_share" field.</summary>
    public const int SearchAbsoluteTopImpressionShareFieldNumber = 78;
    private static readonly pb::FieldCodec<double?> _single_searchAbsoluteTopImpressionShare_codec = pb::FieldCodec.ForStructWrapper<double>(626);
    private double? searchAbsoluteTopImpressionShare_;
    /// <summary>
    /// The percentage of the customer's Shopping ad impressions that are shown in
    /// the most prominent Shopping position. See
    /// &lt;a href="https://support.google.com/adwords/answer/7501826">this Merchant
    /// Center article&lt;/a> for details. Any value below 0.1 is reported as 0.0999.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double? SearchAbsoluteTopImpressionShare {
      get { return searchAbsoluteTopImpressionShare_; }
      set {
        searchAbsoluteTopImpressionShare_ = value;
      }
    }

    /// <summary>Field number for the "search_budget_lost_impression_share" field.</summary>
    public const int SearchBudgetLostImpressionShareFieldNumber = 47;
    private static readonly pb::FieldCodec<double?> _single_searchBudgetLostImpressionShare_codec = pb::FieldCodec.ForStructWrapper<double>(378);
    private double? searchBudgetLostImpressionShare_;
    /// <summary>
    /// The estimated percent of times that your ad was eligible to show on the
    /// Search Network but didn't because your budget was too low. Note: Search
    /// budget lost impression share is reported in the range of 0 to 0.9. Any
    /// value above 0.9 is reported as 0.9001.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double? SearchBudgetLostImpressionShare {
      get { return searchBudgetLostImpressionShare_; }
      set {
        searchBudgetLostImpressionShare_ = value;
      }
    }

    /// <summary>Field number for the "search_exact_match_impression_share" field.</summary>
    public const int SearchExactMatchImpressionShareFieldNumber = 49;
    private static readonly pb::FieldCodec<double?> _single_searchExactMatchImpressionShare_codec = pb::FieldCodec.ForStructWrapper<double>(394);
    private double? searchExactMatchImpressionShare_;
    /// <summary>
    /// The impressions you've received divided by the estimated number of
    /// impressions you were eligible to receive on the Search Network for search
    /// terms that matched your keywords exactly (or were close variants of your
    /// keyword), regardless of your keyword match types. Note: Search exact match
    /// impression share is reported in the range of 0.1 to 1. Any value below 0.1
    /// is reported as 0.0999.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double? SearchExactMatchImpressionShare {
      get { return searchExactMatchImpressionShare_; }
      set {
        searchExactMatchImpressionShare_ = value;
      }
    }

    /// <summary>Field number for the "search_impression_share" field.</summary>
    public const int SearchImpressionShareFieldNumber = 50;
    private static readonly pb::FieldCodec<double?> _single_searchImpressionShare_codec = pb::FieldCodec.ForStructWrapper<double>(402);
    private double? searchImpressionShare_;
    /// <summary>
    /// The impressions you've received on the Search Network divided
    /// by the estimated number of impressions you were eligible to receive.
    /// Note: Search impression share is reported in the range of 0.1 to 1. Any
    /// value below 0.1 is reported as 0.0999.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double? SearchImpressionShare {
      get { return searchImpressionShare_; }
      set {
        searchImpressionShare_ = value;
      }
    }

    /// <summary>Field number for the "search_rank_lost_impression_share" field.</summary>
    public const int SearchRankLostImpressionShareFieldNumber = 51;
    private static readonly pb::FieldCodec<double?> _single_searchRankLostImpressionShare_codec = pb::FieldCodec.ForStructWrapper<double>(410);
    private double? searchRankLostImpressionShare_;
    /// <summary>
    /// The estimated percentage of impressions on the Search Network
    /// that your ads didn't receive due to poor Ad Rank.
    /// Note: Search rank lost impression share is reported in the range of 0 to
    /// 0.9. Any value above 0.9 is reported as 0.9001.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double? SearchRankLostImpressionShare {
      get { return searchRankLostImpressionShare_; }
      set {
        searchRankLostImpressionShare_ = value;
      }
    }

    /// <summary>Field number for the "value_per_all_conversions" field.</summary>
    public const int ValuePerAllConversionsFieldNumber = 52;
    private static readonly pb::FieldCodec<double?> _single_valuePerAllConversions_codec = pb::FieldCodec.ForStructWrapper<double>(418);
    private double? valuePerAllConversions_;
    /// <summary>
    /// The value of all conversions divided by the number of all conversions.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double? ValuePerAllConversions {
      get { return valuePerAllConversions_; }
      set {
        valuePerAllConversions_ = value;
      }
    }

    /// <summary>Field number for the "value_per_conversion" field.</summary>
    public const int ValuePerConversionFieldNumber = 53;
    private static readonly pb::FieldCodec<double?> _single_valuePerConversion_codec = pb::FieldCodec.ForStructWrapper<double>(426);
    private double? valuePerConversion_;
    /// <summary>
    /// The value of conversions divided by the number of conversions.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double? ValuePerConversion {
      get { return valuePerConversion_; }
      set {
        valuePerConversion_ = value;
      }
    }

    /// <summary>Field number for the "video_quartile_100_rate" field.</summary>
    public const int VideoQuartile100RateFieldNumber = 54;
    private static readonly pb::FieldCodec<double?> _single_videoQuartile100Rate_codec = pb::FieldCodec.ForStructWrapper<double>(434);
    private double? videoQuartile100Rate_;
    /// <summary>
    /// Percentage of impressions where the viewer watched all of your video.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double? VideoQuartile100Rate {
      get { return videoQuartile100Rate_; }
      set {
        videoQuartile100Rate_ = value;
      }
    }

    /// <summary>Field number for the "video_quartile_25_rate" field.</summary>
    public const int VideoQuartile25RateFieldNumber = 55;
    private static readonly pb::FieldCodec<double?> _single_videoQuartile25Rate_codec = pb::FieldCodec.ForStructWrapper<double>(442);
    private double? videoQuartile25Rate_;
    /// <summary>
    /// Percentage of impressions where the viewer watched 25% of your video.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double? VideoQuartile25Rate {
      get { return videoQuartile25Rate_; }
      set {
        videoQuartile25Rate_ = value;
      }
    }

    /// <summary>Field number for the "video_quartile_50_rate" field.</summary>
    public const int VideoQuartile50RateFieldNumber = 56;
    private static readonly pb::FieldCodec<double?> _single_videoQuartile50Rate_codec = pb::FieldCodec.ForStructWrapper<double>(450);
    private double? videoQuartile50Rate_;
    /// <summary>
    /// Percentage of impressions where the viewer watched 50% of your video.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double? VideoQuartile50Rate {
      get { return videoQuartile50Rate_; }
      set {
        videoQuartile50Rate_ = value;
      }
    }

    /// <summary>Field number for the "video_quartile_75_rate" field.</summary>
    public const int VideoQuartile75RateFieldNumber = 57;
    private static readonly pb::FieldCodec<double?> _single_videoQuartile75Rate_codec = pb::FieldCodec.ForStructWrapper<double>(458);
    private double? videoQuartile75Rate_;
    /// <summary>
    /// Percentage of impressions where the viewer watched 75% of your video.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double? VideoQuartile75Rate {
      get { return videoQuartile75Rate_; }
      set {
        videoQuartile75Rate_ = value;
      }
    }

    /// <summary>Field number for the "video_view_rate" field.</summary>
    public const int VideoViewRateFieldNumber = 58;
    private static readonly pb::FieldCodec<double?> _single_videoViewRate_codec = pb::FieldCodec.ForStructWrapper<double>(466);
    private double? videoViewRate_;
    /// <summary>
    /// The number of views your TrueView video ad receives divided by its number
    /// of impressions, including thumbnail impressions for TrueView in-display
    /// ads.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double? VideoViewRate {
      get { return videoViewRate_; }
      set {
        videoViewRate_ = value;
      }
    }

    /// <summary>Field number for the "video_views" field.</summary>
    public const int VideoViewsFieldNumber = 59;
    private static readonly pb::FieldCodec<long?> _single_videoViews_codec = pb::FieldCodec.ForStructWrapper<long>(474);
    private long? videoViews_;
    /// <summary>
    /// The number of times your video ads were viewed.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long? VideoViews {
      get { return videoViews_; }
      set {
        videoViews_ = value;
      }
    }

    /// <summary>Field number for the "view_through_conversions" field.</summary>
    public const int ViewThroughConversionsFieldNumber = 60;
    private static readonly pb::FieldCodec<long?> _single_viewThroughConversions_codec = pb::FieldCodec.ForStructWrapper<long>(482);
    private long? viewThroughConversions_;
    /// <summary>
    /// The total number of view-through conversions.
    /// These happen when a customer sees an image or rich media ad, then later
    /// completes a conversion on your site without interacting with (e.g.,
    /// clicking on) another ad.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long? ViewThroughConversions {
      get { return viewThroughConversions_; }
      set {
        viewThroughConversions_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Metrics);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Metrics other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!pbc::ProtobufEqualityComparers.BitwiseNullableDoubleEqualityComparer.Equals(AllConversionsFromInteractionsRate, other.AllConversionsFromInteractionsRate)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseNullableDoubleEqualityComparer.Equals(AllConversionsValue, other.AllConversionsValue)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseNullableDoubleEqualityComparer.Equals(AllConversions, other.AllConversions)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseNullableDoubleEqualityComparer.Equals(AllConversionsValuePerCost, other.AllConversionsValuePerCost)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseNullableDoubleEqualityComparer.Equals(AllConversionsFromInteractionsValuePerInteraction, other.AllConversionsFromInteractionsValuePerInteraction)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseNullableDoubleEqualityComparer.Equals(AverageCost, other.AverageCost)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseNullableDoubleEqualityComparer.Equals(AverageCpc, other.AverageCpc)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseNullableDoubleEqualityComparer.Equals(AverageCpm, other.AverageCpm)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseNullableDoubleEqualityComparer.Equals(AverageCpv, other.AverageCpv)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseNullableDoubleEqualityComparer.Equals(AveragePosition, other.AveragePosition)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseNullableDoubleEqualityComparer.Equals(BenchmarkCtr, other.BenchmarkCtr)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseNullableDoubleEqualityComparer.Equals(BounceRate, other.BounceRate)) return false;
      if (Clicks != other.Clicks) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseNullableDoubleEqualityComparer.Equals(ContentBudgetLostImpressionShare, other.ContentBudgetLostImpressionShare)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseNullableDoubleEqualityComparer.Equals(ContentImpressionShare, other.ContentImpressionShare)) return false;
      if (ConversionLastReceivedRequestDateTime != other.ConversionLastReceivedRequestDateTime) return false;
      if (ConversionLastConversionDate != other.ConversionLastConversionDate) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseNullableDoubleEqualityComparer.Equals(ContentRankLostImpressionShare, other.ContentRankLostImpressionShare)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseNullableDoubleEqualityComparer.Equals(ConversionsFromInteractionsRate, other.ConversionsFromInteractionsRate)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseNullableDoubleEqualityComparer.Equals(ConversionsValue, other.ConversionsValue)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseNullableDoubleEqualityComparer.Equals(ConversionsValuePerCost, other.ConversionsValuePerCost)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseNullableDoubleEqualityComparer.Equals(ConversionsFromInteractionsValuePerInteraction, other.ConversionsFromInteractionsValuePerInteraction)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseNullableDoubleEqualityComparer.Equals(Conversions, other.Conversions)) return false;
      if (CostMicros != other.CostMicros) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseNullableDoubleEqualityComparer.Equals(CostPerAllConversions, other.CostPerAllConversions)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseNullableDoubleEqualityComparer.Equals(CostPerConversion, other.CostPerConversion)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseNullableDoubleEqualityComparer.Equals(CrossDeviceConversions, other.CrossDeviceConversions)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseNullableDoubleEqualityComparer.Equals(Ctr, other.Ctr)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseNullableDoubleEqualityComparer.Equals(EngagementRate, other.EngagementRate)) return false;
      if (Engagements != other.Engagements) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseNullableDoubleEqualityComparer.Equals(HotelAverageLeadValueMicros, other.HotelAverageLeadValueMicros)) return false;
      if (Impressions != other.Impressions) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseNullableDoubleEqualityComparer.Equals(InteractionRate, other.InteractionRate)) return false;
      if (Interactions != other.Interactions) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseNullableDoubleEqualityComparer.Equals(InvalidClickRate, other.InvalidClickRate)) return false;
      if (InvalidClicks != other.InvalidClicks) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseNullableDoubleEqualityComparer.Equals(PercentNewVisitors, other.PercentNewVisitors)) return false;
      if (PhoneCalls != other.PhoneCalls) return false;
      if (PhoneImpressions != other.PhoneImpressions) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseNullableDoubleEqualityComparer.Equals(PhoneThroughRate, other.PhoneThroughRate)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseNullableDoubleEqualityComparer.Equals(RelativeCtr, other.RelativeCtr)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseNullableDoubleEqualityComparer.Equals(SearchAbsoluteTopImpressionShare, other.SearchAbsoluteTopImpressionShare)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseNullableDoubleEqualityComparer.Equals(SearchBudgetLostImpressionShare, other.SearchBudgetLostImpressionShare)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseNullableDoubleEqualityComparer.Equals(SearchExactMatchImpressionShare, other.SearchExactMatchImpressionShare)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseNullableDoubleEqualityComparer.Equals(SearchImpressionShare, other.SearchImpressionShare)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseNullableDoubleEqualityComparer.Equals(SearchRankLostImpressionShare, other.SearchRankLostImpressionShare)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseNullableDoubleEqualityComparer.Equals(ValuePerAllConversions, other.ValuePerAllConversions)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseNullableDoubleEqualityComparer.Equals(ValuePerConversion, other.ValuePerConversion)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseNullableDoubleEqualityComparer.Equals(VideoQuartile100Rate, other.VideoQuartile100Rate)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseNullableDoubleEqualityComparer.Equals(VideoQuartile25Rate, other.VideoQuartile25Rate)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseNullableDoubleEqualityComparer.Equals(VideoQuartile50Rate, other.VideoQuartile50Rate)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseNullableDoubleEqualityComparer.Equals(VideoQuartile75Rate, other.VideoQuartile75Rate)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseNullableDoubleEqualityComparer.Equals(VideoViewRate, other.VideoViewRate)) return false;
      if (VideoViews != other.VideoViews) return false;
      if (ViewThroughConversions != other.ViewThroughConversions) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (allConversionsFromInteractionsRate_ != null) hash ^= pbc::ProtobufEqualityComparers.BitwiseNullableDoubleEqualityComparer.GetHashCode(AllConversionsFromInteractionsRate);
      if (allConversionsValue_ != null) hash ^= pbc::ProtobufEqualityComparers.BitwiseNullableDoubleEqualityComparer.GetHashCode(AllConversionsValue);
      if (allConversions_ != null) hash ^= pbc::ProtobufEqualityComparers.BitwiseNullableDoubleEqualityComparer.GetHashCode(AllConversions);
      if (allConversionsValuePerCost_ != null) hash ^= pbc::ProtobufEqualityComparers.BitwiseNullableDoubleEqualityComparer.GetHashCode(AllConversionsValuePerCost);
      if (allConversionsFromInteractionsValuePerInteraction_ != null) hash ^= pbc::ProtobufEqualityComparers.BitwiseNullableDoubleEqualityComparer.GetHashCode(AllConversionsFromInteractionsValuePerInteraction);
      if (averageCost_ != null) hash ^= pbc::ProtobufEqualityComparers.BitwiseNullableDoubleEqualityComparer.GetHashCode(AverageCost);
      if (averageCpc_ != null) hash ^= pbc::ProtobufEqualityComparers.BitwiseNullableDoubleEqualityComparer.GetHashCode(AverageCpc);
      if (averageCpm_ != null) hash ^= pbc::ProtobufEqualityComparers.BitwiseNullableDoubleEqualityComparer.GetHashCode(AverageCpm);
      if (averageCpv_ != null) hash ^= pbc::ProtobufEqualityComparers.BitwiseNullableDoubleEqualityComparer.GetHashCode(AverageCpv);
      if (averagePosition_ != null) hash ^= pbc::ProtobufEqualityComparers.BitwiseNullableDoubleEqualityComparer.GetHashCode(AveragePosition);
      if (benchmarkCtr_ != null) hash ^= pbc::ProtobufEqualityComparers.BitwiseNullableDoubleEqualityComparer.GetHashCode(BenchmarkCtr);
      if (bounceRate_ != null) hash ^= pbc::ProtobufEqualityComparers.BitwiseNullableDoubleEqualityComparer.GetHashCode(BounceRate);
      if (clicks_ != null) hash ^= Clicks.GetHashCode();
      if (contentBudgetLostImpressionShare_ != null) hash ^= pbc::ProtobufEqualityComparers.BitwiseNullableDoubleEqualityComparer.GetHashCode(ContentBudgetLostImpressionShare);
      if (contentImpressionShare_ != null) hash ^= pbc::ProtobufEqualityComparers.BitwiseNullableDoubleEqualityComparer.GetHashCode(ContentImpressionShare);
      if (conversionLastReceivedRequestDateTime_ != null) hash ^= ConversionLastReceivedRequestDateTime.GetHashCode();
      if (conversionLastConversionDate_ != null) hash ^= ConversionLastConversionDate.GetHashCode();
      if (contentRankLostImpressionShare_ != null) hash ^= pbc::ProtobufEqualityComparers.BitwiseNullableDoubleEqualityComparer.GetHashCode(ContentRankLostImpressionShare);
      if (conversionsFromInteractionsRate_ != null) hash ^= pbc::ProtobufEqualityComparers.BitwiseNullableDoubleEqualityComparer.GetHashCode(ConversionsFromInteractionsRate);
      if (conversionsValue_ != null) hash ^= pbc::ProtobufEqualityComparers.BitwiseNullableDoubleEqualityComparer.GetHashCode(ConversionsValue);
      if (conversionsValuePerCost_ != null) hash ^= pbc::ProtobufEqualityComparers.BitwiseNullableDoubleEqualityComparer.GetHashCode(ConversionsValuePerCost);
      if (conversionsFromInteractionsValuePerInteraction_ != null) hash ^= pbc::ProtobufEqualityComparers.BitwiseNullableDoubleEqualityComparer.GetHashCode(ConversionsFromInteractionsValuePerInteraction);
      if (conversions_ != null) hash ^= pbc::ProtobufEqualityComparers.BitwiseNullableDoubleEqualityComparer.GetHashCode(Conversions);
      if (costMicros_ != null) hash ^= CostMicros.GetHashCode();
      if (costPerAllConversions_ != null) hash ^= pbc::ProtobufEqualityComparers.BitwiseNullableDoubleEqualityComparer.GetHashCode(CostPerAllConversions);
      if (costPerConversion_ != null) hash ^= pbc::ProtobufEqualityComparers.BitwiseNullableDoubleEqualityComparer.GetHashCode(CostPerConversion);
      if (crossDeviceConversions_ != null) hash ^= pbc::ProtobufEqualityComparers.BitwiseNullableDoubleEqualityComparer.GetHashCode(CrossDeviceConversions);
      if (ctr_ != null) hash ^= pbc::ProtobufEqualityComparers.BitwiseNullableDoubleEqualityComparer.GetHashCode(Ctr);
      if (engagementRate_ != null) hash ^= pbc::ProtobufEqualityComparers.BitwiseNullableDoubleEqualityComparer.GetHashCode(EngagementRate);
      if (engagements_ != null) hash ^= Engagements.GetHashCode();
      if (hotelAverageLeadValueMicros_ != null) hash ^= pbc::ProtobufEqualityComparers.BitwiseNullableDoubleEqualityComparer.GetHashCode(HotelAverageLeadValueMicros);
      if (impressions_ != null) hash ^= Impressions.GetHashCode();
      if (interactionRate_ != null) hash ^= pbc::ProtobufEqualityComparers.BitwiseNullableDoubleEqualityComparer.GetHashCode(InteractionRate);
      if (interactions_ != null) hash ^= Interactions.GetHashCode();
      if (invalidClickRate_ != null) hash ^= pbc::ProtobufEqualityComparers.BitwiseNullableDoubleEqualityComparer.GetHashCode(InvalidClickRate);
      if (invalidClicks_ != null) hash ^= InvalidClicks.GetHashCode();
      if (percentNewVisitors_ != null) hash ^= pbc::ProtobufEqualityComparers.BitwiseNullableDoubleEqualityComparer.GetHashCode(PercentNewVisitors);
      if (phoneCalls_ != null) hash ^= PhoneCalls.GetHashCode();
      if (phoneImpressions_ != null) hash ^= PhoneImpressions.GetHashCode();
      if (phoneThroughRate_ != null) hash ^= pbc::ProtobufEqualityComparers.BitwiseNullableDoubleEqualityComparer.GetHashCode(PhoneThroughRate);
      if (relativeCtr_ != null) hash ^= pbc::ProtobufEqualityComparers.BitwiseNullableDoubleEqualityComparer.GetHashCode(RelativeCtr);
      if (searchAbsoluteTopImpressionShare_ != null) hash ^= pbc::ProtobufEqualityComparers.BitwiseNullableDoubleEqualityComparer.GetHashCode(SearchAbsoluteTopImpressionShare);
      if (searchBudgetLostImpressionShare_ != null) hash ^= pbc::ProtobufEqualityComparers.BitwiseNullableDoubleEqualityComparer.GetHashCode(SearchBudgetLostImpressionShare);
      if (searchExactMatchImpressionShare_ != null) hash ^= pbc::ProtobufEqualityComparers.BitwiseNullableDoubleEqualityComparer.GetHashCode(SearchExactMatchImpressionShare);
      if (searchImpressionShare_ != null) hash ^= pbc::ProtobufEqualityComparers.BitwiseNullableDoubleEqualityComparer.GetHashCode(SearchImpressionShare);
      if (searchRankLostImpressionShare_ != null) hash ^= pbc::ProtobufEqualityComparers.BitwiseNullableDoubleEqualityComparer.GetHashCode(SearchRankLostImpressionShare);
      if (valuePerAllConversions_ != null) hash ^= pbc::ProtobufEqualityComparers.BitwiseNullableDoubleEqualityComparer.GetHashCode(ValuePerAllConversions);
      if (valuePerConversion_ != null) hash ^= pbc::ProtobufEqualityComparers.BitwiseNullableDoubleEqualityComparer.GetHashCode(ValuePerConversion);
      if (videoQuartile100Rate_ != null) hash ^= pbc::ProtobufEqualityComparers.BitwiseNullableDoubleEqualityComparer.GetHashCode(VideoQuartile100Rate);
      if (videoQuartile25Rate_ != null) hash ^= pbc::ProtobufEqualityComparers.BitwiseNullableDoubleEqualityComparer.GetHashCode(VideoQuartile25Rate);
      if (videoQuartile50Rate_ != null) hash ^= pbc::ProtobufEqualityComparers.BitwiseNullableDoubleEqualityComparer.GetHashCode(VideoQuartile50Rate);
      if (videoQuartile75Rate_ != null) hash ^= pbc::ProtobufEqualityComparers.BitwiseNullableDoubleEqualityComparer.GetHashCode(VideoQuartile75Rate);
      if (videoViewRate_ != null) hash ^= pbc::ProtobufEqualityComparers.BitwiseNullableDoubleEqualityComparer.GetHashCode(VideoViewRate);
      if (videoViews_ != null) hash ^= VideoViews.GetHashCode();
      if (viewThroughConversions_ != null) hash ^= ViewThroughConversions.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (allConversions_ != null) {
        _single_allConversions_codec.WriteTagAndValue(output, AllConversions);
      }
      if (averageCost_ != null) {
        _single_averageCost_codec.WriteTagAndValue(output, AverageCost);
      }
      if (averageCpc_ != null) {
        _single_averageCpc_codec.WriteTagAndValue(output, AverageCpc);
      }
      if (averageCpm_ != null) {
        _single_averageCpm_codec.WriteTagAndValue(output, AverageCpm);
      }
      if (averageCpv_ != null) {
        _single_averageCpv_codec.WriteTagAndValue(output, AverageCpv);
      }
      if (averagePosition_ != null) {
        _single_averagePosition_codec.WriteTagAndValue(output, AveragePosition);
      }
      if (bounceRate_ != null) {
        _single_bounceRate_codec.WriteTagAndValue(output, BounceRate);
      }
      if (clicks_ != null) {
        _single_clicks_codec.WriteTagAndValue(output, Clicks);
      }
      if (contentBudgetLostImpressionShare_ != null) {
        _single_contentBudgetLostImpressionShare_codec.WriteTagAndValue(output, ContentBudgetLostImpressionShare);
      }
      if (contentImpressionShare_ != null) {
        _single_contentImpressionShare_codec.WriteTagAndValue(output, ContentImpressionShare);
      }
      if (contentRankLostImpressionShare_ != null) {
        _single_contentRankLostImpressionShare_codec.WriteTagAndValue(output, ContentRankLostImpressionShare);
      }
      if (conversions_ != null) {
        _single_conversions_codec.WriteTagAndValue(output, Conversions);
      }
      if (costMicros_ != null) {
        _single_costMicros_codec.WriteTagAndValue(output, CostMicros);
      }
      if (costPerConversion_ != null) {
        _single_costPerConversion_codec.WriteTagAndValue(output, CostPerConversion);
      }
      if (crossDeviceConversions_ != null) {
        _single_crossDeviceConversions_codec.WriteTagAndValue(output, CrossDeviceConversions);
      }
      if (ctr_ != null) {
        _single_ctr_codec.WriteTagAndValue(output, Ctr);
      }
      if (engagementRate_ != null) {
        _single_engagementRate_codec.WriteTagAndValue(output, EngagementRate);
      }
      if (engagements_ != null) {
        _single_engagements_codec.WriteTagAndValue(output, Engagements);
      }
      if (impressions_ != null) {
        _single_impressions_codec.WriteTagAndValue(output, Impressions);
      }
      if (interactionRate_ != null) {
        _single_interactionRate_codec.WriteTagAndValue(output, InteractionRate);
      }
      if (interactions_ != null) {
        _single_interactions_codec.WriteTagAndValue(output, Interactions);
      }
      if (invalidClickRate_ != null) {
        _single_invalidClickRate_codec.WriteTagAndValue(output, InvalidClickRate);
      }
      if (invalidClicks_ != null) {
        _single_invalidClicks_codec.WriteTagAndValue(output, InvalidClicks);
      }
      if (percentNewVisitors_ != null) {
        _single_percentNewVisitors_codec.WriteTagAndValue(output, PercentNewVisitors);
      }
      if (phoneCalls_ != null) {
        _single_phoneCalls_codec.WriteTagAndValue(output, PhoneCalls);
      }
      if (phoneImpressions_ != null) {
        _single_phoneImpressions_codec.WriteTagAndValue(output, PhoneImpressions);
      }
      if (phoneThroughRate_ != null) {
        _single_phoneThroughRate_codec.WriteTagAndValue(output, PhoneThroughRate);
      }
      if (relativeCtr_ != null) {
        _single_relativeCtr_codec.WriteTagAndValue(output, RelativeCtr);
      }
      if (searchBudgetLostImpressionShare_ != null) {
        _single_searchBudgetLostImpressionShare_codec.WriteTagAndValue(output, SearchBudgetLostImpressionShare);
      }
      if (searchExactMatchImpressionShare_ != null) {
        _single_searchExactMatchImpressionShare_codec.WriteTagAndValue(output, SearchExactMatchImpressionShare);
      }
      if (searchImpressionShare_ != null) {
        _single_searchImpressionShare_codec.WriteTagAndValue(output, SearchImpressionShare);
      }
      if (searchRankLostImpressionShare_ != null) {
        _single_searchRankLostImpressionShare_codec.WriteTagAndValue(output, SearchRankLostImpressionShare);
      }
      if (valuePerAllConversions_ != null) {
        _single_valuePerAllConversions_codec.WriteTagAndValue(output, ValuePerAllConversions);
      }
      if (valuePerConversion_ != null) {
        _single_valuePerConversion_codec.WriteTagAndValue(output, ValuePerConversion);
      }
      if (videoQuartile100Rate_ != null) {
        _single_videoQuartile100Rate_codec.WriteTagAndValue(output, VideoQuartile100Rate);
      }
      if (videoQuartile25Rate_ != null) {
        _single_videoQuartile25Rate_codec.WriteTagAndValue(output, VideoQuartile25Rate);
      }
      if (videoQuartile50Rate_ != null) {
        _single_videoQuartile50Rate_codec.WriteTagAndValue(output, VideoQuartile50Rate);
      }
      if (videoQuartile75Rate_ != null) {
        _single_videoQuartile75Rate_codec.WriteTagAndValue(output, VideoQuartile75Rate);
      }
      if (videoViewRate_ != null) {
        _single_videoViewRate_codec.WriteTagAndValue(output, VideoViewRate);
      }
      if (videoViews_ != null) {
        _single_videoViews_codec.WriteTagAndValue(output, VideoViews);
      }
      if (viewThroughConversions_ != null) {
        _single_viewThroughConversions_codec.WriteTagAndValue(output, ViewThroughConversions);
      }
      if (allConversionsValuePerCost_ != null) {
        _single_allConversionsValuePerCost_codec.WriteTagAndValue(output, AllConversionsValuePerCost);
      }
      if (allConversionsFromInteractionsRate_ != null) {
        _single_allConversionsFromInteractionsRate_codec.WriteTagAndValue(output, AllConversionsFromInteractionsRate);
      }
      if (allConversionsValue_ != null) {
        _single_allConversionsValue_codec.WriteTagAndValue(output, AllConversionsValue);
      }
      if (allConversionsFromInteractionsValuePerInteraction_ != null) {
        _single_allConversionsFromInteractionsValuePerInteraction_codec.WriteTagAndValue(output, AllConversionsFromInteractionsValuePerInteraction);
      }
      if (costPerAllConversions_ != null) {
        _single_costPerAllConversions_codec.WriteTagAndValue(output, CostPerAllConversions);
      }
      if (conversionsFromInteractionsRate_ != null) {
        _single_conversionsFromInteractionsRate_codec.WriteTagAndValue(output, ConversionsFromInteractionsRate);
      }
      if (conversionsValue_ != null) {
        _single_conversionsValue_codec.WriteTagAndValue(output, ConversionsValue);
      }
      if (conversionsValuePerCost_ != null) {
        _single_conversionsValuePerCost_codec.WriteTagAndValue(output, ConversionsValuePerCost);
      }
      if (conversionsFromInteractionsValuePerInteraction_ != null) {
        _single_conversionsFromInteractionsValuePerInteraction_codec.WriteTagAndValue(output, ConversionsFromInteractionsValuePerInteraction);
      }
      if (conversionLastReceivedRequestDateTime_ != null) {
        _single_conversionLastReceivedRequestDateTime_codec.WriteTagAndValue(output, ConversionLastReceivedRequestDateTime);
      }
      if (conversionLastConversionDate_ != null) {
        _single_conversionLastConversionDate_codec.WriteTagAndValue(output, ConversionLastConversionDate);
      }
      if (hotelAverageLeadValueMicros_ != null) {
        _single_hotelAverageLeadValueMicros_codec.WriteTagAndValue(output, HotelAverageLeadValueMicros);
      }
      if (benchmarkCtr_ != null) {
        _single_benchmarkCtr_codec.WriteTagAndValue(output, BenchmarkCtr);
      }
      if (searchAbsoluteTopImpressionShare_ != null) {
        _single_searchAbsoluteTopImpressionShare_codec.WriteTagAndValue(output, SearchAbsoluteTopImpressionShare);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (allConversionsFromInteractionsRate_ != null) {
        size += _single_allConversionsFromInteractionsRate_codec.CalculateSizeWithTag(AllConversionsFromInteractionsRate);
      }
      if (allConversionsValue_ != null) {
        size += _single_allConversionsValue_codec.CalculateSizeWithTag(AllConversionsValue);
      }
      if (allConversions_ != null) {
        size += _single_allConversions_codec.CalculateSizeWithTag(AllConversions);
      }
      if (allConversionsValuePerCost_ != null) {
        size += _single_allConversionsValuePerCost_codec.CalculateSizeWithTag(AllConversionsValuePerCost);
      }
      if (allConversionsFromInteractionsValuePerInteraction_ != null) {
        size += _single_allConversionsFromInteractionsValuePerInteraction_codec.CalculateSizeWithTag(AllConversionsFromInteractionsValuePerInteraction);
      }
      if (averageCost_ != null) {
        size += _single_averageCost_codec.CalculateSizeWithTag(AverageCost);
      }
      if (averageCpc_ != null) {
        size += _single_averageCpc_codec.CalculateSizeWithTag(AverageCpc);
      }
      if (averageCpm_ != null) {
        size += _single_averageCpm_codec.CalculateSizeWithTag(AverageCpm);
      }
      if (averageCpv_ != null) {
        size += _single_averageCpv_codec.CalculateSizeWithTag(AverageCpv);
      }
      if (averagePosition_ != null) {
        size += _single_averagePosition_codec.CalculateSizeWithTag(AveragePosition);
      }
      if (benchmarkCtr_ != null) {
        size += _single_benchmarkCtr_codec.CalculateSizeWithTag(BenchmarkCtr);
      }
      if (bounceRate_ != null) {
        size += _single_bounceRate_codec.CalculateSizeWithTag(BounceRate);
      }
      if (clicks_ != null) {
        size += _single_clicks_codec.CalculateSizeWithTag(Clicks);
      }
      if (contentBudgetLostImpressionShare_ != null) {
        size += _single_contentBudgetLostImpressionShare_codec.CalculateSizeWithTag(ContentBudgetLostImpressionShare);
      }
      if (contentImpressionShare_ != null) {
        size += _single_contentImpressionShare_codec.CalculateSizeWithTag(ContentImpressionShare);
      }
      if (conversionLastReceivedRequestDateTime_ != null) {
        size += _single_conversionLastReceivedRequestDateTime_codec.CalculateSizeWithTag(ConversionLastReceivedRequestDateTime);
      }
      if (conversionLastConversionDate_ != null) {
        size += _single_conversionLastConversionDate_codec.CalculateSizeWithTag(ConversionLastConversionDate);
      }
      if (contentRankLostImpressionShare_ != null) {
        size += _single_contentRankLostImpressionShare_codec.CalculateSizeWithTag(ContentRankLostImpressionShare);
      }
      if (conversionsFromInteractionsRate_ != null) {
        size += _single_conversionsFromInteractionsRate_codec.CalculateSizeWithTag(ConversionsFromInteractionsRate);
      }
      if (conversionsValue_ != null) {
        size += _single_conversionsValue_codec.CalculateSizeWithTag(ConversionsValue);
      }
      if (conversionsValuePerCost_ != null) {
        size += _single_conversionsValuePerCost_codec.CalculateSizeWithTag(ConversionsValuePerCost);
      }
      if (conversionsFromInteractionsValuePerInteraction_ != null) {
        size += _single_conversionsFromInteractionsValuePerInteraction_codec.CalculateSizeWithTag(ConversionsFromInteractionsValuePerInteraction);
      }
      if (conversions_ != null) {
        size += _single_conversions_codec.CalculateSizeWithTag(Conversions);
      }
      if (costMicros_ != null) {
        size += _single_costMicros_codec.CalculateSizeWithTag(CostMicros);
      }
      if (costPerAllConversions_ != null) {
        size += _single_costPerAllConversions_codec.CalculateSizeWithTag(CostPerAllConversions);
      }
      if (costPerConversion_ != null) {
        size += _single_costPerConversion_codec.CalculateSizeWithTag(CostPerConversion);
      }
      if (crossDeviceConversions_ != null) {
        size += _single_crossDeviceConversions_codec.CalculateSizeWithTag(CrossDeviceConversions);
      }
      if (ctr_ != null) {
        size += _single_ctr_codec.CalculateSizeWithTag(Ctr);
      }
      if (engagementRate_ != null) {
        size += _single_engagementRate_codec.CalculateSizeWithTag(EngagementRate);
      }
      if (engagements_ != null) {
        size += _single_engagements_codec.CalculateSizeWithTag(Engagements);
      }
      if (hotelAverageLeadValueMicros_ != null) {
        size += _single_hotelAverageLeadValueMicros_codec.CalculateSizeWithTag(HotelAverageLeadValueMicros);
      }
      if (impressions_ != null) {
        size += _single_impressions_codec.CalculateSizeWithTag(Impressions);
      }
      if (interactionRate_ != null) {
        size += _single_interactionRate_codec.CalculateSizeWithTag(InteractionRate);
      }
      if (interactions_ != null) {
        size += _single_interactions_codec.CalculateSizeWithTag(Interactions);
      }
      if (invalidClickRate_ != null) {
        size += _single_invalidClickRate_codec.CalculateSizeWithTag(InvalidClickRate);
      }
      if (invalidClicks_ != null) {
        size += _single_invalidClicks_codec.CalculateSizeWithTag(InvalidClicks);
      }
      if (percentNewVisitors_ != null) {
        size += _single_percentNewVisitors_codec.CalculateSizeWithTag(PercentNewVisitors);
      }
      if (phoneCalls_ != null) {
        size += _single_phoneCalls_codec.CalculateSizeWithTag(PhoneCalls);
      }
      if (phoneImpressions_ != null) {
        size += _single_phoneImpressions_codec.CalculateSizeWithTag(PhoneImpressions);
      }
      if (phoneThroughRate_ != null) {
        size += _single_phoneThroughRate_codec.CalculateSizeWithTag(PhoneThroughRate);
      }
      if (relativeCtr_ != null) {
        size += _single_relativeCtr_codec.CalculateSizeWithTag(RelativeCtr);
      }
      if (searchAbsoluteTopImpressionShare_ != null) {
        size += _single_searchAbsoluteTopImpressionShare_codec.CalculateSizeWithTag(SearchAbsoluteTopImpressionShare);
      }
      if (searchBudgetLostImpressionShare_ != null) {
        size += _single_searchBudgetLostImpressionShare_codec.CalculateSizeWithTag(SearchBudgetLostImpressionShare);
      }
      if (searchExactMatchImpressionShare_ != null) {
        size += _single_searchExactMatchImpressionShare_codec.CalculateSizeWithTag(SearchExactMatchImpressionShare);
      }
      if (searchImpressionShare_ != null) {
        size += _single_searchImpressionShare_codec.CalculateSizeWithTag(SearchImpressionShare);
      }
      if (searchRankLostImpressionShare_ != null) {
        size += _single_searchRankLostImpressionShare_codec.CalculateSizeWithTag(SearchRankLostImpressionShare);
      }
      if (valuePerAllConversions_ != null) {
        size += _single_valuePerAllConversions_codec.CalculateSizeWithTag(ValuePerAllConversions);
      }
      if (valuePerConversion_ != null) {
        size += _single_valuePerConversion_codec.CalculateSizeWithTag(ValuePerConversion);
      }
      if (videoQuartile100Rate_ != null) {
        size += _single_videoQuartile100Rate_codec.CalculateSizeWithTag(VideoQuartile100Rate);
      }
      if (videoQuartile25Rate_ != null) {
        size += _single_videoQuartile25Rate_codec.CalculateSizeWithTag(VideoQuartile25Rate);
      }
      if (videoQuartile50Rate_ != null) {
        size += _single_videoQuartile50Rate_codec.CalculateSizeWithTag(VideoQuartile50Rate);
      }
      if (videoQuartile75Rate_ != null) {
        size += _single_videoQuartile75Rate_codec.CalculateSizeWithTag(VideoQuartile75Rate);
      }
      if (videoViewRate_ != null) {
        size += _single_videoViewRate_codec.CalculateSizeWithTag(VideoViewRate);
      }
      if (videoViews_ != null) {
        size += _single_videoViews_codec.CalculateSizeWithTag(VideoViews);
      }
      if (viewThroughConversions_ != null) {
        size += _single_viewThroughConversions_codec.CalculateSizeWithTag(ViewThroughConversions);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Metrics other) {
      if (other == null) {
        return;
      }
      if (other.allConversionsFromInteractionsRate_ != null) {
        if (allConversionsFromInteractionsRate_ == null || other.AllConversionsFromInteractionsRate != 0D) {
          AllConversionsFromInteractionsRate = other.AllConversionsFromInteractionsRate;
        }
      }
      if (other.allConversionsValue_ != null) {
        if (allConversionsValue_ == null || other.AllConversionsValue != 0D) {
          AllConversionsValue = other.AllConversionsValue;
        }
      }
      if (other.allConversions_ != null) {
        if (allConversions_ == null || other.AllConversions != 0D) {
          AllConversions = other.AllConversions;
        }
      }
      if (other.allConversionsValuePerCost_ != null) {
        if (allConversionsValuePerCost_ == null || other.AllConversionsValuePerCost != 0D) {
          AllConversionsValuePerCost = other.AllConversionsValuePerCost;
        }
      }
      if (other.allConversionsFromInteractionsValuePerInteraction_ != null) {
        if (allConversionsFromInteractionsValuePerInteraction_ == null || other.AllConversionsFromInteractionsValuePerInteraction != 0D) {
          AllConversionsFromInteractionsValuePerInteraction = other.AllConversionsFromInteractionsValuePerInteraction;
        }
      }
      if (other.averageCost_ != null) {
        if (averageCost_ == null || other.AverageCost != 0D) {
          AverageCost = other.AverageCost;
        }
      }
      if (other.averageCpc_ != null) {
        if (averageCpc_ == null || other.AverageCpc != 0D) {
          AverageCpc = other.AverageCpc;
        }
      }
      if (other.averageCpm_ != null) {
        if (averageCpm_ == null || other.AverageCpm != 0D) {
          AverageCpm = other.AverageCpm;
        }
      }
      if (other.averageCpv_ != null) {
        if (averageCpv_ == null || other.AverageCpv != 0D) {
          AverageCpv = other.AverageCpv;
        }
      }
      if (other.averagePosition_ != null) {
        if (averagePosition_ == null || other.AveragePosition != 0D) {
          AveragePosition = other.AveragePosition;
        }
      }
      if (other.benchmarkCtr_ != null) {
        if (benchmarkCtr_ == null || other.BenchmarkCtr != 0D) {
          BenchmarkCtr = other.BenchmarkCtr;
        }
      }
      if (other.bounceRate_ != null) {
        if (bounceRate_ == null || other.BounceRate != 0D) {
          BounceRate = other.BounceRate;
        }
      }
      if (other.clicks_ != null) {
        if (clicks_ == null || other.Clicks != 0L) {
          Clicks = other.Clicks;
        }
      }
      if (other.contentBudgetLostImpressionShare_ != null) {
        if (contentBudgetLostImpressionShare_ == null || other.ContentBudgetLostImpressionShare != 0D) {
          ContentBudgetLostImpressionShare = other.ContentBudgetLostImpressionShare;
        }
      }
      if (other.contentImpressionShare_ != null) {
        if (contentImpressionShare_ == null || other.ContentImpressionShare != 0D) {
          ContentImpressionShare = other.ContentImpressionShare;
        }
      }
      if (other.conversionLastReceivedRequestDateTime_ != null) {
        if (conversionLastReceivedRequestDateTime_ == null || other.ConversionLastReceivedRequestDateTime != "") {
          ConversionLastReceivedRequestDateTime = other.ConversionLastReceivedRequestDateTime;
        }
      }
      if (other.conversionLastConversionDate_ != null) {
        if (conversionLastConversionDate_ == null || other.ConversionLastConversionDate != "") {
          ConversionLastConversionDate = other.ConversionLastConversionDate;
        }
      }
      if (other.contentRankLostImpressionShare_ != null) {
        if (contentRankLostImpressionShare_ == null || other.ContentRankLostImpressionShare != 0D) {
          ContentRankLostImpressionShare = other.ContentRankLostImpressionShare;
        }
      }
      if (other.conversionsFromInteractionsRate_ != null) {
        if (conversionsFromInteractionsRate_ == null || other.ConversionsFromInteractionsRate != 0D) {
          ConversionsFromInteractionsRate = other.ConversionsFromInteractionsRate;
        }
      }
      if (other.conversionsValue_ != null) {
        if (conversionsValue_ == null || other.ConversionsValue != 0D) {
          ConversionsValue = other.ConversionsValue;
        }
      }
      if (other.conversionsValuePerCost_ != null) {
        if (conversionsValuePerCost_ == null || other.ConversionsValuePerCost != 0D) {
          ConversionsValuePerCost = other.ConversionsValuePerCost;
        }
      }
      if (other.conversionsFromInteractionsValuePerInteraction_ != null) {
        if (conversionsFromInteractionsValuePerInteraction_ == null || other.ConversionsFromInteractionsValuePerInteraction != 0D) {
          ConversionsFromInteractionsValuePerInteraction = other.ConversionsFromInteractionsValuePerInteraction;
        }
      }
      if (other.conversions_ != null) {
        if (conversions_ == null || other.Conversions != 0D) {
          Conversions = other.Conversions;
        }
      }
      if (other.costMicros_ != null) {
        if (costMicros_ == null || other.CostMicros != 0L) {
          CostMicros = other.CostMicros;
        }
      }
      if (other.costPerAllConversions_ != null) {
        if (costPerAllConversions_ == null || other.CostPerAllConversions != 0D) {
          CostPerAllConversions = other.CostPerAllConversions;
        }
      }
      if (other.costPerConversion_ != null) {
        if (costPerConversion_ == null || other.CostPerConversion != 0D) {
          CostPerConversion = other.CostPerConversion;
        }
      }
      if (other.crossDeviceConversions_ != null) {
        if (crossDeviceConversions_ == null || other.CrossDeviceConversions != 0D) {
          CrossDeviceConversions = other.CrossDeviceConversions;
        }
      }
      if (other.ctr_ != null) {
        if (ctr_ == null || other.Ctr != 0D) {
          Ctr = other.Ctr;
        }
      }
      if (other.engagementRate_ != null) {
        if (engagementRate_ == null || other.EngagementRate != 0D) {
          EngagementRate = other.EngagementRate;
        }
      }
      if (other.engagements_ != null) {
        if (engagements_ == null || other.Engagements != 0L) {
          Engagements = other.Engagements;
        }
      }
      if (other.hotelAverageLeadValueMicros_ != null) {
        if (hotelAverageLeadValueMicros_ == null || other.HotelAverageLeadValueMicros != 0D) {
          HotelAverageLeadValueMicros = other.HotelAverageLeadValueMicros;
        }
      }
      if (other.impressions_ != null) {
        if (impressions_ == null || other.Impressions != 0L) {
          Impressions = other.Impressions;
        }
      }
      if (other.interactionRate_ != null) {
        if (interactionRate_ == null || other.InteractionRate != 0D) {
          InteractionRate = other.InteractionRate;
        }
      }
      if (other.interactions_ != null) {
        if (interactions_ == null || other.Interactions != 0L) {
          Interactions = other.Interactions;
        }
      }
      if (other.invalidClickRate_ != null) {
        if (invalidClickRate_ == null || other.InvalidClickRate != 0D) {
          InvalidClickRate = other.InvalidClickRate;
        }
      }
      if (other.invalidClicks_ != null) {
        if (invalidClicks_ == null || other.InvalidClicks != 0L) {
          InvalidClicks = other.InvalidClicks;
        }
      }
      if (other.percentNewVisitors_ != null) {
        if (percentNewVisitors_ == null || other.PercentNewVisitors != 0D) {
          PercentNewVisitors = other.PercentNewVisitors;
        }
      }
      if (other.phoneCalls_ != null) {
        if (phoneCalls_ == null || other.PhoneCalls != 0L) {
          PhoneCalls = other.PhoneCalls;
        }
      }
      if (other.phoneImpressions_ != null) {
        if (phoneImpressions_ == null || other.PhoneImpressions != 0L) {
          PhoneImpressions = other.PhoneImpressions;
        }
      }
      if (other.phoneThroughRate_ != null) {
        if (phoneThroughRate_ == null || other.PhoneThroughRate != 0D) {
          PhoneThroughRate = other.PhoneThroughRate;
        }
      }
      if (other.relativeCtr_ != null) {
        if (relativeCtr_ == null || other.RelativeCtr != 0D) {
          RelativeCtr = other.RelativeCtr;
        }
      }
      if (other.searchAbsoluteTopImpressionShare_ != null) {
        if (searchAbsoluteTopImpressionShare_ == null || other.SearchAbsoluteTopImpressionShare != 0D) {
          SearchAbsoluteTopImpressionShare = other.SearchAbsoluteTopImpressionShare;
        }
      }
      if (other.searchBudgetLostImpressionShare_ != null) {
        if (searchBudgetLostImpressionShare_ == null || other.SearchBudgetLostImpressionShare != 0D) {
          SearchBudgetLostImpressionShare = other.SearchBudgetLostImpressionShare;
        }
      }
      if (other.searchExactMatchImpressionShare_ != null) {
        if (searchExactMatchImpressionShare_ == null || other.SearchExactMatchImpressionShare != 0D) {
          SearchExactMatchImpressionShare = other.SearchExactMatchImpressionShare;
        }
      }
      if (other.searchImpressionShare_ != null) {
        if (searchImpressionShare_ == null || other.SearchImpressionShare != 0D) {
          SearchImpressionShare = other.SearchImpressionShare;
        }
      }
      if (other.searchRankLostImpressionShare_ != null) {
        if (searchRankLostImpressionShare_ == null || other.SearchRankLostImpressionShare != 0D) {
          SearchRankLostImpressionShare = other.SearchRankLostImpressionShare;
        }
      }
      if (other.valuePerAllConversions_ != null) {
        if (valuePerAllConversions_ == null || other.ValuePerAllConversions != 0D) {
          ValuePerAllConversions = other.ValuePerAllConversions;
        }
      }
      if (other.valuePerConversion_ != null) {
        if (valuePerConversion_ == null || other.ValuePerConversion != 0D) {
          ValuePerConversion = other.ValuePerConversion;
        }
      }
      if (other.videoQuartile100Rate_ != null) {
        if (videoQuartile100Rate_ == null || other.VideoQuartile100Rate != 0D) {
          VideoQuartile100Rate = other.VideoQuartile100Rate;
        }
      }
      if (other.videoQuartile25Rate_ != null) {
        if (videoQuartile25Rate_ == null || other.VideoQuartile25Rate != 0D) {
          VideoQuartile25Rate = other.VideoQuartile25Rate;
        }
      }
      if (other.videoQuartile50Rate_ != null) {
        if (videoQuartile50Rate_ == null || other.VideoQuartile50Rate != 0D) {
          VideoQuartile50Rate = other.VideoQuartile50Rate;
        }
      }
      if (other.videoQuartile75Rate_ != null) {
        if (videoQuartile75Rate_ == null || other.VideoQuartile75Rate != 0D) {
          VideoQuartile75Rate = other.VideoQuartile75Rate;
        }
      }
      if (other.videoViewRate_ != null) {
        if (videoViewRate_ == null || other.VideoViewRate != 0D) {
          VideoViewRate = other.VideoViewRate;
        }
      }
      if (other.videoViews_ != null) {
        if (videoViews_ == null || other.VideoViews != 0L) {
          VideoViews = other.VideoViews;
        }
      }
      if (other.viewThroughConversions_ != null) {
        if (viewThroughConversions_ == null || other.ViewThroughConversions != 0L) {
          ViewThroughConversions = other.ViewThroughConversions;
        }
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 58: {
            double? value = _single_allConversions_codec.Read(input);
            if (allConversions_ == null || value != 0D) {
              AllConversions = value;
            }
            break;
          }
          case 66: {
            double? value = _single_averageCost_codec.Read(input);
            if (averageCost_ == null || value != 0D) {
              AverageCost = value;
            }
            break;
          }
          case 74: {
            double? value = _single_averageCpc_codec.Read(input);
            if (averageCpc_ == null || value != 0D) {
              AverageCpc = value;
            }
            break;
          }
          case 82: {
            double? value = _single_averageCpm_codec.Read(input);
            if (averageCpm_ == null || value != 0D) {
              AverageCpm = value;
            }
            break;
          }
          case 90: {
            double? value = _single_averageCpv_codec.Read(input);
            if (averageCpv_ == null || value != 0D) {
              AverageCpv = value;
            }
            break;
          }
          case 106: {
            double? value = _single_averagePosition_codec.Read(input);
            if (averagePosition_ == null || value != 0D) {
              AveragePosition = value;
            }
            break;
          }
          case 122: {
            double? value = _single_bounceRate_codec.Read(input);
            if (bounceRate_ == null || value != 0D) {
              BounceRate = value;
            }
            break;
          }
          case 154: {
            long? value = _single_clicks_codec.Read(input);
            if (clicks_ == null || value != 0L) {
              Clicks = value;
            }
            break;
          }
          case 162: {
            double? value = _single_contentBudgetLostImpressionShare_codec.Read(input);
            if (contentBudgetLostImpressionShare_ == null || value != 0D) {
              ContentBudgetLostImpressionShare = value;
            }
            break;
          }
          case 170: {
            double? value = _single_contentImpressionShare_codec.Read(input);
            if (contentImpressionShare_ == null || value != 0D) {
              ContentImpressionShare = value;
            }
            break;
          }
          case 178: {
            double? value = _single_contentRankLostImpressionShare_codec.Read(input);
            if (contentRankLostImpressionShare_ == null || value != 0D) {
              ContentRankLostImpressionShare = value;
            }
            break;
          }
          case 202: {
            double? value = _single_conversions_codec.Read(input);
            if (conversions_ == null || value != 0D) {
              Conversions = value;
            }
            break;
          }
          case 210: {
            long? value = _single_costMicros_codec.Read(input);
            if (costMicros_ == null || value != 0L) {
              CostMicros = value;
            }
            break;
          }
          case 226: {
            double? value = _single_costPerConversion_codec.Read(input);
            if (costPerConversion_ == null || value != 0D) {
              CostPerConversion = value;
            }
            break;
          }
          case 234: {
            double? value = _single_crossDeviceConversions_codec.Read(input);
            if (crossDeviceConversions_ == null || value != 0D) {
              CrossDeviceConversions = value;
            }
            break;
          }
          case 242: {
            double? value = _single_ctr_codec.Read(input);
            if (ctr_ == null || value != 0D) {
              Ctr = value;
            }
            break;
          }
          case 250: {
            double? value = _single_engagementRate_codec.Read(input);
            if (engagementRate_ == null || value != 0D) {
              EngagementRate = value;
            }
            break;
          }
          case 258: {
            long? value = _single_engagements_codec.Read(input);
            if (engagements_ == null || value != 0L) {
              Engagements = value;
            }
            break;
          }
          case 298: {
            long? value = _single_impressions_codec.Read(input);
            if (impressions_ == null || value != 0L) {
              Impressions = value;
            }
            break;
          }
          case 306: {
            double? value = _single_interactionRate_codec.Read(input);
            if (interactionRate_ == null || value != 0D) {
              InteractionRate = value;
            }
            break;
          }
          case 314: {
            long? value = _single_interactions_codec.Read(input);
            if (interactions_ == null || value != 0L) {
              Interactions = value;
            }
            break;
          }
          case 322: {
            double? value = _single_invalidClickRate_codec.Read(input);
            if (invalidClickRate_ == null || value != 0D) {
              InvalidClickRate = value;
            }
            break;
          }
          case 330: {
            long? value = _single_invalidClicks_codec.Read(input);
            if (invalidClicks_ == null || value != 0L) {
              InvalidClicks = value;
            }
            break;
          }
          case 338: {
            double? value = _single_percentNewVisitors_codec.Read(input);
            if (percentNewVisitors_ == null || value != 0D) {
              PercentNewVisitors = value;
            }
            break;
          }
          case 346: {
            long? value = _single_phoneCalls_codec.Read(input);
            if (phoneCalls_ == null || value != 0L) {
              PhoneCalls = value;
            }
            break;
          }
          case 354: {
            long? value = _single_phoneImpressions_codec.Read(input);
            if (phoneImpressions_ == null || value != 0L) {
              PhoneImpressions = value;
            }
            break;
          }
          case 362: {
            double? value = _single_phoneThroughRate_codec.Read(input);
            if (phoneThroughRate_ == null || value != 0D) {
              PhoneThroughRate = value;
            }
            break;
          }
          case 370: {
            double? value = _single_relativeCtr_codec.Read(input);
            if (relativeCtr_ == null || value != 0D) {
              RelativeCtr = value;
            }
            break;
          }
          case 378: {
            double? value = _single_searchBudgetLostImpressionShare_codec.Read(input);
            if (searchBudgetLostImpressionShare_ == null || value != 0D) {
              SearchBudgetLostImpressionShare = value;
            }
            break;
          }
          case 394: {
            double? value = _single_searchExactMatchImpressionShare_codec.Read(input);
            if (searchExactMatchImpressionShare_ == null || value != 0D) {
              SearchExactMatchImpressionShare = value;
            }
            break;
          }
          case 402: {
            double? value = _single_searchImpressionShare_codec.Read(input);
            if (searchImpressionShare_ == null || value != 0D) {
              SearchImpressionShare = value;
            }
            break;
          }
          case 410: {
            double? value = _single_searchRankLostImpressionShare_codec.Read(input);
            if (searchRankLostImpressionShare_ == null || value != 0D) {
              SearchRankLostImpressionShare = value;
            }
            break;
          }
          case 418: {
            double? value = _single_valuePerAllConversions_codec.Read(input);
            if (valuePerAllConversions_ == null || value != 0D) {
              ValuePerAllConversions = value;
            }
            break;
          }
          case 426: {
            double? value = _single_valuePerConversion_codec.Read(input);
            if (valuePerConversion_ == null || value != 0D) {
              ValuePerConversion = value;
            }
            break;
          }
          case 434: {
            double? value = _single_videoQuartile100Rate_codec.Read(input);
            if (videoQuartile100Rate_ == null || value != 0D) {
              VideoQuartile100Rate = value;
            }
            break;
          }
          case 442: {
            double? value = _single_videoQuartile25Rate_codec.Read(input);
            if (videoQuartile25Rate_ == null || value != 0D) {
              VideoQuartile25Rate = value;
            }
            break;
          }
          case 450: {
            double? value = _single_videoQuartile50Rate_codec.Read(input);
            if (videoQuartile50Rate_ == null || value != 0D) {
              VideoQuartile50Rate = value;
            }
            break;
          }
          case 458: {
            double? value = _single_videoQuartile75Rate_codec.Read(input);
            if (videoQuartile75Rate_ == null || value != 0D) {
              VideoQuartile75Rate = value;
            }
            break;
          }
          case 466: {
            double? value = _single_videoViewRate_codec.Read(input);
            if (videoViewRate_ == null || value != 0D) {
              VideoViewRate = value;
            }
            break;
          }
          case 474: {
            long? value = _single_videoViews_codec.Read(input);
            if (videoViews_ == null || value != 0L) {
              VideoViews = value;
            }
            break;
          }
          case 482: {
            long? value = _single_viewThroughConversions_codec.Read(input);
            if (viewThroughConversions_ == null || value != 0L) {
              ViewThroughConversions = value;
            }
            break;
          }
          case 498: {
            double? value = _single_allConversionsValuePerCost_codec.Read(input);
            if (allConversionsValuePerCost_ == null || value != 0D) {
              AllConversionsValuePerCost = value;
            }
            break;
          }
          case 522: {
            double? value = _single_allConversionsFromInteractionsRate_codec.Read(input);
            if (allConversionsFromInteractionsRate_ == null || value != 0D) {
              AllConversionsFromInteractionsRate = value;
            }
            break;
          }
          case 530: {
            double? value = _single_allConversionsValue_codec.Read(input);
            if (allConversionsValue_ == null || value != 0D) {
              AllConversionsValue = value;
            }
            break;
          }
          case 538: {
            double? value = _single_allConversionsFromInteractionsValuePerInteraction_codec.Read(input);
            if (allConversionsFromInteractionsValuePerInteraction_ == null || value != 0D) {
              AllConversionsFromInteractionsValuePerInteraction = value;
            }
            break;
          }
          case 546: {
            double? value = _single_costPerAllConversions_codec.Read(input);
            if (costPerAllConversions_ == null || value != 0D) {
              CostPerAllConversions = value;
            }
            break;
          }
          case 554: {
            double? value = _single_conversionsFromInteractionsRate_codec.Read(input);
            if (conversionsFromInteractionsRate_ == null || value != 0D) {
              ConversionsFromInteractionsRate = value;
            }
            break;
          }
          case 562: {
            double? value = _single_conversionsValue_codec.Read(input);
            if (conversionsValue_ == null || value != 0D) {
              ConversionsValue = value;
            }
            break;
          }
          case 570: {
            double? value = _single_conversionsValuePerCost_codec.Read(input);
            if (conversionsValuePerCost_ == null || value != 0D) {
              ConversionsValuePerCost = value;
            }
            break;
          }
          case 578: {
            double? value = _single_conversionsFromInteractionsValuePerInteraction_codec.Read(input);
            if (conversionsFromInteractionsValuePerInteraction_ == null || value != 0D) {
              ConversionsFromInteractionsValuePerInteraction = value;
            }
            break;
          }
          case 586: {
            string value = _single_conversionLastReceivedRequestDateTime_codec.Read(input);
            if (conversionLastReceivedRequestDateTime_ == null || value != "") {
              ConversionLastReceivedRequestDateTime = value;
            }
            break;
          }
          case 594: {
            string value = _single_conversionLastConversionDate_codec.Read(input);
            if (conversionLastConversionDate_ == null || value != "") {
              ConversionLastConversionDate = value;
            }
            break;
          }
          case 602: {
            double? value = _single_hotelAverageLeadValueMicros_codec.Read(input);
            if (hotelAverageLeadValueMicros_ == null || value != 0D) {
              HotelAverageLeadValueMicros = value;
            }
            break;
          }
          case 618: {
            double? value = _single_benchmarkCtr_codec.Read(input);
            if (benchmarkCtr_ == null || value != 0D) {
              BenchmarkCtr = value;
            }
            break;
          }
          case 626: {
            double? value = _single_searchAbsoluteTopImpressionShare_codec.Read(input);
            if (searchAbsoluteTopImpressionShare_ == null || value != 0D) {
              SearchAbsoluteTopImpressionShare = value;
            }
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
