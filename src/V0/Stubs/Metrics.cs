// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: google/ads/googleads/v0/common/metrics.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Google.Ads.GoogleAds.V0.Common {

  /// <summary>Holder for reflection information generated from google/ads/googleads/v0/common/metrics.proto</summary>
  public static partial class MetricsReflection {

    #region Descriptor
    /// <summary>File descriptor for google/ads/googleads/v0/common/metrics.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static MetricsReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Cixnb29nbGUvYWRzL2dvb2dsZWFkcy92MC9jb21tb24vbWV0cmljcy5wcm90",
            "bxIeZ29vZ2xlLmFkcy5nb29nbGVhZHMudjAuY29tbW9uGh5nb29nbGUvcHJv",
            "dG9idWYvd3JhcHBlcnMucHJvdG8i9xMKB01ldHJpY3MSOQoTYWxsX2NvbnZl",
            "cnNpb25fcmF0ZRgFIAEoCzIcLmdvb2dsZS5wcm90b2J1Zi5Eb3VibGVWYWx1",
            "ZRI6ChRhbGxfY29udmVyc2lvbl92YWx1ZRgGIAEoCzIcLmdvb2dsZS5wcm90",
            "b2J1Zi5Eb3VibGVWYWx1ZRI1Cg9hbGxfY29udmVyc2lvbnMYByABKAsyHC5n",
            "b29nbGUucHJvdG9idWYuRG91YmxlVmFsdWUSRAoeYWxsX2NvbnZlcnNpb25z",
            "X3ZhbHVlX3Blcl9jb3N0GD4gASgLMhwuZ29vZ2xlLnByb3RvYnVmLkRvdWJs",
            "ZVZhbHVlEksKJWFsbF9jb252ZXJzaW9uc192YWx1ZV9wZXJfaW50ZXJhY3Rp",
            "b24YPSABKAsyHC5nb29nbGUucHJvdG9idWYuRG91YmxlVmFsdWUSMgoMYXZl",
            "cmFnZV9jb3N0GAggASgLMhwuZ29vZ2xlLnByb3RvYnVmLkRvdWJsZVZhbHVl",
            "EjEKC2F2ZXJhZ2VfY3BjGAkgASgLMhwuZ29vZ2xlLnByb3RvYnVmLkRvdWJs",
            "ZVZhbHVlEjEKC2F2ZXJhZ2VfY3BtGAogASgLMhwuZ29vZ2xlLnByb3RvYnVm",
            "LkRvdWJsZVZhbHVlEjYKEGF2ZXJhZ2VfcG9zaXRpb24YDSABKAsyHC5nb29n",
            "bGUucHJvdG9idWYuRG91YmxlVmFsdWUSMQoLYm91bmNlX3JhdGUYDyABKAsy",
            "HC5nb29nbGUucHJvdG9idWYuRG91YmxlVmFsdWUSKwoGY2xpY2tzGBMgASgL",
            "MhsuZ29vZ2xlLnByb3RvYnVmLkludDY0VmFsdWUSSgokY29udGVudF9idWRn",
            "ZXRfbG9zdF9pbXByZXNzaW9uX3NoYXJlGBQgASgLMhwuZ29vZ2xlLnByb3Rv",
            "YnVmLkRvdWJsZVZhbHVlEj4KGGNvbnRlbnRfaW1wcmVzc2lvbl9zaGFyZRgV",
            "IAEoCzIcLmdvb2dsZS5wcm90b2J1Zi5Eb3VibGVWYWx1ZRJICiJjb250ZW50",
            "X3JhbmtfbG9zdF9pbXByZXNzaW9uX3NoYXJlGBYgASgLMhwuZ29vZ2xlLnBy",
            "b3RvYnVmLkRvdWJsZVZhbHVlEjUKD2NvbnZlcnNpb25fcmF0ZRgXIAEoCzIc",
            "Lmdvb2dsZS5wcm90b2J1Zi5Eb3VibGVWYWx1ZRI2ChBjb252ZXJzaW9uX3Zh",
            "bHVlGBggASgLMhwuZ29vZ2xlLnByb3RvYnVmLkRvdWJsZVZhbHVlEj8KGWNv",
            "bnZlcnNpb25fdmFsdWVfcGVyX2Nvc3QYQCABKAsyHC5nb29nbGUucHJvdG9i",
            "dWYuRG91YmxlVmFsdWUSRgogY29udmVyc2lvbl92YWx1ZV9wZXJfaW50ZXJh",
            "Y3Rpb24YPyABKAsyHC5nb29nbGUucHJvdG9idWYuRG91YmxlVmFsdWUSMQoL",
            "Y29udmVyc2lvbnMYGSABKAsyHC5nb29nbGUucHJvdG9idWYuRG91YmxlVmFs",
            "dWUSMAoLY29zdF9taWNyb3MYGiABKAsyGy5nb29nbGUucHJvdG9idWYuSW50",
            "NjRWYWx1ZRI9Chdjb3N0X3Blcl9hbGxfY29udmVyc2lvbhgbIAEoCzIcLmdv",
            "b2dsZS5wcm90b2J1Zi5Eb3VibGVWYWx1ZRI5ChNjb3N0X3Blcl9jb252ZXJz",
            "aW9uGBwgASgLMhwuZ29vZ2xlLnByb3RvYnVmLkRvdWJsZVZhbHVlEj4KGGNy",
            "b3NzX2RldmljZV9jb252ZXJzaW9ucxgdIAEoCzIcLmdvb2dsZS5wcm90b2J1",
            "Zi5Eb3VibGVWYWx1ZRIpCgNjdHIYHiABKAsyHC5nb29nbGUucHJvdG9idWYu",
            "RG91YmxlVmFsdWUSNQoPZW5nYWdlbWVudF9yYXRlGB8gASgLMhwuZ29vZ2xl",
            "LnByb3RvYnVmLkRvdWJsZVZhbHVlEjAKC2VuZ2FnZW1lbnRzGCAgASgLMhsu",
            "Z29vZ2xlLnByb3RvYnVmLkludDY0VmFsdWUSMAoLaW1wcmVzc2lvbnMYJSAB",
            "KAsyGy5nb29nbGUucHJvdG9idWYuSW50NjRWYWx1ZRI2ChBpbnRlcmFjdGlv",
            "bl9yYXRlGCYgASgLMhwuZ29vZ2xlLnByb3RvYnVmLkRvdWJsZVZhbHVlEjEK",
            "DGludGVyYWN0aW9ucxgnIAEoCzIbLmdvb2dsZS5wcm90b2J1Zi5JbnQ2NFZh",
            "bHVlEjgKEmludmFsaWRfY2xpY2tfcmF0ZRgoIAEoCzIcLmdvb2dsZS5wcm90",
            "b2J1Zi5Eb3VibGVWYWx1ZRIzCg5pbnZhbGlkX2NsaWNrcxgpIAEoCzIbLmdv",
            "b2dsZS5wcm90b2J1Zi5JbnQ2NFZhbHVlEjoKFHBlcmNlbnRfbmV3X3Zpc2l0",
            "b3JzGCogASgLMhwuZ29vZ2xlLnByb3RvYnVmLkRvdWJsZVZhbHVlEjAKC3Bo",
            "b25lX2NhbGxzGCsgASgLMhsuZ29vZ2xlLnByb3RvYnVmLkludDY0VmFsdWUS",
            "NgoRcGhvbmVfaW1wcmVzc2lvbnMYLCABKAsyGy5nb29nbGUucHJvdG9idWYu",
            "SW50NjRWYWx1ZRI4ChJwaG9uZV90aHJvdWdoX3JhdGUYLSABKAsyHC5nb29n",
            "bGUucHJvdG9idWYuRG91YmxlVmFsdWUSMgoMcmVsYXRpdmVfY3RyGC4gASgL",
            "MhwuZ29vZ2xlLnByb3RvYnVmLkRvdWJsZVZhbHVlEkkKI3NlYXJjaF9idWRn",
            "ZXRfbG9zdF9pbXByZXNzaW9uX3NoYXJlGC8gASgLMhwuZ29vZ2xlLnByb3Rv",
            "YnVmLkRvdWJsZVZhbHVlEkkKI3NlYXJjaF9leGFjdF9tYXRjaF9pbXByZXNz",
            "aW9uX3NoYXJlGDEgASgLMhwuZ29vZ2xlLnByb3RvYnVmLkRvdWJsZVZhbHVl",
            "Ej0KF3NlYXJjaF9pbXByZXNzaW9uX3NoYXJlGDIgASgLMhwuZ29vZ2xlLnBy",
            "b3RvYnVmLkRvdWJsZVZhbHVlEkcKIXNlYXJjaF9yYW5rX2xvc3RfaW1wcmVz",
            "c2lvbl9zaGFyZRgzIAEoCzIcLmdvb2dsZS5wcm90b2J1Zi5Eb3VibGVWYWx1",
            "ZRI/Chl2YWx1ZV9wZXJfYWxsX2NvbnZlcnNpb25zGDQgASgLMhwuZ29vZ2xl",
            "LnByb3RvYnVmLkRvdWJsZVZhbHVlEjoKFHZhbHVlX3Blcl9jb252ZXJzaW9u",
            "GDUgASgLMhwuZ29vZ2xlLnByb3RvYnVmLkRvdWJsZVZhbHVlEj0KGHZpZXdf",
            "dGhyb3VnaF9jb252ZXJzaW9ucxg8IAEoCzIbLmdvb2dsZS5wcm90b2J1Zi5J",
            "bnQ2NFZhbHVlQsIBCiJjb20uZ29vZ2xlLmFkcy5nb29nbGVhZHMudjAuY29t",
            "bW9uQgxNZXRyaWNzUHJvdG9QAVpEZ29vZ2xlLmdvbGFuZy5vcmcvZ2VucHJv",
            "dG8vZ29vZ2xlYXBpcy9hZHMvZ29vZ2xlYWRzL3YwL2NvbW1vbjtjb21tb26i",
            "AgNHQUGqAh5Hb29nbGUuQWRzLkdvb2dsZUFkcy5WMC5Db21tb27KAh5Hb29n",
            "bGVcQWRzXEdvb2dsZUFkc1xWMFxDb21tb25iBnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Google.Protobuf.WellKnownTypes.WrappersReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Ads.GoogleAds.V0.Common.Metrics), global::Google.Ads.GoogleAds.V0.Common.Metrics.Parser, new[]{ "AllConversionRate", "AllConversionValue", "AllConversions", "AllConversionsValuePerCost", "AllConversionsValuePerInteraction", "AverageCost", "AverageCpc", "AverageCpm", "AveragePosition", "BounceRate", "Clicks", "ContentBudgetLostImpressionShare", "ContentImpressionShare", "ContentRankLostImpressionShare", "ConversionRate", "ConversionValue", "ConversionValuePerCost", "ConversionValuePerInteraction", "Conversions", "CostMicros", "CostPerAllConversion", "CostPerConversion", "CrossDeviceConversions", "Ctr", "EngagementRate", "Engagements", "Impressions", "InteractionRate", "Interactions", "InvalidClickRate", "InvalidClicks", "PercentNewVisitors", "PhoneCalls", "PhoneImpressions", "PhoneThroughRate", "RelativeCtr", "SearchBudgetLostImpressionShare", "SearchExactMatchImpressionShare", "SearchImpressionShare", "SearchRankLostImpressionShare", "ValuePerAllConversions", "ValuePerConversion", "ViewThroughConversions" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  /// <summary>
  /// Metrics data.
  /// </summary>
  public sealed partial class Metrics : pb::IMessage<Metrics> {
    private static readonly pb::MessageParser<Metrics> _parser = new pb::MessageParser<Metrics>(() => new Metrics());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Metrics> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Ads.GoogleAds.V0.Common.MetricsReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Metrics() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Metrics(Metrics other) : this() {
      AllConversionRate = other.AllConversionRate;
      AllConversionValue = other.AllConversionValue;
      AllConversions = other.AllConversions;
      AllConversionsValuePerCost = other.AllConversionsValuePerCost;
      AllConversionsValuePerInteraction = other.AllConversionsValuePerInteraction;
      AverageCost = other.AverageCost;
      AverageCpc = other.AverageCpc;
      AverageCpm = other.AverageCpm;
      AveragePosition = other.AveragePosition;
      BounceRate = other.BounceRate;
      Clicks = other.Clicks;
      ContentBudgetLostImpressionShare = other.ContentBudgetLostImpressionShare;
      ContentImpressionShare = other.ContentImpressionShare;
      ContentRankLostImpressionShare = other.ContentRankLostImpressionShare;
      ConversionRate = other.ConversionRate;
      ConversionValue = other.ConversionValue;
      ConversionValuePerCost = other.ConversionValuePerCost;
      ConversionValuePerInteraction = other.ConversionValuePerInteraction;
      Conversions = other.Conversions;
      CostMicros = other.CostMicros;
      CostPerAllConversion = other.CostPerAllConversion;
      CostPerConversion = other.CostPerConversion;
      CrossDeviceConversions = other.CrossDeviceConversions;
      Ctr = other.Ctr;
      EngagementRate = other.EngagementRate;
      Engagements = other.Engagements;
      Impressions = other.Impressions;
      InteractionRate = other.InteractionRate;
      Interactions = other.Interactions;
      InvalidClickRate = other.InvalidClickRate;
      InvalidClicks = other.InvalidClicks;
      PercentNewVisitors = other.PercentNewVisitors;
      PhoneCalls = other.PhoneCalls;
      PhoneImpressions = other.PhoneImpressions;
      PhoneThroughRate = other.PhoneThroughRate;
      RelativeCtr = other.RelativeCtr;
      SearchBudgetLostImpressionShare = other.SearchBudgetLostImpressionShare;
      SearchExactMatchImpressionShare = other.SearchExactMatchImpressionShare;
      SearchImpressionShare = other.SearchImpressionShare;
      SearchRankLostImpressionShare = other.SearchRankLostImpressionShare;
      ValuePerAllConversions = other.ValuePerAllConversions;
      ValuePerConversion = other.ValuePerConversion;
      ViewThroughConversions = other.ViewThroughConversions;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Metrics Clone() {
      return new Metrics(this);
    }

    /// <summary>Field number for the "all_conversion_rate" field.</summary>
    public const int AllConversionRateFieldNumber = 5;
    private static readonly pb::FieldCodec<double?> _single_allConversionRate_codec = pb::FieldCodec.ForStructWrapper<double>(42);
    private double? allConversionRate_;
    /// <summary>
    /// All conversions divided by the number of ad interactions.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double? AllConversionRate {
      get { return allConversionRate_; }
      set {
        allConversionRate_ = value;
      }
    }

    /// <summary>Field number for the "all_conversion_value" field.</summary>
    public const int AllConversionValueFieldNumber = 6;
    private static readonly pb::FieldCodec<double?> _single_allConversionValue_codec = pb::FieldCodec.ForStructWrapper<double>(50);
    private double? allConversionValue_;
    /// <summary>
    /// The total value of all conversions.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double? AllConversionValue {
      get { return allConversionValue_; }
      set {
        allConversionValue_ = value;
      }
    }

    /// <summary>Field number for the "all_conversions" field.</summary>
    public const int AllConversionsFieldNumber = 7;
    private static readonly pb::FieldCodec<double?> _single_allConversions_codec = pb::FieldCodec.ForStructWrapper<double>(58);
    private double? allConversions_;
    /// <summary>
    /// The total number of conversions. This includes "Conversions" plus
    /// conversions that have their "Include in Conversions" setting unchecked.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double? AllConversions {
      get { return allConversions_; }
      set {
        allConversions_ = value;
      }
    }

    /// <summary>Field number for the "all_conversions_value_per_cost" field.</summary>
    public const int AllConversionsValuePerCostFieldNumber = 62;
    private static readonly pb::FieldCodec<double?> _single_allConversionsValuePerCost_codec = pb::FieldCodec.ForStructWrapper<double>(498);
    private double? allConversionsValuePerCost_;
    /// <summary>
    /// The value of all conversions divided by the total cost of ad interactions
    /// (such as clicks for text ads or views for video ads).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double? AllConversionsValuePerCost {
      get { return allConversionsValuePerCost_; }
      set {
        allConversionsValuePerCost_ = value;
      }
    }

    /// <summary>Field number for the "all_conversions_value_per_interaction" field.</summary>
    public const int AllConversionsValuePerInteractionFieldNumber = 61;
    private static readonly pb::FieldCodec<double?> _single_allConversionsValuePerInteraction_codec = pb::FieldCodec.ForStructWrapper<double>(490);
    private double? allConversionsValuePerInteraction_;
    /// <summary>
    /// The value of all conversions divided by the total number of interactions.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double? AllConversionsValuePerInteraction {
      get { return allConversionsValuePerInteraction_; }
      set {
        allConversionsValuePerInteraction_ = value;
      }
    }

    /// <summary>Field number for the "average_cost" field.</summary>
    public const int AverageCostFieldNumber = 8;
    private static readonly pb::FieldCodec<double?> _single_averageCost_codec = pb::FieldCodec.ForStructWrapper<double>(66);
    private double? averageCost_;
    /// <summary>
    /// The average amount you pay per interaction. This amount is the total cost
    /// of your ads divided by the total number of interactions.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double? AverageCost {
      get { return averageCost_; }
      set {
        averageCost_ = value;
      }
    }

    /// <summary>Field number for the "average_cpc" field.</summary>
    public const int AverageCpcFieldNumber = 9;
    private static readonly pb::FieldCodec<double?> _single_averageCpc_codec = pb::FieldCodec.ForStructWrapper<double>(74);
    private double? averageCpc_;
    /// <summary>
    /// The total cost of all clicks divided by the total number of clicks
    /// received.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double? AverageCpc {
      get { return averageCpc_; }
      set {
        averageCpc_ = value;
      }
    }

    /// <summary>Field number for the "average_cpm" field.</summary>
    public const int AverageCpmFieldNumber = 10;
    private static readonly pb::FieldCodec<double?> _single_averageCpm_codec = pb::FieldCodec.ForStructWrapper<double>(82);
    private double? averageCpm_;
    /// <summary>
    /// Average cost-per-thousand impressions (CPM).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double? AverageCpm {
      get { return averageCpm_; }
      set {
        averageCpm_ = value;
      }
    }

    /// <summary>Field number for the "average_position" field.</summary>
    public const int AveragePositionFieldNumber = 13;
    private static readonly pb::FieldCodec<double?> _single_averagePosition_codec = pb::FieldCodec.ForStructWrapper<double>(106);
    private double? averagePosition_;
    /// <summary>
    /// Your ad's position relative to those of other advertisers.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double? AveragePosition {
      get { return averagePosition_; }
      set {
        averagePosition_ = value;
      }
    }

    /// <summary>Field number for the "bounce_rate" field.</summary>
    public const int BounceRateFieldNumber = 15;
    private static readonly pb::FieldCodec<double?> _single_bounceRate_codec = pb::FieldCodec.ForStructWrapper<double>(122);
    private double? bounceRate_;
    /// <summary>
    /// Percentage of clicks where the user only visited a single page on your
    /// site. Imported from Google Analytics.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double? BounceRate {
      get { return bounceRate_; }
      set {
        bounceRate_ = value;
      }
    }

    /// <summary>Field number for the "clicks" field.</summary>
    public const int ClicksFieldNumber = 19;
    private static readonly pb::FieldCodec<long?> _single_clicks_codec = pb::FieldCodec.ForStructWrapper<long>(154);
    private long? clicks_;
    /// <summary>
    /// The number of clicks.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long? Clicks {
      get { return clicks_; }
      set {
        clicks_ = value;
      }
    }

    /// <summary>Field number for the "content_budget_lost_impression_share" field.</summary>
    public const int ContentBudgetLostImpressionShareFieldNumber = 20;
    private static readonly pb::FieldCodec<double?> _single_contentBudgetLostImpressionShare_codec = pb::FieldCodec.ForStructWrapper<double>(162);
    private double? contentBudgetLostImpressionShare_;
    /// <summary>
    /// The estimated percent of times that your ad was eligible to show
    /// on the Display Network but didn't because your budget was too low.
    /// Note: Content budget lost impression share is reported in the range of 0
    /// to 0.9. Any value above 0.9 is reported as 0.9001.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double? ContentBudgetLostImpressionShare {
      get { return contentBudgetLostImpressionShare_; }
      set {
        contentBudgetLostImpressionShare_ = value;
      }
    }

    /// <summary>Field number for the "content_impression_share" field.</summary>
    public const int ContentImpressionShareFieldNumber = 21;
    private static readonly pb::FieldCodec<double?> _single_contentImpressionShare_codec = pb::FieldCodec.ForStructWrapper<double>(170);
    private double? contentImpressionShare_;
    /// <summary>
    /// The impressions you've received on the Display Network divided
    /// by the estimated number of impressions you were eligible to receive.
    /// Note: Content impression share is reported in the range of 0.1 to 1. Any
    /// value below 0.1 is reported as 0.0999.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double? ContentImpressionShare {
      get { return contentImpressionShare_; }
      set {
        contentImpressionShare_ = value;
      }
    }

    /// <summary>Field number for the "content_rank_lost_impression_share" field.</summary>
    public const int ContentRankLostImpressionShareFieldNumber = 22;
    private static readonly pb::FieldCodec<double?> _single_contentRankLostImpressionShare_codec = pb::FieldCodec.ForStructWrapper<double>(178);
    private double? contentRankLostImpressionShare_;
    /// <summary>
    /// The estimated percentage of impressions on the Display Network
    /// that your ads didn't receive due to poor Ad Rank.
    /// Note: Content rank lost impression share is reported in the range of 0
    /// to 0.9. Any value above 0.9 is reported as 0.9001.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double? ContentRankLostImpressionShare {
      get { return contentRankLostImpressionShare_; }
      set {
        contentRankLostImpressionShare_ = value;
      }
    }

    /// <summary>Field number for the "conversion_rate" field.</summary>
    public const int ConversionRateFieldNumber = 23;
    private static readonly pb::FieldCodec<double?> _single_conversionRate_codec = pb::FieldCodec.ForStructWrapper<double>(186);
    private double? conversionRate_;
    /// <summary>
    /// Conversions divided by the number of ad interactions (such as clicks for
    /// text ads or views for video ads).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double? ConversionRate {
      get { return conversionRate_; }
      set {
        conversionRate_ = value;
      }
    }

    /// <summary>Field number for the "conversion_value" field.</summary>
    public const int ConversionValueFieldNumber = 24;
    private static readonly pb::FieldCodec<double?> _single_conversionValue_codec = pb::FieldCodec.ForStructWrapper<double>(194);
    private double? conversionValue_;
    /// <summary>
    /// The total value of conversions.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double? ConversionValue {
      get { return conversionValue_; }
      set {
        conversionValue_ = value;
      }
    }

    /// <summary>Field number for the "conversion_value_per_cost" field.</summary>
    public const int ConversionValuePerCostFieldNumber = 64;
    private static readonly pb::FieldCodec<double?> _single_conversionValuePerCost_codec = pb::FieldCodec.ForStructWrapper<double>(514);
    private double? conversionValuePerCost_;
    /// <summary>
    /// The value of conversions divided by the cost of ad interactions.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double? ConversionValuePerCost {
      get { return conversionValuePerCost_; }
      set {
        conversionValuePerCost_ = value;
      }
    }

    /// <summary>Field number for the "conversion_value_per_interaction" field.</summary>
    public const int ConversionValuePerInteractionFieldNumber = 63;
    private static readonly pb::FieldCodec<double?> _single_conversionValuePerInteraction_codec = pb::FieldCodec.ForStructWrapper<double>(506);
    private double? conversionValuePerInteraction_;
    /// <summary>
    /// The value of conversions divided by the number of ad interactions.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double? ConversionValuePerInteraction {
      get { return conversionValuePerInteraction_; }
      set {
        conversionValuePerInteraction_ = value;
      }
    }

    /// <summary>Field number for the "conversions" field.</summary>
    public const int ConversionsFieldNumber = 25;
    private static readonly pb::FieldCodec<double?> _single_conversions_codec = pb::FieldCodec.ForStructWrapper<double>(202);
    private double? conversions_;
    /// <summary>
    /// The number of conversions. This only includes conversion actions which have
    /// "Include in Conversions" checked.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double? Conversions {
      get { return conversions_; }
      set {
        conversions_ = value;
      }
    }

    /// <summary>Field number for the "cost_micros" field.</summary>
    public const int CostMicrosFieldNumber = 26;
    private static readonly pb::FieldCodec<long?> _single_costMicros_codec = pb::FieldCodec.ForStructWrapper<long>(210);
    private long? costMicros_;
    /// <summary>
    /// The sum of your cost-per-click (CPC) and cost-per-thousand impressions
    /// (CPM) costs during this period.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long? CostMicros {
      get { return costMicros_; }
      set {
        costMicros_ = value;
      }
    }

    /// <summary>Field number for the "cost_per_all_conversion" field.</summary>
    public const int CostPerAllConversionFieldNumber = 27;
    private static readonly pb::FieldCodec<double?> _single_costPerAllConversion_codec = pb::FieldCodec.ForStructWrapper<double>(218);
    private double? costPerAllConversion_;
    /// <summary>
    /// The cost of ad interactions divided by all conversions.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double? CostPerAllConversion {
      get { return costPerAllConversion_; }
      set {
        costPerAllConversion_ = value;
      }
    }

    /// <summary>Field number for the "cost_per_conversion" field.</summary>
    public const int CostPerConversionFieldNumber = 28;
    private static readonly pb::FieldCodec<double?> _single_costPerConversion_codec = pb::FieldCodec.ForStructWrapper<double>(226);
    private double? costPerConversion_;
    /// <summary>
    /// The cost of ad interactions divided by conversions.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double? CostPerConversion {
      get { return costPerConversion_; }
      set {
        costPerConversion_ = value;
      }
    }

    /// <summary>Field number for the "cross_device_conversions" field.</summary>
    public const int CrossDeviceConversionsFieldNumber = 29;
    private static readonly pb::FieldCodec<double?> _single_crossDeviceConversions_codec = pb::FieldCodec.ForStructWrapper<double>(234);
    private double? crossDeviceConversions_;
    /// <summary>
    /// Conversions from when a customer clicks on an AdWords ad on one device,
    /// then converts on a different device or browser.
    /// Cross-device conversions are already included in all_conversions.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double? CrossDeviceConversions {
      get { return crossDeviceConversions_; }
      set {
        crossDeviceConversions_ = value;
      }
    }

    /// <summary>Field number for the "ctr" field.</summary>
    public const int CtrFieldNumber = 30;
    private static readonly pb::FieldCodec<double?> _single_ctr_codec = pb::FieldCodec.ForStructWrapper<double>(242);
    private double? ctr_;
    /// <summary>
    /// The number of clicks your ad receives (Clicks) divided by the number
    /// of times your ad is shown (Impressions).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double? Ctr {
      get { return ctr_; }
      set {
        ctr_ = value;
      }
    }

    /// <summary>Field number for the "engagement_rate" field.</summary>
    public const int EngagementRateFieldNumber = 31;
    private static readonly pb::FieldCodec<double?> _single_engagementRate_codec = pb::FieldCodec.ForStructWrapper<double>(250);
    private double? engagementRate_;
    /// <summary>
    /// How often people engage with your ad after it's shown to them. This is the
    /// number of ad expansions divided by the number of times your ad is shown.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double? EngagementRate {
      get { return engagementRate_; }
      set {
        engagementRate_ = value;
      }
    }

    /// <summary>Field number for the "engagements" field.</summary>
    public const int EngagementsFieldNumber = 32;
    private static readonly pb::FieldCodec<long?> _single_engagements_codec = pb::FieldCodec.ForStructWrapper<long>(258);
    private long? engagements_;
    /// <summary>
    /// The number of engagements.
    /// An engagement occurs when a viewer expands your Lightbox ad. Also, in the
    /// future, other ad types may support engagement metrics.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long? Engagements {
      get { return engagements_; }
      set {
        engagements_ = value;
      }
    }

    /// <summary>Field number for the "impressions" field.</summary>
    public const int ImpressionsFieldNumber = 37;
    private static readonly pb::FieldCodec<long?> _single_impressions_codec = pb::FieldCodec.ForStructWrapper<long>(298);
    private long? impressions_;
    /// <summary>
    /// Count of how often your ad has appeared on a search results page or
    /// website on the Google Network.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long? Impressions {
      get { return impressions_; }
      set {
        impressions_ = value;
      }
    }

    /// <summary>Field number for the "interaction_rate" field.</summary>
    public const int InteractionRateFieldNumber = 38;
    private static readonly pb::FieldCodec<double?> _single_interactionRate_codec = pb::FieldCodec.ForStructWrapper<double>(306);
    private double? interactionRate_;
    /// <summary>
    /// How often people interact with your ad after it is shown to them.
    /// This is the number of interactions divided by the number of times your ad
    /// is shown.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double? InteractionRate {
      get { return interactionRate_; }
      set {
        interactionRate_ = value;
      }
    }

    /// <summary>Field number for the "interactions" field.</summary>
    public const int InteractionsFieldNumber = 39;
    private static readonly pb::FieldCodec<long?> _single_interactions_codec = pb::FieldCodec.ForStructWrapper<long>(314);
    private long? interactions_;
    /// <summary>
    /// The number of interactions.
    /// An interaction is the main user action associated with an ad format-clicks
    /// for text and shopping ads, views for video ads, and so on.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long? Interactions {
      get { return interactions_; }
      set {
        interactions_ = value;
      }
    }

    /// <summary>Field number for the "invalid_click_rate" field.</summary>
    public const int InvalidClickRateFieldNumber = 40;
    private static readonly pb::FieldCodec<double?> _single_invalidClickRate_codec = pb::FieldCodec.ForStructWrapper<double>(322);
    private double? invalidClickRate_;
    /// <summary>
    /// The percentage of clicks filtered out of your total number of clicks
    /// (filtered + non-filtered clicks) during the reporting period.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double? InvalidClickRate {
      get { return invalidClickRate_; }
      set {
        invalidClickRate_ = value;
      }
    }

    /// <summary>Field number for the "invalid_clicks" field.</summary>
    public const int InvalidClicksFieldNumber = 41;
    private static readonly pb::FieldCodec<long?> _single_invalidClicks_codec = pb::FieldCodec.ForStructWrapper<long>(330);
    private long? invalidClicks_;
    /// <summary>
    /// Number of clicks Google considers illegitimate and doesn't charge you for.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long? InvalidClicks {
      get { return invalidClicks_; }
      set {
        invalidClicks_ = value;
      }
    }

    /// <summary>Field number for the "percent_new_visitors" field.</summary>
    public const int PercentNewVisitorsFieldNumber = 42;
    private static readonly pb::FieldCodec<double?> _single_percentNewVisitors_codec = pb::FieldCodec.ForStructWrapper<double>(338);
    private double? percentNewVisitors_;
    /// <summary>
    /// Percentage of first-time sessions (from people who had never visited your
    /// site before). Imported from Google Analytics.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double? PercentNewVisitors {
      get { return percentNewVisitors_; }
      set {
        percentNewVisitors_ = value;
      }
    }

    /// <summary>Field number for the "phone_calls" field.</summary>
    public const int PhoneCallsFieldNumber = 43;
    private static readonly pb::FieldCodec<long?> _single_phoneCalls_codec = pb::FieldCodec.ForStructWrapper<long>(346);
    private long? phoneCalls_;
    /// <summary>
    /// Number of offline phone calls.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long? PhoneCalls {
      get { return phoneCalls_; }
      set {
        phoneCalls_ = value;
      }
    }

    /// <summary>Field number for the "phone_impressions" field.</summary>
    public const int PhoneImpressionsFieldNumber = 44;
    private static readonly pb::FieldCodec<long?> _single_phoneImpressions_codec = pb::FieldCodec.ForStructWrapper<long>(354);
    private long? phoneImpressions_;
    /// <summary>
    /// Number of offline phone impressions.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long? PhoneImpressions {
      get { return phoneImpressions_; }
      set {
        phoneImpressions_ = value;
      }
    }

    /// <summary>Field number for the "phone_through_rate" field.</summary>
    public const int PhoneThroughRateFieldNumber = 45;
    private static readonly pb::FieldCodec<double?> _single_phoneThroughRate_codec = pb::FieldCodec.ForStructWrapper<double>(362);
    private double? phoneThroughRate_;
    /// <summary>
    /// Number of phone calls received (phone_calls) divided by the number of
    /// times your phone number is shown (phone_impressions).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double? PhoneThroughRate {
      get { return phoneThroughRate_; }
      set {
        phoneThroughRate_ = value;
      }
    }

    /// <summary>Field number for the "relative_ctr" field.</summary>
    public const int RelativeCtrFieldNumber = 46;
    private static readonly pb::FieldCodec<double?> _single_relativeCtr_codec = pb::FieldCodec.ForStructWrapper<double>(370);
    private double? relativeCtr_;
    /// <summary>
    /// Your clickthrough rate (Ctr) divided by the average clickthrough rate of
    /// all advertisers on the websites that show your ads. Measures how your ads
    /// perform on Display Network sites compared to other ads on the same sites.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double? RelativeCtr {
      get { return relativeCtr_; }
      set {
        relativeCtr_ = value;
      }
    }

    /// <summary>Field number for the "search_budget_lost_impression_share" field.</summary>
    public const int SearchBudgetLostImpressionShareFieldNumber = 47;
    private static readonly pb::FieldCodec<double?> _single_searchBudgetLostImpressionShare_codec = pb::FieldCodec.ForStructWrapper<double>(378);
    private double? searchBudgetLostImpressionShare_;
    /// <summary>
    /// The estimated percent of times that your ad was eligible to show on the
    /// Search Network but didn't because your budget was too low. Note: Search
    /// budget lost impression share is reported in the range of 0 to 0.9. Any
    /// value above 0.9 is reported as 0.9001.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double? SearchBudgetLostImpressionShare {
      get { return searchBudgetLostImpressionShare_; }
      set {
        searchBudgetLostImpressionShare_ = value;
      }
    }

    /// <summary>Field number for the "search_exact_match_impression_share" field.</summary>
    public const int SearchExactMatchImpressionShareFieldNumber = 49;
    private static readonly pb::FieldCodec<double?> _single_searchExactMatchImpressionShare_codec = pb::FieldCodec.ForStructWrapper<double>(394);
    private double? searchExactMatchImpressionShare_;
    /// <summary>
    /// The impressions you've received divided by the estimated number of
    /// impressions you were eligible to receive on the Search Network for search
    /// terms that matched your keywords exactly (or were close variants of your
    /// keyword), regardless of your keyword match types. Note: Search exact match
    /// impression share is reported in the range of 0.1 to 1. Any value below 0.1
    /// is reported as 0.0999.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double? SearchExactMatchImpressionShare {
      get { return searchExactMatchImpressionShare_; }
      set {
        searchExactMatchImpressionShare_ = value;
      }
    }

    /// <summary>Field number for the "search_impression_share" field.</summary>
    public const int SearchImpressionShareFieldNumber = 50;
    private static readonly pb::FieldCodec<double?> _single_searchImpressionShare_codec = pb::FieldCodec.ForStructWrapper<double>(402);
    private double? searchImpressionShare_;
    /// <summary>
    /// The impressions you've received on the Search Network divided
    /// by the estimated number of impressions you were eligible to receive.
    /// Note: Search impression share is reported in the range of 0.1 to 1. Any
    /// value below 0.1 is reported as 0.0999.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double? SearchImpressionShare {
      get { return searchImpressionShare_; }
      set {
        searchImpressionShare_ = value;
      }
    }

    /// <summary>Field number for the "search_rank_lost_impression_share" field.</summary>
    public const int SearchRankLostImpressionShareFieldNumber = 51;
    private static readonly pb::FieldCodec<double?> _single_searchRankLostImpressionShare_codec = pb::FieldCodec.ForStructWrapper<double>(410);
    private double? searchRankLostImpressionShare_;
    /// <summary>
    /// The estimated percentage of impressions on the Search Network
    /// that your ads didn't receive due to poor Ad Rank.
    /// Note: Search rank lost impression share is reported in the range of 0 to
    /// 0.9. Any value above 0.9 is reported as 0.9001.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double? SearchRankLostImpressionShare {
      get { return searchRankLostImpressionShare_; }
      set {
        searchRankLostImpressionShare_ = value;
      }
    }

    /// <summary>Field number for the "value_per_all_conversions" field.</summary>
    public const int ValuePerAllConversionsFieldNumber = 52;
    private static readonly pb::FieldCodec<double?> _single_valuePerAllConversions_codec = pb::FieldCodec.ForStructWrapper<double>(418);
    private double? valuePerAllConversions_;
    /// <summary>
    /// The value of all conversions divided by the number of all conversions.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double? ValuePerAllConversions {
      get { return valuePerAllConversions_; }
      set {
        valuePerAllConversions_ = value;
      }
    }

    /// <summary>Field number for the "value_per_conversion" field.</summary>
    public const int ValuePerConversionFieldNumber = 53;
    private static readonly pb::FieldCodec<double?> _single_valuePerConversion_codec = pb::FieldCodec.ForStructWrapper<double>(426);
    private double? valuePerConversion_;
    /// <summary>
    /// The value of conversions divided by the number of conversions.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double? ValuePerConversion {
      get { return valuePerConversion_; }
      set {
        valuePerConversion_ = value;
      }
    }

    /// <summary>Field number for the "view_through_conversions" field.</summary>
    public const int ViewThroughConversionsFieldNumber = 60;
    private static readonly pb::FieldCodec<long?> _single_viewThroughConversions_codec = pb::FieldCodec.ForStructWrapper<long>(482);
    private long? viewThroughConversions_;
    /// <summary>
    /// The total number of view-through conversions.
    /// These happen when a customer sees an image or rich media ad, then later
    /// completes a conversion on your site without interacting with (e.g.,
    /// clicking on) another ad.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long? ViewThroughConversions {
      get { return viewThroughConversions_; }
      set {
        viewThroughConversions_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Metrics);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Metrics other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!pbc::ProtobufEqualityComparers.BitwiseNullableDoubleEqualityComparer.Equals(AllConversionRate, other.AllConversionRate)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseNullableDoubleEqualityComparer.Equals(AllConversionValue, other.AllConversionValue)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseNullableDoubleEqualityComparer.Equals(AllConversions, other.AllConversions)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseNullableDoubleEqualityComparer.Equals(AllConversionsValuePerCost, other.AllConversionsValuePerCost)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseNullableDoubleEqualityComparer.Equals(AllConversionsValuePerInteraction, other.AllConversionsValuePerInteraction)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseNullableDoubleEqualityComparer.Equals(AverageCost, other.AverageCost)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseNullableDoubleEqualityComparer.Equals(AverageCpc, other.AverageCpc)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseNullableDoubleEqualityComparer.Equals(AverageCpm, other.AverageCpm)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseNullableDoubleEqualityComparer.Equals(AveragePosition, other.AveragePosition)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseNullableDoubleEqualityComparer.Equals(BounceRate, other.BounceRate)) return false;
      if (Clicks != other.Clicks) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseNullableDoubleEqualityComparer.Equals(ContentBudgetLostImpressionShare, other.ContentBudgetLostImpressionShare)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseNullableDoubleEqualityComparer.Equals(ContentImpressionShare, other.ContentImpressionShare)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseNullableDoubleEqualityComparer.Equals(ContentRankLostImpressionShare, other.ContentRankLostImpressionShare)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseNullableDoubleEqualityComparer.Equals(ConversionRate, other.ConversionRate)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseNullableDoubleEqualityComparer.Equals(ConversionValue, other.ConversionValue)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseNullableDoubleEqualityComparer.Equals(ConversionValuePerCost, other.ConversionValuePerCost)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseNullableDoubleEqualityComparer.Equals(ConversionValuePerInteraction, other.ConversionValuePerInteraction)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseNullableDoubleEqualityComparer.Equals(Conversions, other.Conversions)) return false;
      if (CostMicros != other.CostMicros) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseNullableDoubleEqualityComparer.Equals(CostPerAllConversion, other.CostPerAllConversion)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseNullableDoubleEqualityComparer.Equals(CostPerConversion, other.CostPerConversion)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseNullableDoubleEqualityComparer.Equals(CrossDeviceConversions, other.CrossDeviceConversions)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseNullableDoubleEqualityComparer.Equals(Ctr, other.Ctr)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseNullableDoubleEqualityComparer.Equals(EngagementRate, other.EngagementRate)) return false;
      if (Engagements != other.Engagements) return false;
      if (Impressions != other.Impressions) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseNullableDoubleEqualityComparer.Equals(InteractionRate, other.InteractionRate)) return false;
      if (Interactions != other.Interactions) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseNullableDoubleEqualityComparer.Equals(InvalidClickRate, other.InvalidClickRate)) return false;
      if (InvalidClicks != other.InvalidClicks) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseNullableDoubleEqualityComparer.Equals(PercentNewVisitors, other.PercentNewVisitors)) return false;
      if (PhoneCalls != other.PhoneCalls) return false;
      if (PhoneImpressions != other.PhoneImpressions) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseNullableDoubleEqualityComparer.Equals(PhoneThroughRate, other.PhoneThroughRate)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseNullableDoubleEqualityComparer.Equals(RelativeCtr, other.RelativeCtr)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseNullableDoubleEqualityComparer.Equals(SearchBudgetLostImpressionShare, other.SearchBudgetLostImpressionShare)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseNullableDoubleEqualityComparer.Equals(SearchExactMatchImpressionShare, other.SearchExactMatchImpressionShare)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseNullableDoubleEqualityComparer.Equals(SearchImpressionShare, other.SearchImpressionShare)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseNullableDoubleEqualityComparer.Equals(SearchRankLostImpressionShare, other.SearchRankLostImpressionShare)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseNullableDoubleEqualityComparer.Equals(ValuePerAllConversions, other.ValuePerAllConversions)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseNullableDoubleEqualityComparer.Equals(ValuePerConversion, other.ValuePerConversion)) return false;
      if (ViewThroughConversions != other.ViewThroughConversions) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (allConversionRate_ != null) hash ^= pbc::ProtobufEqualityComparers.BitwiseNullableDoubleEqualityComparer.GetHashCode(AllConversionRate);
      if (allConversionValue_ != null) hash ^= pbc::ProtobufEqualityComparers.BitwiseNullableDoubleEqualityComparer.GetHashCode(AllConversionValue);
      if (allConversions_ != null) hash ^= pbc::ProtobufEqualityComparers.BitwiseNullableDoubleEqualityComparer.GetHashCode(AllConversions);
      if (allConversionsValuePerCost_ != null) hash ^= pbc::ProtobufEqualityComparers.BitwiseNullableDoubleEqualityComparer.GetHashCode(AllConversionsValuePerCost);
      if (allConversionsValuePerInteraction_ != null) hash ^= pbc::ProtobufEqualityComparers.BitwiseNullableDoubleEqualityComparer.GetHashCode(AllConversionsValuePerInteraction);
      if (averageCost_ != null) hash ^= pbc::ProtobufEqualityComparers.BitwiseNullableDoubleEqualityComparer.GetHashCode(AverageCost);
      if (averageCpc_ != null) hash ^= pbc::ProtobufEqualityComparers.BitwiseNullableDoubleEqualityComparer.GetHashCode(AverageCpc);
      if (averageCpm_ != null) hash ^= pbc::ProtobufEqualityComparers.BitwiseNullableDoubleEqualityComparer.GetHashCode(AverageCpm);
      if (averagePosition_ != null) hash ^= pbc::ProtobufEqualityComparers.BitwiseNullableDoubleEqualityComparer.GetHashCode(AveragePosition);
      if (bounceRate_ != null) hash ^= pbc::ProtobufEqualityComparers.BitwiseNullableDoubleEqualityComparer.GetHashCode(BounceRate);
      if (clicks_ != null) hash ^= Clicks.GetHashCode();
      if (contentBudgetLostImpressionShare_ != null) hash ^= pbc::ProtobufEqualityComparers.BitwiseNullableDoubleEqualityComparer.GetHashCode(ContentBudgetLostImpressionShare);
      if (contentImpressionShare_ != null) hash ^= pbc::ProtobufEqualityComparers.BitwiseNullableDoubleEqualityComparer.GetHashCode(ContentImpressionShare);
      if (contentRankLostImpressionShare_ != null) hash ^= pbc::ProtobufEqualityComparers.BitwiseNullableDoubleEqualityComparer.GetHashCode(ContentRankLostImpressionShare);
      if (conversionRate_ != null) hash ^= pbc::ProtobufEqualityComparers.BitwiseNullableDoubleEqualityComparer.GetHashCode(ConversionRate);
      if (conversionValue_ != null) hash ^= pbc::ProtobufEqualityComparers.BitwiseNullableDoubleEqualityComparer.GetHashCode(ConversionValue);
      if (conversionValuePerCost_ != null) hash ^= pbc::ProtobufEqualityComparers.BitwiseNullableDoubleEqualityComparer.GetHashCode(ConversionValuePerCost);
      if (conversionValuePerInteraction_ != null) hash ^= pbc::ProtobufEqualityComparers.BitwiseNullableDoubleEqualityComparer.GetHashCode(ConversionValuePerInteraction);
      if (conversions_ != null) hash ^= pbc::ProtobufEqualityComparers.BitwiseNullableDoubleEqualityComparer.GetHashCode(Conversions);
      if (costMicros_ != null) hash ^= CostMicros.GetHashCode();
      if (costPerAllConversion_ != null) hash ^= pbc::ProtobufEqualityComparers.BitwiseNullableDoubleEqualityComparer.GetHashCode(CostPerAllConversion);
      if (costPerConversion_ != null) hash ^= pbc::ProtobufEqualityComparers.BitwiseNullableDoubleEqualityComparer.GetHashCode(CostPerConversion);
      if (crossDeviceConversions_ != null) hash ^= pbc::ProtobufEqualityComparers.BitwiseNullableDoubleEqualityComparer.GetHashCode(CrossDeviceConversions);
      if (ctr_ != null) hash ^= pbc::ProtobufEqualityComparers.BitwiseNullableDoubleEqualityComparer.GetHashCode(Ctr);
      if (engagementRate_ != null) hash ^= pbc::ProtobufEqualityComparers.BitwiseNullableDoubleEqualityComparer.GetHashCode(EngagementRate);
      if (engagements_ != null) hash ^= Engagements.GetHashCode();
      if (impressions_ != null) hash ^= Impressions.GetHashCode();
      if (interactionRate_ != null) hash ^= pbc::ProtobufEqualityComparers.BitwiseNullableDoubleEqualityComparer.GetHashCode(InteractionRate);
      if (interactions_ != null) hash ^= Interactions.GetHashCode();
      if (invalidClickRate_ != null) hash ^= pbc::ProtobufEqualityComparers.BitwiseNullableDoubleEqualityComparer.GetHashCode(InvalidClickRate);
      if (invalidClicks_ != null) hash ^= InvalidClicks.GetHashCode();
      if (percentNewVisitors_ != null) hash ^= pbc::ProtobufEqualityComparers.BitwiseNullableDoubleEqualityComparer.GetHashCode(PercentNewVisitors);
      if (phoneCalls_ != null) hash ^= PhoneCalls.GetHashCode();
      if (phoneImpressions_ != null) hash ^= PhoneImpressions.GetHashCode();
      if (phoneThroughRate_ != null) hash ^= pbc::ProtobufEqualityComparers.BitwiseNullableDoubleEqualityComparer.GetHashCode(PhoneThroughRate);
      if (relativeCtr_ != null) hash ^= pbc::ProtobufEqualityComparers.BitwiseNullableDoubleEqualityComparer.GetHashCode(RelativeCtr);
      if (searchBudgetLostImpressionShare_ != null) hash ^= pbc::ProtobufEqualityComparers.BitwiseNullableDoubleEqualityComparer.GetHashCode(SearchBudgetLostImpressionShare);
      if (searchExactMatchImpressionShare_ != null) hash ^= pbc::ProtobufEqualityComparers.BitwiseNullableDoubleEqualityComparer.GetHashCode(SearchExactMatchImpressionShare);
      if (searchImpressionShare_ != null) hash ^= pbc::ProtobufEqualityComparers.BitwiseNullableDoubleEqualityComparer.GetHashCode(SearchImpressionShare);
      if (searchRankLostImpressionShare_ != null) hash ^= pbc::ProtobufEqualityComparers.BitwiseNullableDoubleEqualityComparer.GetHashCode(SearchRankLostImpressionShare);
      if (valuePerAllConversions_ != null) hash ^= pbc::ProtobufEqualityComparers.BitwiseNullableDoubleEqualityComparer.GetHashCode(ValuePerAllConversions);
      if (valuePerConversion_ != null) hash ^= pbc::ProtobufEqualityComparers.BitwiseNullableDoubleEqualityComparer.GetHashCode(ValuePerConversion);
      if (viewThroughConversions_ != null) hash ^= ViewThroughConversions.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (allConversionRate_ != null) {
        _single_allConversionRate_codec.WriteTagAndValue(output, AllConversionRate);
      }
      if (allConversionValue_ != null) {
        _single_allConversionValue_codec.WriteTagAndValue(output, AllConversionValue);
      }
      if (allConversions_ != null) {
        _single_allConversions_codec.WriteTagAndValue(output, AllConversions);
      }
      if (averageCost_ != null) {
        _single_averageCost_codec.WriteTagAndValue(output, AverageCost);
      }
      if (averageCpc_ != null) {
        _single_averageCpc_codec.WriteTagAndValue(output, AverageCpc);
      }
      if (averageCpm_ != null) {
        _single_averageCpm_codec.WriteTagAndValue(output, AverageCpm);
      }
      if (averagePosition_ != null) {
        _single_averagePosition_codec.WriteTagAndValue(output, AveragePosition);
      }
      if (bounceRate_ != null) {
        _single_bounceRate_codec.WriteTagAndValue(output, BounceRate);
      }
      if (clicks_ != null) {
        _single_clicks_codec.WriteTagAndValue(output, Clicks);
      }
      if (contentBudgetLostImpressionShare_ != null) {
        _single_contentBudgetLostImpressionShare_codec.WriteTagAndValue(output, ContentBudgetLostImpressionShare);
      }
      if (contentImpressionShare_ != null) {
        _single_contentImpressionShare_codec.WriteTagAndValue(output, ContentImpressionShare);
      }
      if (contentRankLostImpressionShare_ != null) {
        _single_contentRankLostImpressionShare_codec.WriteTagAndValue(output, ContentRankLostImpressionShare);
      }
      if (conversionRate_ != null) {
        _single_conversionRate_codec.WriteTagAndValue(output, ConversionRate);
      }
      if (conversionValue_ != null) {
        _single_conversionValue_codec.WriteTagAndValue(output, ConversionValue);
      }
      if (conversions_ != null) {
        _single_conversions_codec.WriteTagAndValue(output, Conversions);
      }
      if (costMicros_ != null) {
        _single_costMicros_codec.WriteTagAndValue(output, CostMicros);
      }
      if (costPerAllConversion_ != null) {
        _single_costPerAllConversion_codec.WriteTagAndValue(output, CostPerAllConversion);
      }
      if (costPerConversion_ != null) {
        _single_costPerConversion_codec.WriteTagAndValue(output, CostPerConversion);
      }
      if (crossDeviceConversions_ != null) {
        _single_crossDeviceConversions_codec.WriteTagAndValue(output, CrossDeviceConversions);
      }
      if (ctr_ != null) {
        _single_ctr_codec.WriteTagAndValue(output, Ctr);
      }
      if (engagementRate_ != null) {
        _single_engagementRate_codec.WriteTagAndValue(output, EngagementRate);
      }
      if (engagements_ != null) {
        _single_engagements_codec.WriteTagAndValue(output, Engagements);
      }
      if (impressions_ != null) {
        _single_impressions_codec.WriteTagAndValue(output, Impressions);
      }
      if (interactionRate_ != null) {
        _single_interactionRate_codec.WriteTagAndValue(output, InteractionRate);
      }
      if (interactions_ != null) {
        _single_interactions_codec.WriteTagAndValue(output, Interactions);
      }
      if (invalidClickRate_ != null) {
        _single_invalidClickRate_codec.WriteTagAndValue(output, InvalidClickRate);
      }
      if (invalidClicks_ != null) {
        _single_invalidClicks_codec.WriteTagAndValue(output, InvalidClicks);
      }
      if (percentNewVisitors_ != null) {
        _single_percentNewVisitors_codec.WriteTagAndValue(output, PercentNewVisitors);
      }
      if (phoneCalls_ != null) {
        _single_phoneCalls_codec.WriteTagAndValue(output, PhoneCalls);
      }
      if (phoneImpressions_ != null) {
        _single_phoneImpressions_codec.WriteTagAndValue(output, PhoneImpressions);
      }
      if (phoneThroughRate_ != null) {
        _single_phoneThroughRate_codec.WriteTagAndValue(output, PhoneThroughRate);
      }
      if (relativeCtr_ != null) {
        _single_relativeCtr_codec.WriteTagAndValue(output, RelativeCtr);
      }
      if (searchBudgetLostImpressionShare_ != null) {
        _single_searchBudgetLostImpressionShare_codec.WriteTagAndValue(output, SearchBudgetLostImpressionShare);
      }
      if (searchExactMatchImpressionShare_ != null) {
        _single_searchExactMatchImpressionShare_codec.WriteTagAndValue(output, SearchExactMatchImpressionShare);
      }
      if (searchImpressionShare_ != null) {
        _single_searchImpressionShare_codec.WriteTagAndValue(output, SearchImpressionShare);
      }
      if (searchRankLostImpressionShare_ != null) {
        _single_searchRankLostImpressionShare_codec.WriteTagAndValue(output, SearchRankLostImpressionShare);
      }
      if (valuePerAllConversions_ != null) {
        _single_valuePerAllConversions_codec.WriteTagAndValue(output, ValuePerAllConversions);
      }
      if (valuePerConversion_ != null) {
        _single_valuePerConversion_codec.WriteTagAndValue(output, ValuePerConversion);
      }
      if (viewThroughConversions_ != null) {
        _single_viewThroughConversions_codec.WriteTagAndValue(output, ViewThroughConversions);
      }
      if (allConversionsValuePerInteraction_ != null) {
        _single_allConversionsValuePerInteraction_codec.WriteTagAndValue(output, AllConversionsValuePerInteraction);
      }
      if (allConversionsValuePerCost_ != null) {
        _single_allConversionsValuePerCost_codec.WriteTagAndValue(output, AllConversionsValuePerCost);
      }
      if (conversionValuePerInteraction_ != null) {
        _single_conversionValuePerInteraction_codec.WriteTagAndValue(output, ConversionValuePerInteraction);
      }
      if (conversionValuePerCost_ != null) {
        _single_conversionValuePerCost_codec.WriteTagAndValue(output, ConversionValuePerCost);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (allConversionRate_ != null) {
        size += _single_allConversionRate_codec.CalculateSizeWithTag(AllConversionRate);
      }
      if (allConversionValue_ != null) {
        size += _single_allConversionValue_codec.CalculateSizeWithTag(AllConversionValue);
      }
      if (allConversions_ != null) {
        size += _single_allConversions_codec.CalculateSizeWithTag(AllConversions);
      }
      if (allConversionsValuePerCost_ != null) {
        size += _single_allConversionsValuePerCost_codec.CalculateSizeWithTag(AllConversionsValuePerCost);
      }
      if (allConversionsValuePerInteraction_ != null) {
        size += _single_allConversionsValuePerInteraction_codec.CalculateSizeWithTag(AllConversionsValuePerInteraction);
      }
      if (averageCost_ != null) {
        size += _single_averageCost_codec.CalculateSizeWithTag(AverageCost);
      }
      if (averageCpc_ != null) {
        size += _single_averageCpc_codec.CalculateSizeWithTag(AverageCpc);
      }
      if (averageCpm_ != null) {
        size += _single_averageCpm_codec.CalculateSizeWithTag(AverageCpm);
      }
      if (averagePosition_ != null) {
        size += _single_averagePosition_codec.CalculateSizeWithTag(AveragePosition);
      }
      if (bounceRate_ != null) {
        size += _single_bounceRate_codec.CalculateSizeWithTag(BounceRate);
      }
      if (clicks_ != null) {
        size += _single_clicks_codec.CalculateSizeWithTag(Clicks);
      }
      if (contentBudgetLostImpressionShare_ != null) {
        size += _single_contentBudgetLostImpressionShare_codec.CalculateSizeWithTag(ContentBudgetLostImpressionShare);
      }
      if (contentImpressionShare_ != null) {
        size += _single_contentImpressionShare_codec.CalculateSizeWithTag(ContentImpressionShare);
      }
      if (contentRankLostImpressionShare_ != null) {
        size += _single_contentRankLostImpressionShare_codec.CalculateSizeWithTag(ContentRankLostImpressionShare);
      }
      if (conversionRate_ != null) {
        size += _single_conversionRate_codec.CalculateSizeWithTag(ConversionRate);
      }
      if (conversionValue_ != null) {
        size += _single_conversionValue_codec.CalculateSizeWithTag(ConversionValue);
      }
      if (conversionValuePerCost_ != null) {
        size += _single_conversionValuePerCost_codec.CalculateSizeWithTag(ConversionValuePerCost);
      }
      if (conversionValuePerInteraction_ != null) {
        size += _single_conversionValuePerInteraction_codec.CalculateSizeWithTag(ConversionValuePerInteraction);
      }
      if (conversions_ != null) {
        size += _single_conversions_codec.CalculateSizeWithTag(Conversions);
      }
      if (costMicros_ != null) {
        size += _single_costMicros_codec.CalculateSizeWithTag(CostMicros);
      }
      if (costPerAllConversion_ != null) {
        size += _single_costPerAllConversion_codec.CalculateSizeWithTag(CostPerAllConversion);
      }
      if (costPerConversion_ != null) {
        size += _single_costPerConversion_codec.CalculateSizeWithTag(CostPerConversion);
      }
      if (crossDeviceConversions_ != null) {
        size += _single_crossDeviceConversions_codec.CalculateSizeWithTag(CrossDeviceConversions);
      }
      if (ctr_ != null) {
        size += _single_ctr_codec.CalculateSizeWithTag(Ctr);
      }
      if (engagementRate_ != null) {
        size += _single_engagementRate_codec.CalculateSizeWithTag(EngagementRate);
      }
      if (engagements_ != null) {
        size += _single_engagements_codec.CalculateSizeWithTag(Engagements);
      }
      if (impressions_ != null) {
        size += _single_impressions_codec.CalculateSizeWithTag(Impressions);
      }
      if (interactionRate_ != null) {
        size += _single_interactionRate_codec.CalculateSizeWithTag(InteractionRate);
      }
      if (interactions_ != null) {
        size += _single_interactions_codec.CalculateSizeWithTag(Interactions);
      }
      if (invalidClickRate_ != null) {
        size += _single_invalidClickRate_codec.CalculateSizeWithTag(InvalidClickRate);
      }
      if (invalidClicks_ != null) {
        size += _single_invalidClicks_codec.CalculateSizeWithTag(InvalidClicks);
      }
      if (percentNewVisitors_ != null) {
        size += _single_percentNewVisitors_codec.CalculateSizeWithTag(PercentNewVisitors);
      }
      if (phoneCalls_ != null) {
        size += _single_phoneCalls_codec.CalculateSizeWithTag(PhoneCalls);
      }
      if (phoneImpressions_ != null) {
        size += _single_phoneImpressions_codec.CalculateSizeWithTag(PhoneImpressions);
      }
      if (phoneThroughRate_ != null) {
        size += _single_phoneThroughRate_codec.CalculateSizeWithTag(PhoneThroughRate);
      }
      if (relativeCtr_ != null) {
        size += _single_relativeCtr_codec.CalculateSizeWithTag(RelativeCtr);
      }
      if (searchBudgetLostImpressionShare_ != null) {
        size += _single_searchBudgetLostImpressionShare_codec.CalculateSizeWithTag(SearchBudgetLostImpressionShare);
      }
      if (searchExactMatchImpressionShare_ != null) {
        size += _single_searchExactMatchImpressionShare_codec.CalculateSizeWithTag(SearchExactMatchImpressionShare);
      }
      if (searchImpressionShare_ != null) {
        size += _single_searchImpressionShare_codec.CalculateSizeWithTag(SearchImpressionShare);
      }
      if (searchRankLostImpressionShare_ != null) {
        size += _single_searchRankLostImpressionShare_codec.CalculateSizeWithTag(SearchRankLostImpressionShare);
      }
      if (valuePerAllConversions_ != null) {
        size += _single_valuePerAllConversions_codec.CalculateSizeWithTag(ValuePerAllConversions);
      }
      if (valuePerConversion_ != null) {
        size += _single_valuePerConversion_codec.CalculateSizeWithTag(ValuePerConversion);
      }
      if (viewThroughConversions_ != null) {
        size += _single_viewThroughConversions_codec.CalculateSizeWithTag(ViewThroughConversions);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Metrics other) {
      if (other == null) {
        return;
      }
      if (other.allConversionRate_ != null) {
        if (allConversionRate_ == null || other.AllConversionRate != 0D) {
          AllConversionRate = other.AllConversionRate;
        }
      }
      if (other.allConversionValue_ != null) {
        if (allConversionValue_ == null || other.AllConversionValue != 0D) {
          AllConversionValue = other.AllConversionValue;
        }
      }
      if (other.allConversions_ != null) {
        if (allConversions_ == null || other.AllConversions != 0D) {
          AllConversions = other.AllConversions;
        }
      }
      if (other.allConversionsValuePerCost_ != null) {
        if (allConversionsValuePerCost_ == null || other.AllConversionsValuePerCost != 0D) {
          AllConversionsValuePerCost = other.AllConversionsValuePerCost;
        }
      }
      if (other.allConversionsValuePerInteraction_ != null) {
        if (allConversionsValuePerInteraction_ == null || other.AllConversionsValuePerInteraction != 0D) {
          AllConversionsValuePerInteraction = other.AllConversionsValuePerInteraction;
        }
      }
      if (other.averageCost_ != null) {
        if (averageCost_ == null || other.AverageCost != 0D) {
          AverageCost = other.AverageCost;
        }
      }
      if (other.averageCpc_ != null) {
        if (averageCpc_ == null || other.AverageCpc != 0D) {
          AverageCpc = other.AverageCpc;
        }
      }
      if (other.averageCpm_ != null) {
        if (averageCpm_ == null || other.AverageCpm != 0D) {
          AverageCpm = other.AverageCpm;
        }
      }
      if (other.averagePosition_ != null) {
        if (averagePosition_ == null || other.AveragePosition != 0D) {
          AveragePosition = other.AveragePosition;
        }
      }
      if (other.bounceRate_ != null) {
        if (bounceRate_ == null || other.BounceRate != 0D) {
          BounceRate = other.BounceRate;
        }
      }
      if (other.clicks_ != null) {
        if (clicks_ == null || other.Clicks != 0L) {
          Clicks = other.Clicks;
        }
      }
      if (other.contentBudgetLostImpressionShare_ != null) {
        if (contentBudgetLostImpressionShare_ == null || other.ContentBudgetLostImpressionShare != 0D) {
          ContentBudgetLostImpressionShare = other.ContentBudgetLostImpressionShare;
        }
      }
      if (other.contentImpressionShare_ != null) {
        if (contentImpressionShare_ == null || other.ContentImpressionShare != 0D) {
          ContentImpressionShare = other.ContentImpressionShare;
        }
      }
      if (other.contentRankLostImpressionShare_ != null) {
        if (contentRankLostImpressionShare_ == null || other.ContentRankLostImpressionShare != 0D) {
          ContentRankLostImpressionShare = other.ContentRankLostImpressionShare;
        }
      }
      if (other.conversionRate_ != null) {
        if (conversionRate_ == null || other.ConversionRate != 0D) {
          ConversionRate = other.ConversionRate;
        }
      }
      if (other.conversionValue_ != null) {
        if (conversionValue_ == null || other.ConversionValue != 0D) {
          ConversionValue = other.ConversionValue;
        }
      }
      if (other.conversionValuePerCost_ != null) {
        if (conversionValuePerCost_ == null || other.ConversionValuePerCost != 0D) {
          ConversionValuePerCost = other.ConversionValuePerCost;
        }
      }
      if (other.conversionValuePerInteraction_ != null) {
        if (conversionValuePerInteraction_ == null || other.ConversionValuePerInteraction != 0D) {
          ConversionValuePerInteraction = other.ConversionValuePerInteraction;
        }
      }
      if (other.conversions_ != null) {
        if (conversions_ == null || other.Conversions != 0D) {
          Conversions = other.Conversions;
        }
      }
      if (other.costMicros_ != null) {
        if (costMicros_ == null || other.CostMicros != 0L) {
          CostMicros = other.CostMicros;
        }
      }
      if (other.costPerAllConversion_ != null) {
        if (costPerAllConversion_ == null || other.CostPerAllConversion != 0D) {
          CostPerAllConversion = other.CostPerAllConversion;
        }
      }
      if (other.costPerConversion_ != null) {
        if (costPerConversion_ == null || other.CostPerConversion != 0D) {
          CostPerConversion = other.CostPerConversion;
        }
      }
      if (other.crossDeviceConversions_ != null) {
        if (crossDeviceConversions_ == null || other.CrossDeviceConversions != 0D) {
          CrossDeviceConversions = other.CrossDeviceConversions;
        }
      }
      if (other.ctr_ != null) {
        if (ctr_ == null || other.Ctr != 0D) {
          Ctr = other.Ctr;
        }
      }
      if (other.engagementRate_ != null) {
        if (engagementRate_ == null || other.EngagementRate != 0D) {
          EngagementRate = other.EngagementRate;
        }
      }
      if (other.engagements_ != null) {
        if (engagements_ == null || other.Engagements != 0L) {
          Engagements = other.Engagements;
        }
      }
      if (other.impressions_ != null) {
        if (impressions_ == null || other.Impressions != 0L) {
          Impressions = other.Impressions;
        }
      }
      if (other.interactionRate_ != null) {
        if (interactionRate_ == null || other.InteractionRate != 0D) {
          InteractionRate = other.InteractionRate;
        }
      }
      if (other.interactions_ != null) {
        if (interactions_ == null || other.Interactions != 0L) {
          Interactions = other.Interactions;
        }
      }
      if (other.invalidClickRate_ != null) {
        if (invalidClickRate_ == null || other.InvalidClickRate != 0D) {
          InvalidClickRate = other.InvalidClickRate;
        }
      }
      if (other.invalidClicks_ != null) {
        if (invalidClicks_ == null || other.InvalidClicks != 0L) {
          InvalidClicks = other.InvalidClicks;
        }
      }
      if (other.percentNewVisitors_ != null) {
        if (percentNewVisitors_ == null || other.PercentNewVisitors != 0D) {
          PercentNewVisitors = other.PercentNewVisitors;
        }
      }
      if (other.phoneCalls_ != null) {
        if (phoneCalls_ == null || other.PhoneCalls != 0L) {
          PhoneCalls = other.PhoneCalls;
        }
      }
      if (other.phoneImpressions_ != null) {
        if (phoneImpressions_ == null || other.PhoneImpressions != 0L) {
          PhoneImpressions = other.PhoneImpressions;
        }
      }
      if (other.phoneThroughRate_ != null) {
        if (phoneThroughRate_ == null || other.PhoneThroughRate != 0D) {
          PhoneThroughRate = other.PhoneThroughRate;
        }
      }
      if (other.relativeCtr_ != null) {
        if (relativeCtr_ == null || other.RelativeCtr != 0D) {
          RelativeCtr = other.RelativeCtr;
        }
      }
      if (other.searchBudgetLostImpressionShare_ != null) {
        if (searchBudgetLostImpressionShare_ == null || other.SearchBudgetLostImpressionShare != 0D) {
          SearchBudgetLostImpressionShare = other.SearchBudgetLostImpressionShare;
        }
      }
      if (other.searchExactMatchImpressionShare_ != null) {
        if (searchExactMatchImpressionShare_ == null || other.SearchExactMatchImpressionShare != 0D) {
          SearchExactMatchImpressionShare = other.SearchExactMatchImpressionShare;
        }
      }
      if (other.searchImpressionShare_ != null) {
        if (searchImpressionShare_ == null || other.SearchImpressionShare != 0D) {
          SearchImpressionShare = other.SearchImpressionShare;
        }
      }
      if (other.searchRankLostImpressionShare_ != null) {
        if (searchRankLostImpressionShare_ == null || other.SearchRankLostImpressionShare != 0D) {
          SearchRankLostImpressionShare = other.SearchRankLostImpressionShare;
        }
      }
      if (other.valuePerAllConversions_ != null) {
        if (valuePerAllConversions_ == null || other.ValuePerAllConversions != 0D) {
          ValuePerAllConversions = other.ValuePerAllConversions;
        }
      }
      if (other.valuePerConversion_ != null) {
        if (valuePerConversion_ == null || other.ValuePerConversion != 0D) {
          ValuePerConversion = other.ValuePerConversion;
        }
      }
      if (other.viewThroughConversions_ != null) {
        if (viewThroughConversions_ == null || other.ViewThroughConversions != 0L) {
          ViewThroughConversions = other.ViewThroughConversions;
        }
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 42: {
            double? value = _single_allConversionRate_codec.Read(input);
            if (allConversionRate_ == null || value != 0D) {
              AllConversionRate = value;
            }
            break;
          }
          case 50: {
            double? value = _single_allConversionValue_codec.Read(input);
            if (allConversionValue_ == null || value != 0D) {
              AllConversionValue = value;
            }
            break;
          }
          case 58: {
            double? value = _single_allConversions_codec.Read(input);
            if (allConversions_ == null || value != 0D) {
              AllConversions = value;
            }
            break;
          }
          case 66: {
            double? value = _single_averageCost_codec.Read(input);
            if (averageCost_ == null || value != 0D) {
              AverageCost = value;
            }
            break;
          }
          case 74: {
            double? value = _single_averageCpc_codec.Read(input);
            if (averageCpc_ == null || value != 0D) {
              AverageCpc = value;
            }
            break;
          }
          case 82: {
            double? value = _single_averageCpm_codec.Read(input);
            if (averageCpm_ == null || value != 0D) {
              AverageCpm = value;
            }
            break;
          }
          case 106: {
            double? value = _single_averagePosition_codec.Read(input);
            if (averagePosition_ == null || value != 0D) {
              AveragePosition = value;
            }
            break;
          }
          case 122: {
            double? value = _single_bounceRate_codec.Read(input);
            if (bounceRate_ == null || value != 0D) {
              BounceRate = value;
            }
            break;
          }
          case 154: {
            long? value = _single_clicks_codec.Read(input);
            if (clicks_ == null || value != 0L) {
              Clicks = value;
            }
            break;
          }
          case 162: {
            double? value = _single_contentBudgetLostImpressionShare_codec.Read(input);
            if (contentBudgetLostImpressionShare_ == null || value != 0D) {
              ContentBudgetLostImpressionShare = value;
            }
            break;
          }
          case 170: {
            double? value = _single_contentImpressionShare_codec.Read(input);
            if (contentImpressionShare_ == null || value != 0D) {
              ContentImpressionShare = value;
            }
            break;
          }
          case 178: {
            double? value = _single_contentRankLostImpressionShare_codec.Read(input);
            if (contentRankLostImpressionShare_ == null || value != 0D) {
              ContentRankLostImpressionShare = value;
            }
            break;
          }
          case 186: {
            double? value = _single_conversionRate_codec.Read(input);
            if (conversionRate_ == null || value != 0D) {
              ConversionRate = value;
            }
            break;
          }
          case 194: {
            double? value = _single_conversionValue_codec.Read(input);
            if (conversionValue_ == null || value != 0D) {
              ConversionValue = value;
            }
            break;
          }
          case 202: {
            double? value = _single_conversions_codec.Read(input);
            if (conversions_ == null || value != 0D) {
              Conversions = value;
            }
            break;
          }
          case 210: {
            long? value = _single_costMicros_codec.Read(input);
            if (costMicros_ == null || value != 0L) {
              CostMicros = value;
            }
            break;
          }
          case 218: {
            double? value = _single_costPerAllConversion_codec.Read(input);
            if (costPerAllConversion_ == null || value != 0D) {
              CostPerAllConversion = value;
            }
            break;
          }
          case 226: {
            double? value = _single_costPerConversion_codec.Read(input);
            if (costPerConversion_ == null || value != 0D) {
              CostPerConversion = value;
            }
            break;
          }
          case 234: {
            double? value = _single_crossDeviceConversions_codec.Read(input);
            if (crossDeviceConversions_ == null || value != 0D) {
              CrossDeviceConversions = value;
            }
            break;
          }
          case 242: {
            double? value = _single_ctr_codec.Read(input);
            if (ctr_ == null || value != 0D) {
              Ctr = value;
            }
            break;
          }
          case 250: {
            double? value = _single_engagementRate_codec.Read(input);
            if (engagementRate_ == null || value != 0D) {
              EngagementRate = value;
            }
            break;
          }
          case 258: {
            long? value = _single_engagements_codec.Read(input);
            if (engagements_ == null || value != 0L) {
              Engagements = value;
            }
            break;
          }
          case 298: {
            long? value = _single_impressions_codec.Read(input);
            if (impressions_ == null || value != 0L) {
              Impressions = value;
            }
            break;
          }
          case 306: {
            double? value = _single_interactionRate_codec.Read(input);
            if (interactionRate_ == null || value != 0D) {
              InteractionRate = value;
            }
            break;
          }
          case 314: {
            long? value = _single_interactions_codec.Read(input);
            if (interactions_ == null || value != 0L) {
              Interactions = value;
            }
            break;
          }
          case 322: {
            double? value = _single_invalidClickRate_codec.Read(input);
            if (invalidClickRate_ == null || value != 0D) {
              InvalidClickRate = value;
            }
            break;
          }
          case 330: {
            long? value = _single_invalidClicks_codec.Read(input);
            if (invalidClicks_ == null || value != 0L) {
              InvalidClicks = value;
            }
            break;
          }
          case 338: {
            double? value = _single_percentNewVisitors_codec.Read(input);
            if (percentNewVisitors_ == null || value != 0D) {
              PercentNewVisitors = value;
            }
            break;
          }
          case 346: {
            long? value = _single_phoneCalls_codec.Read(input);
            if (phoneCalls_ == null || value != 0L) {
              PhoneCalls = value;
            }
            break;
          }
          case 354: {
            long? value = _single_phoneImpressions_codec.Read(input);
            if (phoneImpressions_ == null || value != 0L) {
              PhoneImpressions = value;
            }
            break;
          }
          case 362: {
            double? value = _single_phoneThroughRate_codec.Read(input);
            if (phoneThroughRate_ == null || value != 0D) {
              PhoneThroughRate = value;
            }
            break;
          }
          case 370: {
            double? value = _single_relativeCtr_codec.Read(input);
            if (relativeCtr_ == null || value != 0D) {
              RelativeCtr = value;
            }
            break;
          }
          case 378: {
            double? value = _single_searchBudgetLostImpressionShare_codec.Read(input);
            if (searchBudgetLostImpressionShare_ == null || value != 0D) {
              SearchBudgetLostImpressionShare = value;
            }
            break;
          }
          case 394: {
            double? value = _single_searchExactMatchImpressionShare_codec.Read(input);
            if (searchExactMatchImpressionShare_ == null || value != 0D) {
              SearchExactMatchImpressionShare = value;
            }
            break;
          }
          case 402: {
            double? value = _single_searchImpressionShare_codec.Read(input);
            if (searchImpressionShare_ == null || value != 0D) {
              SearchImpressionShare = value;
            }
            break;
          }
          case 410: {
            double? value = _single_searchRankLostImpressionShare_codec.Read(input);
            if (searchRankLostImpressionShare_ == null || value != 0D) {
              SearchRankLostImpressionShare = value;
            }
            break;
          }
          case 418: {
            double? value = _single_valuePerAllConversions_codec.Read(input);
            if (valuePerAllConversions_ == null || value != 0D) {
              ValuePerAllConversions = value;
            }
            break;
          }
          case 426: {
            double? value = _single_valuePerConversion_codec.Read(input);
            if (valuePerConversion_ == null || value != 0D) {
              ValuePerConversion = value;
            }
            break;
          }
          case 482: {
            long? value = _single_viewThroughConversions_codec.Read(input);
            if (viewThroughConversions_ == null || value != 0L) {
              ViewThroughConversions = value;
            }
            break;
          }
          case 490: {
            double? value = _single_allConversionsValuePerInteraction_codec.Read(input);
            if (allConversionsValuePerInteraction_ == null || value != 0D) {
              AllConversionsValuePerInteraction = value;
            }
            break;
          }
          case 498: {
            double? value = _single_allConversionsValuePerCost_codec.Read(input);
            if (allConversionsValuePerCost_ == null || value != 0D) {
              AllConversionsValuePerCost = value;
            }
            break;
          }
          case 506: {
            double? value = _single_conversionValuePerInteraction_codec.Read(input);
            if (conversionValuePerInteraction_ == null || value != 0D) {
              ConversionValuePerInteraction = value;
            }
            break;
          }
          case 514: {
            double? value = _single_conversionValuePerCost_codec.Read(input);
            if (conversionValuePerCost_ == null || value != 0D) {
              ConversionValuePerCost = value;
            }
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
