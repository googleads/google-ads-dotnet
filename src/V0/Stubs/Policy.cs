// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: google/ads/googleads/v0/common/policy.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Google.Ads.GoogleAds.V0.Common {

  /// <summary>Holder for reflection information generated from google/ads/googleads/v0/common/policy.proto</summary>
  public static partial class PolicyReflection {

    #region Descriptor
    /// <summary>File descriptor for google/ads/googleads/v0/common/policy.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static PolicyReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Citnb29nbGUvYWRzL2dvb2dsZWFkcy92MC9jb21tb24vcG9saWN5LnByb3Rv",
            "Eh5nb29nbGUuYWRzLmdvb2dsZWFkcy52MC5jb21tb24aHmdvb2dsZS9wcm90",
            "b2J1Zi93cmFwcGVycy5wcm90byJ9ChJQb2xpY3lWaW9sYXRpb25LZXkSMQoL",
            "cG9saWN5X25hbWUYASABKAsyHC5nb29nbGUucHJvdG9idWYuU3RyaW5nVmFs",
            "dWUSNAoOdmlvbGF0aW5nX3RleHQYAiABKAsyHC5nb29nbGUucHJvdG9idWYu",
            "U3RyaW5nVmFsdWVCwQEKImNvbS5nb29nbGUuYWRzLmdvb2dsZWFkcy52MC5j",
            "b21tb25CC1BvbGljeVByb3RvUAFaRGdvb2dsZS5nb2xhbmcub3JnL2dlbnBy",
            "b3RvL2dvb2dsZWFwaXMvYWRzL2dvb2dsZWFkcy92MC9jb21tb247Y29tbW9u",
            "ogIDR0FBqgIeR29vZ2xlLkFkcy5Hb29nbGVBZHMuVjAuQ29tbW9uygIeR29v",
            "Z2xlXEFkc1xHb29nbGVBZHNcVjBcQ29tbW9uYgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Google.Protobuf.WellKnownTypes.WrappersReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Ads.GoogleAds.V0.Common.PolicyViolationKey), global::Google.Ads.GoogleAds.V0.Common.PolicyViolationKey.Parser, new[]{ "PolicyName", "ViolatingText" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  /// <summary>
  /// Key of the violation. The key is used for referring to a violation
  /// when filing an exemption request.
  /// </summary>
  public sealed partial class PolicyViolationKey : pb::IMessage<PolicyViolationKey> {
    private static readonly pb::MessageParser<PolicyViolationKey> _parser = new pb::MessageParser<PolicyViolationKey>(() => new PolicyViolationKey());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PolicyViolationKey> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Ads.GoogleAds.V0.Common.PolicyReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PolicyViolationKey() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PolicyViolationKey(PolicyViolationKey other) : this() {
      PolicyName = other.PolicyName;
      ViolatingText = other.ViolatingText;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PolicyViolationKey Clone() {
      return new PolicyViolationKey(this);
    }

    /// <summary>Field number for the "policy_name" field.</summary>
    public const int PolicyNameFieldNumber = 1;
    private static readonly pb::FieldCodec<string> _single_policyName_codec = pb::FieldCodec.ForClassWrapper<string>(10);
    private string policyName_;
    /// <summary>
    /// Unique ID of the violated policy.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PolicyName {
      get { return policyName_; }
      set {
        policyName_ = value;
      }
    }

    /// <summary>Field number for the "violating_text" field.</summary>
    public const int ViolatingTextFieldNumber = 2;
    private static readonly pb::FieldCodec<string> _single_violatingText_codec = pb::FieldCodec.ForClassWrapper<string>(18);
    private string violatingText_;
    /// <summary>
    /// The text that violates the policy if specified.
    /// Otherwise, refers to the policy in general
    /// (e.g., when requesting to be exempt from the whole policy).
    /// If not specified for criterion exemptions, the whole policy is implied.
    /// Must be specified for ad exemptions.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ViolatingText {
      get { return violatingText_; }
      set {
        violatingText_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PolicyViolationKey);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PolicyViolationKey other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (PolicyName != other.PolicyName) return false;
      if (ViolatingText != other.ViolatingText) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (policyName_ != null) hash ^= PolicyName.GetHashCode();
      if (violatingText_ != null) hash ^= ViolatingText.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (policyName_ != null) {
        _single_policyName_codec.WriteTagAndValue(output, PolicyName);
      }
      if (violatingText_ != null) {
        _single_violatingText_codec.WriteTagAndValue(output, ViolatingText);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (policyName_ != null) {
        size += _single_policyName_codec.CalculateSizeWithTag(PolicyName);
      }
      if (violatingText_ != null) {
        size += _single_violatingText_codec.CalculateSizeWithTag(ViolatingText);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PolicyViolationKey other) {
      if (other == null) {
        return;
      }
      if (other.policyName_ != null) {
        if (policyName_ == null || other.PolicyName != "") {
          PolicyName = other.PolicyName;
        }
      }
      if (other.violatingText_ != null) {
        if (violatingText_ == null || other.ViolatingText != "") {
          ViolatingText = other.ViolatingText;
        }
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            string value = _single_policyName_codec.Read(input);
            if (policyName_ == null || value != "") {
              PolicyName = value;
            }
            break;
          }
          case 18: {
            string value = _single_violatingText_codec.Read(input);
            if (violatingText_ == null || value != "") {
              ViolatingText = value;
            }
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
