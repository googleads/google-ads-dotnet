// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: google/ads/googleads/v0/common/segments.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Google.Ads.GoogleAds.V0.Common {

  /// <summary>Holder for reflection information generated from google/ads/googleads/v0/common/segments.proto</summary>
  public static partial class SegmentsReflection {

    #region Descriptor
    /// <summary>File descriptor for google/ads/googleads/v0/common/segments.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static SegmentsReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Ci1nb29nbGUvYWRzL2dvb2dsZWFkcy92MC9jb21tb24vc2VnbWVudHMucHJv",
            "dG8SHmdvb2dsZS5hZHMuZ29vZ2xlYWRzLnYwLmNvbW1vbhozZ29vZ2xlL2Fk",
            "cy9nb29nbGVhZHMvdjAvZW51bXMvYWRfbmV0d29ya190eXBlLnByb3RvGkVn",
            "b29nbGUvYWRzL2dvb2dsZWFkcy92MC9lbnVtcy9jb252ZXJzaW9uX2F0dHJp",
            "YnV0aW9uX2V2ZW50X3R5cGUucHJvdG8aL2dvb2dsZS9hZHMvZ29vZ2xlYWRz",
            "L3YwL2VudW1zL2RheV9vZl93ZWVrLnByb3RvGipnb29nbGUvYWRzL2dvb2ds",
            "ZWFkcy92MC9lbnVtcy9kZXZpY2UucHJvdG8aPWdvb2dsZS9hZHMvZ29vZ2xl",
            "YWRzL3YwL2VudW1zL2hvdGVsX2RhdGVfc2VsZWN0aW9uX3R5cGUucHJvdG8a",
            "MWdvb2dsZS9hZHMvZ29vZ2xlYWRzL3YwL2VudW1zL21vbnRoX29mX3llYXIu",
            "cHJvdG8aNGdvb2dsZS9hZHMvZ29vZ2xlYWRzL3YwL2VudW1zL3BsYWNlaG9s",
            "ZGVyX3R5cGUucHJvdG8aOmdvb2dsZS9hZHMvZ29vZ2xlYWRzL3YwL2VudW1z",
            "L3NlYXJjaF90ZXJtX21hdGNoX3R5cGUucHJvdG8aKGdvb2dsZS9hZHMvZ29v",
            "Z2xlYWRzL3YwL2VudW1zL3Nsb3QucHJvdG8aHmdvb2dsZS9wcm90b2J1Zi93",
            "cmFwcGVycy5wcm90byKkDQoIU2VnbWVudHMSVwoPYWRfbmV0d29ya190eXBl",
            "GAMgASgOMj4uZ29vZ2xlLmFkcy5nb29nbGVhZHMudjAuZW51bXMuQWROZXR3",
            "b3JrVHlwZUVudW0uQWROZXR3b3JrVHlwZRKLAQohY29udmVyc2lvbl9hdHRy",
            "aWJ1dGlvbl9ldmVudF90eXBlGAIgASgOMmAuZ29vZ2xlLmFkcy5nb29nbGVh",
            "ZHMudjAuZW51bXMuQ29udmVyc2lvbkF0dHJpYnV0aW9uRXZlbnRUeXBlRW51",
            "bS5Db252ZXJzaW9uQXR0cmlidXRpb25FdmVudFR5cGUSKgoEZGF0ZRgEIAEo",
            "CzIcLmdvb2dsZS5wcm90b2J1Zi5TdHJpbmdWYWx1ZRJLCgtkYXlfb2Zfd2Vl",
            "axgFIAEoDjI2Lmdvb2dsZS5hZHMuZ29vZ2xlYWRzLnYwLmVudW1zLkRheU9m",
            "V2Vla0VudW0uRGF5T2ZXZWVrEkAKBmRldmljZRgBIAEoDjIwLmdvb2dsZS5h",
            "ZHMuZ29vZ2xlYWRzLnYwLmVudW1zLkRldmljZUVudW0uRGV2aWNlEj4KGWhv",
            "dGVsX2Jvb2tpbmdfd2luZG93X2RheXMYBiABKAsyGy5nb29nbGUucHJvdG9i",
            "dWYuSW50NjRWYWx1ZRI0Cg9ob3RlbF9jZW50ZXJfaWQYByABKAsyGy5nb29n",
            "bGUucHJvdG9idWYuSW50NjRWYWx1ZRI5ChNob3RlbF9jaGVja19pbl9kYXRl",
            "GAggASgLMhwuZ29vZ2xlLnByb3RvYnVmLlN0cmluZ1ZhbHVlEloKGmhvdGVs",
            "X2NoZWNrX2luX2RheV9vZl93ZWVrGAkgASgOMjYuZ29vZ2xlLmFkcy5nb29n",
            "bGVhZHMudjAuZW51bXMuRGF5T2ZXZWVrRW51bS5EYXlPZldlZWsSMAoKaG90",
            "ZWxfY2l0eRgKIAEoCzIcLmdvb2dsZS5wcm90b2J1Zi5TdHJpbmdWYWx1ZRIw",
            "Cgtob3RlbF9jbGFzcxgLIAEoCzIbLmdvb2dsZS5wcm90b2J1Zi5JbnQzMlZh",
            "bHVlEjMKDWhvdGVsX2NvdW50cnkYDCABKAsyHC5nb29nbGUucHJvdG9idWYu",
            "U3RyaW5nVmFsdWUScwoZaG90ZWxfZGF0ZV9zZWxlY3Rpb25fdHlwZRgNIAEo",
            "DjJQLmdvb2dsZS5hZHMuZ29vZ2xlYWRzLnYwLmVudW1zLkhvdGVsRGF0ZVNl",
            "bGVjdGlvblR5cGVFbnVtLkhvdGVsRGF0ZVNlbGVjdGlvblR5cGUSOQoUaG90",
            "ZWxfbGVuZ3RoX29mX3N0YXkYDiABKAsyGy5nb29nbGUucHJvdG9idWYuSW50",
            "MzJWYWx1ZRIxCgtob3RlbF9zdGF0ZRgPIAEoCzIcLmdvb2dsZS5wcm90b2J1",
            "Zi5TdHJpbmdWYWx1ZRIpCgRob3VyGBAgASgLMhsuZ29vZ2xlLnByb3RvYnVm",
            "LkludDMyVmFsdWUSKwoFbW9udGgYESABKAsyHC5nb29nbGUucHJvdG9idWYu",
            "U3RyaW5nVmFsdWUSUQoNbW9udGhfb2ZfeWVhchgSIAEoDjI6Lmdvb2dsZS5h",
            "ZHMuZ29vZ2xlYWRzLnYwLmVudW1zLk1vbnRoT2ZZZWFyRW51bS5Nb250aE9m",
            "WWVhchI2ChBwYXJ0bmVyX2hvdGVsX2lkGBMgASgLMhwuZ29vZ2xlLnByb3Rv",
            "YnVmLlN0cmluZ1ZhbHVlElwKEHBsYWNlaG9sZGVyX3R5cGUYFCABKA4yQi5n",
            "b29nbGUuYWRzLmdvb2dsZWFkcy52MC5lbnVtcy5QbGFjZWhvbGRlclR5cGVF",
            "bnVtLlBsYWNlaG9sZGVyVHlwZRItCgdxdWFydGVyGBUgASgLMhwuZ29vZ2xl",
            "LnByb3RvYnVmLlN0cmluZ1ZhbHVlEmoKFnNlYXJjaF90ZXJtX21hdGNoX3R5",
            "cGUYFiABKA4ySi5nb29nbGUuYWRzLmdvb2dsZWFkcy52MC5lbnVtcy5TZWFy",
            "Y2hUZXJtTWF0Y2hUeXBlRW51bS5TZWFyY2hUZXJtTWF0Y2hUeXBlEjoKBHNs",
            "b3QYFyABKA4yLC5nb29nbGUuYWRzLmdvb2dsZWFkcy52MC5lbnVtcy5TbG90",
            "RW51bS5TbG90EioKBHdlZWsYGCABKAsyHC5nb29nbGUucHJvdG9idWYuU3Ry",
            "aW5nVmFsdWUSKQoEeWVhchgZIAEoCzIbLmdvb2dsZS5wcm90b2J1Zi5JbnQz",
            "MlZhbHVlQugBCiJjb20uZ29vZ2xlLmFkcy5nb29nbGVhZHMudjAuY29tbW9u",
            "Qg1TZWdtZW50c1Byb3RvUAFaRGdvb2dsZS5nb2xhbmcub3JnL2dlbnByb3Rv",
            "L2dvb2dsZWFwaXMvYWRzL2dvb2dsZWFkcy92MC9jb21tb247Y29tbW9uogID",
            "R0FBqgIeR29vZ2xlLkFkcy5Hb29nbGVBZHMuVjAuQ29tbW9uygIeR29vZ2xl",
            "XEFkc1xHb29nbGVBZHNcVjBcQ29tbW9u6gIiR29vZ2xlOjpBZHM6Okdvb2ds",
            "ZUFkczo6VjA6OkNvbW1vbmIGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Google.Ads.GoogleAds.V0.Enums.AdNetworkTypeReflection.Descriptor, global::Google.Ads.GoogleAds.V0.Enums.ConversionAttributionEventTypeReflection.Descriptor, global::Google.Ads.GoogleAds.V0.Enums.DayOfWeekReflection.Descriptor, global::Google.Ads.GoogleAds.V0.Enums.DeviceReflection.Descriptor, global::Google.Ads.GoogleAds.V0.Enums.HotelDateSelectionTypeReflection.Descriptor, global::Google.Ads.GoogleAds.V0.Enums.MonthOfYearReflection.Descriptor, global::Google.Ads.GoogleAds.V0.Enums.PlaceholderTypeReflection.Descriptor, global::Google.Ads.GoogleAds.V0.Enums.SearchTermMatchTypeReflection.Descriptor, global::Google.Ads.GoogleAds.V0.Enums.SlotReflection.Descriptor, global::Google.Protobuf.WellKnownTypes.WrappersReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Ads.GoogleAds.V0.Common.Segments), global::Google.Ads.GoogleAds.V0.Common.Segments.Parser, new[]{ "AdNetworkType", "ConversionAttributionEventType", "Date", "DayOfWeek", "Device", "HotelBookingWindowDays", "HotelCenterId", "HotelCheckInDate", "HotelCheckInDayOfWeek", "HotelCity", "HotelClass", "HotelCountry", "HotelDateSelectionType", "HotelLengthOfStay", "HotelState", "Hour", "Month", "MonthOfYear", "PartnerHotelId", "PlaceholderType", "Quarter", "SearchTermMatchType", "Slot", "Week", "Year" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  /// <summary>
  /// Segment only fields.
  /// </summary>
  public sealed partial class Segments : pb::IMessage<Segments> {
    private static readonly pb::MessageParser<Segments> _parser = new pb::MessageParser<Segments>(() => new Segments());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Segments> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Ads.GoogleAds.V0.Common.SegmentsReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Segments() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Segments(Segments other) : this() {
      adNetworkType_ = other.adNetworkType_;
      conversionAttributionEventType_ = other.conversionAttributionEventType_;
      Date = other.Date;
      dayOfWeek_ = other.dayOfWeek_;
      device_ = other.device_;
      HotelBookingWindowDays = other.HotelBookingWindowDays;
      HotelCenterId = other.HotelCenterId;
      HotelCheckInDate = other.HotelCheckInDate;
      hotelCheckInDayOfWeek_ = other.hotelCheckInDayOfWeek_;
      HotelCity = other.HotelCity;
      HotelClass = other.HotelClass;
      HotelCountry = other.HotelCountry;
      hotelDateSelectionType_ = other.hotelDateSelectionType_;
      HotelLengthOfStay = other.HotelLengthOfStay;
      HotelState = other.HotelState;
      Hour = other.Hour;
      Month = other.Month;
      monthOfYear_ = other.monthOfYear_;
      PartnerHotelId = other.PartnerHotelId;
      placeholderType_ = other.placeholderType_;
      Quarter = other.Quarter;
      searchTermMatchType_ = other.searchTermMatchType_;
      slot_ = other.slot_;
      Week = other.Week;
      Year = other.Year;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Segments Clone() {
      return new Segments(this);
    }

    /// <summary>Field number for the "ad_network_type" field.</summary>
    public const int AdNetworkTypeFieldNumber = 3;
    private global::Google.Ads.GoogleAds.V0.Enums.AdNetworkTypeEnum.Types.AdNetworkType adNetworkType_ = 0;
    /// <summary>
    /// Ad network type.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Ads.GoogleAds.V0.Enums.AdNetworkTypeEnum.Types.AdNetworkType AdNetworkType {
      get { return adNetworkType_; }
      set {
        adNetworkType_ = value;
      }
    }

    /// <summary>Field number for the "conversion_attribution_event_type" field.</summary>
    public const int ConversionAttributionEventTypeFieldNumber = 2;
    private global::Google.Ads.GoogleAds.V0.Enums.ConversionAttributionEventTypeEnum.Types.ConversionAttributionEventType conversionAttributionEventType_ = 0;
    /// <summary>
    /// Conversion attribution event type.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Ads.GoogleAds.V0.Enums.ConversionAttributionEventTypeEnum.Types.ConversionAttributionEventType ConversionAttributionEventType {
      get { return conversionAttributionEventType_; }
      set {
        conversionAttributionEventType_ = value;
      }
    }

    /// <summary>Field number for the "date" field.</summary>
    public const int DateFieldNumber = 4;
    private static readonly pb::FieldCodec<string> _single_date_codec = pb::FieldCodec.ForClassWrapper<string>(34);
    private string date_;
    /// <summary>
    /// Date to which metrics apply.
    /// yyyy-MM-dd format, e.g., 2018-04-17.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Date {
      get { return date_; }
      set {
        date_ = value;
      }
    }

    /// <summary>Field number for the "day_of_week" field.</summary>
    public const int DayOfWeekFieldNumber = 5;
    private global::Google.Ads.GoogleAds.V0.Enums.DayOfWeekEnum.Types.DayOfWeek dayOfWeek_ = 0;
    /// <summary>
    /// Day of the week, e.g., MONDAY.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Ads.GoogleAds.V0.Enums.DayOfWeekEnum.Types.DayOfWeek DayOfWeek {
      get { return dayOfWeek_; }
      set {
        dayOfWeek_ = value;
      }
    }

    /// <summary>Field number for the "device" field.</summary>
    public const int DeviceFieldNumber = 1;
    private global::Google.Ads.GoogleAds.V0.Enums.DeviceEnum.Types.Device device_ = 0;
    /// <summary>
    /// Device to which metrics apply.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Ads.GoogleAds.V0.Enums.DeviceEnum.Types.Device Device {
      get { return device_; }
      set {
        device_ = value;
      }
    }

    /// <summary>Field number for the "hotel_booking_window_days" field.</summary>
    public const int HotelBookingWindowDaysFieldNumber = 6;
    private static readonly pb::FieldCodec<long?> _single_hotelBookingWindowDays_codec = pb::FieldCodec.ForStructWrapper<long>(50);
    private long? hotelBookingWindowDays_;
    /// <summary>
    /// Hotel booking window in days.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long? HotelBookingWindowDays {
      get { return hotelBookingWindowDays_; }
      set {
        hotelBookingWindowDays_ = value;
      }
    }

    /// <summary>Field number for the "hotel_center_id" field.</summary>
    public const int HotelCenterIdFieldNumber = 7;
    private static readonly pb::FieldCodec<long?> _single_hotelCenterId_codec = pb::FieldCodec.ForStructWrapper<long>(58);
    private long? hotelCenterId_;
    /// <summary>
    /// Hotel center ID.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long? HotelCenterId {
      get { return hotelCenterId_; }
      set {
        hotelCenterId_ = value;
      }
    }

    /// <summary>Field number for the "hotel_check_in_date" field.</summary>
    public const int HotelCheckInDateFieldNumber = 8;
    private static readonly pb::FieldCodec<string> _single_hotelCheckInDate_codec = pb::FieldCodec.ForClassWrapper<string>(66);
    private string hotelCheckInDate_;
    /// <summary>
    /// Hotel check-in date. Formatted as yyyy-MM-dd.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string HotelCheckInDate {
      get { return hotelCheckInDate_; }
      set {
        hotelCheckInDate_ = value;
      }
    }

    /// <summary>Field number for the "hotel_check_in_day_of_week" field.</summary>
    public const int HotelCheckInDayOfWeekFieldNumber = 9;
    private global::Google.Ads.GoogleAds.V0.Enums.DayOfWeekEnum.Types.DayOfWeek hotelCheckInDayOfWeek_ = 0;
    /// <summary>
    /// Hotel check-in day of week.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Ads.GoogleAds.V0.Enums.DayOfWeekEnum.Types.DayOfWeek HotelCheckInDayOfWeek {
      get { return hotelCheckInDayOfWeek_; }
      set {
        hotelCheckInDayOfWeek_ = value;
      }
    }

    /// <summary>Field number for the "hotel_city" field.</summary>
    public const int HotelCityFieldNumber = 10;
    private static readonly pb::FieldCodec<string> _single_hotelCity_codec = pb::FieldCodec.ForClassWrapper<string>(82);
    private string hotelCity_;
    /// <summary>
    /// Hotel city.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string HotelCity {
      get { return hotelCity_; }
      set {
        hotelCity_ = value;
      }
    }

    /// <summary>Field number for the "hotel_class" field.</summary>
    public const int HotelClassFieldNumber = 11;
    private static readonly pb::FieldCodec<int?> _single_hotelClass_codec = pb::FieldCodec.ForStructWrapper<int>(90);
    private int? hotelClass_;
    /// <summary>
    /// Hotel class.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int? HotelClass {
      get { return hotelClass_; }
      set {
        hotelClass_ = value;
      }
    }

    /// <summary>Field number for the "hotel_country" field.</summary>
    public const int HotelCountryFieldNumber = 12;
    private static readonly pb::FieldCodec<string> _single_hotelCountry_codec = pb::FieldCodec.ForClassWrapper<string>(98);
    private string hotelCountry_;
    /// <summary>
    /// Hotel country.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string HotelCountry {
      get { return hotelCountry_; }
      set {
        hotelCountry_ = value;
      }
    }

    /// <summary>Field number for the "hotel_date_selection_type" field.</summary>
    public const int HotelDateSelectionTypeFieldNumber = 13;
    private global::Google.Ads.GoogleAds.V0.Enums.HotelDateSelectionTypeEnum.Types.HotelDateSelectionType hotelDateSelectionType_ = 0;
    /// <summary>
    /// Hotel date selection type.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Ads.GoogleAds.V0.Enums.HotelDateSelectionTypeEnum.Types.HotelDateSelectionType HotelDateSelectionType {
      get { return hotelDateSelectionType_; }
      set {
        hotelDateSelectionType_ = value;
      }
    }

    /// <summary>Field number for the "hotel_length_of_stay" field.</summary>
    public const int HotelLengthOfStayFieldNumber = 14;
    private static readonly pb::FieldCodec<int?> _single_hotelLengthOfStay_codec = pb::FieldCodec.ForStructWrapper<int>(114);
    private int? hotelLengthOfStay_;
    /// <summary>
    /// Hotel length of stay.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int? HotelLengthOfStay {
      get { return hotelLengthOfStay_; }
      set {
        hotelLengthOfStay_ = value;
      }
    }

    /// <summary>Field number for the "hotel_state" field.</summary>
    public const int HotelStateFieldNumber = 15;
    private static readonly pb::FieldCodec<string> _single_hotelState_codec = pb::FieldCodec.ForClassWrapper<string>(122);
    private string hotelState_;
    /// <summary>
    /// Hotel state.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string HotelState {
      get { return hotelState_; }
      set {
        hotelState_ = value;
      }
    }

    /// <summary>Field number for the "hour" field.</summary>
    public const int HourFieldNumber = 16;
    private static readonly pb::FieldCodec<int?> _single_hour_codec = pb::FieldCodec.ForStructWrapper<int>(130);
    private int? hour_;
    /// <summary>
    /// Hour of day as a number between 0 and 23, inclusive.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int? Hour {
      get { return hour_; }
      set {
        hour_ = value;
      }
    }

    /// <summary>Field number for the "month" field.</summary>
    public const int MonthFieldNumber = 17;
    private static readonly pb::FieldCodec<string> _single_month_codec = pb::FieldCodec.ForClassWrapper<string>(138);
    private string month_;
    /// <summary>
    /// Month as represented by the date of the first day of a month. Formatted as
    /// yyyy-MM-dd.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Month {
      get { return month_; }
      set {
        month_ = value;
      }
    }

    /// <summary>Field number for the "month_of_year" field.</summary>
    public const int MonthOfYearFieldNumber = 18;
    private global::Google.Ads.GoogleAds.V0.Enums.MonthOfYearEnum.Types.MonthOfYear monthOfYear_ = 0;
    /// <summary>
    /// Month of the year, e.g., January.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Ads.GoogleAds.V0.Enums.MonthOfYearEnum.Types.MonthOfYear MonthOfYear {
      get { return monthOfYear_; }
      set {
        monthOfYear_ = value;
      }
    }

    /// <summary>Field number for the "partner_hotel_id" field.</summary>
    public const int PartnerHotelIdFieldNumber = 19;
    private static readonly pb::FieldCodec<string> _single_partnerHotelId_codec = pb::FieldCodec.ForClassWrapper<string>(154);
    private string partnerHotelId_;
    /// <summary>
    /// Partner hotel ID.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PartnerHotelId {
      get { return partnerHotelId_; }
      set {
        partnerHotelId_ = value;
      }
    }

    /// <summary>Field number for the "placeholder_type" field.</summary>
    public const int PlaceholderTypeFieldNumber = 20;
    private global::Google.Ads.GoogleAds.V0.Enums.PlaceholderTypeEnum.Types.PlaceholderType placeholderType_ = 0;
    /// <summary>
    /// Placeholder type. This is only used with feed item metrics.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Ads.GoogleAds.V0.Enums.PlaceholderTypeEnum.Types.PlaceholderType PlaceholderType {
      get { return placeholderType_; }
      set {
        placeholderType_ = value;
      }
    }

    /// <summary>Field number for the "quarter" field.</summary>
    public const int QuarterFieldNumber = 21;
    private static readonly pb::FieldCodec<string> _single_quarter_codec = pb::FieldCodec.ForClassWrapper<string>(170);
    private string quarter_;
    /// <summary>
    /// Quarter as represented by the date of the first day of a quarter.
    /// Uses the calendar year for quarters, e.g., the second quarter of 2018
    /// starts on 2018-04-01. Formatted as yyyy-MM-dd.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Quarter {
      get { return quarter_; }
      set {
        quarter_ = value;
      }
    }

    /// <summary>Field number for the "search_term_match_type" field.</summary>
    public const int SearchTermMatchTypeFieldNumber = 22;
    private global::Google.Ads.GoogleAds.V0.Enums.SearchTermMatchTypeEnum.Types.SearchTermMatchType searchTermMatchType_ = 0;
    /// <summary>
    /// Match type of the keyword that triggered the ad, including variants.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Ads.GoogleAds.V0.Enums.SearchTermMatchTypeEnum.Types.SearchTermMatchType SearchTermMatchType {
      get { return searchTermMatchType_; }
      set {
        searchTermMatchType_ = value;
      }
    }

    /// <summary>Field number for the "slot" field.</summary>
    public const int SlotFieldNumber = 23;
    private global::Google.Ads.GoogleAds.V0.Enums.SlotEnum.Types.Slot slot_ = 0;
    /// <summary>
    /// Position of the ad.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Ads.GoogleAds.V0.Enums.SlotEnum.Types.Slot Slot {
      get { return slot_; }
      set {
        slot_ = value;
      }
    }

    /// <summary>Field number for the "week" field.</summary>
    public const int WeekFieldNumber = 24;
    private static readonly pb::FieldCodec<string> _single_week_codec = pb::FieldCodec.ForClassWrapper<string>(194);
    private string week_;
    /// <summary>
    /// Week as defined as Monday through Sunday, and represented by the date of
    /// Monday. Formatted as yyyy-MM-dd.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Week {
      get { return week_; }
      set {
        week_ = value;
      }
    }

    /// <summary>Field number for the "year" field.</summary>
    public const int YearFieldNumber = 25;
    private static readonly pb::FieldCodec<int?> _single_year_codec = pb::FieldCodec.ForStructWrapper<int>(202);
    private int? year_;
    /// <summary>
    /// Year, formatted as yyyy.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int? Year {
      get { return year_; }
      set {
        year_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Segments);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Segments other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (AdNetworkType != other.AdNetworkType) return false;
      if (ConversionAttributionEventType != other.ConversionAttributionEventType) return false;
      if (Date != other.Date) return false;
      if (DayOfWeek != other.DayOfWeek) return false;
      if (Device != other.Device) return false;
      if (HotelBookingWindowDays != other.HotelBookingWindowDays) return false;
      if (HotelCenterId != other.HotelCenterId) return false;
      if (HotelCheckInDate != other.HotelCheckInDate) return false;
      if (HotelCheckInDayOfWeek != other.HotelCheckInDayOfWeek) return false;
      if (HotelCity != other.HotelCity) return false;
      if (HotelClass != other.HotelClass) return false;
      if (HotelCountry != other.HotelCountry) return false;
      if (HotelDateSelectionType != other.HotelDateSelectionType) return false;
      if (HotelLengthOfStay != other.HotelLengthOfStay) return false;
      if (HotelState != other.HotelState) return false;
      if (Hour != other.Hour) return false;
      if (Month != other.Month) return false;
      if (MonthOfYear != other.MonthOfYear) return false;
      if (PartnerHotelId != other.PartnerHotelId) return false;
      if (PlaceholderType != other.PlaceholderType) return false;
      if (Quarter != other.Quarter) return false;
      if (SearchTermMatchType != other.SearchTermMatchType) return false;
      if (Slot != other.Slot) return false;
      if (Week != other.Week) return false;
      if (Year != other.Year) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (AdNetworkType != 0) hash ^= AdNetworkType.GetHashCode();
      if (ConversionAttributionEventType != 0) hash ^= ConversionAttributionEventType.GetHashCode();
      if (date_ != null) hash ^= Date.GetHashCode();
      if (DayOfWeek != 0) hash ^= DayOfWeek.GetHashCode();
      if (Device != 0) hash ^= Device.GetHashCode();
      if (hotelBookingWindowDays_ != null) hash ^= HotelBookingWindowDays.GetHashCode();
      if (hotelCenterId_ != null) hash ^= HotelCenterId.GetHashCode();
      if (hotelCheckInDate_ != null) hash ^= HotelCheckInDate.GetHashCode();
      if (HotelCheckInDayOfWeek != 0) hash ^= HotelCheckInDayOfWeek.GetHashCode();
      if (hotelCity_ != null) hash ^= HotelCity.GetHashCode();
      if (hotelClass_ != null) hash ^= HotelClass.GetHashCode();
      if (hotelCountry_ != null) hash ^= HotelCountry.GetHashCode();
      if (HotelDateSelectionType != 0) hash ^= HotelDateSelectionType.GetHashCode();
      if (hotelLengthOfStay_ != null) hash ^= HotelLengthOfStay.GetHashCode();
      if (hotelState_ != null) hash ^= HotelState.GetHashCode();
      if (hour_ != null) hash ^= Hour.GetHashCode();
      if (month_ != null) hash ^= Month.GetHashCode();
      if (MonthOfYear != 0) hash ^= MonthOfYear.GetHashCode();
      if (partnerHotelId_ != null) hash ^= PartnerHotelId.GetHashCode();
      if (PlaceholderType != 0) hash ^= PlaceholderType.GetHashCode();
      if (quarter_ != null) hash ^= Quarter.GetHashCode();
      if (SearchTermMatchType != 0) hash ^= SearchTermMatchType.GetHashCode();
      if (Slot != 0) hash ^= Slot.GetHashCode();
      if (week_ != null) hash ^= Week.GetHashCode();
      if (year_ != null) hash ^= Year.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Device != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Device);
      }
      if (ConversionAttributionEventType != 0) {
        output.WriteRawTag(16);
        output.WriteEnum((int) ConversionAttributionEventType);
      }
      if (AdNetworkType != 0) {
        output.WriteRawTag(24);
        output.WriteEnum((int) AdNetworkType);
      }
      if (date_ != null) {
        _single_date_codec.WriteTagAndValue(output, Date);
      }
      if (DayOfWeek != 0) {
        output.WriteRawTag(40);
        output.WriteEnum((int) DayOfWeek);
      }
      if (hotelBookingWindowDays_ != null) {
        _single_hotelBookingWindowDays_codec.WriteTagAndValue(output, HotelBookingWindowDays);
      }
      if (hotelCenterId_ != null) {
        _single_hotelCenterId_codec.WriteTagAndValue(output, HotelCenterId);
      }
      if (hotelCheckInDate_ != null) {
        _single_hotelCheckInDate_codec.WriteTagAndValue(output, HotelCheckInDate);
      }
      if (HotelCheckInDayOfWeek != 0) {
        output.WriteRawTag(72);
        output.WriteEnum((int) HotelCheckInDayOfWeek);
      }
      if (hotelCity_ != null) {
        _single_hotelCity_codec.WriteTagAndValue(output, HotelCity);
      }
      if (hotelClass_ != null) {
        _single_hotelClass_codec.WriteTagAndValue(output, HotelClass);
      }
      if (hotelCountry_ != null) {
        _single_hotelCountry_codec.WriteTagAndValue(output, HotelCountry);
      }
      if (HotelDateSelectionType != 0) {
        output.WriteRawTag(104);
        output.WriteEnum((int) HotelDateSelectionType);
      }
      if (hotelLengthOfStay_ != null) {
        _single_hotelLengthOfStay_codec.WriteTagAndValue(output, HotelLengthOfStay);
      }
      if (hotelState_ != null) {
        _single_hotelState_codec.WriteTagAndValue(output, HotelState);
      }
      if (hour_ != null) {
        _single_hour_codec.WriteTagAndValue(output, Hour);
      }
      if (month_ != null) {
        _single_month_codec.WriteTagAndValue(output, Month);
      }
      if (MonthOfYear != 0) {
        output.WriteRawTag(144, 1);
        output.WriteEnum((int) MonthOfYear);
      }
      if (partnerHotelId_ != null) {
        _single_partnerHotelId_codec.WriteTagAndValue(output, PartnerHotelId);
      }
      if (PlaceholderType != 0) {
        output.WriteRawTag(160, 1);
        output.WriteEnum((int) PlaceholderType);
      }
      if (quarter_ != null) {
        _single_quarter_codec.WriteTagAndValue(output, Quarter);
      }
      if (SearchTermMatchType != 0) {
        output.WriteRawTag(176, 1);
        output.WriteEnum((int) SearchTermMatchType);
      }
      if (Slot != 0) {
        output.WriteRawTag(184, 1);
        output.WriteEnum((int) Slot);
      }
      if (week_ != null) {
        _single_week_codec.WriteTagAndValue(output, Week);
      }
      if (year_ != null) {
        _single_year_codec.WriteTagAndValue(output, Year);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (AdNetworkType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) AdNetworkType);
      }
      if (ConversionAttributionEventType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) ConversionAttributionEventType);
      }
      if (date_ != null) {
        size += _single_date_codec.CalculateSizeWithTag(Date);
      }
      if (DayOfWeek != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) DayOfWeek);
      }
      if (Device != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Device);
      }
      if (hotelBookingWindowDays_ != null) {
        size += _single_hotelBookingWindowDays_codec.CalculateSizeWithTag(HotelBookingWindowDays);
      }
      if (hotelCenterId_ != null) {
        size += _single_hotelCenterId_codec.CalculateSizeWithTag(HotelCenterId);
      }
      if (hotelCheckInDate_ != null) {
        size += _single_hotelCheckInDate_codec.CalculateSizeWithTag(HotelCheckInDate);
      }
      if (HotelCheckInDayOfWeek != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) HotelCheckInDayOfWeek);
      }
      if (hotelCity_ != null) {
        size += _single_hotelCity_codec.CalculateSizeWithTag(HotelCity);
      }
      if (hotelClass_ != null) {
        size += _single_hotelClass_codec.CalculateSizeWithTag(HotelClass);
      }
      if (hotelCountry_ != null) {
        size += _single_hotelCountry_codec.CalculateSizeWithTag(HotelCountry);
      }
      if (HotelDateSelectionType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) HotelDateSelectionType);
      }
      if (hotelLengthOfStay_ != null) {
        size += _single_hotelLengthOfStay_codec.CalculateSizeWithTag(HotelLengthOfStay);
      }
      if (hotelState_ != null) {
        size += _single_hotelState_codec.CalculateSizeWithTag(HotelState);
      }
      if (hour_ != null) {
        size += _single_hour_codec.CalculateSizeWithTag(Hour);
      }
      if (month_ != null) {
        size += _single_month_codec.CalculateSizeWithTag(Month);
      }
      if (MonthOfYear != 0) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) MonthOfYear);
      }
      if (partnerHotelId_ != null) {
        size += _single_partnerHotelId_codec.CalculateSizeWithTag(PartnerHotelId);
      }
      if (PlaceholderType != 0) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) PlaceholderType);
      }
      if (quarter_ != null) {
        size += _single_quarter_codec.CalculateSizeWithTag(Quarter);
      }
      if (SearchTermMatchType != 0) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) SearchTermMatchType);
      }
      if (Slot != 0) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) Slot);
      }
      if (week_ != null) {
        size += _single_week_codec.CalculateSizeWithTag(Week);
      }
      if (year_ != null) {
        size += _single_year_codec.CalculateSizeWithTag(Year);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Segments other) {
      if (other == null) {
        return;
      }
      if (other.AdNetworkType != 0) {
        AdNetworkType = other.AdNetworkType;
      }
      if (other.ConversionAttributionEventType != 0) {
        ConversionAttributionEventType = other.ConversionAttributionEventType;
      }
      if (other.date_ != null) {
        if (date_ == null || other.Date != "") {
          Date = other.Date;
        }
      }
      if (other.DayOfWeek != 0) {
        DayOfWeek = other.DayOfWeek;
      }
      if (other.Device != 0) {
        Device = other.Device;
      }
      if (other.hotelBookingWindowDays_ != null) {
        if (hotelBookingWindowDays_ == null || other.HotelBookingWindowDays != 0L) {
          HotelBookingWindowDays = other.HotelBookingWindowDays;
        }
      }
      if (other.hotelCenterId_ != null) {
        if (hotelCenterId_ == null || other.HotelCenterId != 0L) {
          HotelCenterId = other.HotelCenterId;
        }
      }
      if (other.hotelCheckInDate_ != null) {
        if (hotelCheckInDate_ == null || other.HotelCheckInDate != "") {
          HotelCheckInDate = other.HotelCheckInDate;
        }
      }
      if (other.HotelCheckInDayOfWeek != 0) {
        HotelCheckInDayOfWeek = other.HotelCheckInDayOfWeek;
      }
      if (other.hotelCity_ != null) {
        if (hotelCity_ == null || other.HotelCity != "") {
          HotelCity = other.HotelCity;
        }
      }
      if (other.hotelClass_ != null) {
        if (hotelClass_ == null || other.HotelClass != 0) {
          HotelClass = other.HotelClass;
        }
      }
      if (other.hotelCountry_ != null) {
        if (hotelCountry_ == null || other.HotelCountry != "") {
          HotelCountry = other.HotelCountry;
        }
      }
      if (other.HotelDateSelectionType != 0) {
        HotelDateSelectionType = other.HotelDateSelectionType;
      }
      if (other.hotelLengthOfStay_ != null) {
        if (hotelLengthOfStay_ == null || other.HotelLengthOfStay != 0) {
          HotelLengthOfStay = other.HotelLengthOfStay;
        }
      }
      if (other.hotelState_ != null) {
        if (hotelState_ == null || other.HotelState != "") {
          HotelState = other.HotelState;
        }
      }
      if (other.hour_ != null) {
        if (hour_ == null || other.Hour != 0) {
          Hour = other.Hour;
        }
      }
      if (other.month_ != null) {
        if (month_ == null || other.Month != "") {
          Month = other.Month;
        }
      }
      if (other.MonthOfYear != 0) {
        MonthOfYear = other.MonthOfYear;
      }
      if (other.partnerHotelId_ != null) {
        if (partnerHotelId_ == null || other.PartnerHotelId != "") {
          PartnerHotelId = other.PartnerHotelId;
        }
      }
      if (other.PlaceholderType != 0) {
        PlaceholderType = other.PlaceholderType;
      }
      if (other.quarter_ != null) {
        if (quarter_ == null || other.Quarter != "") {
          Quarter = other.Quarter;
        }
      }
      if (other.SearchTermMatchType != 0) {
        SearchTermMatchType = other.SearchTermMatchType;
      }
      if (other.Slot != 0) {
        Slot = other.Slot;
      }
      if (other.week_ != null) {
        if (week_ == null || other.Week != "") {
          Week = other.Week;
        }
      }
      if (other.year_ != null) {
        if (year_ == null || other.Year != 0) {
          Year = other.Year;
        }
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            device_ = (global::Google.Ads.GoogleAds.V0.Enums.DeviceEnum.Types.Device) input.ReadEnum();
            break;
          }
          case 16: {
            conversionAttributionEventType_ = (global::Google.Ads.GoogleAds.V0.Enums.ConversionAttributionEventTypeEnum.Types.ConversionAttributionEventType) input.ReadEnum();
            break;
          }
          case 24: {
            adNetworkType_ = (global::Google.Ads.GoogleAds.V0.Enums.AdNetworkTypeEnum.Types.AdNetworkType) input.ReadEnum();
            break;
          }
          case 34: {
            string value = _single_date_codec.Read(input);
            if (date_ == null || value != "") {
              Date = value;
            }
            break;
          }
          case 40: {
            dayOfWeek_ = (global::Google.Ads.GoogleAds.V0.Enums.DayOfWeekEnum.Types.DayOfWeek) input.ReadEnum();
            break;
          }
          case 50: {
            long? value = _single_hotelBookingWindowDays_codec.Read(input);
            if (hotelBookingWindowDays_ == null || value != 0L) {
              HotelBookingWindowDays = value;
            }
            break;
          }
          case 58: {
            long? value = _single_hotelCenterId_codec.Read(input);
            if (hotelCenterId_ == null || value != 0L) {
              HotelCenterId = value;
            }
            break;
          }
          case 66: {
            string value = _single_hotelCheckInDate_codec.Read(input);
            if (hotelCheckInDate_ == null || value != "") {
              HotelCheckInDate = value;
            }
            break;
          }
          case 72: {
            hotelCheckInDayOfWeek_ = (global::Google.Ads.GoogleAds.V0.Enums.DayOfWeekEnum.Types.DayOfWeek) input.ReadEnum();
            break;
          }
          case 82: {
            string value = _single_hotelCity_codec.Read(input);
            if (hotelCity_ == null || value != "") {
              HotelCity = value;
            }
            break;
          }
          case 90: {
            int? value = _single_hotelClass_codec.Read(input);
            if (hotelClass_ == null || value != 0) {
              HotelClass = value;
            }
            break;
          }
          case 98: {
            string value = _single_hotelCountry_codec.Read(input);
            if (hotelCountry_ == null || value != "") {
              HotelCountry = value;
            }
            break;
          }
          case 104: {
            hotelDateSelectionType_ = (global::Google.Ads.GoogleAds.V0.Enums.HotelDateSelectionTypeEnum.Types.HotelDateSelectionType) input.ReadEnum();
            break;
          }
          case 114: {
            int? value = _single_hotelLengthOfStay_codec.Read(input);
            if (hotelLengthOfStay_ == null || value != 0) {
              HotelLengthOfStay = value;
            }
            break;
          }
          case 122: {
            string value = _single_hotelState_codec.Read(input);
            if (hotelState_ == null || value != "") {
              HotelState = value;
            }
            break;
          }
          case 130: {
            int? value = _single_hour_codec.Read(input);
            if (hour_ == null || value != 0) {
              Hour = value;
            }
            break;
          }
          case 138: {
            string value = _single_month_codec.Read(input);
            if (month_ == null || value != "") {
              Month = value;
            }
            break;
          }
          case 144: {
            monthOfYear_ = (global::Google.Ads.GoogleAds.V0.Enums.MonthOfYearEnum.Types.MonthOfYear) input.ReadEnum();
            break;
          }
          case 154: {
            string value = _single_partnerHotelId_codec.Read(input);
            if (partnerHotelId_ == null || value != "") {
              PartnerHotelId = value;
            }
            break;
          }
          case 160: {
            placeholderType_ = (global::Google.Ads.GoogleAds.V0.Enums.PlaceholderTypeEnum.Types.PlaceholderType) input.ReadEnum();
            break;
          }
          case 170: {
            string value = _single_quarter_codec.Read(input);
            if (quarter_ == null || value != "") {
              Quarter = value;
            }
            break;
          }
          case 176: {
            searchTermMatchType_ = (global::Google.Ads.GoogleAds.V0.Enums.SearchTermMatchTypeEnum.Types.SearchTermMatchType) input.ReadEnum();
            break;
          }
          case 184: {
            slot_ = (global::Google.Ads.GoogleAds.V0.Enums.SlotEnum.Types.Slot) input.ReadEnum();
            break;
          }
          case 194: {
            string value = _single_week_codec.Read(input);
            if (week_ == null || value != "") {
              Week = value;
            }
            break;
          }
          case 202: {
            int? value = _single_year_codec.Read(input);
            if (year_ == null || value != 0) {
              Year = value;
            }
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
