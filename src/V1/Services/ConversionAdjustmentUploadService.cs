// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: google/ads/googleads/v1/services/conversion_adjustment_upload_service.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Google.Ads.GoogleAds.V1.Services {

  /// <summary>Holder for reflection information generated from google/ads/googleads/v1/services/conversion_adjustment_upload_service.proto</summary>
  public static partial class ConversionAdjustmentUploadServiceReflection {

    #region Descriptor
    /// <summary>File descriptor for google/ads/googleads/v1/services/conversion_adjustment_upload_service.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static ConversionAdjustmentUploadServiceReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Cktnb29nbGUvYWRzL2dvb2dsZWFkcy92MS9zZXJ2aWNlcy9jb252ZXJzaW9u",
            "X2FkanVzdG1lbnRfdXBsb2FkX3NlcnZpY2UucHJvdG8SIGdvb2dsZS5hZHMu",
            "Z29vZ2xlYWRzLnYxLnNlcnZpY2VzGj5nb29nbGUvYWRzL2dvb2dsZWFkcy92",
            "MS9lbnVtcy9jb252ZXJzaW9uX2FkanVzdG1lbnRfdHlwZS5wcm90bxocZ29v",
            "Z2xlL2FwaS9hbm5vdGF0aW9ucy5wcm90bxoXZ29vZ2xlL2FwaS9jbGllbnQu",
            "cHJvdG8aH2dvb2dsZS9hcGkvZmllbGRfYmVoYXZpb3IucHJvdG8aHmdvb2ds",
            "ZS9wcm90b2J1Zi93cmFwcGVycy5wcm90bxoXZ29vZ2xlL3JwYy9zdGF0dXMu",
            "cHJvdG8i0AEKIlVwbG9hZENvbnZlcnNpb25BZGp1c3RtZW50c1JlcXVlc3QS",
            "GAoLY3VzdG9tZXJfaWQYASABKAlCA+BBAhJbChZjb252ZXJzaW9uX2FkanVz",
            "dG1lbnRzGAIgAygLMjYuZ29vZ2xlLmFkcy5nb29nbGVhZHMudjEuc2Vydmlj",
            "ZXMuQ29udmVyc2lvbkFkanVzdG1lbnRCA+BBAhIcCg9wYXJ0aWFsX2ZhaWx1",
            "cmUYAyABKAhCA+BBAhIVCg12YWxpZGF0ZV9vbmx5GAQgASgIIqcBCiNVcGxv",
            "YWRDb252ZXJzaW9uQWRqdXN0bWVudHNSZXNwb25zZRIxChVwYXJ0aWFsX2Zh",
            "aWx1cmVfZXJyb3IYASABKAsyEi5nb29nbGUucnBjLlN0YXR1cxJNCgdyZXN1",
            "bHRzGAIgAygLMjwuZ29vZ2xlLmFkcy5nb29nbGVhZHMudjEuc2VydmljZXMu",
            "Q29udmVyc2lvbkFkanVzdG1lbnRSZXN1bHQi6QMKFENvbnZlcnNpb25BZGp1",
            "c3RtZW50EjcKEWNvbnZlcnNpb25fYWN0aW9uGAMgASgLMhwuZ29vZ2xlLnBy",
            "b3RvYnVmLlN0cmluZ1ZhbHVlEjoKFGFkanVzdG1lbnRfZGF0ZV90aW1lGAQg",
            "ASgLMhwuZ29vZ2xlLnByb3RvYnVmLlN0cmluZ1ZhbHVlEm0KD2FkanVzdG1l",
            "bnRfdHlwZRgFIAEoDjJULmdvb2dsZS5hZHMuZ29vZ2xlYWRzLnYxLmVudW1z",
            "LkNvbnZlcnNpb25BZGp1c3RtZW50VHlwZUVudW0uQ29udmVyc2lvbkFkanVz",
            "dG1lbnRUeXBlEk0KEXJlc3RhdGVtZW50X3ZhbHVlGAYgASgLMjIuZ29vZ2xl",
            "LmFkcy5nb29nbGVhZHMudjEuc2VydmljZXMuUmVzdGF0ZW1lbnRWYWx1ZRJT",
            "ChRnY2xpZF9kYXRlX3RpbWVfcGFpchgBIAEoCzIzLmdvb2dsZS5hZHMuZ29v",
            "Z2xlYWRzLnYxLnNlcnZpY2VzLkdjbGlkRGF0ZVRpbWVQYWlySAASMAoIb3Jk",
            "ZXJfaWQYAiABKAsyHC5nb29nbGUucHJvdG9idWYuU3RyaW5nVmFsdWVIAEIX",
            "ChVjb252ZXJzaW9uX2lkZW50aWZpZXIifQoQUmVzdGF0ZW1lbnRWYWx1ZRI0",
            "Cg5hZGp1c3RlZF92YWx1ZRgBIAEoCzIcLmdvb2dsZS5wcm90b2J1Zi5Eb3Vi",
            "bGVWYWx1ZRIzCg1jdXJyZW5jeV9jb2RlGAIgASgLMhwuZ29vZ2xlLnByb3Rv",
            "YnVmLlN0cmluZ1ZhbHVlInwKEUdjbGlkRGF0ZVRpbWVQYWlyEisKBWdjbGlk",
            "GAEgASgLMhwuZ29vZ2xlLnByb3RvYnVmLlN0cmluZ1ZhbHVlEjoKFGNvbnZl",
            "cnNpb25fZGF0ZV90aW1lGAIgASgLMhwuZ29vZ2xlLnByb3RvYnVmLlN0cmlu",
            "Z1ZhbHVlIqADChpDb252ZXJzaW9uQWRqdXN0bWVudFJlc3VsdBI3ChFjb252",
            "ZXJzaW9uX2FjdGlvbhgDIAEoCzIcLmdvb2dsZS5wcm90b2J1Zi5TdHJpbmdW",
            "YWx1ZRI6ChRhZGp1c3RtZW50X2RhdGVfdGltZRgEIAEoCzIcLmdvb2dsZS5w",
            "cm90b2J1Zi5TdHJpbmdWYWx1ZRJtCg9hZGp1c3RtZW50X3R5cGUYBSABKA4y",
            "VC5nb29nbGUuYWRzLmdvb2dsZWFkcy52MS5lbnVtcy5Db252ZXJzaW9uQWRq",
            "dXN0bWVudFR5cGVFbnVtLkNvbnZlcnNpb25BZGp1c3RtZW50VHlwZRJTChRn",
            "Y2xpZF9kYXRlX3RpbWVfcGFpchgBIAEoCzIzLmdvb2dsZS5hZHMuZ29vZ2xl",
            "YWRzLnYxLnNlcnZpY2VzLkdjbGlkRGF0ZVRpbWVQYWlySAASMAoIb3JkZXJf",
            "aWQYAiABKAsyHC5nb29nbGUucHJvdG9idWYuU3RyaW5nVmFsdWVIAEIXChVj",
            "b252ZXJzaW9uX2lkZW50aWZpZXIy6AIKIUNvbnZlcnNpb25BZGp1c3RtZW50",
            "VXBsb2FkU2VydmljZRKlAgobVXBsb2FkQ29udmVyc2lvbkFkanVzdG1lbnRz",
            "EkQuZ29vZ2xlLmFkcy5nb29nbGVhZHMudjEuc2VydmljZXMuVXBsb2FkQ29u",
            "dmVyc2lvbkFkanVzdG1lbnRzUmVxdWVzdBpFLmdvb2dsZS5hZHMuZ29vZ2xl",
            "YWRzLnYxLnNlcnZpY2VzLlVwbG9hZENvbnZlcnNpb25BZGp1c3RtZW50c1Jl",
            "c3BvbnNlInmC0+STAj4iOS92MS9jdXN0b21lcnMve2N1c3RvbWVyX2lkPSp9",
            "OnVwbG9hZENvbnZlcnNpb25BZGp1c3RtZW50czoBKtpBMmN1c3RvbWVyX2lk",
            "LGNvbnZlcnNpb25fYWRqdXN0bWVudHMscGFydGlhbF9mYWlsdXJlGhvKQRhn",
            "b29nbGVhZHMuZ29vZ2xlYXBpcy5jb21CjQIKJGNvbS5nb29nbGUuYWRzLmdv",
            "b2dsZWFkcy52MS5zZXJ2aWNlc0ImQ29udmVyc2lvbkFkanVzdG1lbnRVcGxv",
            "YWRTZXJ2aWNlUHJvdG9QAVpIZ29vZ2xlLmdvbGFuZy5vcmcvZ2VucHJvdG8v",
            "Z29vZ2xlYXBpcy9hZHMvZ29vZ2xlYWRzL3YxL3NlcnZpY2VzO3NlcnZpY2Vz",
            "ogIDR0FBqgIgR29vZ2xlLkFkcy5Hb29nbGVBZHMuVjEuU2VydmljZXPKAiBH",
            "b29nbGVcQWRzXEdvb2dsZUFkc1xWMVxTZXJ2aWNlc+oCJEdvb2dsZTo6QWRz",
            "OjpHb29nbGVBZHM6OlYxOjpTZXJ2aWNlc2IGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Google.Ads.GoogleAds.V1.Enums.ConversionAdjustmentTypeReflection.Descriptor, global::Google.Api.AnnotationsReflection.Descriptor, global::Google.Api.ClientReflection.Descriptor, global::Google.Api.FieldBehaviorReflection.Descriptor, global::Google.Protobuf.WellKnownTypes.WrappersReflection.Descriptor, global::Google.Rpc.StatusReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Ads.GoogleAds.V1.Services.UploadConversionAdjustmentsRequest), global::Google.Ads.GoogleAds.V1.Services.UploadConversionAdjustmentsRequest.Parser, new[]{ "CustomerId", "ConversionAdjustments", "PartialFailure", "ValidateOnly" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Ads.GoogleAds.V1.Services.UploadConversionAdjustmentsResponse), global::Google.Ads.GoogleAds.V1.Services.UploadConversionAdjustmentsResponse.Parser, new[]{ "PartialFailureError", "Results" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Ads.GoogleAds.V1.Services.ConversionAdjustment), global::Google.Ads.GoogleAds.V1.Services.ConversionAdjustment.Parser, new[]{ "ConversionAction", "AdjustmentDateTime", "AdjustmentType", "RestatementValue", "GclidDateTimePair", "OrderId" }, new[]{ "ConversionIdentifier" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Ads.GoogleAds.V1.Services.RestatementValue), global::Google.Ads.GoogleAds.V1.Services.RestatementValue.Parser, new[]{ "AdjustedValue", "CurrencyCode" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Ads.GoogleAds.V1.Services.GclidDateTimePair), global::Google.Ads.GoogleAds.V1.Services.GclidDateTimePair.Parser, new[]{ "Gclid", "ConversionDateTime" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Ads.GoogleAds.V1.Services.ConversionAdjustmentResult), global::Google.Ads.GoogleAds.V1.Services.ConversionAdjustmentResult.Parser, new[]{ "ConversionAction", "AdjustmentDateTime", "AdjustmentType", "GclidDateTimePair", "OrderId" }, new[]{ "ConversionIdentifier" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  /// <summary>
  /// Request message for
  /// [ConversionAdjustmentUploadService.UploadConversionAdjustments][google.ads.googleads.v1.services.ConversionAdjustmentUploadService.UploadConversionAdjustments].
  /// </summary>
  public sealed partial class UploadConversionAdjustmentsRequest : pb::IMessage<UploadConversionAdjustmentsRequest> {
    private static readonly pb::MessageParser<UploadConversionAdjustmentsRequest> _parser = new pb::MessageParser<UploadConversionAdjustmentsRequest>(() => new UploadConversionAdjustmentsRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<UploadConversionAdjustmentsRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Ads.GoogleAds.V1.Services.ConversionAdjustmentUploadServiceReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UploadConversionAdjustmentsRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UploadConversionAdjustmentsRequest(UploadConversionAdjustmentsRequest other) : this() {
      customerId_ = other.customerId_;
      conversionAdjustments_ = other.conversionAdjustments_.Clone();
      partialFailure_ = other.partialFailure_;
      validateOnly_ = other.validateOnly_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UploadConversionAdjustmentsRequest Clone() {
      return new UploadConversionAdjustmentsRequest(this);
    }

    /// <summary>Field number for the "customer_id" field.</summary>
    public const int CustomerIdFieldNumber = 1;
    private string customerId_ = "";
    /// <summary>
    /// Required. The ID of the customer performing the upload.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string CustomerId {
      get { return customerId_; }
      set {
        customerId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "conversion_adjustments" field.</summary>
    public const int ConversionAdjustmentsFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Google.Ads.GoogleAds.V1.Services.ConversionAdjustment> _repeated_conversionAdjustments_codec
        = pb::FieldCodec.ForMessage(18, global::Google.Ads.GoogleAds.V1.Services.ConversionAdjustment.Parser);
    private readonly pbc::RepeatedField<global::Google.Ads.GoogleAds.V1.Services.ConversionAdjustment> conversionAdjustments_ = new pbc::RepeatedField<global::Google.Ads.GoogleAds.V1.Services.ConversionAdjustment>();
    /// <summary>
    /// Required. The conversion adjustments that are being uploaded.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Google.Ads.GoogleAds.V1.Services.ConversionAdjustment> ConversionAdjustments {
      get { return conversionAdjustments_; }
    }

    /// <summary>Field number for the "partial_failure" field.</summary>
    public const int PartialFailureFieldNumber = 3;
    private bool partialFailure_;
    /// <summary>
    /// Required. If true, successful operations will be carried out and invalid
    /// operations will return errors. If false, all operations will be carried out
    /// in one transaction if and only if they are all valid. This should always be
    /// set to true.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool PartialFailure {
      get { return partialFailure_; }
      set {
        partialFailure_ = value;
      }
    }

    /// <summary>Field number for the "validate_only" field.</summary>
    public const int ValidateOnlyFieldNumber = 4;
    private bool validateOnly_;
    /// <summary>
    /// If true, the request is validated but not executed. Only errors are
    /// returned, not results.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool ValidateOnly {
      get { return validateOnly_; }
      set {
        validateOnly_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as UploadConversionAdjustmentsRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(UploadConversionAdjustmentsRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (CustomerId != other.CustomerId) return false;
      if(!conversionAdjustments_.Equals(other.conversionAdjustments_)) return false;
      if (PartialFailure != other.PartialFailure) return false;
      if (ValidateOnly != other.ValidateOnly) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (CustomerId.Length != 0) hash ^= CustomerId.GetHashCode();
      hash ^= conversionAdjustments_.GetHashCode();
      if (PartialFailure != false) hash ^= PartialFailure.GetHashCode();
      if (ValidateOnly != false) hash ^= ValidateOnly.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (CustomerId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(CustomerId);
      }
      conversionAdjustments_.WriteTo(output, _repeated_conversionAdjustments_codec);
      if (PartialFailure != false) {
        output.WriteRawTag(24);
        output.WriteBool(PartialFailure);
      }
      if (ValidateOnly != false) {
        output.WriteRawTag(32);
        output.WriteBool(ValidateOnly);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (CustomerId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(CustomerId);
      }
      size += conversionAdjustments_.CalculateSize(_repeated_conversionAdjustments_codec);
      if (PartialFailure != false) {
        size += 1 + 1;
      }
      if (ValidateOnly != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(UploadConversionAdjustmentsRequest other) {
      if (other == null) {
        return;
      }
      if (other.CustomerId.Length != 0) {
        CustomerId = other.CustomerId;
      }
      conversionAdjustments_.Add(other.conversionAdjustments_);
      if (other.PartialFailure != false) {
        PartialFailure = other.PartialFailure;
      }
      if (other.ValidateOnly != false) {
        ValidateOnly = other.ValidateOnly;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            CustomerId = input.ReadString();
            break;
          }
          case 18: {
            conversionAdjustments_.AddEntriesFrom(input, _repeated_conversionAdjustments_codec);
            break;
          }
          case 24: {
            PartialFailure = input.ReadBool();
            break;
          }
          case 32: {
            ValidateOnly = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Response message for
  /// [ConversionAdjustmentUploadService.UploadConversionAdjustments][google.ads.googleads.v1.services.ConversionAdjustmentUploadService.UploadConversionAdjustments].
  /// </summary>
  public sealed partial class UploadConversionAdjustmentsResponse : pb::IMessage<UploadConversionAdjustmentsResponse> {
    private static readonly pb::MessageParser<UploadConversionAdjustmentsResponse> _parser = new pb::MessageParser<UploadConversionAdjustmentsResponse>(() => new UploadConversionAdjustmentsResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<UploadConversionAdjustmentsResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Ads.GoogleAds.V1.Services.ConversionAdjustmentUploadServiceReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UploadConversionAdjustmentsResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UploadConversionAdjustmentsResponse(UploadConversionAdjustmentsResponse other) : this() {
      partialFailureError_ = other.partialFailureError_ != null ? other.partialFailureError_.Clone() : null;
      results_ = other.results_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UploadConversionAdjustmentsResponse Clone() {
      return new UploadConversionAdjustmentsResponse(this);
    }

    /// <summary>Field number for the "partial_failure_error" field.</summary>
    public const int PartialFailureErrorFieldNumber = 1;
    private global::Google.Rpc.Status partialFailureError_;
    /// <summary>
    /// Errors that pertain to conversion adjustment failures in the partial
    /// failure mode. Returned when all errors occur inside the adjustments. If any
    /// errors occur outside the adjustments (e.g. auth errors), we return an RPC
    /// level error.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Rpc.Status PartialFailureError {
      get { return partialFailureError_; }
      set {
        partialFailureError_ = value;
      }
    }

    /// <summary>Field number for the "results" field.</summary>
    public const int ResultsFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Google.Ads.GoogleAds.V1.Services.ConversionAdjustmentResult> _repeated_results_codec
        = pb::FieldCodec.ForMessage(18, global::Google.Ads.GoogleAds.V1.Services.ConversionAdjustmentResult.Parser);
    private readonly pbc::RepeatedField<global::Google.Ads.GoogleAds.V1.Services.ConversionAdjustmentResult> results_ = new pbc::RepeatedField<global::Google.Ads.GoogleAds.V1.Services.ConversionAdjustmentResult>();
    /// <summary>
    /// Returned for successfully processed conversion adjustments. Proto will be
    /// empty for rows that received an error. Results are not returned when
    /// validate_only is true.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Google.Ads.GoogleAds.V1.Services.ConversionAdjustmentResult> Results {
      get { return results_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as UploadConversionAdjustmentsResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(UploadConversionAdjustmentsResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(PartialFailureError, other.PartialFailureError)) return false;
      if(!results_.Equals(other.results_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (partialFailureError_ != null) hash ^= PartialFailureError.GetHashCode();
      hash ^= results_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (partialFailureError_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(PartialFailureError);
      }
      results_.WriteTo(output, _repeated_results_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (partialFailureError_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(PartialFailureError);
      }
      size += results_.CalculateSize(_repeated_results_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(UploadConversionAdjustmentsResponse other) {
      if (other == null) {
        return;
      }
      if (other.partialFailureError_ != null) {
        if (partialFailureError_ == null) {
          PartialFailureError = new global::Google.Rpc.Status();
        }
        PartialFailureError.MergeFrom(other.PartialFailureError);
      }
      results_.Add(other.results_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (partialFailureError_ == null) {
              PartialFailureError = new global::Google.Rpc.Status();
            }
            input.ReadMessage(PartialFailureError);
            break;
          }
          case 18: {
            results_.AddEntriesFrom(input, _repeated_results_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// A conversion adjustment.
  /// </summary>
  public sealed partial class ConversionAdjustment : pb::IMessage<ConversionAdjustment> {
    private static readonly pb::MessageParser<ConversionAdjustment> _parser = new pb::MessageParser<ConversionAdjustment>(() => new ConversionAdjustment());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ConversionAdjustment> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Ads.GoogleAds.V1.Services.ConversionAdjustmentUploadServiceReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ConversionAdjustment() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ConversionAdjustment(ConversionAdjustment other) : this() {
      ConversionAction = other.ConversionAction;
      AdjustmentDateTime = other.AdjustmentDateTime;
      adjustmentType_ = other.adjustmentType_;
      restatementValue_ = other.restatementValue_ != null ? other.restatementValue_.Clone() : null;
      switch (other.ConversionIdentifierCase) {
        case ConversionIdentifierOneofCase.GclidDateTimePair:
          GclidDateTimePair = other.GclidDateTimePair.Clone();
          break;
        case ConversionIdentifierOneofCase.OrderId:
          OrderId = other.OrderId;
          break;
      }

      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ConversionAdjustment Clone() {
      return new ConversionAdjustment(this);
    }

    /// <summary>Field number for the "conversion_action" field.</summary>
    public const int ConversionActionFieldNumber = 3;
    private static readonly pb::FieldCodec<string> _single_conversionAction_codec = pb::FieldCodec.ForClassWrapper<string>(26);
    private string conversionAction_;
    /// <summary>
    /// Resource name of the conversion action associated with this conversion
    /// adjustment. Note: Although this resource name consists of a customer id and
    /// a conversion action id, validation will ignore the customer id and use the
    /// conversion action id as the sole identifier of the conversion action.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ConversionAction {
      get { return conversionAction_; }
      set {
        conversionAction_ = value;
      }
    }


    /// <summary>Field number for the "adjustment_date_time" field.</summary>
    public const int AdjustmentDateTimeFieldNumber = 4;
    private static readonly pb::FieldCodec<string> _single_adjustmentDateTime_codec = pb::FieldCodec.ForClassWrapper<string>(34);
    private string adjustmentDateTime_;
    /// <summary>
    /// The date time at which the adjustment occurred. Must be after the
    /// conversion_date_time. The timezone must be specified. The format is
    /// "yyyy-mm-dd hh:mm:ss+|-hh:mm", e.g. "2019-01-01 12:32:45-08:00".
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string AdjustmentDateTime {
      get { return adjustmentDateTime_; }
      set {
        adjustmentDateTime_ = value;
      }
    }


    /// <summary>Field number for the "adjustment_type" field.</summary>
    public const int AdjustmentTypeFieldNumber = 5;
    private global::Google.Ads.GoogleAds.V1.Enums.ConversionAdjustmentTypeEnum.Types.ConversionAdjustmentType adjustmentType_ = global::Google.Ads.GoogleAds.V1.Enums.ConversionAdjustmentTypeEnum.Types.ConversionAdjustmentType.Unspecified;
    /// <summary>
    /// The adjustment type.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Ads.GoogleAds.V1.Enums.ConversionAdjustmentTypeEnum.Types.ConversionAdjustmentType AdjustmentType {
      get { return adjustmentType_; }
      set {
        adjustmentType_ = value;
      }
    }

    /// <summary>Field number for the "restatement_value" field.</summary>
    public const int RestatementValueFieldNumber = 6;
    private global::Google.Ads.GoogleAds.V1.Services.RestatementValue restatementValue_;
    /// <summary>
    /// Information needed to restate the conversion's value.
    /// Required for restatements. Should not be supplied for retractions. An error
    /// will be returned if provided for a retraction.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Ads.GoogleAds.V1.Services.RestatementValue RestatementValue {
      get { return restatementValue_; }
      set {
        restatementValue_ = value;
      }
    }

    /// <summary>Field number for the "gclid_date_time_pair" field.</summary>
    public const int GclidDateTimePairFieldNumber = 1;
    /// <summary>
    /// Uniquely identifies a conversion that was reported without an order ID
    /// specified.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Ads.GoogleAds.V1.Services.GclidDateTimePair GclidDateTimePair {
      get { return conversionIdentifierCase_ == ConversionIdentifierOneofCase.GclidDateTimePair ? (global::Google.Ads.GoogleAds.V1.Services.GclidDateTimePair) conversionIdentifier_ : null; }
      set {
        conversionIdentifier_ = value;
        conversionIdentifierCase_ = value == null ? ConversionIdentifierOneofCase.None : ConversionIdentifierOneofCase.GclidDateTimePair;
      }
    }

    /// <summary>Field number for the "order_id" field.</summary>
    public const int OrderIdFieldNumber = 2;
    private static readonly pb::FieldCodec<string> _oneof_orderId_codec = pb::FieldCodec.ForClassWrapper<string>(18);
    /// <summary>
    /// The order ID of the conversion to be adjusted. If the conversion was
    /// reported with an order ID specified, that order ID must be used as the
    /// identifier here.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string OrderId {
      get { return conversionIdentifierCase_ == ConversionIdentifierOneofCase.OrderId ? (string) conversionIdentifier_ : (string) null; }
      set {
        conversionIdentifier_ = value;
        conversionIdentifierCase_ = value == null ? ConversionIdentifierOneofCase.None : ConversionIdentifierOneofCase.OrderId;
      }
    }

    private object conversionIdentifier_;
    /// <summary>Enum of possible cases for the "conversion_identifier" oneof.</summary>
    public enum ConversionIdentifierOneofCase {
      None = 0,
      GclidDateTimePair = 1,
      OrderId = 2,
    }
    private ConversionIdentifierOneofCase conversionIdentifierCase_ = ConversionIdentifierOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ConversionIdentifierOneofCase ConversionIdentifierCase {
      get { return conversionIdentifierCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearConversionIdentifier() {
      conversionIdentifierCase_ = ConversionIdentifierOneofCase.None;
      conversionIdentifier_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ConversionAdjustment);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ConversionAdjustment other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ConversionAction != other.ConversionAction) return false;
      if (AdjustmentDateTime != other.AdjustmentDateTime) return false;
      if (AdjustmentType != other.AdjustmentType) return false;
      if (!object.Equals(RestatementValue, other.RestatementValue)) return false;
      if (!object.Equals(GclidDateTimePair, other.GclidDateTimePair)) return false;
      if (OrderId != other.OrderId) return false;
      if (ConversionIdentifierCase != other.ConversionIdentifierCase) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (conversionAction_ != null) hash ^= ConversionAction.GetHashCode();
      if (adjustmentDateTime_ != null) hash ^= AdjustmentDateTime.GetHashCode();
      if (AdjustmentType != global::Google.Ads.GoogleAds.V1.Enums.ConversionAdjustmentTypeEnum.Types.ConversionAdjustmentType.Unspecified) hash ^= AdjustmentType.GetHashCode();
      if (restatementValue_ != null) hash ^= RestatementValue.GetHashCode();
      if (conversionIdentifierCase_ == ConversionIdentifierOneofCase.GclidDateTimePair) hash ^= GclidDateTimePair.GetHashCode();
      if (conversionIdentifierCase_ == ConversionIdentifierOneofCase.OrderId) hash ^= OrderId.GetHashCode();
      hash ^= (int) conversionIdentifierCase_;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (conversionIdentifierCase_ == ConversionIdentifierOneofCase.GclidDateTimePair) {
        output.WriteRawTag(10);
        output.WriteMessage(GclidDateTimePair);
      }
      if (conversionIdentifierCase_ == ConversionIdentifierOneofCase.OrderId) {
        _oneof_orderId_codec.WriteTagAndValue(output, (string) conversionIdentifier_);
      }
      if (conversionAction_ != null) {
        _single_conversionAction_codec.WriteTagAndValue(output, ConversionAction);
      }
      if (adjustmentDateTime_ != null) {
        _single_adjustmentDateTime_codec.WriteTagAndValue(output, AdjustmentDateTime);
      }
      if (AdjustmentType != global::Google.Ads.GoogleAds.V1.Enums.ConversionAdjustmentTypeEnum.Types.ConversionAdjustmentType.Unspecified) {
        output.WriteRawTag(40);
        output.WriteEnum((int) AdjustmentType);
      }
      if (restatementValue_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(RestatementValue);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (conversionAction_ != null) {
        size += _single_conversionAction_codec.CalculateSizeWithTag(ConversionAction);
      }
      if (adjustmentDateTime_ != null) {
        size += _single_adjustmentDateTime_codec.CalculateSizeWithTag(AdjustmentDateTime);
      }
      if (AdjustmentType != global::Google.Ads.GoogleAds.V1.Enums.ConversionAdjustmentTypeEnum.Types.ConversionAdjustmentType.Unspecified) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) AdjustmentType);
      }
      if (restatementValue_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(RestatementValue);
      }
      if (conversionIdentifierCase_ == ConversionIdentifierOneofCase.GclidDateTimePair) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(GclidDateTimePair);
      }
      if (conversionIdentifierCase_ == ConversionIdentifierOneofCase.OrderId) {
        size += _oneof_orderId_codec.CalculateSizeWithTag(OrderId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ConversionAdjustment other) {
      if (other == null) {
        return;
      }
      if (other.conversionAction_ != null) {
        if (conversionAction_ == null || other.ConversionAction != "") {
          ConversionAction = other.ConversionAction;
        }
      }
      if (other.adjustmentDateTime_ != null) {
        if (adjustmentDateTime_ == null || other.AdjustmentDateTime != "") {
          AdjustmentDateTime = other.AdjustmentDateTime;
        }
      }
      if (other.AdjustmentType != global::Google.Ads.GoogleAds.V1.Enums.ConversionAdjustmentTypeEnum.Types.ConversionAdjustmentType.Unspecified) {
        AdjustmentType = other.AdjustmentType;
      }
      if (other.restatementValue_ != null) {
        if (restatementValue_ == null) {
          RestatementValue = new global::Google.Ads.GoogleAds.V1.Services.RestatementValue();
        }
        RestatementValue.MergeFrom(other.RestatementValue);
      }
      switch (other.ConversionIdentifierCase) {
        case ConversionIdentifierOneofCase.GclidDateTimePair:
          if (GclidDateTimePair == null) {
            GclidDateTimePair = new global::Google.Ads.GoogleAds.V1.Services.GclidDateTimePair();
          }
          GclidDateTimePair.MergeFrom(other.GclidDateTimePair);
          break;
        case ConversionIdentifierOneofCase.OrderId:
          OrderId = other.OrderId;
          break;
      }

      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            global::Google.Ads.GoogleAds.V1.Services.GclidDateTimePair subBuilder = new global::Google.Ads.GoogleAds.V1.Services.GclidDateTimePair();
            if (conversionIdentifierCase_ == ConversionIdentifierOneofCase.GclidDateTimePair) {
              subBuilder.MergeFrom(GclidDateTimePair);
            }
            input.ReadMessage(subBuilder);
            GclidDateTimePair = subBuilder;
            break;
          }
          case 18: {
            OrderId = _oneof_orderId_codec.Read(input);
            break;
          }
          case 26: {
            string value = _single_conversionAction_codec.Read(input);
            if (conversionAction_ == null || value != "") {
              ConversionAction = value;
            }
            break;
          }
          case 34: {
            string value = _single_adjustmentDateTime_codec.Read(input);
            if (adjustmentDateTime_ == null || value != "") {
              AdjustmentDateTime = value;
            }
            break;
          }
          case 40: {
            AdjustmentType = (global::Google.Ads.GoogleAds.V1.Enums.ConversionAdjustmentTypeEnum.Types.ConversionAdjustmentType) input.ReadEnum();
            break;
          }
          case 50: {
            if (restatementValue_ == null) {
              RestatementValue = new global::Google.Ads.GoogleAds.V1.Services.RestatementValue();
            }
            input.ReadMessage(RestatementValue);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Contains information needed to restate a conversion's value.
  /// </summary>
  public sealed partial class RestatementValue : pb::IMessage<RestatementValue> {
    private static readonly pb::MessageParser<RestatementValue> _parser = new pb::MessageParser<RestatementValue>(() => new RestatementValue());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RestatementValue> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Ads.GoogleAds.V1.Services.ConversionAdjustmentUploadServiceReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RestatementValue() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RestatementValue(RestatementValue other) : this() {
      AdjustedValue = other.AdjustedValue;
      CurrencyCode = other.CurrencyCode;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RestatementValue Clone() {
      return new RestatementValue(this);
    }

    /// <summary>Field number for the "adjusted_value" field.</summary>
    public const int AdjustedValueFieldNumber = 1;
    private static readonly pb::FieldCodec<double?> _single_adjustedValue_codec = pb::FieldCodec.ForStructWrapper<double>(10);
    private double? adjustedValue_;
    /// <summary>
    /// The restated conversion value. This is the value of the conversion after
    /// restatement. For example, to change the value of a conversion from 100 to
    /// 70, an adjusted value of 70 should be reported.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double? AdjustedValue {
      get { return adjustedValue_; }
      set {
        adjustedValue_ = value;
      }
    }


    /// <summary>Field number for the "currency_code" field.</summary>
    public const int CurrencyCodeFieldNumber = 2;
    private static readonly pb::FieldCodec<string> _single_currencyCode_codec = pb::FieldCodec.ForClassWrapper<string>(18);
    private string currencyCode_;
    /// <summary>
    /// The currency of the restated value. If not provided, then the default
    /// currency from the conversion action is used, and if that is not set then
    /// the account currency is used. This is the ISO 4217 3-character currency
    /// code e.g. USD or EUR.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string CurrencyCode {
      get { return currencyCode_; }
      set {
        currencyCode_ = value;
      }
    }


    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RestatementValue);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RestatementValue other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!pbc::ProtobufEqualityComparers.BitwiseNullableDoubleEqualityComparer.Equals(AdjustedValue, other.AdjustedValue)) return false;
      if (CurrencyCode != other.CurrencyCode) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (adjustedValue_ != null) hash ^= pbc::ProtobufEqualityComparers.BitwiseNullableDoubleEqualityComparer.GetHashCode(AdjustedValue);
      if (currencyCode_ != null) hash ^= CurrencyCode.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (adjustedValue_ != null) {
        _single_adjustedValue_codec.WriteTagAndValue(output, AdjustedValue);
      }
      if (currencyCode_ != null) {
        _single_currencyCode_codec.WriteTagAndValue(output, CurrencyCode);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (adjustedValue_ != null) {
        size += _single_adjustedValue_codec.CalculateSizeWithTag(AdjustedValue);
      }
      if (currencyCode_ != null) {
        size += _single_currencyCode_codec.CalculateSizeWithTag(CurrencyCode);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RestatementValue other) {
      if (other == null) {
        return;
      }
      if (other.adjustedValue_ != null) {
        if (adjustedValue_ == null || other.AdjustedValue != 0D) {
          AdjustedValue = other.AdjustedValue;
        }
      }
      if (other.currencyCode_ != null) {
        if (currencyCode_ == null || other.CurrencyCode != "") {
          CurrencyCode = other.CurrencyCode;
        }
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            double? value = _single_adjustedValue_codec.Read(input);
            if (adjustedValue_ == null || value != 0D) {
              AdjustedValue = value;
            }
            break;
          }
          case 18: {
            string value = _single_currencyCode_codec.Read(input);
            if (currencyCode_ == null || value != "") {
              CurrencyCode = value;
            }
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Uniquely identifies a conversion that was reported without an order ID
  /// specified.
  /// </summary>
  public sealed partial class GclidDateTimePair : pb::IMessage<GclidDateTimePair> {
    private static readonly pb::MessageParser<GclidDateTimePair> _parser = new pb::MessageParser<GclidDateTimePair>(() => new GclidDateTimePair());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GclidDateTimePair> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Ads.GoogleAds.V1.Services.ConversionAdjustmentUploadServiceReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GclidDateTimePair() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GclidDateTimePair(GclidDateTimePair other) : this() {
      Gclid = other.Gclid;
      ConversionDateTime = other.ConversionDateTime;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GclidDateTimePair Clone() {
      return new GclidDateTimePair(this);
    }

    /// <summary>Field number for the "gclid" field.</summary>
    public const int GclidFieldNumber = 1;
    private static readonly pb::FieldCodec<string> _single_gclid_codec = pb::FieldCodec.ForClassWrapper<string>(10);
    private string gclid_;
    /// <summary>
    /// Google click ID (gclid) associated with the original conversion for this
    /// adjustment.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Gclid {
      get { return gclid_; }
      set {
        gclid_ = value;
      }
    }


    /// <summary>Field number for the "conversion_date_time" field.</summary>
    public const int ConversionDateTimeFieldNumber = 2;
    private static readonly pb::FieldCodec<string> _single_conversionDateTime_codec = pb::FieldCodec.ForClassWrapper<string>(18);
    private string conversionDateTime_;
    /// <summary>
    /// The date time at which the original conversion for this adjustment
    /// occurred. The timezone must be specified. The format is "yyyy-mm-dd
    /// hh:mm:ss+|-hh:mm", e.g. "2019-01-01 12:32:45-08:00".
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ConversionDateTime {
      get { return conversionDateTime_; }
      set {
        conversionDateTime_ = value;
      }
    }


    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GclidDateTimePair);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GclidDateTimePair other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Gclid != other.Gclid) return false;
      if (ConversionDateTime != other.ConversionDateTime) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (gclid_ != null) hash ^= Gclid.GetHashCode();
      if (conversionDateTime_ != null) hash ^= ConversionDateTime.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (gclid_ != null) {
        _single_gclid_codec.WriteTagAndValue(output, Gclid);
      }
      if (conversionDateTime_ != null) {
        _single_conversionDateTime_codec.WriteTagAndValue(output, ConversionDateTime);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (gclid_ != null) {
        size += _single_gclid_codec.CalculateSizeWithTag(Gclid);
      }
      if (conversionDateTime_ != null) {
        size += _single_conversionDateTime_codec.CalculateSizeWithTag(ConversionDateTime);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GclidDateTimePair other) {
      if (other == null) {
        return;
      }
      if (other.gclid_ != null) {
        if (gclid_ == null || other.Gclid != "") {
          Gclid = other.Gclid;
        }
      }
      if (other.conversionDateTime_ != null) {
        if (conversionDateTime_ == null || other.ConversionDateTime != "") {
          ConversionDateTime = other.ConversionDateTime;
        }
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            string value = _single_gclid_codec.Read(input);
            if (gclid_ == null || value != "") {
              Gclid = value;
            }
            break;
          }
          case 18: {
            string value = _single_conversionDateTime_codec.Read(input);
            if (conversionDateTime_ == null || value != "") {
              ConversionDateTime = value;
            }
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Information identifying a successfully processed ConversionAdjustment.
  /// </summary>
  public sealed partial class ConversionAdjustmentResult : pb::IMessage<ConversionAdjustmentResult> {
    private static readonly pb::MessageParser<ConversionAdjustmentResult> _parser = new pb::MessageParser<ConversionAdjustmentResult>(() => new ConversionAdjustmentResult());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ConversionAdjustmentResult> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Ads.GoogleAds.V1.Services.ConversionAdjustmentUploadServiceReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ConversionAdjustmentResult() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ConversionAdjustmentResult(ConversionAdjustmentResult other) : this() {
      ConversionAction = other.ConversionAction;
      AdjustmentDateTime = other.AdjustmentDateTime;
      adjustmentType_ = other.adjustmentType_;
      switch (other.ConversionIdentifierCase) {
        case ConversionIdentifierOneofCase.GclidDateTimePair:
          GclidDateTimePair = other.GclidDateTimePair.Clone();
          break;
        case ConversionIdentifierOneofCase.OrderId:
          OrderId = other.OrderId;
          break;
      }

      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ConversionAdjustmentResult Clone() {
      return new ConversionAdjustmentResult(this);
    }

    /// <summary>Field number for the "conversion_action" field.</summary>
    public const int ConversionActionFieldNumber = 3;
    private static readonly pb::FieldCodec<string> _single_conversionAction_codec = pb::FieldCodec.ForClassWrapper<string>(26);
    private string conversionAction_;
    /// <summary>
    /// Resource name of the conversion action associated with this conversion
    /// adjustment.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ConversionAction {
      get { return conversionAction_; }
      set {
        conversionAction_ = value;
      }
    }


    /// <summary>Field number for the "adjustment_date_time" field.</summary>
    public const int AdjustmentDateTimeFieldNumber = 4;
    private static readonly pb::FieldCodec<string> _single_adjustmentDateTime_codec = pb::FieldCodec.ForClassWrapper<string>(34);
    private string adjustmentDateTime_;
    /// <summary>
    /// The date time at which the adjustment occurred. The format is
    /// "yyyy-mm-dd hh:mm:ss+|-hh:mm", e.g. "2019-01-01 12:32:45-08:00".
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string AdjustmentDateTime {
      get { return adjustmentDateTime_; }
      set {
        adjustmentDateTime_ = value;
      }
    }


    /// <summary>Field number for the "adjustment_type" field.</summary>
    public const int AdjustmentTypeFieldNumber = 5;
    private global::Google.Ads.GoogleAds.V1.Enums.ConversionAdjustmentTypeEnum.Types.ConversionAdjustmentType adjustmentType_ = global::Google.Ads.GoogleAds.V1.Enums.ConversionAdjustmentTypeEnum.Types.ConversionAdjustmentType.Unspecified;
    /// <summary>
    /// The adjustment type.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Ads.GoogleAds.V1.Enums.ConversionAdjustmentTypeEnum.Types.ConversionAdjustmentType AdjustmentType {
      get { return adjustmentType_; }
      set {
        adjustmentType_ = value;
      }
    }

    /// <summary>Field number for the "gclid_date_time_pair" field.</summary>
    public const int GclidDateTimePairFieldNumber = 1;
    /// <summary>
    /// Uniquely identifies a conversion that was reported without an order ID
    /// specified.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Ads.GoogleAds.V1.Services.GclidDateTimePair GclidDateTimePair {
      get { return conversionIdentifierCase_ == ConversionIdentifierOneofCase.GclidDateTimePair ? (global::Google.Ads.GoogleAds.V1.Services.GclidDateTimePair) conversionIdentifier_ : null; }
      set {
        conversionIdentifier_ = value;
        conversionIdentifierCase_ = value == null ? ConversionIdentifierOneofCase.None : ConversionIdentifierOneofCase.GclidDateTimePair;
      }
    }

    /// <summary>Field number for the "order_id" field.</summary>
    public const int OrderIdFieldNumber = 2;
    private static readonly pb::FieldCodec<string> _oneof_orderId_codec = pb::FieldCodec.ForClassWrapper<string>(18);
    /// <summary>
    /// The order ID of the conversion that was adjusted.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string OrderId {
      get { return conversionIdentifierCase_ == ConversionIdentifierOneofCase.OrderId ? (string) conversionIdentifier_ : (string) null; }
      set {
        conversionIdentifier_ = value;
        conversionIdentifierCase_ = value == null ? ConversionIdentifierOneofCase.None : ConversionIdentifierOneofCase.OrderId;
      }
    }

    private object conversionIdentifier_;
    /// <summary>Enum of possible cases for the "conversion_identifier" oneof.</summary>
    public enum ConversionIdentifierOneofCase {
      None = 0,
      GclidDateTimePair = 1,
      OrderId = 2,
    }
    private ConversionIdentifierOneofCase conversionIdentifierCase_ = ConversionIdentifierOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ConversionIdentifierOneofCase ConversionIdentifierCase {
      get { return conversionIdentifierCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearConversionIdentifier() {
      conversionIdentifierCase_ = ConversionIdentifierOneofCase.None;
      conversionIdentifier_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ConversionAdjustmentResult);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ConversionAdjustmentResult other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ConversionAction != other.ConversionAction) return false;
      if (AdjustmentDateTime != other.AdjustmentDateTime) return false;
      if (AdjustmentType != other.AdjustmentType) return false;
      if (!object.Equals(GclidDateTimePair, other.GclidDateTimePair)) return false;
      if (OrderId != other.OrderId) return false;
      if (ConversionIdentifierCase != other.ConversionIdentifierCase) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (conversionAction_ != null) hash ^= ConversionAction.GetHashCode();
      if (adjustmentDateTime_ != null) hash ^= AdjustmentDateTime.GetHashCode();
      if (AdjustmentType != global::Google.Ads.GoogleAds.V1.Enums.ConversionAdjustmentTypeEnum.Types.ConversionAdjustmentType.Unspecified) hash ^= AdjustmentType.GetHashCode();
      if (conversionIdentifierCase_ == ConversionIdentifierOneofCase.GclidDateTimePair) hash ^= GclidDateTimePair.GetHashCode();
      if (conversionIdentifierCase_ == ConversionIdentifierOneofCase.OrderId) hash ^= OrderId.GetHashCode();
      hash ^= (int) conversionIdentifierCase_;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (conversionIdentifierCase_ == ConversionIdentifierOneofCase.GclidDateTimePair) {
        output.WriteRawTag(10);
        output.WriteMessage(GclidDateTimePair);
      }
      if (conversionIdentifierCase_ == ConversionIdentifierOneofCase.OrderId) {
        _oneof_orderId_codec.WriteTagAndValue(output, (string) conversionIdentifier_);
      }
      if (conversionAction_ != null) {
        _single_conversionAction_codec.WriteTagAndValue(output, ConversionAction);
      }
      if (adjustmentDateTime_ != null) {
        _single_adjustmentDateTime_codec.WriteTagAndValue(output, AdjustmentDateTime);
      }
      if (AdjustmentType != global::Google.Ads.GoogleAds.V1.Enums.ConversionAdjustmentTypeEnum.Types.ConversionAdjustmentType.Unspecified) {
        output.WriteRawTag(40);
        output.WriteEnum((int) AdjustmentType);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (conversionAction_ != null) {
        size += _single_conversionAction_codec.CalculateSizeWithTag(ConversionAction);
      }
      if (adjustmentDateTime_ != null) {
        size += _single_adjustmentDateTime_codec.CalculateSizeWithTag(AdjustmentDateTime);
      }
      if (AdjustmentType != global::Google.Ads.GoogleAds.V1.Enums.ConversionAdjustmentTypeEnum.Types.ConversionAdjustmentType.Unspecified) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) AdjustmentType);
      }
      if (conversionIdentifierCase_ == ConversionIdentifierOneofCase.GclidDateTimePair) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(GclidDateTimePair);
      }
      if (conversionIdentifierCase_ == ConversionIdentifierOneofCase.OrderId) {
        size += _oneof_orderId_codec.CalculateSizeWithTag(OrderId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ConversionAdjustmentResult other) {
      if (other == null) {
        return;
      }
      if (other.conversionAction_ != null) {
        if (conversionAction_ == null || other.ConversionAction != "") {
          ConversionAction = other.ConversionAction;
        }
      }
      if (other.adjustmentDateTime_ != null) {
        if (adjustmentDateTime_ == null || other.AdjustmentDateTime != "") {
          AdjustmentDateTime = other.AdjustmentDateTime;
        }
      }
      if (other.AdjustmentType != global::Google.Ads.GoogleAds.V1.Enums.ConversionAdjustmentTypeEnum.Types.ConversionAdjustmentType.Unspecified) {
        AdjustmentType = other.AdjustmentType;
      }
      switch (other.ConversionIdentifierCase) {
        case ConversionIdentifierOneofCase.GclidDateTimePair:
          if (GclidDateTimePair == null) {
            GclidDateTimePair = new global::Google.Ads.GoogleAds.V1.Services.GclidDateTimePair();
          }
          GclidDateTimePair.MergeFrom(other.GclidDateTimePair);
          break;
        case ConversionIdentifierOneofCase.OrderId:
          OrderId = other.OrderId;
          break;
      }

      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            global::Google.Ads.GoogleAds.V1.Services.GclidDateTimePair subBuilder = new global::Google.Ads.GoogleAds.V1.Services.GclidDateTimePair();
            if (conversionIdentifierCase_ == ConversionIdentifierOneofCase.GclidDateTimePair) {
              subBuilder.MergeFrom(GclidDateTimePair);
            }
            input.ReadMessage(subBuilder);
            GclidDateTimePair = subBuilder;
            break;
          }
          case 18: {
            OrderId = _oneof_orderId_codec.Read(input);
            break;
          }
          case 26: {
            string value = _single_conversionAction_codec.Read(input);
            if (conversionAction_ == null || value != "") {
              ConversionAction = value;
            }
            break;
          }
          case 34: {
            string value = _single_adjustmentDateTime_codec.Read(input);
            if (adjustmentDateTime_ == null || value != "") {
              AdjustmentDateTime = value;
            }
            break;
          }
          case 40: {
            AdjustmentType = (global::Google.Ads.GoogleAds.V1.Enums.ConversionAdjustmentTypeEnum.Types.ConversionAdjustmentType) input.ReadEnum();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
