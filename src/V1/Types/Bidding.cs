// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: google/ads/googleads/v1/common/bidding.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Google.Ads.GoogleAds.V1.Common {

  /// <summary>Holder for reflection information generated from google/ads/googleads/v1/common/bidding.proto</summary>
  public static partial class BiddingReflection {

    #region Descriptor
    /// <summary>File descriptor for google/ads/googleads/v1/common/bidding.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static BiddingReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Cixnb29nbGUvYWRzL2dvb2dsZWFkcy92MS9jb21tb24vYmlkZGluZy5wcm90",
            "bxIeZ29vZ2xlLmFkcy5nb29nbGVhZHMudjEuY29tbW9uGkNnb29nbGUvYWRz",
            "L2dvb2dsZWFkcy92MS9lbnVtcy9wYWdlX29uZV9wcm9tb3RlZF9zdHJhdGVn",
            "eV9nb2FsLnByb3RvGkRnb29nbGUvYWRzL2dvb2dsZWFkcy92MS9lbnVtcy90",
            "YXJnZXRfaW1wcmVzc2lvbl9zaGFyZV9sb2NhdGlvbi5wcm90bxoeZ29vZ2xl",
            "L3Byb3RvYnVmL3dyYXBwZXJzLnByb3RvGhxnb29nbGUvYXBpL2Fubm90YXRp",
            "b25zLnByb3RvIkkKCkNvbW1pc3Npb24SOwoWY29tbWlzc2lvbl9yYXRlX21p",
            "Y3JvcxgBIAEoCzIbLmdvb2dsZS5wcm90b2J1Zi5JbnQ2NFZhbHVlIg0KC0Vu",
            "aGFuY2VkQ3BjIkUKCU1hbnVhbENwYxI4ChRlbmhhbmNlZF9jcGNfZW5hYmxl",
            "ZBgBIAEoCzIaLmdvb2dsZS5wcm90b2J1Zi5Cb29sVmFsdWUiCwoJTWFudWFs",
            "Q3BtIgsKCU1hbnVhbENwdiIVChNNYXhpbWl6ZUNvbnZlcnNpb25zIkwKF01h",
            "eGltaXplQ29udmVyc2lvblZhbHVlEjEKC3RhcmdldF9yb2FzGAEgASgLMhwu",
            "Z29vZ2xlLnByb3RvYnVmLkRvdWJsZVZhbHVlIsYDCg9QYWdlT25lUHJvbW90",
            "ZWQScQoNc3RyYXRlZ3lfZ29hbBgBIAEoDjJaLmdvb2dsZS5hZHMuZ29vZ2xl",
            "YWRzLnYxLmVudW1zLlBhZ2VPbmVQcm9tb3RlZFN0cmF0ZWd5R29hbEVudW0u",
            "UGFnZU9uZVByb21vdGVkU3RyYXRlZ3lHb2FsEjsKFmNwY19iaWRfY2VpbGlu",
            "Z19taWNyb3MYAiABKAsyGy5nb29nbGUucHJvdG9idWYuSW50NjRWYWx1ZRIy",
            "CgxiaWRfbW9kaWZpZXIYAyABKAsyHC5nb29nbGUucHJvdG9idWYuRG91Ymxl",
            "VmFsdWUSNwoTb25seV9yYWlzZV9jcGNfYmlkcxgEIAEoCzIaLmdvb2dsZS5w",
            "cm90b2J1Zi5Cb29sVmFsdWUSSQolcmFpc2VfY3BjX2JpZF93aGVuX2J1ZGdl",
            "dF9jb25zdHJhaW5lZBgFIAEoCzIaLmdvb2dsZS5wcm90b2J1Zi5Cb29sVmFs",
            "dWUSSwoncmFpc2VfY3BjX2JpZF93aGVuX3F1YWxpdHlfc2NvcmVfaXNfbG93",
            "GAYgASgLMhouZ29vZ2xlLnByb3RvYnVmLkJvb2xWYWx1ZSK7AQoJVGFyZ2V0",
            "Q3BhEjYKEXRhcmdldF9jcGFfbWljcm9zGAEgASgLMhsuZ29vZ2xlLnByb3Rv",
            "YnVmLkludDY0VmFsdWUSOwoWY3BjX2JpZF9jZWlsaW5nX21pY3JvcxgCIAEo",
            "CzIbLmdvb2dsZS5wcm90b2J1Zi5JbnQ2NFZhbHVlEjkKFGNwY19iaWRfZmxv",
            "b3JfbWljcm9zGAMgASgLMhsuZ29vZ2xlLnByb3RvYnVmLkludDY0VmFsdWUi",
            "CwoJVGFyZ2V0Q3BtIoUCChVUYXJnZXRJbXByZXNzaW9uU2hhcmUScAoIbG9j",
            "YXRpb24YASABKA4yXi5nb29nbGUuYWRzLmdvb2dsZWFkcy52MS5lbnVtcy5U",
            "YXJnZXRJbXByZXNzaW9uU2hhcmVMb2NhdGlvbkVudW0uVGFyZ2V0SW1wcmVz",
            "c2lvblNoYXJlTG9jYXRpb24SPQoYbG9jYXRpb25fZnJhY3Rpb25fbWljcm9z",
            "GAIgASgLMhsuZ29vZ2xlLnByb3RvYnVmLkludDY0VmFsdWUSOwoWY3BjX2Jp",
            "ZF9jZWlsaW5nX21pY3JvcxgDIAEoCzIbLmdvb2dsZS5wcm90b2J1Zi5JbnQ2",
            "NFZhbHVlItICChJUYXJnZXRPdXRyYW5rU2hhcmUSQAobdGFyZ2V0X291dHJh",
            "bmtfc2hhcmVfbWljcm9zGAEgASgLMhsuZ29vZ2xlLnByb3RvYnVmLkludDMy",
            "VmFsdWUSNwoRY29tcGV0aXRvcl9kb21haW4YAiABKAsyHC5nb29nbGUucHJv",
            "dG9idWYuU3RyaW5nVmFsdWUSOwoWY3BjX2JpZF9jZWlsaW5nX21pY3JvcxgD",
            "IAEoCzIbLmdvb2dsZS5wcm90b2J1Zi5JbnQ2NFZhbHVlEjcKE29ubHlfcmFp",
            "c2VfY3BjX2JpZHMYBCABKAsyGi5nb29nbGUucHJvdG9idWYuQm9vbFZhbHVl",
            "EksKJ3JhaXNlX2NwY19iaWRfd2hlbl9xdWFsaXR5X3Njb3JlX2lzX2xvdxgF",
            "IAEoCzIaLmdvb2dsZS5wcm90b2J1Zi5Cb29sVmFsdWUitwEKClRhcmdldFJv",
            "YXMSMQoLdGFyZ2V0X3JvYXMYASABKAsyHC5nb29nbGUucHJvdG9idWYuRG91",
            "YmxlVmFsdWUSOwoWY3BjX2JpZF9jZWlsaW5nX21pY3JvcxgCIAEoCzIbLmdv",
            "b2dsZS5wcm90b2J1Zi5JbnQ2NFZhbHVlEjkKFGNwY19iaWRfZmxvb3JfbWlj",
            "cm9zGAMgASgLMhsuZ29vZ2xlLnByb3RvYnVmLkludDY0VmFsdWUihAEKC1Rh",
            "cmdldFNwZW5kEjgKE3RhcmdldF9zcGVuZF9taWNyb3MYASABKAsyGy5nb29n",
            "bGUucHJvdG9idWYuSW50NjRWYWx1ZRI7ChZjcGNfYmlkX2NlaWxpbmdfbWlj",
            "cm9zGAIgASgLMhsuZ29vZ2xlLnByb3RvYnVmLkludDY0VmFsdWUigwEKClBl",
            "cmNlbnRDcGMSOwoWY3BjX2JpZF9jZWlsaW5nX21pY3JvcxgBIAEoCzIbLmdv",
            "b2dsZS5wcm90b2J1Zi5JbnQ2NFZhbHVlEjgKFGVuaGFuY2VkX2NwY19lbmFi",
            "bGVkGAIgASgLMhouZ29vZ2xlLnByb3RvYnVmLkJvb2xWYWx1ZULnAQoiY29t",
            "Lmdvb2dsZS5hZHMuZ29vZ2xlYWRzLnYxLmNvbW1vbkIMQmlkZGluZ1Byb3Rv",
            "UAFaRGdvb2dsZS5nb2xhbmcub3JnL2dlbnByb3RvL2dvb2dsZWFwaXMvYWRz",
            "L2dvb2dsZWFkcy92MS9jb21tb247Y29tbW9uogIDR0FBqgIeR29vZ2xlLkFk",
            "cy5Hb29nbGVBZHMuVjEuQ29tbW9uygIeR29vZ2xlXEFkc1xHb29nbGVBZHNc",
            "VjFcQ29tbW9u6gIiR29vZ2xlOjpBZHM6Okdvb2dsZUFkczo6VjE6OkNvbW1v",
            "bmIGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Google.Ads.GoogleAds.V1.Enums.PageOnePromotedStrategyGoalReflection.Descriptor, global::Google.Ads.GoogleAds.V1.Enums.TargetImpressionShareLocationReflection.Descriptor, global::Google.Protobuf.WellKnownTypes.WrappersReflection.Descriptor, global::Google.Api.AnnotationsReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Ads.GoogleAds.V1.Common.Commission), global::Google.Ads.GoogleAds.V1.Common.Commission.Parser, new[]{ "CommissionRateMicros" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Ads.GoogleAds.V1.Common.EnhancedCpc), global::Google.Ads.GoogleAds.V1.Common.EnhancedCpc.Parser, null, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Ads.GoogleAds.V1.Common.ManualCpc), global::Google.Ads.GoogleAds.V1.Common.ManualCpc.Parser, new[]{ "EnhancedCpcEnabled" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Ads.GoogleAds.V1.Common.ManualCpm), global::Google.Ads.GoogleAds.V1.Common.ManualCpm.Parser, null, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Ads.GoogleAds.V1.Common.ManualCpv), global::Google.Ads.GoogleAds.V1.Common.ManualCpv.Parser, null, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Ads.GoogleAds.V1.Common.MaximizeConversions), global::Google.Ads.GoogleAds.V1.Common.MaximizeConversions.Parser, null, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Ads.GoogleAds.V1.Common.MaximizeConversionValue), global::Google.Ads.GoogleAds.V1.Common.MaximizeConversionValue.Parser, new[]{ "TargetRoas" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Ads.GoogleAds.V1.Common.PageOnePromoted), global::Google.Ads.GoogleAds.V1.Common.PageOnePromoted.Parser, new[]{ "StrategyGoal", "CpcBidCeilingMicros", "BidModifier", "OnlyRaiseCpcBids", "RaiseCpcBidWhenBudgetConstrained", "RaiseCpcBidWhenQualityScoreIsLow" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Ads.GoogleAds.V1.Common.TargetCpa), global::Google.Ads.GoogleAds.V1.Common.TargetCpa.Parser, new[]{ "TargetCpaMicros", "CpcBidCeilingMicros", "CpcBidFloorMicros" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Ads.GoogleAds.V1.Common.TargetCpm), global::Google.Ads.GoogleAds.V1.Common.TargetCpm.Parser, null, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Ads.GoogleAds.V1.Common.TargetImpressionShare), global::Google.Ads.GoogleAds.V1.Common.TargetImpressionShare.Parser, new[]{ "Location", "LocationFractionMicros", "CpcBidCeilingMicros" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Ads.GoogleAds.V1.Common.TargetOutrankShare), global::Google.Ads.GoogleAds.V1.Common.TargetOutrankShare.Parser, new[]{ "TargetOutrankShareMicros", "CompetitorDomain", "CpcBidCeilingMicros", "OnlyRaiseCpcBids", "RaiseCpcBidWhenQualityScoreIsLow" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Ads.GoogleAds.V1.Common.TargetRoas), global::Google.Ads.GoogleAds.V1.Common.TargetRoas.Parser, new[]{ "TargetRoas_", "CpcBidCeilingMicros", "CpcBidFloorMicros" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Ads.GoogleAds.V1.Common.TargetSpend), global::Google.Ads.GoogleAds.V1.Common.TargetSpend.Parser, new[]{ "TargetSpendMicros", "CpcBidCeilingMicros" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Ads.GoogleAds.V1.Common.PercentCpc), global::Google.Ads.GoogleAds.V1.Common.PercentCpc.Parser, new[]{ "CpcBidCeilingMicros", "EnhancedCpcEnabled" }, null, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  /// <summary>
  /// Commission is an automatic bidding strategy in which the advertiser pays a
  /// certain portion of the conversion value.
  /// </summary>
  public sealed partial class Commission : pb::IMessage<Commission> {
    private static readonly pb::MessageParser<Commission> _parser = new pb::MessageParser<Commission>(() => new Commission());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Commission> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Ads.GoogleAds.V1.Common.BiddingReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Commission() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Commission(Commission other) : this() {
      CommissionRateMicros = other.CommissionRateMicros;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Commission Clone() {
      return new Commission(this);
    }

    /// <summary>Field number for the "commission_rate_micros" field.</summary>
    public const int CommissionRateMicrosFieldNumber = 1;
    private static readonly pb::FieldCodec<long?> _single_commissionRateMicros_codec = pb::FieldCodec.ForStructWrapper<long>(10);
    private long? commissionRateMicros_;
    /// <summary>
    /// Commission rate defines the portion of the conversion value that the
    /// advertiser will be billed. A commission rate of x should be passed into
    /// this field as (x * 1,000,000). For example, 106,000 represents a commission
    /// rate of 0.106 (10.6%).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long? CommissionRateMicros {
      get { return commissionRateMicros_; }
      set {
        commissionRateMicros_ = value;
      }
    }


    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Commission);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Commission other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (CommissionRateMicros != other.CommissionRateMicros) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (commissionRateMicros_ != null) hash ^= CommissionRateMicros.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (commissionRateMicros_ != null) {
        _single_commissionRateMicros_codec.WriteTagAndValue(output, CommissionRateMicros);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (commissionRateMicros_ != null) {
        size += _single_commissionRateMicros_codec.CalculateSizeWithTag(CommissionRateMicros);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Commission other) {
      if (other == null) {
        return;
      }
      if (other.commissionRateMicros_ != null) {
        if (commissionRateMicros_ == null || other.CommissionRateMicros != 0L) {
          CommissionRateMicros = other.CommissionRateMicros;
        }
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            long? value = _single_commissionRateMicros_codec.Read(input);
            if (commissionRateMicros_ == null || value != 0L) {
              CommissionRateMicros = value;
            }
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// An automated bidding strategy that raises bids for clicks
  /// that seem more likely to lead to a conversion and lowers
  /// them for clicks where they seem less likely.
  /// </summary>
  public sealed partial class EnhancedCpc : pb::IMessage<EnhancedCpc> {
    private static readonly pb::MessageParser<EnhancedCpc> _parser = new pb::MessageParser<EnhancedCpc>(() => new EnhancedCpc());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<EnhancedCpc> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Ads.GoogleAds.V1.Common.BiddingReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EnhancedCpc() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EnhancedCpc(EnhancedCpc other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EnhancedCpc Clone() {
      return new EnhancedCpc(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as EnhancedCpc);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(EnhancedCpc other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(EnhancedCpc other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    }

  }

  /// <summary>
  /// Manual click-based bidding where user pays per click.
  /// </summary>
  public sealed partial class ManualCpc : pb::IMessage<ManualCpc> {
    private static readonly pb::MessageParser<ManualCpc> _parser = new pb::MessageParser<ManualCpc>(() => new ManualCpc());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ManualCpc> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Ads.GoogleAds.V1.Common.BiddingReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ManualCpc() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ManualCpc(ManualCpc other) : this() {
      EnhancedCpcEnabled = other.EnhancedCpcEnabled;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ManualCpc Clone() {
      return new ManualCpc(this);
    }

    /// <summary>Field number for the "enhanced_cpc_enabled" field.</summary>
    public const int EnhancedCpcEnabledFieldNumber = 1;
    private static readonly pb::FieldCodec<bool?> _single_enhancedCpcEnabled_codec = pb::FieldCodec.ForStructWrapper<bool>(10);
    private bool? enhancedCpcEnabled_;
    /// <summary>
    /// Whether bids are to be enhanced based on conversion optimizer data.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool? EnhancedCpcEnabled {
      get { return enhancedCpcEnabled_; }
      set {
        enhancedCpcEnabled_ = value;
      }
    }


    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ManualCpc);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ManualCpc other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (EnhancedCpcEnabled != other.EnhancedCpcEnabled) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (enhancedCpcEnabled_ != null) hash ^= EnhancedCpcEnabled.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (enhancedCpcEnabled_ != null) {
        _single_enhancedCpcEnabled_codec.WriteTagAndValue(output, EnhancedCpcEnabled);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (enhancedCpcEnabled_ != null) {
        size += _single_enhancedCpcEnabled_codec.CalculateSizeWithTag(EnhancedCpcEnabled);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ManualCpc other) {
      if (other == null) {
        return;
      }
      if (other.enhancedCpcEnabled_ != null) {
        if (enhancedCpcEnabled_ == null || other.EnhancedCpcEnabled != false) {
          EnhancedCpcEnabled = other.EnhancedCpcEnabled;
        }
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            bool? value = _single_enhancedCpcEnabled_codec.Read(input);
            if (enhancedCpcEnabled_ == null || value != false) {
              EnhancedCpcEnabled = value;
            }
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Manual impression-based bidding where user pays per thousand impressions.
  /// </summary>
  public sealed partial class ManualCpm : pb::IMessage<ManualCpm> {
    private static readonly pb::MessageParser<ManualCpm> _parser = new pb::MessageParser<ManualCpm>(() => new ManualCpm());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ManualCpm> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Ads.GoogleAds.V1.Common.BiddingReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ManualCpm() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ManualCpm(ManualCpm other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ManualCpm Clone() {
      return new ManualCpm(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ManualCpm);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ManualCpm other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ManualCpm other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    }

  }

  /// <summary>
  /// View based bidding where user pays per video view.
  /// </summary>
  public sealed partial class ManualCpv : pb::IMessage<ManualCpv> {
    private static readonly pb::MessageParser<ManualCpv> _parser = new pb::MessageParser<ManualCpv>(() => new ManualCpv());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ManualCpv> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Ads.GoogleAds.V1.Common.BiddingReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ManualCpv() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ManualCpv(ManualCpv other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ManualCpv Clone() {
      return new ManualCpv(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ManualCpv);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ManualCpv other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ManualCpv other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    }

  }

  /// <summary>
  /// An automated bidding strategy that sets bids to help get the most conversions
  /// for your campaign while spending your budget.
  /// </summary>
  public sealed partial class MaximizeConversions : pb::IMessage<MaximizeConversions> {
    private static readonly pb::MessageParser<MaximizeConversions> _parser = new pb::MessageParser<MaximizeConversions>(() => new MaximizeConversions());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MaximizeConversions> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Ads.GoogleAds.V1.Common.BiddingReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MaximizeConversions() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MaximizeConversions(MaximizeConversions other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MaximizeConversions Clone() {
      return new MaximizeConversions(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MaximizeConversions);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MaximizeConversions other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MaximizeConversions other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    }

  }

  /// <summary>
  /// An automated bidding strategy which tries to maximize conversion value
  /// given a daily budget.
  /// </summary>
  public sealed partial class MaximizeConversionValue : pb::IMessage<MaximizeConversionValue> {
    private static readonly pb::MessageParser<MaximizeConversionValue> _parser = new pb::MessageParser<MaximizeConversionValue>(() => new MaximizeConversionValue());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MaximizeConversionValue> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Ads.GoogleAds.V1.Common.BiddingReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MaximizeConversionValue() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MaximizeConversionValue(MaximizeConversionValue other) : this() {
      TargetRoas = other.TargetRoas;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MaximizeConversionValue Clone() {
      return new MaximizeConversionValue(this);
    }

    /// <summary>Field number for the "target_roas" field.</summary>
    public const int TargetRoasFieldNumber = 1;
    private static readonly pb::FieldCodec<double?> _single_targetRoas_codec = pb::FieldCodec.ForStructWrapper<double>(10);
    private double? targetRoas_;
    /// <summary>
    /// The target return on ad spend (ROAS) option. If set, the bid strategy will
    /// maximize revenue while averaging the target return on ad spend. If the
    /// target ROAS is high, the bid strategy may not be able to spend the full
    /// budget. If the target ROAS is not set, the bid strategy will aim to
    /// achieve the highest possible ROAS for the budget.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double? TargetRoas {
      get { return targetRoas_; }
      set {
        targetRoas_ = value;
      }
    }


    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MaximizeConversionValue);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MaximizeConversionValue other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!pbc::ProtobufEqualityComparers.BitwiseNullableDoubleEqualityComparer.Equals(TargetRoas, other.TargetRoas)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (targetRoas_ != null) hash ^= pbc::ProtobufEqualityComparers.BitwiseNullableDoubleEqualityComparer.GetHashCode(TargetRoas);
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (targetRoas_ != null) {
        _single_targetRoas_codec.WriteTagAndValue(output, TargetRoas);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (targetRoas_ != null) {
        size += _single_targetRoas_codec.CalculateSizeWithTag(TargetRoas);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MaximizeConversionValue other) {
      if (other == null) {
        return;
      }
      if (other.targetRoas_ != null) {
        if (targetRoas_ == null || other.TargetRoas != 0D) {
          TargetRoas = other.TargetRoas;
        }
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            double? value = _single_targetRoas_codec.Read(input);
            if (targetRoas_ == null || value != 0D) {
              TargetRoas = value;
            }
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// An automated bidding strategy which sets CPC bids to target impressions on
  /// page one, or page one promoted slots on google.com.
  /// This strategy is deprecated.
  /// </summary>
  public sealed partial class PageOnePromoted : pb::IMessage<PageOnePromoted> {
    private static readonly pb::MessageParser<PageOnePromoted> _parser = new pb::MessageParser<PageOnePromoted>(() => new PageOnePromoted());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PageOnePromoted> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Ads.GoogleAds.V1.Common.BiddingReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PageOnePromoted() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PageOnePromoted(PageOnePromoted other) : this() {
      strategyGoal_ = other.strategyGoal_;
      CpcBidCeilingMicros = other.CpcBidCeilingMicros;
      BidModifier = other.BidModifier;
      OnlyRaiseCpcBids = other.OnlyRaiseCpcBids;
      RaiseCpcBidWhenBudgetConstrained = other.RaiseCpcBidWhenBudgetConstrained;
      RaiseCpcBidWhenQualityScoreIsLow = other.RaiseCpcBidWhenQualityScoreIsLow;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PageOnePromoted Clone() {
      return new PageOnePromoted(this);
    }

    /// <summary>Field number for the "strategy_goal" field.</summary>
    public const int StrategyGoalFieldNumber = 1;
    private global::Google.Ads.GoogleAds.V1.Enums.PageOnePromotedStrategyGoalEnum.Types.PageOnePromotedStrategyGoal strategyGoal_ = global::Google.Ads.GoogleAds.V1.Enums.PageOnePromotedStrategyGoalEnum.Types.PageOnePromotedStrategyGoal.Unspecified;
    /// <summary>
    /// The strategy goal of where impressions are desired to be shown on
    /// search result pages.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Ads.GoogleAds.V1.Enums.PageOnePromotedStrategyGoalEnum.Types.PageOnePromotedStrategyGoal StrategyGoal {
      get { return strategyGoal_; }
      set {
        strategyGoal_ = value;
      }
    }

    /// <summary>Field number for the "cpc_bid_ceiling_micros" field.</summary>
    public const int CpcBidCeilingMicrosFieldNumber = 2;
    private static readonly pb::FieldCodec<long?> _single_cpcBidCeilingMicros_codec = pb::FieldCodec.ForStructWrapper<long>(18);
    private long? cpcBidCeilingMicros_;
    /// <summary>
    /// Maximum bid limit that can be set by the bid strategy.
    /// The limit applies to all keywords managed by the strategy.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long? CpcBidCeilingMicros {
      get { return cpcBidCeilingMicros_; }
      set {
        cpcBidCeilingMicros_ = value;
      }
    }


    /// <summary>Field number for the "bid_modifier" field.</summary>
    public const int BidModifierFieldNumber = 3;
    private static readonly pb::FieldCodec<double?> _single_bidModifier_codec = pb::FieldCodec.ForStructWrapper<double>(26);
    private double? bidModifier_;
    /// <summary>
    /// Bid multiplier to be applied to the relevant bid estimate (depending on
    /// the `strategy_goal`) in determining a keyword's new CPC bid.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double? BidModifier {
      get { return bidModifier_; }
      set {
        bidModifier_ = value;
      }
    }


    /// <summary>Field number for the "only_raise_cpc_bids" field.</summary>
    public const int OnlyRaiseCpcBidsFieldNumber = 4;
    private static readonly pb::FieldCodec<bool?> _single_onlyRaiseCpcBids_codec = pb::FieldCodec.ForStructWrapper<bool>(34);
    private bool? onlyRaiseCpcBids_;
    /// <summary>
    /// Whether the strategy should always follow bid estimate changes, or only
    /// increase.
    /// If false, always sets a keyword's new bid to the current bid estimate.
    /// If true, only updates a keyword's bid if the current bid estimate is
    /// greater than the current bid.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool? OnlyRaiseCpcBids {
      get { return onlyRaiseCpcBids_; }
      set {
        onlyRaiseCpcBids_ = value;
      }
    }


    /// <summary>Field number for the "raise_cpc_bid_when_budget_constrained" field.</summary>
    public const int RaiseCpcBidWhenBudgetConstrainedFieldNumber = 5;
    private static readonly pb::FieldCodec<bool?> _single_raiseCpcBidWhenBudgetConstrained_codec = pb::FieldCodec.ForStructWrapper<bool>(42);
    private bool? raiseCpcBidWhenBudgetConstrained_;
    /// <summary>
    /// Whether the strategy is allowed to raise bids when the throttling
    /// rate of the budget it is serving out of rises above a threshold.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool? RaiseCpcBidWhenBudgetConstrained {
      get { return raiseCpcBidWhenBudgetConstrained_; }
      set {
        raiseCpcBidWhenBudgetConstrained_ = value;
      }
    }


    /// <summary>Field number for the "raise_cpc_bid_when_quality_score_is_low" field.</summary>
    public const int RaiseCpcBidWhenQualityScoreIsLowFieldNumber = 6;
    private static readonly pb::FieldCodec<bool?> _single_raiseCpcBidWhenQualityScoreIsLow_codec = pb::FieldCodec.ForStructWrapper<bool>(50);
    private bool? raiseCpcBidWhenQualityScoreIsLow_;
    /// <summary>
    /// Whether the strategy is allowed to raise bids on keywords with
    /// lower-range quality scores.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool? RaiseCpcBidWhenQualityScoreIsLow {
      get { return raiseCpcBidWhenQualityScoreIsLow_; }
      set {
        raiseCpcBidWhenQualityScoreIsLow_ = value;
      }
    }


    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PageOnePromoted);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PageOnePromoted other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (StrategyGoal != other.StrategyGoal) return false;
      if (CpcBidCeilingMicros != other.CpcBidCeilingMicros) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseNullableDoubleEqualityComparer.Equals(BidModifier, other.BidModifier)) return false;
      if (OnlyRaiseCpcBids != other.OnlyRaiseCpcBids) return false;
      if (RaiseCpcBidWhenBudgetConstrained != other.RaiseCpcBidWhenBudgetConstrained) return false;
      if (RaiseCpcBidWhenQualityScoreIsLow != other.RaiseCpcBidWhenQualityScoreIsLow) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (StrategyGoal != global::Google.Ads.GoogleAds.V1.Enums.PageOnePromotedStrategyGoalEnum.Types.PageOnePromotedStrategyGoal.Unspecified) hash ^= StrategyGoal.GetHashCode();
      if (cpcBidCeilingMicros_ != null) hash ^= CpcBidCeilingMicros.GetHashCode();
      if (bidModifier_ != null) hash ^= pbc::ProtobufEqualityComparers.BitwiseNullableDoubleEqualityComparer.GetHashCode(BidModifier);
      if (onlyRaiseCpcBids_ != null) hash ^= OnlyRaiseCpcBids.GetHashCode();
      if (raiseCpcBidWhenBudgetConstrained_ != null) hash ^= RaiseCpcBidWhenBudgetConstrained.GetHashCode();
      if (raiseCpcBidWhenQualityScoreIsLow_ != null) hash ^= RaiseCpcBidWhenQualityScoreIsLow.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (StrategyGoal != global::Google.Ads.GoogleAds.V1.Enums.PageOnePromotedStrategyGoalEnum.Types.PageOnePromotedStrategyGoal.Unspecified) {
        output.WriteRawTag(8);
        output.WriteEnum((int) StrategyGoal);
      }
      if (cpcBidCeilingMicros_ != null) {
        _single_cpcBidCeilingMicros_codec.WriteTagAndValue(output, CpcBidCeilingMicros);
      }
      if (bidModifier_ != null) {
        _single_bidModifier_codec.WriteTagAndValue(output, BidModifier);
      }
      if (onlyRaiseCpcBids_ != null) {
        _single_onlyRaiseCpcBids_codec.WriteTagAndValue(output, OnlyRaiseCpcBids);
      }
      if (raiseCpcBidWhenBudgetConstrained_ != null) {
        _single_raiseCpcBidWhenBudgetConstrained_codec.WriteTagAndValue(output, RaiseCpcBidWhenBudgetConstrained);
      }
      if (raiseCpcBidWhenQualityScoreIsLow_ != null) {
        _single_raiseCpcBidWhenQualityScoreIsLow_codec.WriteTagAndValue(output, RaiseCpcBidWhenQualityScoreIsLow);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (StrategyGoal != global::Google.Ads.GoogleAds.V1.Enums.PageOnePromotedStrategyGoalEnum.Types.PageOnePromotedStrategyGoal.Unspecified) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) StrategyGoal);
      }
      if (cpcBidCeilingMicros_ != null) {
        size += _single_cpcBidCeilingMicros_codec.CalculateSizeWithTag(CpcBidCeilingMicros);
      }
      if (bidModifier_ != null) {
        size += _single_bidModifier_codec.CalculateSizeWithTag(BidModifier);
      }
      if (onlyRaiseCpcBids_ != null) {
        size += _single_onlyRaiseCpcBids_codec.CalculateSizeWithTag(OnlyRaiseCpcBids);
      }
      if (raiseCpcBidWhenBudgetConstrained_ != null) {
        size += _single_raiseCpcBidWhenBudgetConstrained_codec.CalculateSizeWithTag(RaiseCpcBidWhenBudgetConstrained);
      }
      if (raiseCpcBidWhenQualityScoreIsLow_ != null) {
        size += _single_raiseCpcBidWhenQualityScoreIsLow_codec.CalculateSizeWithTag(RaiseCpcBidWhenQualityScoreIsLow);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PageOnePromoted other) {
      if (other == null) {
        return;
      }
      if (other.StrategyGoal != global::Google.Ads.GoogleAds.V1.Enums.PageOnePromotedStrategyGoalEnum.Types.PageOnePromotedStrategyGoal.Unspecified) {
        StrategyGoal = other.StrategyGoal;
      }
      if (other.cpcBidCeilingMicros_ != null) {
        if (cpcBidCeilingMicros_ == null || other.CpcBidCeilingMicros != 0L) {
          CpcBidCeilingMicros = other.CpcBidCeilingMicros;
        }
      }
      if (other.bidModifier_ != null) {
        if (bidModifier_ == null || other.BidModifier != 0D) {
          BidModifier = other.BidModifier;
        }
      }
      if (other.onlyRaiseCpcBids_ != null) {
        if (onlyRaiseCpcBids_ == null || other.OnlyRaiseCpcBids != false) {
          OnlyRaiseCpcBids = other.OnlyRaiseCpcBids;
        }
      }
      if (other.raiseCpcBidWhenBudgetConstrained_ != null) {
        if (raiseCpcBidWhenBudgetConstrained_ == null || other.RaiseCpcBidWhenBudgetConstrained != false) {
          RaiseCpcBidWhenBudgetConstrained = other.RaiseCpcBidWhenBudgetConstrained;
        }
      }
      if (other.raiseCpcBidWhenQualityScoreIsLow_ != null) {
        if (raiseCpcBidWhenQualityScoreIsLow_ == null || other.RaiseCpcBidWhenQualityScoreIsLow != false) {
          RaiseCpcBidWhenQualityScoreIsLow = other.RaiseCpcBidWhenQualityScoreIsLow;
        }
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            StrategyGoal = (global::Google.Ads.GoogleAds.V1.Enums.PageOnePromotedStrategyGoalEnum.Types.PageOnePromotedStrategyGoal) input.ReadEnum();
            break;
          }
          case 18: {
            long? value = _single_cpcBidCeilingMicros_codec.Read(input);
            if (cpcBidCeilingMicros_ == null || value != 0L) {
              CpcBidCeilingMicros = value;
            }
            break;
          }
          case 26: {
            double? value = _single_bidModifier_codec.Read(input);
            if (bidModifier_ == null || value != 0D) {
              BidModifier = value;
            }
            break;
          }
          case 34: {
            bool? value = _single_onlyRaiseCpcBids_codec.Read(input);
            if (onlyRaiseCpcBids_ == null || value != false) {
              OnlyRaiseCpcBids = value;
            }
            break;
          }
          case 42: {
            bool? value = _single_raiseCpcBidWhenBudgetConstrained_codec.Read(input);
            if (raiseCpcBidWhenBudgetConstrained_ == null || value != false) {
              RaiseCpcBidWhenBudgetConstrained = value;
            }
            break;
          }
          case 50: {
            bool? value = _single_raiseCpcBidWhenQualityScoreIsLow_codec.Read(input);
            if (raiseCpcBidWhenQualityScoreIsLow_ == null || value != false) {
              RaiseCpcBidWhenQualityScoreIsLow = value;
            }
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// An automated bid strategy that sets bids to help get as many conversions as
  /// possible at the target cost-per-acquisition (CPA) you set.
  /// </summary>
  public sealed partial class TargetCpa : pb::IMessage<TargetCpa> {
    private static readonly pb::MessageParser<TargetCpa> _parser = new pb::MessageParser<TargetCpa>(() => new TargetCpa());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TargetCpa> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Ads.GoogleAds.V1.Common.BiddingReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TargetCpa() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TargetCpa(TargetCpa other) : this() {
      TargetCpaMicros = other.TargetCpaMicros;
      CpcBidCeilingMicros = other.CpcBidCeilingMicros;
      CpcBidFloorMicros = other.CpcBidFloorMicros;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TargetCpa Clone() {
      return new TargetCpa(this);
    }

    /// <summary>Field number for the "target_cpa_micros" field.</summary>
    public const int TargetCpaMicrosFieldNumber = 1;
    private static readonly pb::FieldCodec<long?> _single_targetCpaMicros_codec = pb::FieldCodec.ForStructWrapper<long>(10);
    private long? targetCpaMicros_;
    /// <summary>
    /// Average CPA target.
    /// This target should be greater than or equal to minimum billable unit based
    /// on the currency for the account.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long? TargetCpaMicros {
      get { return targetCpaMicros_; }
      set {
        targetCpaMicros_ = value;
      }
    }


    /// <summary>Field number for the "cpc_bid_ceiling_micros" field.</summary>
    public const int CpcBidCeilingMicrosFieldNumber = 2;
    private static readonly pb::FieldCodec<long?> _single_cpcBidCeilingMicros_codec = pb::FieldCodec.ForStructWrapper<long>(18);
    private long? cpcBidCeilingMicros_;
    /// <summary>
    /// Maximum bid limit that can be set by the bid strategy.
    /// The limit applies to all keywords managed by the strategy.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long? CpcBidCeilingMicros {
      get { return cpcBidCeilingMicros_; }
      set {
        cpcBidCeilingMicros_ = value;
      }
    }


    /// <summary>Field number for the "cpc_bid_floor_micros" field.</summary>
    public const int CpcBidFloorMicrosFieldNumber = 3;
    private static readonly pb::FieldCodec<long?> _single_cpcBidFloorMicros_codec = pb::FieldCodec.ForStructWrapper<long>(26);
    private long? cpcBidFloorMicros_;
    /// <summary>
    /// Minimum bid limit that can be set by the bid strategy.
    /// The limit applies to all keywords managed by the strategy.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long? CpcBidFloorMicros {
      get { return cpcBidFloorMicros_; }
      set {
        cpcBidFloorMicros_ = value;
      }
    }


    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TargetCpa);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TargetCpa other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (TargetCpaMicros != other.TargetCpaMicros) return false;
      if (CpcBidCeilingMicros != other.CpcBidCeilingMicros) return false;
      if (CpcBidFloorMicros != other.CpcBidFloorMicros) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (targetCpaMicros_ != null) hash ^= TargetCpaMicros.GetHashCode();
      if (cpcBidCeilingMicros_ != null) hash ^= CpcBidCeilingMicros.GetHashCode();
      if (cpcBidFloorMicros_ != null) hash ^= CpcBidFloorMicros.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (targetCpaMicros_ != null) {
        _single_targetCpaMicros_codec.WriteTagAndValue(output, TargetCpaMicros);
      }
      if (cpcBidCeilingMicros_ != null) {
        _single_cpcBidCeilingMicros_codec.WriteTagAndValue(output, CpcBidCeilingMicros);
      }
      if (cpcBidFloorMicros_ != null) {
        _single_cpcBidFloorMicros_codec.WriteTagAndValue(output, CpcBidFloorMicros);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (targetCpaMicros_ != null) {
        size += _single_targetCpaMicros_codec.CalculateSizeWithTag(TargetCpaMicros);
      }
      if (cpcBidCeilingMicros_ != null) {
        size += _single_cpcBidCeilingMicros_codec.CalculateSizeWithTag(CpcBidCeilingMicros);
      }
      if (cpcBidFloorMicros_ != null) {
        size += _single_cpcBidFloorMicros_codec.CalculateSizeWithTag(CpcBidFloorMicros);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TargetCpa other) {
      if (other == null) {
        return;
      }
      if (other.targetCpaMicros_ != null) {
        if (targetCpaMicros_ == null || other.TargetCpaMicros != 0L) {
          TargetCpaMicros = other.TargetCpaMicros;
        }
      }
      if (other.cpcBidCeilingMicros_ != null) {
        if (cpcBidCeilingMicros_ == null || other.CpcBidCeilingMicros != 0L) {
          CpcBidCeilingMicros = other.CpcBidCeilingMicros;
        }
      }
      if (other.cpcBidFloorMicros_ != null) {
        if (cpcBidFloorMicros_ == null || other.CpcBidFloorMicros != 0L) {
          CpcBidFloorMicros = other.CpcBidFloorMicros;
        }
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            long? value = _single_targetCpaMicros_codec.Read(input);
            if (targetCpaMicros_ == null || value != 0L) {
              TargetCpaMicros = value;
            }
            break;
          }
          case 18: {
            long? value = _single_cpcBidCeilingMicros_codec.Read(input);
            if (cpcBidCeilingMicros_ == null || value != 0L) {
              CpcBidCeilingMicros = value;
            }
            break;
          }
          case 26: {
            long? value = _single_cpcBidFloorMicros_codec.Read(input);
            if (cpcBidFloorMicros_ == null || value != 0L) {
              CpcBidFloorMicros = value;
            }
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Target CPM (cost per thousand impressions) is an automated bidding strategy
  /// that sets bids to optimize performance given the target CPM you set.
  /// </summary>
  public sealed partial class TargetCpm : pb::IMessage<TargetCpm> {
    private static readonly pb::MessageParser<TargetCpm> _parser = new pb::MessageParser<TargetCpm>(() => new TargetCpm());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TargetCpm> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Ads.GoogleAds.V1.Common.BiddingReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TargetCpm() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TargetCpm(TargetCpm other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TargetCpm Clone() {
      return new TargetCpm(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TargetCpm);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TargetCpm other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TargetCpm other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    }

  }

  /// <summary>
  /// An automated bidding strategy that sets bids so that a certain percentage of
  /// search ads are shown at the top of the first page (or other targeted
  /// location).
  /// next tag = 4
  /// </summary>
  public sealed partial class TargetImpressionShare : pb::IMessage<TargetImpressionShare> {
    private static readonly pb::MessageParser<TargetImpressionShare> _parser = new pb::MessageParser<TargetImpressionShare>(() => new TargetImpressionShare());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TargetImpressionShare> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Ads.GoogleAds.V1.Common.BiddingReflection.Descriptor.MessageTypes[10]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TargetImpressionShare() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TargetImpressionShare(TargetImpressionShare other) : this() {
      location_ = other.location_;
      LocationFractionMicros = other.LocationFractionMicros;
      CpcBidCeilingMicros = other.CpcBidCeilingMicros;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TargetImpressionShare Clone() {
      return new TargetImpressionShare(this);
    }

    /// <summary>Field number for the "location" field.</summary>
    public const int LocationFieldNumber = 1;
    private global::Google.Ads.GoogleAds.V1.Enums.TargetImpressionShareLocationEnum.Types.TargetImpressionShareLocation location_ = global::Google.Ads.GoogleAds.V1.Enums.TargetImpressionShareLocationEnum.Types.TargetImpressionShareLocation.Unspecified;
    /// <summary>
    /// The targeted location on the search results page.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Ads.GoogleAds.V1.Enums.TargetImpressionShareLocationEnum.Types.TargetImpressionShareLocation Location {
      get { return location_; }
      set {
        location_ = value;
      }
    }

    /// <summary>Field number for the "location_fraction_micros" field.</summary>
    public const int LocationFractionMicrosFieldNumber = 2;
    private static readonly pb::FieldCodec<long?> _single_locationFractionMicros_codec = pb::FieldCodec.ForStructWrapper<long>(18);
    private long? locationFractionMicros_;
    /// <summary>
    /// The desired fraction of ads to be shown in the targeted location in micros.
    /// E.g. 1% equals 10,000.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long? LocationFractionMicros {
      get { return locationFractionMicros_; }
      set {
        locationFractionMicros_ = value;
      }
    }


    /// <summary>Field number for the "cpc_bid_ceiling_micros" field.</summary>
    public const int CpcBidCeilingMicrosFieldNumber = 3;
    private static readonly pb::FieldCodec<long?> _single_cpcBidCeilingMicros_codec = pb::FieldCodec.ForStructWrapper<long>(26);
    private long? cpcBidCeilingMicros_;
    /// <summary>
    /// The highest CPC bid the automated bidding system is permitted to specify.
    /// This is a required field entered by the advertiser that sets the ceiling
    /// and specified in local micros.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long? CpcBidCeilingMicros {
      get { return cpcBidCeilingMicros_; }
      set {
        cpcBidCeilingMicros_ = value;
      }
    }


    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TargetImpressionShare);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TargetImpressionShare other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Location != other.Location) return false;
      if (LocationFractionMicros != other.LocationFractionMicros) return false;
      if (CpcBidCeilingMicros != other.CpcBidCeilingMicros) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Location != global::Google.Ads.GoogleAds.V1.Enums.TargetImpressionShareLocationEnum.Types.TargetImpressionShareLocation.Unspecified) hash ^= Location.GetHashCode();
      if (locationFractionMicros_ != null) hash ^= LocationFractionMicros.GetHashCode();
      if (cpcBidCeilingMicros_ != null) hash ^= CpcBidCeilingMicros.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Location != global::Google.Ads.GoogleAds.V1.Enums.TargetImpressionShareLocationEnum.Types.TargetImpressionShareLocation.Unspecified) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Location);
      }
      if (locationFractionMicros_ != null) {
        _single_locationFractionMicros_codec.WriteTagAndValue(output, LocationFractionMicros);
      }
      if (cpcBidCeilingMicros_ != null) {
        _single_cpcBidCeilingMicros_codec.WriteTagAndValue(output, CpcBidCeilingMicros);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Location != global::Google.Ads.GoogleAds.V1.Enums.TargetImpressionShareLocationEnum.Types.TargetImpressionShareLocation.Unspecified) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Location);
      }
      if (locationFractionMicros_ != null) {
        size += _single_locationFractionMicros_codec.CalculateSizeWithTag(LocationFractionMicros);
      }
      if (cpcBidCeilingMicros_ != null) {
        size += _single_cpcBidCeilingMicros_codec.CalculateSizeWithTag(CpcBidCeilingMicros);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TargetImpressionShare other) {
      if (other == null) {
        return;
      }
      if (other.Location != global::Google.Ads.GoogleAds.V1.Enums.TargetImpressionShareLocationEnum.Types.TargetImpressionShareLocation.Unspecified) {
        Location = other.Location;
      }
      if (other.locationFractionMicros_ != null) {
        if (locationFractionMicros_ == null || other.LocationFractionMicros != 0L) {
          LocationFractionMicros = other.LocationFractionMicros;
        }
      }
      if (other.cpcBidCeilingMicros_ != null) {
        if (cpcBidCeilingMicros_ == null || other.CpcBidCeilingMicros != 0L) {
          CpcBidCeilingMicros = other.CpcBidCeilingMicros;
        }
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Location = (global::Google.Ads.GoogleAds.V1.Enums.TargetImpressionShareLocationEnum.Types.TargetImpressionShareLocation) input.ReadEnum();
            break;
          }
          case 18: {
            long? value = _single_locationFractionMicros_codec.Read(input);
            if (locationFractionMicros_ == null || value != 0L) {
              LocationFractionMicros = value;
            }
            break;
          }
          case 26: {
            long? value = _single_cpcBidCeilingMicros_codec.Read(input);
            if (cpcBidCeilingMicros_ == null || value != 0L) {
              CpcBidCeilingMicros = value;
            }
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// An automated bidding strategy that sets bids based on the target fraction of
  /// auctions where the advertiser should outrank a specific competitor.
  /// This strategy is deprecated.
  /// </summary>
  public sealed partial class TargetOutrankShare : pb::IMessage<TargetOutrankShare> {
    private static readonly pb::MessageParser<TargetOutrankShare> _parser = new pb::MessageParser<TargetOutrankShare>(() => new TargetOutrankShare());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TargetOutrankShare> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Ads.GoogleAds.V1.Common.BiddingReflection.Descriptor.MessageTypes[11]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TargetOutrankShare() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TargetOutrankShare(TargetOutrankShare other) : this() {
      TargetOutrankShareMicros = other.TargetOutrankShareMicros;
      CompetitorDomain = other.CompetitorDomain;
      CpcBidCeilingMicros = other.CpcBidCeilingMicros;
      OnlyRaiseCpcBids = other.OnlyRaiseCpcBids;
      RaiseCpcBidWhenQualityScoreIsLow = other.RaiseCpcBidWhenQualityScoreIsLow;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TargetOutrankShare Clone() {
      return new TargetOutrankShare(this);
    }

    /// <summary>Field number for the "target_outrank_share_micros" field.</summary>
    public const int TargetOutrankShareMicrosFieldNumber = 1;
    private static readonly pb::FieldCodec<int?> _single_targetOutrankShareMicros_codec = pb::FieldCodec.ForStructWrapper<int>(10);
    private int? targetOutrankShareMicros_;
    /// <summary>
    /// The target fraction of auctions where the advertiser should outrank the
    /// competitor.
    /// The advertiser outranks the competitor in an auction if either the
    /// advertiser appears above the competitor in the search results, or appears
    /// in the search results when the competitor does not.
    /// Value must be between 1 and 1000000, inclusive.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int? TargetOutrankShareMicros {
      get { return targetOutrankShareMicros_; }
      set {
        targetOutrankShareMicros_ = value;
      }
    }


    /// <summary>Field number for the "competitor_domain" field.</summary>
    public const int CompetitorDomainFieldNumber = 2;
    private static readonly pb::FieldCodec<string> _single_competitorDomain_codec = pb::FieldCodec.ForClassWrapper<string>(18);
    private string competitorDomain_;
    /// <summary>
    /// Competitor's visible domain URL.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string CompetitorDomain {
      get { return competitorDomain_; }
      set {
        competitorDomain_ = value;
      }
    }


    /// <summary>Field number for the "cpc_bid_ceiling_micros" field.</summary>
    public const int CpcBidCeilingMicrosFieldNumber = 3;
    private static readonly pb::FieldCodec<long?> _single_cpcBidCeilingMicros_codec = pb::FieldCodec.ForStructWrapper<long>(26);
    private long? cpcBidCeilingMicros_;
    /// <summary>
    /// Maximum bid limit that can be set by the bid strategy.
    /// The limit applies to all keywords managed by the strategy.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long? CpcBidCeilingMicros {
      get { return cpcBidCeilingMicros_; }
      set {
        cpcBidCeilingMicros_ = value;
      }
    }


    /// <summary>Field number for the "only_raise_cpc_bids" field.</summary>
    public const int OnlyRaiseCpcBidsFieldNumber = 4;
    private static readonly pb::FieldCodec<bool?> _single_onlyRaiseCpcBids_codec = pb::FieldCodec.ForStructWrapper<bool>(34);
    private bool? onlyRaiseCpcBids_;
    /// <summary>
    /// Whether the strategy should always follow bid estimate changes,
    /// or only increase.
    /// If false, always set a keyword's new bid to the current bid estimate.
    /// If true, only updates a keyword's bid if the current bid estimate is
    /// greater than the current bid.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool? OnlyRaiseCpcBids {
      get { return onlyRaiseCpcBids_; }
      set {
        onlyRaiseCpcBids_ = value;
      }
    }


    /// <summary>Field number for the "raise_cpc_bid_when_quality_score_is_low" field.</summary>
    public const int RaiseCpcBidWhenQualityScoreIsLowFieldNumber = 5;
    private static readonly pb::FieldCodec<bool?> _single_raiseCpcBidWhenQualityScoreIsLow_codec = pb::FieldCodec.ForStructWrapper<bool>(42);
    private bool? raiseCpcBidWhenQualityScoreIsLow_;
    /// <summary>
    /// Whether the strategy is allowed to raise bids on keywords with
    /// lower-range quality scores.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool? RaiseCpcBidWhenQualityScoreIsLow {
      get { return raiseCpcBidWhenQualityScoreIsLow_; }
      set {
        raiseCpcBidWhenQualityScoreIsLow_ = value;
      }
    }


    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TargetOutrankShare);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TargetOutrankShare other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (TargetOutrankShareMicros != other.TargetOutrankShareMicros) return false;
      if (CompetitorDomain != other.CompetitorDomain) return false;
      if (CpcBidCeilingMicros != other.CpcBidCeilingMicros) return false;
      if (OnlyRaiseCpcBids != other.OnlyRaiseCpcBids) return false;
      if (RaiseCpcBidWhenQualityScoreIsLow != other.RaiseCpcBidWhenQualityScoreIsLow) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (targetOutrankShareMicros_ != null) hash ^= TargetOutrankShareMicros.GetHashCode();
      if (competitorDomain_ != null) hash ^= CompetitorDomain.GetHashCode();
      if (cpcBidCeilingMicros_ != null) hash ^= CpcBidCeilingMicros.GetHashCode();
      if (onlyRaiseCpcBids_ != null) hash ^= OnlyRaiseCpcBids.GetHashCode();
      if (raiseCpcBidWhenQualityScoreIsLow_ != null) hash ^= RaiseCpcBidWhenQualityScoreIsLow.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (targetOutrankShareMicros_ != null) {
        _single_targetOutrankShareMicros_codec.WriteTagAndValue(output, TargetOutrankShareMicros);
      }
      if (competitorDomain_ != null) {
        _single_competitorDomain_codec.WriteTagAndValue(output, CompetitorDomain);
      }
      if (cpcBidCeilingMicros_ != null) {
        _single_cpcBidCeilingMicros_codec.WriteTagAndValue(output, CpcBidCeilingMicros);
      }
      if (onlyRaiseCpcBids_ != null) {
        _single_onlyRaiseCpcBids_codec.WriteTagAndValue(output, OnlyRaiseCpcBids);
      }
      if (raiseCpcBidWhenQualityScoreIsLow_ != null) {
        _single_raiseCpcBidWhenQualityScoreIsLow_codec.WriteTagAndValue(output, RaiseCpcBidWhenQualityScoreIsLow);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (targetOutrankShareMicros_ != null) {
        size += _single_targetOutrankShareMicros_codec.CalculateSizeWithTag(TargetOutrankShareMicros);
      }
      if (competitorDomain_ != null) {
        size += _single_competitorDomain_codec.CalculateSizeWithTag(CompetitorDomain);
      }
      if (cpcBidCeilingMicros_ != null) {
        size += _single_cpcBidCeilingMicros_codec.CalculateSizeWithTag(CpcBidCeilingMicros);
      }
      if (onlyRaiseCpcBids_ != null) {
        size += _single_onlyRaiseCpcBids_codec.CalculateSizeWithTag(OnlyRaiseCpcBids);
      }
      if (raiseCpcBidWhenQualityScoreIsLow_ != null) {
        size += _single_raiseCpcBidWhenQualityScoreIsLow_codec.CalculateSizeWithTag(RaiseCpcBidWhenQualityScoreIsLow);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TargetOutrankShare other) {
      if (other == null) {
        return;
      }
      if (other.targetOutrankShareMicros_ != null) {
        if (targetOutrankShareMicros_ == null || other.TargetOutrankShareMicros != 0) {
          TargetOutrankShareMicros = other.TargetOutrankShareMicros;
        }
      }
      if (other.competitorDomain_ != null) {
        if (competitorDomain_ == null || other.CompetitorDomain != "") {
          CompetitorDomain = other.CompetitorDomain;
        }
      }
      if (other.cpcBidCeilingMicros_ != null) {
        if (cpcBidCeilingMicros_ == null || other.CpcBidCeilingMicros != 0L) {
          CpcBidCeilingMicros = other.CpcBidCeilingMicros;
        }
      }
      if (other.onlyRaiseCpcBids_ != null) {
        if (onlyRaiseCpcBids_ == null || other.OnlyRaiseCpcBids != false) {
          OnlyRaiseCpcBids = other.OnlyRaiseCpcBids;
        }
      }
      if (other.raiseCpcBidWhenQualityScoreIsLow_ != null) {
        if (raiseCpcBidWhenQualityScoreIsLow_ == null || other.RaiseCpcBidWhenQualityScoreIsLow != false) {
          RaiseCpcBidWhenQualityScoreIsLow = other.RaiseCpcBidWhenQualityScoreIsLow;
        }
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            int? value = _single_targetOutrankShareMicros_codec.Read(input);
            if (targetOutrankShareMicros_ == null || value != 0) {
              TargetOutrankShareMicros = value;
            }
            break;
          }
          case 18: {
            string value = _single_competitorDomain_codec.Read(input);
            if (competitorDomain_ == null || value != "") {
              CompetitorDomain = value;
            }
            break;
          }
          case 26: {
            long? value = _single_cpcBidCeilingMicros_codec.Read(input);
            if (cpcBidCeilingMicros_ == null || value != 0L) {
              CpcBidCeilingMicros = value;
            }
            break;
          }
          case 34: {
            bool? value = _single_onlyRaiseCpcBids_codec.Read(input);
            if (onlyRaiseCpcBids_ == null || value != false) {
              OnlyRaiseCpcBids = value;
            }
            break;
          }
          case 42: {
            bool? value = _single_raiseCpcBidWhenQualityScoreIsLow_codec.Read(input);
            if (raiseCpcBidWhenQualityScoreIsLow_ == null || value != false) {
              RaiseCpcBidWhenQualityScoreIsLow = value;
            }
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// An automated bidding strategy that helps you maximize revenue while
  /// averaging a specific target return on ad spend (ROAS).
  /// </summary>
  public sealed partial class TargetRoas : pb::IMessage<TargetRoas> {
    private static readonly pb::MessageParser<TargetRoas> _parser = new pb::MessageParser<TargetRoas>(() => new TargetRoas());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TargetRoas> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Ads.GoogleAds.V1.Common.BiddingReflection.Descriptor.MessageTypes[12]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TargetRoas() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TargetRoas(TargetRoas other) : this() {
      TargetRoas_ = other.TargetRoas_;
      CpcBidCeilingMicros = other.CpcBidCeilingMicros;
      CpcBidFloorMicros = other.CpcBidFloorMicros;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TargetRoas Clone() {
      return new TargetRoas(this);
    }

    /// <summary>Field number for the "target_roas" field.</summary>
    public const int TargetRoas_FieldNumber = 1;
    private static readonly pb::FieldCodec<double?> _single_targetRoas_codec = pb::FieldCodec.ForStructWrapper<double>(10);
    private double? targetRoas_;
    /// <summary>
    /// Required. The desired revenue (based on conversion data) per unit of spend.
    /// Value must be between 0.01 and 1000.0, inclusive.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double? TargetRoas_ {
      get { return targetRoas_; }
      set {
        targetRoas_ = value;
      }
    }


    /// <summary>Field number for the "cpc_bid_ceiling_micros" field.</summary>
    public const int CpcBidCeilingMicrosFieldNumber = 2;
    private static readonly pb::FieldCodec<long?> _single_cpcBidCeilingMicros_codec = pb::FieldCodec.ForStructWrapper<long>(18);
    private long? cpcBidCeilingMicros_;
    /// <summary>
    /// Maximum bid limit that can be set by the bid strategy.
    /// The limit applies to all keywords managed by the strategy.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long? CpcBidCeilingMicros {
      get { return cpcBidCeilingMicros_; }
      set {
        cpcBidCeilingMicros_ = value;
      }
    }


    /// <summary>Field number for the "cpc_bid_floor_micros" field.</summary>
    public const int CpcBidFloorMicrosFieldNumber = 3;
    private static readonly pb::FieldCodec<long?> _single_cpcBidFloorMicros_codec = pb::FieldCodec.ForStructWrapper<long>(26);
    private long? cpcBidFloorMicros_;
    /// <summary>
    /// Minimum bid limit that can be set by the bid strategy.
    /// The limit applies to all keywords managed by the strategy.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long? CpcBidFloorMicros {
      get { return cpcBidFloorMicros_; }
      set {
        cpcBidFloorMicros_ = value;
      }
    }


    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TargetRoas);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TargetRoas other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!pbc::ProtobufEqualityComparers.BitwiseNullableDoubleEqualityComparer.Equals(TargetRoas_, other.TargetRoas_)) return false;
      if (CpcBidCeilingMicros != other.CpcBidCeilingMicros) return false;
      if (CpcBidFloorMicros != other.CpcBidFloorMicros) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (targetRoas_ != null) hash ^= pbc::ProtobufEqualityComparers.BitwiseNullableDoubleEqualityComparer.GetHashCode(TargetRoas_);
      if (cpcBidCeilingMicros_ != null) hash ^= CpcBidCeilingMicros.GetHashCode();
      if (cpcBidFloorMicros_ != null) hash ^= CpcBidFloorMicros.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (targetRoas_ != null) {
        _single_targetRoas_codec.WriteTagAndValue(output, TargetRoas_);
      }
      if (cpcBidCeilingMicros_ != null) {
        _single_cpcBidCeilingMicros_codec.WriteTagAndValue(output, CpcBidCeilingMicros);
      }
      if (cpcBidFloorMicros_ != null) {
        _single_cpcBidFloorMicros_codec.WriteTagAndValue(output, CpcBidFloorMicros);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (targetRoas_ != null) {
        size += _single_targetRoas_codec.CalculateSizeWithTag(TargetRoas_);
      }
      if (cpcBidCeilingMicros_ != null) {
        size += _single_cpcBidCeilingMicros_codec.CalculateSizeWithTag(CpcBidCeilingMicros);
      }
      if (cpcBidFloorMicros_ != null) {
        size += _single_cpcBidFloorMicros_codec.CalculateSizeWithTag(CpcBidFloorMicros);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TargetRoas other) {
      if (other == null) {
        return;
      }
      if (other.targetRoas_ != null) {
        if (targetRoas_ == null || other.TargetRoas_ != 0D) {
          TargetRoas_ = other.TargetRoas_;
        }
      }
      if (other.cpcBidCeilingMicros_ != null) {
        if (cpcBidCeilingMicros_ == null || other.CpcBidCeilingMicros != 0L) {
          CpcBidCeilingMicros = other.CpcBidCeilingMicros;
        }
      }
      if (other.cpcBidFloorMicros_ != null) {
        if (cpcBidFloorMicros_ == null || other.CpcBidFloorMicros != 0L) {
          CpcBidFloorMicros = other.CpcBidFloorMicros;
        }
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            double? value = _single_targetRoas_codec.Read(input);
            if (targetRoas_ == null || value != 0D) {
              TargetRoas_ = value;
            }
            break;
          }
          case 18: {
            long? value = _single_cpcBidCeilingMicros_codec.Read(input);
            if (cpcBidCeilingMicros_ == null || value != 0L) {
              CpcBidCeilingMicros = value;
            }
            break;
          }
          case 26: {
            long? value = _single_cpcBidFloorMicros_codec.Read(input);
            if (cpcBidFloorMicros_ == null || value != 0L) {
              CpcBidFloorMicros = value;
            }
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// An automated bid strategy that sets your bids to help get as many clicks
  /// as possible within your budget.
  /// </summary>
  public sealed partial class TargetSpend : pb::IMessage<TargetSpend> {
    private static readonly pb::MessageParser<TargetSpend> _parser = new pb::MessageParser<TargetSpend>(() => new TargetSpend());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TargetSpend> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Ads.GoogleAds.V1.Common.BiddingReflection.Descriptor.MessageTypes[13]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TargetSpend() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TargetSpend(TargetSpend other) : this() {
      TargetSpendMicros = other.TargetSpendMicros;
      CpcBidCeilingMicros = other.CpcBidCeilingMicros;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TargetSpend Clone() {
      return new TargetSpend(this);
    }

    /// <summary>Field number for the "target_spend_micros" field.</summary>
    public const int TargetSpendMicrosFieldNumber = 1;
    private static readonly pb::FieldCodec<long?> _single_targetSpendMicros_codec = pb::FieldCodec.ForStructWrapper<long>(10);
    private long? targetSpendMicros_;
    /// <summary>
    /// The spend target under which to maximize clicks.
    /// A TargetSpend bidder will attempt to spend the smaller of this value
    /// or the natural throttling spend amount.
    /// If not specified, the budget is used as the spend target.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long? TargetSpendMicros {
      get { return targetSpendMicros_; }
      set {
        targetSpendMicros_ = value;
      }
    }


    /// <summary>Field number for the "cpc_bid_ceiling_micros" field.</summary>
    public const int CpcBidCeilingMicrosFieldNumber = 2;
    private static readonly pb::FieldCodec<long?> _single_cpcBidCeilingMicros_codec = pb::FieldCodec.ForStructWrapper<long>(18);
    private long? cpcBidCeilingMicros_;
    /// <summary>
    /// Maximum bid limit that can be set by the bid strategy.
    /// The limit applies to all keywords managed by the strategy.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long? CpcBidCeilingMicros {
      get { return cpcBidCeilingMicros_; }
      set {
        cpcBidCeilingMicros_ = value;
      }
    }


    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TargetSpend);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TargetSpend other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (TargetSpendMicros != other.TargetSpendMicros) return false;
      if (CpcBidCeilingMicros != other.CpcBidCeilingMicros) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (targetSpendMicros_ != null) hash ^= TargetSpendMicros.GetHashCode();
      if (cpcBidCeilingMicros_ != null) hash ^= CpcBidCeilingMicros.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (targetSpendMicros_ != null) {
        _single_targetSpendMicros_codec.WriteTagAndValue(output, TargetSpendMicros);
      }
      if (cpcBidCeilingMicros_ != null) {
        _single_cpcBidCeilingMicros_codec.WriteTagAndValue(output, CpcBidCeilingMicros);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (targetSpendMicros_ != null) {
        size += _single_targetSpendMicros_codec.CalculateSizeWithTag(TargetSpendMicros);
      }
      if (cpcBidCeilingMicros_ != null) {
        size += _single_cpcBidCeilingMicros_codec.CalculateSizeWithTag(CpcBidCeilingMicros);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TargetSpend other) {
      if (other == null) {
        return;
      }
      if (other.targetSpendMicros_ != null) {
        if (targetSpendMicros_ == null || other.TargetSpendMicros != 0L) {
          TargetSpendMicros = other.TargetSpendMicros;
        }
      }
      if (other.cpcBidCeilingMicros_ != null) {
        if (cpcBidCeilingMicros_ == null || other.CpcBidCeilingMicros != 0L) {
          CpcBidCeilingMicros = other.CpcBidCeilingMicros;
        }
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            long? value = _single_targetSpendMicros_codec.Read(input);
            if (targetSpendMicros_ == null || value != 0L) {
              TargetSpendMicros = value;
            }
            break;
          }
          case 18: {
            long? value = _single_cpcBidCeilingMicros_codec.Read(input);
            if (cpcBidCeilingMicros_ == null || value != 0L) {
              CpcBidCeilingMicros = value;
            }
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// A bidding strategy where bids are a fraction of the advertised price for
  /// some good or service.
  /// </summary>
  public sealed partial class PercentCpc : pb::IMessage<PercentCpc> {
    private static readonly pb::MessageParser<PercentCpc> _parser = new pb::MessageParser<PercentCpc>(() => new PercentCpc());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PercentCpc> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Ads.GoogleAds.V1.Common.BiddingReflection.Descriptor.MessageTypes[14]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PercentCpc() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PercentCpc(PercentCpc other) : this() {
      CpcBidCeilingMicros = other.CpcBidCeilingMicros;
      EnhancedCpcEnabled = other.EnhancedCpcEnabled;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PercentCpc Clone() {
      return new PercentCpc(this);
    }

    /// <summary>Field number for the "cpc_bid_ceiling_micros" field.</summary>
    public const int CpcBidCeilingMicrosFieldNumber = 1;
    private static readonly pb::FieldCodec<long?> _single_cpcBidCeilingMicros_codec = pb::FieldCodec.ForStructWrapper<long>(10);
    private long? cpcBidCeilingMicros_;
    /// <summary>
    /// Maximum bid limit that can be set by the bid strategy. This is
    /// an optional field entered by the advertiser and specified in local micros.
    /// Note: A zero value is interpreted in the same way as having bid_ceiling
    /// undefined.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long? CpcBidCeilingMicros {
      get { return cpcBidCeilingMicros_; }
      set {
        cpcBidCeilingMicros_ = value;
      }
    }


    /// <summary>Field number for the "enhanced_cpc_enabled" field.</summary>
    public const int EnhancedCpcEnabledFieldNumber = 2;
    private static readonly pb::FieldCodec<bool?> _single_enhancedCpcEnabled_codec = pb::FieldCodec.ForStructWrapper<bool>(18);
    private bool? enhancedCpcEnabled_;
    /// <summary>
    /// Adjusts the bid for each auction upward or downward, depending on the
    /// likelihood of a conversion. Individual bids may exceed
    /// cpc_bid_ceiling_micros, but the average bid amount for a campaign should
    /// not.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool? EnhancedCpcEnabled {
      get { return enhancedCpcEnabled_; }
      set {
        enhancedCpcEnabled_ = value;
      }
    }


    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PercentCpc);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PercentCpc other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (CpcBidCeilingMicros != other.CpcBidCeilingMicros) return false;
      if (EnhancedCpcEnabled != other.EnhancedCpcEnabled) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (cpcBidCeilingMicros_ != null) hash ^= CpcBidCeilingMicros.GetHashCode();
      if (enhancedCpcEnabled_ != null) hash ^= EnhancedCpcEnabled.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (cpcBidCeilingMicros_ != null) {
        _single_cpcBidCeilingMicros_codec.WriteTagAndValue(output, CpcBidCeilingMicros);
      }
      if (enhancedCpcEnabled_ != null) {
        _single_enhancedCpcEnabled_codec.WriteTagAndValue(output, EnhancedCpcEnabled);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (cpcBidCeilingMicros_ != null) {
        size += _single_cpcBidCeilingMicros_codec.CalculateSizeWithTag(CpcBidCeilingMicros);
      }
      if (enhancedCpcEnabled_ != null) {
        size += _single_enhancedCpcEnabled_codec.CalculateSizeWithTag(EnhancedCpcEnabled);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PercentCpc other) {
      if (other == null) {
        return;
      }
      if (other.cpcBidCeilingMicros_ != null) {
        if (cpcBidCeilingMicros_ == null || other.CpcBidCeilingMicros != 0L) {
          CpcBidCeilingMicros = other.CpcBidCeilingMicros;
        }
      }
      if (other.enhancedCpcEnabled_ != null) {
        if (enhancedCpcEnabled_ == null || other.EnhancedCpcEnabled != false) {
          EnhancedCpcEnabled = other.EnhancedCpcEnabled;
        }
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            long? value = _single_cpcBidCeilingMicros_codec.Read(input);
            if (cpcBidCeilingMicros_ == null || value != 0L) {
              CpcBidCeilingMicros = value;
            }
            break;
          }
          case 18: {
            bool? value = _single_enhancedCpcEnabled_codec.Read(input);
            if (enhancedCpcEnabled_ == null || value != false) {
              EnhancedCpcEnabled = value;
            }
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
