// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: google/ads/googleads/v1/resources/campaign.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Google.Ads.GoogleAds.V1.Resources {

  /// <summary>Holder for reflection information generated from google/ads/googleads/v1/resources/campaign.proto</summary>
  public static partial class CampaignReflection {

    #region Descriptor
    /// <summary>File descriptor for google/ads/googleads/v1/resources/campaign.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static CampaignReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CjBnb29nbGUvYWRzL2dvb2dsZWFkcy92MS9yZXNvdXJjZXMvY2FtcGFpZ24u",
            "cHJvdG8SIWdvb2dsZS5hZHMuZ29vZ2xlYWRzLnYxLnJlc291cmNlcxosZ29v",
            "Z2xlL2Fkcy9nb29nbGVhZHMvdjEvY29tbW9uL2JpZGRpbmcucHJvdG8aNWdv",
            "b2dsZS9hZHMvZ29vZ2xlYWRzL3YxL2NvbW1vbi9jdXN0b21fcGFyYW1ldGVy",
            "LnByb3RvGjJnb29nbGUvYWRzL2dvb2dsZWFkcy92MS9jb21tb24vZnJlcXVl",
            "bmN5X2NhcC5wcm90bxo+Z29vZ2xlL2Fkcy9nb29nbGVhZHMvdjEvY29tbW9u",
            "L3JlYWxfdGltZV9iaWRkaW5nX3NldHRpbmcucHJvdG8aNmdvb2dsZS9hZHMv",
            "Z29vZ2xlYWRzL3YxL2NvbW1vbi90YXJnZXRpbmdfc2V0dGluZy5wcm90bxpC",
            "Z29vZ2xlL2Fkcy9nb29nbGVhZHMvdjEvZW51bXMvYWRfc2VydmluZ19vcHRp",
            "bWl6YXRpb25fc3RhdHVzLnByb3RvGkBnb29nbGUvYWRzL2dvb2dsZWFkcy92",
            "MS9lbnVtcy9hZHZlcnRpc2luZ19jaGFubmVsX3N1Yl90eXBlLnByb3RvGjxn",
            "b29nbGUvYWRzL2dvb2dsZWFkcy92MS9lbnVtcy9hZHZlcnRpc2luZ19jaGFu",
            "bmVsX3R5cGUucHJvdG8aOmdvb2dsZS9hZHMvZ29vZ2xlYWRzL3YxL2VudW1z",
            "L2FwcF9jYW1wYWlnbl9hcHBfc3RvcmUucHJvdG8aS2dvb2dsZS9hZHMvZ29v",
            "Z2xlYWRzL3YxL2VudW1zL2FwcF9jYW1wYWlnbl9iaWRkaW5nX3N0cmF0ZWd5",
            "X2dvYWxfdHlwZS5wcm90bxo5Z29vZ2xlL2Fkcy9nb29nbGVhZHMvdjEvZW51",
            "bXMvYmlkZGluZ19zdHJhdGVneV90eXBlLnByb3RvGjxnb29nbGUvYWRzL2dv",
            "b2dsZWFkcy92MS9lbnVtcy9icmFuZF9zYWZldHlfc3VpdGFiaWxpdHkucHJv",
            "dG8aPGdvb2dsZS9hZHMvZ29vZ2xlYWRzL3YxL2VudW1zL2NhbXBhaWduX2V4",
            "cGVyaW1lbnRfdHlwZS5wcm90bxo7Z29vZ2xlL2Fkcy9nb29nbGVhZHMvdjEv",
            "ZW51bXMvY2FtcGFpZ25fc2VydmluZ19zdGF0dXMucHJvdG8aM2dvb2dsZS9h",
            "ZHMvZ29vZ2xlYWRzL3YxL2VudW1zL2NhbXBhaWduX3N0YXR1cy5wcm90bxo8",
            "Z29vZ2xlL2Fkcy9nb29nbGVhZHMvdjEvZW51bXMvbmVnYXRpdmVfZ2VvX3Rh",
            "cmdldF90eXBlLnByb3RvGjBnb29nbGUvYWRzL2dvb2dsZWFkcy92MS9lbnVt",
            "cy9wYXltZW50X21vZGUucHJvdG8aPGdvb2dsZS9hZHMvZ29vZ2xlYWRzL3Yx",
            "L2VudW1zL3Bvc2l0aXZlX2dlb190YXJnZXRfdHlwZS5wcm90bxpCZ29vZ2xl",
            "L2Fkcy9nb29nbGVhZHMvdjEvZW51bXMvdmFuaXR5X3BoYXJtYV9kaXNwbGF5",
            "X3VybF9tb2RlLnByb3RvGjZnb29nbGUvYWRzL2dvb2dsZWFkcy92MS9lbnVt",
            "cy92YW5pdHlfcGhhcm1hX3RleHQucHJvdG8aH2dvb2dsZS9hcGkvZmllbGRf",
            "YmVoYXZpb3IucHJvdG8aGWdvb2dsZS9hcGkvcmVzb3VyY2UucHJvdG8aHmdv",
            "b2dsZS9wcm90b2J1Zi93cmFwcGVycy5wcm90bxocZ29vZ2xlL2FwaS9hbm5v",
            "dGF0aW9ucy5wcm90byKuLQoIQ2FtcGFpZ24SQAoNcmVzb3VyY2VfbmFtZRgB",
            "IAEoCUIp4EEF+kEjCiFnb29nbGVhZHMuZ29vZ2xlYXBpcy5jb20vQ2FtcGFp",
            "Z24SLAoCaWQYAyABKAsyGy5nb29nbGUucHJvdG9idWYuSW50NjRWYWx1ZUID",
            "4EEDEioKBG5hbWUYBCABKAsyHC5nb29nbGUucHJvdG9idWYuU3RyaW5nVmFs",
            "dWUSUAoGc3RhdHVzGAUgASgOMkAuZ29vZ2xlLmFkcy5nb29nbGVhZHMudjEu",
            "ZW51bXMuQ2FtcGFpZ25TdGF0dXNFbnVtLkNhbXBhaWduU3RhdHVzEmsKDnNl",
            "cnZpbmdfc3RhdHVzGBUgASgOMk4uZ29vZ2xlLmFkcy5nb29nbGVhZHMudjEu",
            "ZW51bXMuQ2FtcGFpZ25TZXJ2aW5nU3RhdHVzRW51bS5DYW1wYWlnblNlcnZp",
            "bmdTdGF0dXNCA+BBAxKCAQoeYWRfc2VydmluZ19vcHRpbWl6YXRpb25fc3Rh",
            "dHVzGAggASgOMlouZ29vZ2xlLmFkcy5nb29nbGVhZHMudjEuZW51bXMuQWRT",
            "ZXJ2aW5nT3B0aW1pemF0aW9uU3RhdHVzRW51bS5BZFNlcnZpbmdPcHRpbWl6",
            "YXRpb25TdGF0dXMSdwoYYWR2ZXJ0aXNpbmdfY2hhbm5lbF90eXBlGAkgASgO",
            "MlAuZ29vZ2xlLmFkcy5nb29nbGVhZHMudjEuZW51bXMuQWR2ZXJ0aXNpbmdD",
            "aGFubmVsVHlwZUVudW0uQWR2ZXJ0aXNpbmdDaGFubmVsVHlwZUID4EEFEoEB",
            "ChxhZHZlcnRpc2luZ19jaGFubmVsX3N1Yl90eXBlGAogASgOMlYuZ29vZ2xl",
            "LmFkcy5nb29nbGVhZHMudjEuZW51bXMuQWR2ZXJ0aXNpbmdDaGFubmVsU3Vi",
            "VHlwZUVudW0uQWR2ZXJ0aXNpbmdDaGFubmVsU3ViVHlwZUID4EEFEjsKFXRy",
            "YWNraW5nX3VybF90ZW1wbGF0ZRgLIAEoCzIcLmdvb2dsZS5wcm90b2J1Zi5T",
            "dHJpbmdWYWx1ZRJOChV1cmxfY3VzdG9tX3BhcmFtZXRlcnMYDCADKAsyLy5n",
            "b29nbGUuYWRzLmdvb2dsZWFkcy52MS5jb21tb24uQ3VzdG9tUGFyYW1ldGVy",
            "ElkKGXJlYWxfdGltZV9iaWRkaW5nX3NldHRpbmcYJyABKAsyNi5nb29nbGUu",
            "YWRzLmdvb2dsZWFkcy52MS5jb21tb24uUmVhbFRpbWVCaWRkaW5nU2V0dGlu",
            "ZxJVChBuZXR3b3JrX3NldHRpbmdzGA4gASgLMjsuZ29vZ2xlLmFkcy5nb29n",
            "bGVhZHMudjEucmVzb3VyY2VzLkNhbXBhaWduLk5ldHdvcmtTZXR0aW5ncxJY",
            "Cg1ob3RlbF9zZXR0aW5nGCAgASgLMjwuZ29vZ2xlLmFkcy5nb29nbGVhZHMu",
            "djEucmVzb3VyY2VzLkNhbXBhaWduLkhvdGVsU2V0dGluZ0luZm9CA+BBBRJn",
            "ChpkeW5hbWljX3NlYXJjaF9hZHNfc2V0dGluZxghIAEoCzJDLmdvb2dsZS5h",
            "ZHMuZ29vZ2xlYWRzLnYxLnJlc291cmNlcy5DYW1wYWlnbi5EeW5hbWljU2Vh",
            "cmNoQWRzU2V0dGluZxJVChBzaG9wcGluZ19zZXR0aW5nGCQgASgLMjsuZ29v",
            "Z2xlLmFkcy5nb29nbGVhZHMudjEucmVzb3VyY2VzLkNhbXBhaWduLlNob3Bw",
            "aW5nU2V0dGluZxJLChF0YXJnZXRpbmdfc2V0dGluZxgrIAEoCzIwLmdvb2ds",
            "ZS5hZHMuZ29vZ2xlYWRzLnYxLmNvbW1vbi5UYXJnZXRpbmdTZXR0aW5nEmEK",
            "F2dlb190YXJnZXRfdHlwZV9zZXR0aW5nGC8gASgLMkAuZ29vZ2xlLmFkcy5n",
            "b29nbGVhZHMudjEucmVzb3VyY2VzLkNhbXBhaWduLkdlb1RhcmdldFR5cGVT",
            "ZXR0aW5nElwKFGFwcF9jYW1wYWlnbl9zZXR0aW5nGDMgASgLMj4uZ29vZ2xl",
            "LmFkcy5nb29nbGVhZHMudjEucmVzb3VyY2VzLkNhbXBhaWduLkFwcENhbXBh",
            "aWduU2V0dGluZxJcCgZsYWJlbHMYNSADKAsyHC5nb29nbGUucHJvdG9idWYu",
            "U3RyaW5nVmFsdWVCLuBBA/pBKAomZ29vZ2xlYWRzLmdvb2dsZWFwaXMuY29t",
            "L0NhbXBhaWduTGFiZWwSbgoPZXhwZXJpbWVudF90eXBlGBEgASgOMlAuZ29v",
            "Z2xlLmFkcy5nb29nbGVhZHMudjEuZW51bXMuQ2FtcGFpZ25FeHBlcmltZW50",
            "VHlwZUVudW0uQ2FtcGFpZ25FeHBlcmltZW50VHlwZUID4EEDEl4KDWJhc2Vf",
            "Y2FtcGFpZ24YHCABKAsyHC5nb29nbGUucHJvdG9idWYuU3RyaW5nVmFsdWVC",
            "KeBBA/pBIwohZ29vZ2xlYWRzLmdvb2dsZWFwaXMuY29tL0NhbXBhaWduEmMK",
            "D2NhbXBhaWduX2J1ZGdldBgGIAEoCzIcLmdvb2dsZS5wcm90b2J1Zi5TdHJp",
            "bmdWYWx1ZUIs+kEpCidnb29nbGVhZHMuZ29vZ2xlYXBpcy5jb20vQ2FtcGFp",
            "Z25CdWRnZXQSbgoVYmlkZGluZ19zdHJhdGVneV90eXBlGBYgASgOMkouZ29v",
            "Z2xlLmFkcy5nb29nbGVhZHMudjEuZW51bXMuQmlkZGluZ1N0cmF0ZWd5VHlw",
            "ZUVudW0uQmlkZGluZ1N0cmF0ZWd5VHlwZUID4EEDEjAKCnN0YXJ0X2RhdGUY",
            "EyABKAsyHC5nb29nbGUucHJvdG9idWYuU3RyaW5nVmFsdWUSLgoIZW5kX2Rh",
            "dGUYFCABKAsyHC5nb29nbGUucHJvdG9idWYuU3RyaW5nVmFsdWUSNgoQZmlu",
            "YWxfdXJsX3N1ZmZpeBgmIAEoCzIcLmdvb2dsZS5wcm90b2J1Zi5TdHJpbmdW",
            "YWx1ZRJJCg5mcmVxdWVuY3lfY2FwcxgoIAMoCzIxLmdvb2dsZS5hZHMuZ29v",
            "Z2xlYWRzLnYxLmNvbW1vbi5GcmVxdWVuY3lDYXBFbnRyeRJ9Ch52aWRlb19i",
            "cmFuZF9zYWZldHlfc3VpdGFiaWxpdHkYKiABKA4yUC5nb29nbGUuYWRzLmdv",
            "b2dsZWFkcy52MS5lbnVtcy5CcmFuZFNhZmV0eVN1aXRhYmlsaXR5RW51bS5C",
            "cmFuZFNhZmV0eVN1aXRhYmlsaXR5QgPgQQMSTwoNdmFuaXR5X3BoYXJtYRgs",
            "IAEoCzI4Lmdvb2dsZS5hZHMuZ29vZ2xlYWRzLnYxLnJlc291cmNlcy5DYW1w",
            "YWlnbi5WYW5pdHlQaGFybWESYQoWc2VsZWN0aXZlX29wdGltaXphdGlvbhgt",
            "IAEoCzJBLmdvb2dsZS5hZHMuZ29vZ2xlYWRzLnYxLnJlc291cmNlcy5DYW1w",
            "YWlnbi5TZWxlY3RpdmVPcHRpbWl6YXRpb24SWgoQdHJhY2tpbmdfc2V0dGlu",
            "ZxguIAEoCzI7Lmdvb2dsZS5hZHMuZ29vZ2xlYWRzLnYxLnJlc291cmNlcy5D",
            "YW1wYWlnbi5UcmFja2luZ1NldHRpbmdCA+BBAxJQCgxwYXltZW50X21vZGUY",
            "NCABKA4yOi5nb29nbGUuYWRzLmdvb2dsZWFkcy52MS5lbnVtcy5QYXltZW50",
            "TW9kZUVudW0uUGF5bWVudE1vZGUSZwoQYmlkZGluZ19zdHJhdGVneRgXIAEo",
            "CzIcLmdvb2dsZS5wcm90b2J1Zi5TdHJpbmdWYWx1ZUIt+kEqCihnb29nbGVh",
            "ZHMuZ29vZ2xlYXBpcy5jb20vQmlkZGluZ1N0cmF0ZWd5SAASQAoKY29tbWlz",
            "c2lvbhgxIAEoCzIqLmdvb2dsZS5hZHMuZ29vZ2xlYWRzLnYxLmNvbW1vbi5D",
            "b21taXNzaW9uSAASPwoKbWFudWFsX2NwYxgYIAEoCzIpLmdvb2dsZS5hZHMu",
            "Z29vZ2xlYWRzLnYxLmNvbW1vbi5NYW51YWxDcGNIABI/CgptYW51YWxfY3Bt",
            "GBkgASgLMikuZ29vZ2xlLmFkcy5nb29nbGVhZHMudjEuY29tbW9uLk1hbnVh",
            "bENwbUgAEkQKCm1hbnVhbF9jcHYYJSABKAsyKS5nb29nbGUuYWRzLmdvb2ds",
            "ZWFkcy52MS5jb21tb24uTWFudWFsQ3B2QgPgQQNIABJTChRtYXhpbWl6ZV9j",
            "b252ZXJzaW9ucxgeIAEoCzIzLmdvb2dsZS5hZHMuZ29vZ2xlYWRzLnYxLmNv",
            "bW1vbi5NYXhpbWl6ZUNvbnZlcnNpb25zSAASXAoZbWF4aW1pemVfY29udmVy",
            "c2lvbl92YWx1ZRgfIAEoCzI3Lmdvb2dsZS5hZHMuZ29vZ2xlYWRzLnYxLmNv",
            "bW1vbi5NYXhpbWl6ZUNvbnZlcnNpb25WYWx1ZUgAEj8KCnRhcmdldF9jcGEY",
            "GiABKAsyKS5nb29nbGUuYWRzLmdvb2dsZWFkcy52MS5jb21tb24uVGFyZ2V0",
            "Q3BhSAASWAoXdGFyZ2V0X2ltcHJlc3Npb25fc2hhcmUYMCABKAsyNS5nb29n",
            "bGUuYWRzLmdvb2dsZWFkcy52MS5jb21tb24uVGFyZ2V0SW1wcmVzc2lvblNo",
            "YXJlSAASQQoLdGFyZ2V0X3JvYXMYHSABKAsyKi5nb29nbGUuYWRzLmdvb2ds",
            "ZWFkcy52MS5jb21tb24uVGFyZ2V0Um9hc0gAEkMKDHRhcmdldF9zcGVuZBgb",
            "IAEoCzIrLmdvb2dsZS5hZHMuZ29vZ2xlYWRzLnYxLmNvbW1vbi5UYXJnZXRT",
            "cGVuZEgAEkEKC3BlcmNlbnRfY3BjGCIgASgLMiouZ29vZ2xlLmFkcy5nb29n",
            "bGVhZHMudjEuY29tbW9uLlBlcmNlbnRDcGNIABI/Cgp0YXJnZXRfY3BtGCkg",
            "ASgLMikuZ29vZ2xlLmFkcy5nb29nbGVhZHMudjEuY29tbW9uLlRhcmdldENw",
            "bUgAGoUCCg9OZXR3b3JrU2V0dGluZ3MSOAoUdGFyZ2V0X2dvb2dsZV9zZWFy",
            "Y2gYASABKAsyGi5nb29nbGUucHJvdG9idWYuQm9vbFZhbHVlEjkKFXRhcmdl",
            "dF9zZWFyY2hfbmV0d29yaxgCIAEoCzIaLmdvb2dsZS5wcm90b2J1Zi5Cb29s",
            "VmFsdWUSOgoWdGFyZ2V0X2NvbnRlbnRfbmV0d29yaxgDIAEoCzIaLmdvb2ds",
            "ZS5wcm90b2J1Zi5Cb29sVmFsdWUSQQoddGFyZ2V0X3BhcnRuZXJfc2VhcmNo",
            "X25ldHdvcmsYBCABKAsyGi5nb29nbGUucHJvdG9idWYuQm9vbFZhbHVlGk0K",
            "EEhvdGVsU2V0dGluZ0luZm8SOQoPaG90ZWxfY2VudGVyX2lkGAEgASgLMhsu",
            "Z29vZ2xlLnByb3RvYnVmLkludDY0VmFsdWVCA+BBBRqRAgoXRHluYW1pY1Nl",
            "YXJjaEFkc1NldHRpbmcSMQoLZG9tYWluX25hbWUYASABKAsyHC5nb29nbGUu",
            "cHJvdG9idWYuU3RyaW5nVmFsdWUSMwoNbGFuZ3VhZ2VfY29kZRgCIAEoCzIc",
            "Lmdvb2dsZS5wcm90b2J1Zi5TdHJpbmdWYWx1ZRI6ChZ1c2Vfc3VwcGxpZWRf",
            "dXJsc19vbmx5GAMgASgLMhouZ29vZ2xlLnByb3RvYnVmLkJvb2xWYWx1ZRJS",
            "CgVmZWVkcxgFIAMoCzIcLmdvb2dsZS5wcm90b2J1Zi5TdHJpbmdWYWx1ZUIl",
            "4EED+kEfCh1nb29nbGVhZHMuZ29vZ2xlYXBpcy5jb20vRmVlZBrsAQoPU2hv",
            "cHBpbmdTZXR0aW5nEjUKC21lcmNoYW50X2lkGAEgASgLMhsuZ29vZ2xlLnBy",
            "b3RvYnVmLkludDY0VmFsdWVCA+BBBRI4Cg1zYWxlc19jb3VudHJ5GAIgASgL",
            "MhwuZ29vZ2xlLnByb3RvYnVmLlN0cmluZ1ZhbHVlQgPgQQUSNgoRY2FtcGFp",
            "Z25fcHJpb3JpdHkYAyABKAsyGy5nb29nbGUucHJvdG9idWYuSW50MzJWYWx1",
            "ZRIwCgxlbmFibGVfbG9jYWwYBCABKAsyGi5nb29nbGUucHJvdG9idWYuQm9v",
            "bFZhbHVlGkoKD1RyYWNraW5nU2V0dGluZxI3Cgx0cmFja2luZ191cmwYASAB",
            "KAsyHC5nb29nbGUucHJvdG9idWYuU3RyaW5nVmFsdWVCA+BBAxqBAQoVU2Vs",
            "ZWN0aXZlT3B0aW1pemF0aW9uEmgKEmNvbnZlcnNpb25fYWN0aW9ucxgBIAMo",
            "CzIcLmdvb2dsZS5wcm90b2J1Zi5TdHJpbmdWYWx1ZUIu+kErCilnb29nbGVh",
            "ZHMuZ29vZ2xlYXBpcy5jb20vQ29udmVyc2lvbkFjdGlvbhr6AQoUR2VvVGFy",
            "Z2V0VHlwZVNldHRpbmcScAoYcG9zaXRpdmVfZ2VvX3RhcmdldF90eXBlGAEg",
            "ASgOMk4uZ29vZ2xlLmFkcy5nb29nbGVhZHMudjEuZW51bXMuUG9zaXRpdmVH",
            "ZW9UYXJnZXRUeXBlRW51bS5Qb3NpdGl2ZUdlb1RhcmdldFR5cGUScAoYbmVn",
            "YXRpdmVfZ2VvX3RhcmdldF90eXBlGAIgASgOMk4uZ29vZ2xlLmFkcy5nb29n",
            "bGVhZHMudjEuZW51bXMuTmVnYXRpdmVHZW9UYXJnZXRUeXBlRW51bS5OZWdh",
            "dGl2ZUdlb1RhcmdldFR5cGUaugIKEkFwcENhbXBhaWduU2V0dGluZxKMAQoa",
            "YmlkZGluZ19zdHJhdGVneV9nb2FsX3R5cGUYASABKA4yaC5nb29nbGUuYWRz",
            "Lmdvb2dsZWFkcy52MS5lbnVtcy5BcHBDYW1wYWlnbkJpZGRpbmdTdHJhdGVn",
            "eUdvYWxUeXBlRW51bS5BcHBDYW1wYWlnbkJpZGRpbmdTdHJhdGVneUdvYWxU",
            "eXBlEjEKBmFwcF9pZBgCIAEoCzIcLmdvb2dsZS5wcm90b2J1Zi5TdHJpbmdW",
            "YWx1ZUID4EEFEmIKCWFwcF9zdG9yZRgDIAEoDjJKLmdvb2dsZS5hZHMuZ29v",
            "Z2xlYWRzLnYxLmVudW1zLkFwcENhbXBhaWduQXBwU3RvcmVFbnVtLkFwcENh",
            "bXBhaWduQXBwU3RvcmVCA+BBBRrzAQoMVmFuaXR5UGhhcm1hEoABCh52YW5p",
            "dHlfcGhhcm1hX2Rpc3BsYXlfdXJsX21vZGUYASABKA4yWC5nb29nbGUuYWRz",
            "Lmdvb2dsZWFkcy52MS5lbnVtcy5WYW5pdHlQaGFybWFEaXNwbGF5VXJsTW9k",
            "ZUVudW0uVmFuaXR5UGhhcm1hRGlzcGxheVVybE1vZGUSYAoSdmFuaXR5X3Bo",
            "YXJtYV90ZXh0GAIgASgOMkQuZ29vZ2xlLmFkcy5nb29nbGVhZHMudjEuZW51",
            "bXMuVmFuaXR5UGhhcm1hVGV4dEVudW0uVmFuaXR5UGhhcm1hVGV4dDpR6kFO",
            "CiFnb29nbGVhZHMuZ29vZ2xlYXBpcy5jb20vQ2FtcGFpZ24SKWN1c3RvbWVy",
            "cy97Y3VzdG9tZXJ9L2NhbXBhaWducy97Y2FtcGFpZ259QhsKGWNhbXBhaWdu",
            "X2JpZGRpbmdfc3RyYXRlZ3lC+gEKJWNvbS5nb29nbGUuYWRzLmdvb2dsZWFk",
            "cy52MS5yZXNvdXJjZXNCDUNhbXBhaWduUHJvdG9QAVpKZ29vZ2xlLmdvbGFu",
            "Zy5vcmcvZ2VucHJvdG8vZ29vZ2xlYXBpcy9hZHMvZ29vZ2xlYWRzL3YxL3Jl",
            "c291cmNlcztyZXNvdXJjZXOiAgNHQUGqAiFHb29nbGUuQWRzLkdvb2dsZUFk",
            "cy5WMS5SZXNvdXJjZXPKAiFHb29nbGVcQWRzXEdvb2dsZUFkc1xWMVxSZXNv",
            "dXJjZXPqAiVHb29nbGU6OkFkczo6R29vZ2xlQWRzOjpWMTo6UmVzb3VyY2Vz",
            "YgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Google.Ads.GoogleAds.V1.Common.BiddingReflection.Descriptor, global::Google.Ads.GoogleAds.V1.Common.CustomParameterReflection.Descriptor, global::Google.Ads.GoogleAds.V1.Common.FrequencyCapReflection.Descriptor, global::Google.Ads.GoogleAds.V1.Common.RealTimeBiddingSettingReflection.Descriptor, global::Google.Ads.GoogleAds.V1.Common.TargetingSettingReflection.Descriptor, global::Google.Ads.GoogleAds.V1.Enums.AdServingOptimizationStatusReflection.Descriptor, global::Google.Ads.GoogleAds.V1.Enums.AdvertisingChannelSubTypeReflection.Descriptor, global::Google.Ads.GoogleAds.V1.Enums.AdvertisingChannelTypeReflection.Descriptor, global::Google.Ads.GoogleAds.V1.Enums.AppCampaignAppStoreReflection.Descriptor, global::Google.Ads.GoogleAds.V1.Enums.AppCampaignBiddingStrategyGoalTypeReflection.Descriptor, global::Google.Ads.GoogleAds.V1.Enums.BiddingStrategyTypeReflection.Descriptor, global::Google.Ads.GoogleAds.V1.Enums.BrandSafetySuitabilityReflection.Descriptor, global::Google.Ads.GoogleAds.V1.Enums.CampaignExperimentTypeReflection.Descriptor, global::Google.Ads.GoogleAds.V1.Enums.CampaignServingStatusReflection.Descriptor, global::Google.Ads.GoogleAds.V1.Enums.CampaignStatusReflection.Descriptor, global::Google.Ads.GoogleAds.V1.Enums.NegativeGeoTargetTypeReflection.Descriptor, global::Google.Ads.GoogleAds.V1.Enums.PaymentModeReflection.Descriptor, global::Google.Ads.GoogleAds.V1.Enums.PositiveGeoTargetTypeReflection.Descriptor, global::Google.Ads.GoogleAds.V1.Enums.VanityPharmaDisplayUrlModeReflection.Descriptor, global::Google.Ads.GoogleAds.V1.Enums.VanityPharmaTextReflection.Descriptor, global::Google.Api.FieldBehaviorReflection.Descriptor, global::Google.Api.ResourceReflection.Descriptor, global::Google.Protobuf.WellKnownTypes.WrappersReflection.Descriptor, global::Google.Api.AnnotationsReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Ads.GoogleAds.V1.Resources.Campaign), global::Google.Ads.GoogleAds.V1.Resources.Campaign.Parser, new[]{ "ResourceName", "Id", "Name", "Status", "ServingStatus", "AdServingOptimizationStatus", "AdvertisingChannelType", "AdvertisingChannelSubType", "TrackingUrlTemplate", "UrlCustomParameters", "RealTimeBiddingSetting", "NetworkSettings", "HotelSetting", "DynamicSearchAdsSetting", "ShoppingSetting", "TargetingSetting", "GeoTargetTypeSetting", "AppCampaignSetting", "Labels", "ExperimentType", "BaseCampaign", "CampaignBudget", "BiddingStrategyType", "StartDate", "EndDate", "FinalUrlSuffix", "FrequencyCaps", "VideoBrandSafetySuitability", "VanityPharma", "SelectiveOptimization", "TrackingSetting", "PaymentMode", "BiddingStrategy", "Commission", "ManualCpc", "ManualCpm", "ManualCpv", "MaximizeConversions", "MaximizeConversionValue", "TargetCpa", "TargetImpressionShare", "TargetRoas", "TargetSpend", "PercentCpc", "TargetCpm" }, new[]{ "CampaignBiddingStrategy" }, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Google.Ads.GoogleAds.V1.Resources.Campaign.Types.NetworkSettings), global::Google.Ads.GoogleAds.V1.Resources.Campaign.Types.NetworkSettings.Parser, new[]{ "TargetGoogleSearch", "TargetSearchNetwork", "TargetContentNetwork", "TargetPartnerSearchNetwork" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Ads.GoogleAds.V1.Resources.Campaign.Types.HotelSettingInfo), global::Google.Ads.GoogleAds.V1.Resources.Campaign.Types.HotelSettingInfo.Parser, new[]{ "HotelCenterId" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Ads.GoogleAds.V1.Resources.Campaign.Types.DynamicSearchAdsSetting), global::Google.Ads.GoogleAds.V1.Resources.Campaign.Types.DynamicSearchAdsSetting.Parser, new[]{ "DomainName", "LanguageCode", "UseSuppliedUrlsOnly", "Feeds" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Ads.GoogleAds.V1.Resources.Campaign.Types.ShoppingSetting), global::Google.Ads.GoogleAds.V1.Resources.Campaign.Types.ShoppingSetting.Parser, new[]{ "MerchantId", "SalesCountry", "CampaignPriority", "EnableLocal" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Ads.GoogleAds.V1.Resources.Campaign.Types.TrackingSetting), global::Google.Ads.GoogleAds.V1.Resources.Campaign.Types.TrackingSetting.Parser, new[]{ "TrackingUrl" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Ads.GoogleAds.V1.Resources.Campaign.Types.SelectiveOptimization), global::Google.Ads.GoogleAds.V1.Resources.Campaign.Types.SelectiveOptimization.Parser, new[]{ "ConversionActions" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Ads.GoogleAds.V1.Resources.Campaign.Types.GeoTargetTypeSetting), global::Google.Ads.GoogleAds.V1.Resources.Campaign.Types.GeoTargetTypeSetting.Parser, new[]{ "PositiveGeoTargetType", "NegativeGeoTargetType" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Ads.GoogleAds.V1.Resources.Campaign.Types.AppCampaignSetting), global::Google.Ads.GoogleAds.V1.Resources.Campaign.Types.AppCampaignSetting.Parser, new[]{ "BiddingStrategyGoalType", "AppId", "AppStore" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Ads.GoogleAds.V1.Resources.Campaign.Types.VanityPharma), global::Google.Ads.GoogleAds.V1.Resources.Campaign.Types.VanityPharma.Parser, new[]{ "VanityPharmaDisplayUrlMode", "VanityPharmaText" }, null, null, null, null)})
          }));
    }
    #endregion

  }
  #region Messages
  /// <summary>
  /// A campaign.
  /// </summary>
  public sealed partial class Campaign : pb::IMessage<Campaign> {
    private static readonly pb::MessageParser<Campaign> _parser = new pb::MessageParser<Campaign>(() => new Campaign());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Campaign> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Ads.GoogleAds.V1.Resources.CampaignReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Campaign() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Campaign(Campaign other) : this() {
      resourceName_ = other.resourceName_;
      Id = other.Id;
      Name = other.Name;
      status_ = other.status_;
      servingStatus_ = other.servingStatus_;
      adServingOptimizationStatus_ = other.adServingOptimizationStatus_;
      advertisingChannelType_ = other.advertisingChannelType_;
      advertisingChannelSubType_ = other.advertisingChannelSubType_;
      TrackingUrlTemplate = other.TrackingUrlTemplate;
      urlCustomParameters_ = other.urlCustomParameters_.Clone();
      realTimeBiddingSetting_ = other.realTimeBiddingSetting_ != null ? other.realTimeBiddingSetting_.Clone() : null;
      networkSettings_ = other.networkSettings_ != null ? other.networkSettings_.Clone() : null;
      hotelSetting_ = other.hotelSetting_ != null ? other.hotelSetting_.Clone() : null;
      dynamicSearchAdsSetting_ = other.dynamicSearchAdsSetting_ != null ? other.dynamicSearchAdsSetting_.Clone() : null;
      shoppingSetting_ = other.shoppingSetting_ != null ? other.shoppingSetting_.Clone() : null;
      targetingSetting_ = other.targetingSetting_ != null ? other.targetingSetting_.Clone() : null;
      geoTargetTypeSetting_ = other.geoTargetTypeSetting_ != null ? other.geoTargetTypeSetting_.Clone() : null;
      appCampaignSetting_ = other.appCampaignSetting_ != null ? other.appCampaignSetting_.Clone() : null;
      labels_ = other.labels_.Clone();
      experimentType_ = other.experimentType_;
      BaseCampaign = other.BaseCampaign;
      CampaignBudget = other.CampaignBudget;
      biddingStrategyType_ = other.biddingStrategyType_;
      StartDate = other.StartDate;
      EndDate = other.EndDate;
      FinalUrlSuffix = other.FinalUrlSuffix;
      frequencyCaps_ = other.frequencyCaps_.Clone();
      videoBrandSafetySuitability_ = other.videoBrandSafetySuitability_;
      vanityPharma_ = other.vanityPharma_ != null ? other.vanityPharma_.Clone() : null;
      selectiveOptimization_ = other.selectiveOptimization_ != null ? other.selectiveOptimization_.Clone() : null;
      trackingSetting_ = other.trackingSetting_ != null ? other.trackingSetting_.Clone() : null;
      paymentMode_ = other.paymentMode_;
      switch (other.CampaignBiddingStrategyCase) {
        case CampaignBiddingStrategyOneofCase.BiddingStrategy:
          BiddingStrategy = other.BiddingStrategy;
          break;
        case CampaignBiddingStrategyOneofCase.Commission:
          Commission = other.Commission.Clone();
          break;
        case CampaignBiddingStrategyOneofCase.ManualCpc:
          ManualCpc = other.ManualCpc.Clone();
          break;
        case CampaignBiddingStrategyOneofCase.ManualCpm:
          ManualCpm = other.ManualCpm.Clone();
          break;
        case CampaignBiddingStrategyOneofCase.ManualCpv:
          ManualCpv = other.ManualCpv.Clone();
          break;
        case CampaignBiddingStrategyOneofCase.MaximizeConversions:
          MaximizeConversions = other.MaximizeConversions.Clone();
          break;
        case CampaignBiddingStrategyOneofCase.MaximizeConversionValue:
          MaximizeConversionValue = other.MaximizeConversionValue.Clone();
          break;
        case CampaignBiddingStrategyOneofCase.TargetCpa:
          TargetCpa = other.TargetCpa.Clone();
          break;
        case CampaignBiddingStrategyOneofCase.TargetImpressionShare:
          TargetImpressionShare = other.TargetImpressionShare.Clone();
          break;
        case CampaignBiddingStrategyOneofCase.TargetRoas:
          TargetRoas = other.TargetRoas.Clone();
          break;
        case CampaignBiddingStrategyOneofCase.TargetSpend:
          TargetSpend = other.TargetSpend.Clone();
          break;
        case CampaignBiddingStrategyOneofCase.PercentCpc:
          PercentCpc = other.PercentCpc.Clone();
          break;
        case CampaignBiddingStrategyOneofCase.TargetCpm:
          TargetCpm = other.TargetCpm.Clone();
          break;
      }

      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Campaign Clone() {
      return new Campaign(this);
    }

    /// <summary>Field number for the "resource_name" field.</summary>
    public const int ResourceNameFieldNumber = 1;
    private string resourceName_ = "";
    /// <summary>
    /// Immutable. The resource name of the campaign.
    /// Campaign resource names have the form:
    ///
    /// `customers/{customer_id}/campaigns/{campaign_id}`
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ResourceName {
      get { return resourceName_; }
      set {
        resourceName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 3;
    private static readonly pb::FieldCodec<long?> _single_id_codec = pb::FieldCodec.ForStructWrapper<long>(26);
    private long? id_;
    /// <summary>
    /// Output only. The ID of the campaign.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long? Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }


    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 4;
    private static readonly pb::FieldCodec<string> _single_name_codec = pb::FieldCodec.ForClassWrapper<string>(34);
    private string name_;
    /// <summary>
    /// The name of the campaign.
    ///
    /// This field is required and should not be empty when creating new
    /// campaigns.
    ///
    /// It must not contain any null (code point 0x0), NL line feed
    /// (code point 0xA) or carriage return (code point 0xD) characters.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = value;
      }
    }


    /// <summary>Field number for the "status" field.</summary>
    public const int StatusFieldNumber = 5;
    private global::Google.Ads.GoogleAds.V1.Enums.CampaignStatusEnum.Types.CampaignStatus status_ = global::Google.Ads.GoogleAds.V1.Enums.CampaignStatusEnum.Types.CampaignStatus.Unspecified;
    /// <summary>
    /// The status of the campaign.
    ///
    /// When a new campaign is added, the status defaults to ENABLED.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Ads.GoogleAds.V1.Enums.CampaignStatusEnum.Types.CampaignStatus Status {
      get { return status_; }
      set {
        status_ = value;
      }
    }

    /// <summary>Field number for the "serving_status" field.</summary>
    public const int ServingStatusFieldNumber = 21;
    private global::Google.Ads.GoogleAds.V1.Enums.CampaignServingStatusEnum.Types.CampaignServingStatus servingStatus_ = global::Google.Ads.GoogleAds.V1.Enums.CampaignServingStatusEnum.Types.CampaignServingStatus.Unspecified;
    /// <summary>
    /// Output only. The ad serving status of the campaign.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Ads.GoogleAds.V1.Enums.CampaignServingStatusEnum.Types.CampaignServingStatus ServingStatus {
      get { return servingStatus_; }
      set {
        servingStatus_ = value;
      }
    }

    /// <summary>Field number for the "ad_serving_optimization_status" field.</summary>
    public const int AdServingOptimizationStatusFieldNumber = 8;
    private global::Google.Ads.GoogleAds.V1.Enums.AdServingOptimizationStatusEnum.Types.AdServingOptimizationStatus adServingOptimizationStatus_ = global::Google.Ads.GoogleAds.V1.Enums.AdServingOptimizationStatusEnum.Types.AdServingOptimizationStatus.Unspecified;
    /// <summary>
    /// The ad serving optimization status of the campaign.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Ads.GoogleAds.V1.Enums.AdServingOptimizationStatusEnum.Types.AdServingOptimizationStatus AdServingOptimizationStatus {
      get { return adServingOptimizationStatus_; }
      set {
        adServingOptimizationStatus_ = value;
      }
    }

    /// <summary>Field number for the "advertising_channel_type" field.</summary>
    public const int AdvertisingChannelTypeFieldNumber = 9;
    private global::Google.Ads.GoogleAds.V1.Enums.AdvertisingChannelTypeEnum.Types.AdvertisingChannelType advertisingChannelType_ = global::Google.Ads.GoogleAds.V1.Enums.AdvertisingChannelTypeEnum.Types.AdvertisingChannelType.Unspecified;
    /// <summary>
    /// Immutable. The primary serving target for ads within the campaign.
    /// The targeting options can be refined in `network_settings`.
    ///
    /// This field is required and should not be empty when creating new
    /// campaigns.
    ///
    /// Can be set only when creating campaigns.
    /// After the campaign is created, the field can not be changed.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Ads.GoogleAds.V1.Enums.AdvertisingChannelTypeEnum.Types.AdvertisingChannelType AdvertisingChannelType {
      get { return advertisingChannelType_; }
      set {
        advertisingChannelType_ = value;
      }
    }

    /// <summary>Field number for the "advertising_channel_sub_type" field.</summary>
    public const int AdvertisingChannelSubTypeFieldNumber = 10;
    private global::Google.Ads.GoogleAds.V1.Enums.AdvertisingChannelSubTypeEnum.Types.AdvertisingChannelSubType advertisingChannelSubType_ = global::Google.Ads.GoogleAds.V1.Enums.AdvertisingChannelSubTypeEnum.Types.AdvertisingChannelSubType.Unspecified;
    /// <summary>
    /// Immutable. Optional refinement to `advertising_channel_type`.
    /// Must be a valid sub-type of the parent channel type.
    ///
    /// Can be set only when creating campaigns.
    /// After campaign is created, the field can not be changed.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Ads.GoogleAds.V1.Enums.AdvertisingChannelSubTypeEnum.Types.AdvertisingChannelSubType AdvertisingChannelSubType {
      get { return advertisingChannelSubType_; }
      set {
        advertisingChannelSubType_ = value;
      }
    }

    /// <summary>Field number for the "tracking_url_template" field.</summary>
    public const int TrackingUrlTemplateFieldNumber = 11;
    private static readonly pb::FieldCodec<string> _single_trackingUrlTemplate_codec = pb::FieldCodec.ForClassWrapper<string>(90);
    private string trackingUrlTemplate_;
    /// <summary>
    /// The URL template for constructing a tracking URL.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string TrackingUrlTemplate {
      get { return trackingUrlTemplate_; }
      set {
        trackingUrlTemplate_ = value;
      }
    }


    /// <summary>Field number for the "url_custom_parameters" field.</summary>
    public const int UrlCustomParametersFieldNumber = 12;
    private static readonly pb::FieldCodec<global::Google.Ads.GoogleAds.V1.Common.CustomParameter> _repeated_urlCustomParameters_codec
        = pb::FieldCodec.ForMessage(98, global::Google.Ads.GoogleAds.V1.Common.CustomParameter.Parser);
    private readonly pbc::RepeatedField<global::Google.Ads.GoogleAds.V1.Common.CustomParameter> urlCustomParameters_ = new pbc::RepeatedField<global::Google.Ads.GoogleAds.V1.Common.CustomParameter>();
    /// <summary>
    /// The list of mappings used to substitute custom parameter tags in a
    /// `tracking_url_template`, `final_urls`, or `mobile_final_urls`.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Google.Ads.GoogleAds.V1.Common.CustomParameter> UrlCustomParameters {
      get { return urlCustomParameters_; }
    }

    /// <summary>Field number for the "real_time_bidding_setting" field.</summary>
    public const int RealTimeBiddingSettingFieldNumber = 39;
    private global::Google.Ads.GoogleAds.V1.Common.RealTimeBiddingSetting realTimeBiddingSetting_;
    /// <summary>
    /// Settings for Real-Time Bidding, a feature only available for campaigns
    /// targeting the Ad Exchange network.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Ads.GoogleAds.V1.Common.RealTimeBiddingSetting RealTimeBiddingSetting {
      get { return realTimeBiddingSetting_; }
      set {
        realTimeBiddingSetting_ = value;
      }
    }

    /// <summary>Field number for the "network_settings" field.</summary>
    public const int NetworkSettingsFieldNumber = 14;
    private global::Google.Ads.GoogleAds.V1.Resources.Campaign.Types.NetworkSettings networkSettings_;
    /// <summary>
    /// The network settings for the campaign.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Ads.GoogleAds.V1.Resources.Campaign.Types.NetworkSettings NetworkSettings {
      get { return networkSettings_; }
      set {
        networkSettings_ = value;
      }
    }

    /// <summary>Field number for the "hotel_setting" field.</summary>
    public const int HotelSettingFieldNumber = 32;
    private global::Google.Ads.GoogleAds.V1.Resources.Campaign.Types.HotelSettingInfo hotelSetting_;
    /// <summary>
    /// Immutable. The hotel setting for the campaign.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Ads.GoogleAds.V1.Resources.Campaign.Types.HotelSettingInfo HotelSetting {
      get { return hotelSetting_; }
      set {
        hotelSetting_ = value;
      }
    }

    /// <summary>Field number for the "dynamic_search_ads_setting" field.</summary>
    public const int DynamicSearchAdsSettingFieldNumber = 33;
    private global::Google.Ads.GoogleAds.V1.Resources.Campaign.Types.DynamicSearchAdsSetting dynamicSearchAdsSetting_;
    /// <summary>
    /// The setting for controlling Dynamic Search Ads (DSA).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Ads.GoogleAds.V1.Resources.Campaign.Types.DynamicSearchAdsSetting DynamicSearchAdsSetting {
      get { return dynamicSearchAdsSetting_; }
      set {
        dynamicSearchAdsSetting_ = value;
      }
    }

    /// <summary>Field number for the "shopping_setting" field.</summary>
    public const int ShoppingSettingFieldNumber = 36;
    private global::Google.Ads.GoogleAds.V1.Resources.Campaign.Types.ShoppingSetting shoppingSetting_;
    /// <summary>
    /// The setting for controlling Shopping campaigns.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Ads.GoogleAds.V1.Resources.Campaign.Types.ShoppingSetting ShoppingSetting {
      get { return shoppingSetting_; }
      set {
        shoppingSetting_ = value;
      }
    }

    /// <summary>Field number for the "targeting_setting" field.</summary>
    public const int TargetingSettingFieldNumber = 43;
    private global::Google.Ads.GoogleAds.V1.Common.TargetingSetting targetingSetting_;
    /// <summary>
    /// Setting for targeting related features.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Ads.GoogleAds.V1.Common.TargetingSetting TargetingSetting {
      get { return targetingSetting_; }
      set {
        targetingSetting_ = value;
      }
    }

    /// <summary>Field number for the "geo_target_type_setting" field.</summary>
    public const int GeoTargetTypeSettingFieldNumber = 47;
    private global::Google.Ads.GoogleAds.V1.Resources.Campaign.Types.GeoTargetTypeSetting geoTargetTypeSetting_;
    /// <summary>
    /// The setting for ads geotargeting.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Ads.GoogleAds.V1.Resources.Campaign.Types.GeoTargetTypeSetting GeoTargetTypeSetting {
      get { return geoTargetTypeSetting_; }
      set {
        geoTargetTypeSetting_ = value;
      }
    }

    /// <summary>Field number for the "app_campaign_setting" field.</summary>
    public const int AppCampaignSettingFieldNumber = 51;
    private global::Google.Ads.GoogleAds.V1.Resources.Campaign.Types.AppCampaignSetting appCampaignSetting_;
    /// <summary>
    /// The setting related to App Campaign.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Ads.GoogleAds.V1.Resources.Campaign.Types.AppCampaignSetting AppCampaignSetting {
      get { return appCampaignSetting_; }
      set {
        appCampaignSetting_ = value;
      }
    }

    /// <summary>Field number for the "labels" field.</summary>
    public const int LabelsFieldNumber = 53;
    private static readonly pb::FieldCodec<string> _repeated_labels_codec
        = pb::FieldCodec.ForClassWrapper<string>(426);
    private readonly pbc::RepeatedField<string> labels_ = new pbc::RepeatedField<string>();
    /// <summary>
    /// Output only. The resource names of labels attached to this campaign.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> Labels {
      get { return labels_; }
    }

    /// <summary>Field number for the "experiment_type" field.</summary>
    public const int ExperimentTypeFieldNumber = 17;
    private global::Google.Ads.GoogleAds.V1.Enums.CampaignExperimentTypeEnum.Types.CampaignExperimentType experimentType_ = global::Google.Ads.GoogleAds.V1.Enums.CampaignExperimentTypeEnum.Types.CampaignExperimentType.Unspecified;
    /// <summary>
    /// Output only. The type of campaign: normal, draft, or experiment.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Ads.GoogleAds.V1.Enums.CampaignExperimentTypeEnum.Types.CampaignExperimentType ExperimentType {
      get { return experimentType_; }
      set {
        experimentType_ = value;
      }
    }

    /// <summary>Field number for the "base_campaign" field.</summary>
    public const int BaseCampaignFieldNumber = 28;
    private static readonly pb::FieldCodec<string> _single_baseCampaign_codec = pb::FieldCodec.ForClassWrapper<string>(226);
    private string baseCampaign_;
    /// <summary>
    /// Output only. The resource name of the base campaign of a draft or experiment campaign.
    /// For base campaigns, this is equal to `resource_name`.
    ///
    /// This field is read-only.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string BaseCampaign {
      get { return baseCampaign_; }
      set {
        baseCampaign_ = value;
      }
    }


    /// <summary>Field number for the "campaign_budget" field.</summary>
    public const int CampaignBudgetFieldNumber = 6;
    private static readonly pb::FieldCodec<string> _single_campaignBudget_codec = pb::FieldCodec.ForClassWrapper<string>(50);
    private string campaignBudget_;
    /// <summary>
    /// The budget of the campaign.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string CampaignBudget {
      get { return campaignBudget_; }
      set {
        campaignBudget_ = value;
      }
    }


    /// <summary>Field number for the "bidding_strategy_type" field.</summary>
    public const int BiddingStrategyTypeFieldNumber = 22;
    private global::Google.Ads.GoogleAds.V1.Enums.BiddingStrategyTypeEnum.Types.BiddingStrategyType biddingStrategyType_ = global::Google.Ads.GoogleAds.V1.Enums.BiddingStrategyTypeEnum.Types.BiddingStrategyType.Unspecified;
    /// <summary>
    /// Output only. The type of bidding strategy.
    ///
    /// A bidding strategy can be created by setting either the bidding scheme to
    /// create a standard bidding strategy or the `bidding_strategy` field to
    /// create a portfolio bidding strategy.
    ///
    /// This field is read-only.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Ads.GoogleAds.V1.Enums.BiddingStrategyTypeEnum.Types.BiddingStrategyType BiddingStrategyType {
      get { return biddingStrategyType_; }
      set {
        biddingStrategyType_ = value;
      }
    }

    /// <summary>Field number for the "start_date" field.</summary>
    public const int StartDateFieldNumber = 19;
    private static readonly pb::FieldCodec<string> _single_startDate_codec = pb::FieldCodec.ForClassWrapper<string>(154);
    private string startDate_;
    /// <summary>
    /// The date when campaign started.
    /// This field must not be used in WHERE clauses.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string StartDate {
      get { return startDate_; }
      set {
        startDate_ = value;
      }
    }


    /// <summary>Field number for the "end_date" field.</summary>
    public const int EndDateFieldNumber = 20;
    private static readonly pb::FieldCodec<string> _single_endDate_codec = pb::FieldCodec.ForClassWrapper<string>(162);
    private string endDate_;
    /// <summary>
    /// The date when campaign ended.
    /// This field must not be used in WHERE clauses.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string EndDate {
      get { return endDate_; }
      set {
        endDate_ = value;
      }
    }


    /// <summary>Field number for the "final_url_suffix" field.</summary>
    public const int FinalUrlSuffixFieldNumber = 38;
    private static readonly pb::FieldCodec<string> _single_finalUrlSuffix_codec = pb::FieldCodec.ForClassWrapper<string>(306);
    private string finalUrlSuffix_;
    /// <summary>
    /// Suffix used to append query parameters to landing pages that are served
    /// with parallel tracking.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string FinalUrlSuffix {
      get { return finalUrlSuffix_; }
      set {
        finalUrlSuffix_ = value;
      }
    }


    /// <summary>Field number for the "frequency_caps" field.</summary>
    public const int FrequencyCapsFieldNumber = 40;
    private static readonly pb::FieldCodec<global::Google.Ads.GoogleAds.V1.Common.FrequencyCapEntry> _repeated_frequencyCaps_codec
        = pb::FieldCodec.ForMessage(322, global::Google.Ads.GoogleAds.V1.Common.FrequencyCapEntry.Parser);
    private readonly pbc::RepeatedField<global::Google.Ads.GoogleAds.V1.Common.FrequencyCapEntry> frequencyCaps_ = new pbc::RepeatedField<global::Google.Ads.GoogleAds.V1.Common.FrequencyCapEntry>();
    /// <summary>
    /// A list that limits how often each user will see this campaign's ads.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Google.Ads.GoogleAds.V1.Common.FrequencyCapEntry> FrequencyCaps {
      get { return frequencyCaps_; }
    }

    /// <summary>Field number for the "video_brand_safety_suitability" field.</summary>
    public const int VideoBrandSafetySuitabilityFieldNumber = 42;
    private global::Google.Ads.GoogleAds.V1.Enums.BrandSafetySuitabilityEnum.Types.BrandSafetySuitability videoBrandSafetySuitability_ = global::Google.Ads.GoogleAds.V1.Enums.BrandSafetySuitabilityEnum.Types.BrandSafetySuitability.Unspecified;
    /// <summary>
    /// Output only. 3-Tier Brand Safety setting for the campaign.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Ads.GoogleAds.V1.Enums.BrandSafetySuitabilityEnum.Types.BrandSafetySuitability VideoBrandSafetySuitability {
      get { return videoBrandSafetySuitability_; }
      set {
        videoBrandSafetySuitability_ = value;
      }
    }

    /// <summary>Field number for the "vanity_pharma" field.</summary>
    public const int VanityPharmaFieldNumber = 44;
    private global::Google.Ads.GoogleAds.V1.Resources.Campaign.Types.VanityPharma vanityPharma_;
    /// <summary>
    /// Describes how unbranded pharma ads will be displayed.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Ads.GoogleAds.V1.Resources.Campaign.Types.VanityPharma VanityPharma {
      get { return vanityPharma_; }
      set {
        vanityPharma_ = value;
      }
    }

    /// <summary>Field number for the "selective_optimization" field.</summary>
    public const int SelectiveOptimizationFieldNumber = 45;
    private global::Google.Ads.GoogleAds.V1.Resources.Campaign.Types.SelectiveOptimization selectiveOptimization_;
    /// <summary>
    /// Selective optimization setting for this campaign, which includes a set of
    /// conversion actions to optimize this campaign towards.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Ads.GoogleAds.V1.Resources.Campaign.Types.SelectiveOptimization SelectiveOptimization {
      get { return selectiveOptimization_; }
      set {
        selectiveOptimization_ = value;
      }
    }

    /// <summary>Field number for the "tracking_setting" field.</summary>
    public const int TrackingSettingFieldNumber = 46;
    private global::Google.Ads.GoogleAds.V1.Resources.Campaign.Types.TrackingSetting trackingSetting_;
    /// <summary>
    /// Output only. Campaign-level settings for tracking information.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Ads.GoogleAds.V1.Resources.Campaign.Types.TrackingSetting TrackingSetting {
      get { return trackingSetting_; }
      set {
        trackingSetting_ = value;
      }
    }

    /// <summary>Field number for the "payment_mode" field.</summary>
    public const int PaymentModeFieldNumber = 52;
    private global::Google.Ads.GoogleAds.V1.Enums.PaymentModeEnum.Types.PaymentMode paymentMode_ = global::Google.Ads.GoogleAds.V1.Enums.PaymentModeEnum.Types.PaymentMode.Unspecified;
    /// <summary>
    /// Payment mode for the campaign.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Ads.GoogleAds.V1.Enums.PaymentModeEnum.Types.PaymentMode PaymentMode {
      get { return paymentMode_; }
      set {
        paymentMode_ = value;
      }
    }

    /// <summary>Field number for the "bidding_strategy" field.</summary>
    public const int BiddingStrategyFieldNumber = 23;
    private static readonly pb::FieldCodec<string> _oneof_biddingStrategy_codec = pb::FieldCodec.ForClassWrapper<string>(186);
    /// <summary>
    /// Portfolio bidding strategy used by campaign.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string BiddingStrategy {
      get { return campaignBiddingStrategyCase_ == CampaignBiddingStrategyOneofCase.BiddingStrategy ? (string) campaignBiddingStrategy_ : (string) null; }
      set {
        campaignBiddingStrategy_ = value;
        campaignBiddingStrategyCase_ = value == null ? CampaignBiddingStrategyOneofCase.None : CampaignBiddingStrategyOneofCase.BiddingStrategy;
      }
    }

    /// <summary>Field number for the "commission" field.</summary>
    public const int CommissionFieldNumber = 49;
    /// <summary>
    /// Commission is an automatic bidding strategy in which the advertiser pays
    /// a certain portion of the conversion value.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Ads.GoogleAds.V1.Common.Commission Commission {
      get { return campaignBiddingStrategyCase_ == CampaignBiddingStrategyOneofCase.Commission ? (global::Google.Ads.GoogleAds.V1.Common.Commission) campaignBiddingStrategy_ : null; }
      set {
        campaignBiddingStrategy_ = value;
        campaignBiddingStrategyCase_ = value == null ? CampaignBiddingStrategyOneofCase.None : CampaignBiddingStrategyOneofCase.Commission;
      }
    }

    /// <summary>Field number for the "manual_cpc" field.</summary>
    public const int ManualCpcFieldNumber = 24;
    /// <summary>
    /// Standard Manual CPC bidding strategy.
    /// Manual click-based bidding where user pays per click.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Ads.GoogleAds.V1.Common.ManualCpc ManualCpc {
      get { return campaignBiddingStrategyCase_ == CampaignBiddingStrategyOneofCase.ManualCpc ? (global::Google.Ads.GoogleAds.V1.Common.ManualCpc) campaignBiddingStrategy_ : null; }
      set {
        campaignBiddingStrategy_ = value;
        campaignBiddingStrategyCase_ = value == null ? CampaignBiddingStrategyOneofCase.None : CampaignBiddingStrategyOneofCase.ManualCpc;
      }
    }

    /// <summary>Field number for the "manual_cpm" field.</summary>
    public const int ManualCpmFieldNumber = 25;
    /// <summary>
    /// Standard Manual CPM bidding strategy.
    /// Manual impression-based bidding where user pays per thousand
    /// impressions.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Ads.GoogleAds.V1.Common.ManualCpm ManualCpm {
      get { return campaignBiddingStrategyCase_ == CampaignBiddingStrategyOneofCase.ManualCpm ? (global::Google.Ads.GoogleAds.V1.Common.ManualCpm) campaignBiddingStrategy_ : null; }
      set {
        campaignBiddingStrategy_ = value;
        campaignBiddingStrategyCase_ = value == null ? CampaignBiddingStrategyOneofCase.None : CampaignBiddingStrategyOneofCase.ManualCpm;
      }
    }

    /// <summary>Field number for the "manual_cpv" field.</summary>
    public const int ManualCpvFieldNumber = 37;
    /// <summary>
    /// Output only. A bidding strategy that pays a configurable amount per video view.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Ads.GoogleAds.V1.Common.ManualCpv ManualCpv {
      get { return campaignBiddingStrategyCase_ == CampaignBiddingStrategyOneofCase.ManualCpv ? (global::Google.Ads.GoogleAds.V1.Common.ManualCpv) campaignBiddingStrategy_ : null; }
      set {
        campaignBiddingStrategy_ = value;
        campaignBiddingStrategyCase_ = value == null ? CampaignBiddingStrategyOneofCase.None : CampaignBiddingStrategyOneofCase.ManualCpv;
      }
    }

    /// <summary>Field number for the "maximize_conversions" field.</summary>
    public const int MaximizeConversionsFieldNumber = 30;
    /// <summary>
    /// Standard Maximize Conversions bidding strategy that automatically
    /// maximizes number of conversions given a daily budget.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Ads.GoogleAds.V1.Common.MaximizeConversions MaximizeConversions {
      get { return campaignBiddingStrategyCase_ == CampaignBiddingStrategyOneofCase.MaximizeConversions ? (global::Google.Ads.GoogleAds.V1.Common.MaximizeConversions) campaignBiddingStrategy_ : null; }
      set {
        campaignBiddingStrategy_ = value;
        campaignBiddingStrategyCase_ = value == null ? CampaignBiddingStrategyOneofCase.None : CampaignBiddingStrategyOneofCase.MaximizeConversions;
      }
    }

    /// <summary>Field number for the "maximize_conversion_value" field.</summary>
    public const int MaximizeConversionValueFieldNumber = 31;
    /// <summary>
    /// Standard Maximize Conversion Value bidding strategy that automatically
    /// sets bids to maximize revenue while spending your budget.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Ads.GoogleAds.V1.Common.MaximizeConversionValue MaximizeConversionValue {
      get { return campaignBiddingStrategyCase_ == CampaignBiddingStrategyOneofCase.MaximizeConversionValue ? (global::Google.Ads.GoogleAds.V1.Common.MaximizeConversionValue) campaignBiddingStrategy_ : null; }
      set {
        campaignBiddingStrategy_ = value;
        campaignBiddingStrategyCase_ = value == null ? CampaignBiddingStrategyOneofCase.None : CampaignBiddingStrategyOneofCase.MaximizeConversionValue;
      }
    }

    /// <summary>Field number for the "target_cpa" field.</summary>
    public const int TargetCpaFieldNumber = 26;
    /// <summary>
    /// Standard Target CPA bidding strategy that automatically sets bids to
    /// help get as many conversions as possible at the target
    /// cost-per-acquisition (CPA) you set.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Ads.GoogleAds.V1.Common.TargetCpa TargetCpa {
      get { return campaignBiddingStrategyCase_ == CampaignBiddingStrategyOneofCase.TargetCpa ? (global::Google.Ads.GoogleAds.V1.Common.TargetCpa) campaignBiddingStrategy_ : null; }
      set {
        campaignBiddingStrategy_ = value;
        campaignBiddingStrategyCase_ = value == null ? CampaignBiddingStrategyOneofCase.None : CampaignBiddingStrategyOneofCase.TargetCpa;
      }
    }

    /// <summary>Field number for the "target_impression_share" field.</summary>
    public const int TargetImpressionShareFieldNumber = 48;
    /// <summary>
    /// Target Impression Share bidding strategy. An automated bidding strategy
    /// that sets bids to achieve a desired percentage of impressions.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Ads.GoogleAds.V1.Common.TargetImpressionShare TargetImpressionShare {
      get { return campaignBiddingStrategyCase_ == CampaignBiddingStrategyOneofCase.TargetImpressionShare ? (global::Google.Ads.GoogleAds.V1.Common.TargetImpressionShare) campaignBiddingStrategy_ : null; }
      set {
        campaignBiddingStrategy_ = value;
        campaignBiddingStrategyCase_ = value == null ? CampaignBiddingStrategyOneofCase.None : CampaignBiddingStrategyOneofCase.TargetImpressionShare;
      }
    }

    /// <summary>Field number for the "target_roas" field.</summary>
    public const int TargetRoasFieldNumber = 29;
    /// <summary>
    /// Standard Target ROAS bidding strategy that automatically maximizes
    /// revenue while averaging a specific target return on ad spend (ROAS).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Ads.GoogleAds.V1.Common.TargetRoas TargetRoas {
      get { return campaignBiddingStrategyCase_ == CampaignBiddingStrategyOneofCase.TargetRoas ? (global::Google.Ads.GoogleAds.V1.Common.TargetRoas) campaignBiddingStrategy_ : null; }
      set {
        campaignBiddingStrategy_ = value;
        campaignBiddingStrategyCase_ = value == null ? CampaignBiddingStrategyOneofCase.None : CampaignBiddingStrategyOneofCase.TargetRoas;
      }
    }

    /// <summary>Field number for the "target_spend" field.</summary>
    public const int TargetSpendFieldNumber = 27;
    /// <summary>
    /// Standard Target Spend bidding strategy that automatically sets your bids
    /// to help get as many clicks as possible within your budget.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Ads.GoogleAds.V1.Common.TargetSpend TargetSpend {
      get { return campaignBiddingStrategyCase_ == CampaignBiddingStrategyOneofCase.TargetSpend ? (global::Google.Ads.GoogleAds.V1.Common.TargetSpend) campaignBiddingStrategy_ : null; }
      set {
        campaignBiddingStrategy_ = value;
        campaignBiddingStrategyCase_ = value == null ? CampaignBiddingStrategyOneofCase.None : CampaignBiddingStrategyOneofCase.TargetSpend;
      }
    }

    /// <summary>Field number for the "percent_cpc" field.</summary>
    public const int PercentCpcFieldNumber = 34;
    /// <summary>
    /// Standard Percent Cpc bidding strategy where bids are a fraction of the
    /// advertised price for some good or service.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Ads.GoogleAds.V1.Common.PercentCpc PercentCpc {
      get { return campaignBiddingStrategyCase_ == CampaignBiddingStrategyOneofCase.PercentCpc ? (global::Google.Ads.GoogleAds.V1.Common.PercentCpc) campaignBiddingStrategy_ : null; }
      set {
        campaignBiddingStrategy_ = value;
        campaignBiddingStrategyCase_ = value == null ? CampaignBiddingStrategyOneofCase.None : CampaignBiddingStrategyOneofCase.PercentCpc;
      }
    }

    /// <summary>Field number for the "target_cpm" field.</summary>
    public const int TargetCpmFieldNumber = 41;
    /// <summary>
    /// A bidding strategy that automatically optimizes cost per thousand
    /// impressions.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Ads.GoogleAds.V1.Common.TargetCpm TargetCpm {
      get { return campaignBiddingStrategyCase_ == CampaignBiddingStrategyOneofCase.TargetCpm ? (global::Google.Ads.GoogleAds.V1.Common.TargetCpm) campaignBiddingStrategy_ : null; }
      set {
        campaignBiddingStrategy_ = value;
        campaignBiddingStrategyCase_ = value == null ? CampaignBiddingStrategyOneofCase.None : CampaignBiddingStrategyOneofCase.TargetCpm;
      }
    }

    private object campaignBiddingStrategy_;
    /// <summary>Enum of possible cases for the "campaign_bidding_strategy" oneof.</summary>
    public enum CampaignBiddingStrategyOneofCase {
      None = 0,
      BiddingStrategy = 23,
      Commission = 49,
      ManualCpc = 24,
      ManualCpm = 25,
      ManualCpv = 37,
      MaximizeConversions = 30,
      MaximizeConversionValue = 31,
      TargetCpa = 26,
      TargetImpressionShare = 48,
      TargetRoas = 29,
      TargetSpend = 27,
      PercentCpc = 34,
      TargetCpm = 41,
    }
    private CampaignBiddingStrategyOneofCase campaignBiddingStrategyCase_ = CampaignBiddingStrategyOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CampaignBiddingStrategyOneofCase CampaignBiddingStrategyCase {
      get { return campaignBiddingStrategyCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearCampaignBiddingStrategy() {
      campaignBiddingStrategyCase_ = CampaignBiddingStrategyOneofCase.None;
      campaignBiddingStrategy_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Campaign);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Campaign other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ResourceName != other.ResourceName) return false;
      if (Id != other.Id) return false;
      if (Name != other.Name) return false;
      if (Status != other.Status) return false;
      if (ServingStatus != other.ServingStatus) return false;
      if (AdServingOptimizationStatus != other.AdServingOptimizationStatus) return false;
      if (AdvertisingChannelType != other.AdvertisingChannelType) return false;
      if (AdvertisingChannelSubType != other.AdvertisingChannelSubType) return false;
      if (TrackingUrlTemplate != other.TrackingUrlTemplate) return false;
      if(!urlCustomParameters_.Equals(other.urlCustomParameters_)) return false;
      if (!object.Equals(RealTimeBiddingSetting, other.RealTimeBiddingSetting)) return false;
      if (!object.Equals(NetworkSettings, other.NetworkSettings)) return false;
      if (!object.Equals(HotelSetting, other.HotelSetting)) return false;
      if (!object.Equals(DynamicSearchAdsSetting, other.DynamicSearchAdsSetting)) return false;
      if (!object.Equals(ShoppingSetting, other.ShoppingSetting)) return false;
      if (!object.Equals(TargetingSetting, other.TargetingSetting)) return false;
      if (!object.Equals(GeoTargetTypeSetting, other.GeoTargetTypeSetting)) return false;
      if (!object.Equals(AppCampaignSetting, other.AppCampaignSetting)) return false;
      if(!labels_.Equals(other.labels_)) return false;
      if (ExperimentType != other.ExperimentType) return false;
      if (BaseCampaign != other.BaseCampaign) return false;
      if (CampaignBudget != other.CampaignBudget) return false;
      if (BiddingStrategyType != other.BiddingStrategyType) return false;
      if (StartDate != other.StartDate) return false;
      if (EndDate != other.EndDate) return false;
      if (FinalUrlSuffix != other.FinalUrlSuffix) return false;
      if(!frequencyCaps_.Equals(other.frequencyCaps_)) return false;
      if (VideoBrandSafetySuitability != other.VideoBrandSafetySuitability) return false;
      if (!object.Equals(VanityPharma, other.VanityPharma)) return false;
      if (!object.Equals(SelectiveOptimization, other.SelectiveOptimization)) return false;
      if (!object.Equals(TrackingSetting, other.TrackingSetting)) return false;
      if (PaymentMode != other.PaymentMode) return false;
      if (BiddingStrategy != other.BiddingStrategy) return false;
      if (!object.Equals(Commission, other.Commission)) return false;
      if (!object.Equals(ManualCpc, other.ManualCpc)) return false;
      if (!object.Equals(ManualCpm, other.ManualCpm)) return false;
      if (!object.Equals(ManualCpv, other.ManualCpv)) return false;
      if (!object.Equals(MaximizeConversions, other.MaximizeConversions)) return false;
      if (!object.Equals(MaximizeConversionValue, other.MaximizeConversionValue)) return false;
      if (!object.Equals(TargetCpa, other.TargetCpa)) return false;
      if (!object.Equals(TargetImpressionShare, other.TargetImpressionShare)) return false;
      if (!object.Equals(TargetRoas, other.TargetRoas)) return false;
      if (!object.Equals(TargetSpend, other.TargetSpend)) return false;
      if (!object.Equals(PercentCpc, other.PercentCpc)) return false;
      if (!object.Equals(TargetCpm, other.TargetCpm)) return false;
      if (CampaignBiddingStrategyCase != other.CampaignBiddingStrategyCase) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ResourceName.Length != 0) hash ^= ResourceName.GetHashCode();
      if (id_ != null) hash ^= Id.GetHashCode();
      if (name_ != null) hash ^= Name.GetHashCode();
      if (Status != global::Google.Ads.GoogleAds.V1.Enums.CampaignStatusEnum.Types.CampaignStatus.Unspecified) hash ^= Status.GetHashCode();
      if (ServingStatus != global::Google.Ads.GoogleAds.V1.Enums.CampaignServingStatusEnum.Types.CampaignServingStatus.Unspecified) hash ^= ServingStatus.GetHashCode();
      if (AdServingOptimizationStatus != global::Google.Ads.GoogleAds.V1.Enums.AdServingOptimizationStatusEnum.Types.AdServingOptimizationStatus.Unspecified) hash ^= AdServingOptimizationStatus.GetHashCode();
      if (AdvertisingChannelType != global::Google.Ads.GoogleAds.V1.Enums.AdvertisingChannelTypeEnum.Types.AdvertisingChannelType.Unspecified) hash ^= AdvertisingChannelType.GetHashCode();
      if (AdvertisingChannelSubType != global::Google.Ads.GoogleAds.V1.Enums.AdvertisingChannelSubTypeEnum.Types.AdvertisingChannelSubType.Unspecified) hash ^= AdvertisingChannelSubType.GetHashCode();
      if (trackingUrlTemplate_ != null) hash ^= TrackingUrlTemplate.GetHashCode();
      hash ^= urlCustomParameters_.GetHashCode();
      if (realTimeBiddingSetting_ != null) hash ^= RealTimeBiddingSetting.GetHashCode();
      if (networkSettings_ != null) hash ^= NetworkSettings.GetHashCode();
      if (hotelSetting_ != null) hash ^= HotelSetting.GetHashCode();
      if (dynamicSearchAdsSetting_ != null) hash ^= DynamicSearchAdsSetting.GetHashCode();
      if (shoppingSetting_ != null) hash ^= ShoppingSetting.GetHashCode();
      if (targetingSetting_ != null) hash ^= TargetingSetting.GetHashCode();
      if (geoTargetTypeSetting_ != null) hash ^= GeoTargetTypeSetting.GetHashCode();
      if (appCampaignSetting_ != null) hash ^= AppCampaignSetting.GetHashCode();
      hash ^= labels_.GetHashCode();
      if (ExperimentType != global::Google.Ads.GoogleAds.V1.Enums.CampaignExperimentTypeEnum.Types.CampaignExperimentType.Unspecified) hash ^= ExperimentType.GetHashCode();
      if (baseCampaign_ != null) hash ^= BaseCampaign.GetHashCode();
      if (campaignBudget_ != null) hash ^= CampaignBudget.GetHashCode();
      if (BiddingStrategyType != global::Google.Ads.GoogleAds.V1.Enums.BiddingStrategyTypeEnum.Types.BiddingStrategyType.Unspecified) hash ^= BiddingStrategyType.GetHashCode();
      if (startDate_ != null) hash ^= StartDate.GetHashCode();
      if (endDate_ != null) hash ^= EndDate.GetHashCode();
      if (finalUrlSuffix_ != null) hash ^= FinalUrlSuffix.GetHashCode();
      hash ^= frequencyCaps_.GetHashCode();
      if (VideoBrandSafetySuitability != global::Google.Ads.GoogleAds.V1.Enums.BrandSafetySuitabilityEnum.Types.BrandSafetySuitability.Unspecified) hash ^= VideoBrandSafetySuitability.GetHashCode();
      if (vanityPharma_ != null) hash ^= VanityPharma.GetHashCode();
      if (selectiveOptimization_ != null) hash ^= SelectiveOptimization.GetHashCode();
      if (trackingSetting_ != null) hash ^= TrackingSetting.GetHashCode();
      if (PaymentMode != global::Google.Ads.GoogleAds.V1.Enums.PaymentModeEnum.Types.PaymentMode.Unspecified) hash ^= PaymentMode.GetHashCode();
      if (campaignBiddingStrategyCase_ == CampaignBiddingStrategyOneofCase.BiddingStrategy) hash ^= BiddingStrategy.GetHashCode();
      if (campaignBiddingStrategyCase_ == CampaignBiddingStrategyOneofCase.Commission) hash ^= Commission.GetHashCode();
      if (campaignBiddingStrategyCase_ == CampaignBiddingStrategyOneofCase.ManualCpc) hash ^= ManualCpc.GetHashCode();
      if (campaignBiddingStrategyCase_ == CampaignBiddingStrategyOneofCase.ManualCpm) hash ^= ManualCpm.GetHashCode();
      if (campaignBiddingStrategyCase_ == CampaignBiddingStrategyOneofCase.ManualCpv) hash ^= ManualCpv.GetHashCode();
      if (campaignBiddingStrategyCase_ == CampaignBiddingStrategyOneofCase.MaximizeConversions) hash ^= MaximizeConversions.GetHashCode();
      if (campaignBiddingStrategyCase_ == CampaignBiddingStrategyOneofCase.MaximizeConversionValue) hash ^= MaximizeConversionValue.GetHashCode();
      if (campaignBiddingStrategyCase_ == CampaignBiddingStrategyOneofCase.TargetCpa) hash ^= TargetCpa.GetHashCode();
      if (campaignBiddingStrategyCase_ == CampaignBiddingStrategyOneofCase.TargetImpressionShare) hash ^= TargetImpressionShare.GetHashCode();
      if (campaignBiddingStrategyCase_ == CampaignBiddingStrategyOneofCase.TargetRoas) hash ^= TargetRoas.GetHashCode();
      if (campaignBiddingStrategyCase_ == CampaignBiddingStrategyOneofCase.TargetSpend) hash ^= TargetSpend.GetHashCode();
      if (campaignBiddingStrategyCase_ == CampaignBiddingStrategyOneofCase.PercentCpc) hash ^= PercentCpc.GetHashCode();
      if (campaignBiddingStrategyCase_ == CampaignBiddingStrategyOneofCase.TargetCpm) hash ^= TargetCpm.GetHashCode();
      hash ^= (int) campaignBiddingStrategyCase_;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ResourceName.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(ResourceName);
      }
      if (id_ != null) {
        _single_id_codec.WriteTagAndValue(output, Id);
      }
      if (name_ != null) {
        _single_name_codec.WriteTagAndValue(output, Name);
      }
      if (Status != global::Google.Ads.GoogleAds.V1.Enums.CampaignStatusEnum.Types.CampaignStatus.Unspecified) {
        output.WriteRawTag(40);
        output.WriteEnum((int) Status);
      }
      if (campaignBudget_ != null) {
        _single_campaignBudget_codec.WriteTagAndValue(output, CampaignBudget);
      }
      if (AdServingOptimizationStatus != global::Google.Ads.GoogleAds.V1.Enums.AdServingOptimizationStatusEnum.Types.AdServingOptimizationStatus.Unspecified) {
        output.WriteRawTag(64);
        output.WriteEnum((int) AdServingOptimizationStatus);
      }
      if (AdvertisingChannelType != global::Google.Ads.GoogleAds.V1.Enums.AdvertisingChannelTypeEnum.Types.AdvertisingChannelType.Unspecified) {
        output.WriteRawTag(72);
        output.WriteEnum((int) AdvertisingChannelType);
      }
      if (AdvertisingChannelSubType != global::Google.Ads.GoogleAds.V1.Enums.AdvertisingChannelSubTypeEnum.Types.AdvertisingChannelSubType.Unspecified) {
        output.WriteRawTag(80);
        output.WriteEnum((int) AdvertisingChannelSubType);
      }
      if (trackingUrlTemplate_ != null) {
        _single_trackingUrlTemplate_codec.WriteTagAndValue(output, TrackingUrlTemplate);
      }
      urlCustomParameters_.WriteTo(output, _repeated_urlCustomParameters_codec);
      if (networkSettings_ != null) {
        output.WriteRawTag(114);
        output.WriteMessage(NetworkSettings);
      }
      if (ExperimentType != global::Google.Ads.GoogleAds.V1.Enums.CampaignExperimentTypeEnum.Types.CampaignExperimentType.Unspecified) {
        output.WriteRawTag(136, 1);
        output.WriteEnum((int) ExperimentType);
      }
      if (startDate_ != null) {
        _single_startDate_codec.WriteTagAndValue(output, StartDate);
      }
      if (endDate_ != null) {
        _single_endDate_codec.WriteTagAndValue(output, EndDate);
      }
      if (ServingStatus != global::Google.Ads.GoogleAds.V1.Enums.CampaignServingStatusEnum.Types.CampaignServingStatus.Unspecified) {
        output.WriteRawTag(168, 1);
        output.WriteEnum((int) ServingStatus);
      }
      if (BiddingStrategyType != global::Google.Ads.GoogleAds.V1.Enums.BiddingStrategyTypeEnum.Types.BiddingStrategyType.Unspecified) {
        output.WriteRawTag(176, 1);
        output.WriteEnum((int) BiddingStrategyType);
      }
      if (campaignBiddingStrategyCase_ == CampaignBiddingStrategyOneofCase.BiddingStrategy) {
        _oneof_biddingStrategy_codec.WriteTagAndValue(output, (string) campaignBiddingStrategy_);
      }
      if (campaignBiddingStrategyCase_ == CampaignBiddingStrategyOneofCase.ManualCpc) {
        output.WriteRawTag(194, 1);
        output.WriteMessage(ManualCpc);
      }
      if (campaignBiddingStrategyCase_ == CampaignBiddingStrategyOneofCase.ManualCpm) {
        output.WriteRawTag(202, 1);
        output.WriteMessage(ManualCpm);
      }
      if (campaignBiddingStrategyCase_ == CampaignBiddingStrategyOneofCase.TargetCpa) {
        output.WriteRawTag(210, 1);
        output.WriteMessage(TargetCpa);
      }
      if (campaignBiddingStrategyCase_ == CampaignBiddingStrategyOneofCase.TargetSpend) {
        output.WriteRawTag(218, 1);
        output.WriteMessage(TargetSpend);
      }
      if (baseCampaign_ != null) {
        _single_baseCampaign_codec.WriteTagAndValue(output, BaseCampaign);
      }
      if (campaignBiddingStrategyCase_ == CampaignBiddingStrategyOneofCase.TargetRoas) {
        output.WriteRawTag(234, 1);
        output.WriteMessage(TargetRoas);
      }
      if (campaignBiddingStrategyCase_ == CampaignBiddingStrategyOneofCase.MaximizeConversions) {
        output.WriteRawTag(242, 1);
        output.WriteMessage(MaximizeConversions);
      }
      if (campaignBiddingStrategyCase_ == CampaignBiddingStrategyOneofCase.MaximizeConversionValue) {
        output.WriteRawTag(250, 1);
        output.WriteMessage(MaximizeConversionValue);
      }
      if (hotelSetting_ != null) {
        output.WriteRawTag(130, 2);
        output.WriteMessage(HotelSetting);
      }
      if (dynamicSearchAdsSetting_ != null) {
        output.WriteRawTag(138, 2);
        output.WriteMessage(DynamicSearchAdsSetting);
      }
      if (campaignBiddingStrategyCase_ == CampaignBiddingStrategyOneofCase.PercentCpc) {
        output.WriteRawTag(146, 2);
        output.WriteMessage(PercentCpc);
      }
      if (shoppingSetting_ != null) {
        output.WriteRawTag(162, 2);
        output.WriteMessage(ShoppingSetting);
      }
      if (campaignBiddingStrategyCase_ == CampaignBiddingStrategyOneofCase.ManualCpv) {
        output.WriteRawTag(170, 2);
        output.WriteMessage(ManualCpv);
      }
      if (finalUrlSuffix_ != null) {
        _single_finalUrlSuffix_codec.WriteTagAndValue(output, FinalUrlSuffix);
      }
      if (realTimeBiddingSetting_ != null) {
        output.WriteRawTag(186, 2);
        output.WriteMessage(RealTimeBiddingSetting);
      }
      frequencyCaps_.WriteTo(output, _repeated_frequencyCaps_codec);
      if (campaignBiddingStrategyCase_ == CampaignBiddingStrategyOneofCase.TargetCpm) {
        output.WriteRawTag(202, 2);
        output.WriteMessage(TargetCpm);
      }
      if (VideoBrandSafetySuitability != global::Google.Ads.GoogleAds.V1.Enums.BrandSafetySuitabilityEnum.Types.BrandSafetySuitability.Unspecified) {
        output.WriteRawTag(208, 2);
        output.WriteEnum((int) VideoBrandSafetySuitability);
      }
      if (targetingSetting_ != null) {
        output.WriteRawTag(218, 2);
        output.WriteMessage(TargetingSetting);
      }
      if (vanityPharma_ != null) {
        output.WriteRawTag(226, 2);
        output.WriteMessage(VanityPharma);
      }
      if (selectiveOptimization_ != null) {
        output.WriteRawTag(234, 2);
        output.WriteMessage(SelectiveOptimization);
      }
      if (trackingSetting_ != null) {
        output.WriteRawTag(242, 2);
        output.WriteMessage(TrackingSetting);
      }
      if (geoTargetTypeSetting_ != null) {
        output.WriteRawTag(250, 2);
        output.WriteMessage(GeoTargetTypeSetting);
      }
      if (campaignBiddingStrategyCase_ == CampaignBiddingStrategyOneofCase.TargetImpressionShare) {
        output.WriteRawTag(130, 3);
        output.WriteMessage(TargetImpressionShare);
      }
      if (campaignBiddingStrategyCase_ == CampaignBiddingStrategyOneofCase.Commission) {
        output.WriteRawTag(138, 3);
        output.WriteMessage(Commission);
      }
      if (appCampaignSetting_ != null) {
        output.WriteRawTag(154, 3);
        output.WriteMessage(AppCampaignSetting);
      }
      if (PaymentMode != global::Google.Ads.GoogleAds.V1.Enums.PaymentModeEnum.Types.PaymentMode.Unspecified) {
        output.WriteRawTag(160, 3);
        output.WriteEnum((int) PaymentMode);
      }
      labels_.WriteTo(output, _repeated_labels_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ResourceName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ResourceName);
      }
      if (id_ != null) {
        size += _single_id_codec.CalculateSizeWithTag(Id);
      }
      if (name_ != null) {
        size += _single_name_codec.CalculateSizeWithTag(Name);
      }
      if (Status != global::Google.Ads.GoogleAds.V1.Enums.CampaignStatusEnum.Types.CampaignStatus.Unspecified) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Status);
      }
      if (ServingStatus != global::Google.Ads.GoogleAds.V1.Enums.CampaignServingStatusEnum.Types.CampaignServingStatus.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) ServingStatus);
      }
      if (AdServingOptimizationStatus != global::Google.Ads.GoogleAds.V1.Enums.AdServingOptimizationStatusEnum.Types.AdServingOptimizationStatus.Unspecified) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) AdServingOptimizationStatus);
      }
      if (AdvertisingChannelType != global::Google.Ads.GoogleAds.V1.Enums.AdvertisingChannelTypeEnum.Types.AdvertisingChannelType.Unspecified) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) AdvertisingChannelType);
      }
      if (AdvertisingChannelSubType != global::Google.Ads.GoogleAds.V1.Enums.AdvertisingChannelSubTypeEnum.Types.AdvertisingChannelSubType.Unspecified) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) AdvertisingChannelSubType);
      }
      if (trackingUrlTemplate_ != null) {
        size += _single_trackingUrlTemplate_codec.CalculateSizeWithTag(TrackingUrlTemplate);
      }
      size += urlCustomParameters_.CalculateSize(_repeated_urlCustomParameters_codec);
      if (realTimeBiddingSetting_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(RealTimeBiddingSetting);
      }
      if (networkSettings_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(NetworkSettings);
      }
      if (hotelSetting_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(HotelSetting);
      }
      if (dynamicSearchAdsSetting_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(DynamicSearchAdsSetting);
      }
      if (shoppingSetting_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(ShoppingSetting);
      }
      if (targetingSetting_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(TargetingSetting);
      }
      if (geoTargetTypeSetting_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(GeoTargetTypeSetting);
      }
      if (appCampaignSetting_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(AppCampaignSetting);
      }
      size += labels_.CalculateSize(_repeated_labels_codec);
      if (ExperimentType != global::Google.Ads.GoogleAds.V1.Enums.CampaignExperimentTypeEnum.Types.CampaignExperimentType.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) ExperimentType);
      }
      if (baseCampaign_ != null) {
        size += _single_baseCampaign_codec.CalculateSizeWithTag(BaseCampaign);
      }
      if (campaignBudget_ != null) {
        size += _single_campaignBudget_codec.CalculateSizeWithTag(CampaignBudget);
      }
      if (BiddingStrategyType != global::Google.Ads.GoogleAds.V1.Enums.BiddingStrategyTypeEnum.Types.BiddingStrategyType.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) BiddingStrategyType);
      }
      if (startDate_ != null) {
        size += _single_startDate_codec.CalculateSizeWithTag(StartDate);
      }
      if (endDate_ != null) {
        size += _single_endDate_codec.CalculateSizeWithTag(EndDate);
      }
      if (finalUrlSuffix_ != null) {
        size += _single_finalUrlSuffix_codec.CalculateSizeWithTag(FinalUrlSuffix);
      }
      size += frequencyCaps_.CalculateSize(_repeated_frequencyCaps_codec);
      if (VideoBrandSafetySuitability != global::Google.Ads.GoogleAds.V1.Enums.BrandSafetySuitabilityEnum.Types.BrandSafetySuitability.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) VideoBrandSafetySuitability);
      }
      if (vanityPharma_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(VanityPharma);
      }
      if (selectiveOptimization_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(SelectiveOptimization);
      }
      if (trackingSetting_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(TrackingSetting);
      }
      if (PaymentMode != global::Google.Ads.GoogleAds.V1.Enums.PaymentModeEnum.Types.PaymentMode.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) PaymentMode);
      }
      if (campaignBiddingStrategyCase_ == CampaignBiddingStrategyOneofCase.BiddingStrategy) {
        size += _oneof_biddingStrategy_codec.CalculateSizeWithTag(BiddingStrategy);
      }
      if (campaignBiddingStrategyCase_ == CampaignBiddingStrategyOneofCase.Commission) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Commission);
      }
      if (campaignBiddingStrategyCase_ == CampaignBiddingStrategyOneofCase.ManualCpc) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(ManualCpc);
      }
      if (campaignBiddingStrategyCase_ == CampaignBiddingStrategyOneofCase.ManualCpm) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(ManualCpm);
      }
      if (campaignBiddingStrategyCase_ == CampaignBiddingStrategyOneofCase.ManualCpv) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(ManualCpv);
      }
      if (campaignBiddingStrategyCase_ == CampaignBiddingStrategyOneofCase.MaximizeConversions) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(MaximizeConversions);
      }
      if (campaignBiddingStrategyCase_ == CampaignBiddingStrategyOneofCase.MaximizeConversionValue) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(MaximizeConversionValue);
      }
      if (campaignBiddingStrategyCase_ == CampaignBiddingStrategyOneofCase.TargetCpa) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(TargetCpa);
      }
      if (campaignBiddingStrategyCase_ == CampaignBiddingStrategyOneofCase.TargetImpressionShare) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(TargetImpressionShare);
      }
      if (campaignBiddingStrategyCase_ == CampaignBiddingStrategyOneofCase.TargetRoas) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(TargetRoas);
      }
      if (campaignBiddingStrategyCase_ == CampaignBiddingStrategyOneofCase.TargetSpend) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(TargetSpend);
      }
      if (campaignBiddingStrategyCase_ == CampaignBiddingStrategyOneofCase.PercentCpc) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(PercentCpc);
      }
      if (campaignBiddingStrategyCase_ == CampaignBiddingStrategyOneofCase.TargetCpm) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(TargetCpm);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Campaign other) {
      if (other == null) {
        return;
      }
      if (other.ResourceName.Length != 0) {
        ResourceName = other.ResourceName;
      }
      if (other.id_ != null) {
        if (id_ == null || other.Id != 0L) {
          Id = other.Id;
        }
      }
      if (other.name_ != null) {
        if (name_ == null || other.Name != "") {
          Name = other.Name;
        }
      }
      if (other.Status != global::Google.Ads.GoogleAds.V1.Enums.CampaignStatusEnum.Types.CampaignStatus.Unspecified) {
        Status = other.Status;
      }
      if (other.ServingStatus != global::Google.Ads.GoogleAds.V1.Enums.CampaignServingStatusEnum.Types.CampaignServingStatus.Unspecified) {
        ServingStatus = other.ServingStatus;
      }
      if (other.AdServingOptimizationStatus != global::Google.Ads.GoogleAds.V1.Enums.AdServingOptimizationStatusEnum.Types.AdServingOptimizationStatus.Unspecified) {
        AdServingOptimizationStatus = other.AdServingOptimizationStatus;
      }
      if (other.AdvertisingChannelType != global::Google.Ads.GoogleAds.V1.Enums.AdvertisingChannelTypeEnum.Types.AdvertisingChannelType.Unspecified) {
        AdvertisingChannelType = other.AdvertisingChannelType;
      }
      if (other.AdvertisingChannelSubType != global::Google.Ads.GoogleAds.V1.Enums.AdvertisingChannelSubTypeEnum.Types.AdvertisingChannelSubType.Unspecified) {
        AdvertisingChannelSubType = other.AdvertisingChannelSubType;
      }
      if (other.trackingUrlTemplate_ != null) {
        if (trackingUrlTemplate_ == null || other.TrackingUrlTemplate != "") {
          TrackingUrlTemplate = other.TrackingUrlTemplate;
        }
      }
      urlCustomParameters_.Add(other.urlCustomParameters_);
      if (other.realTimeBiddingSetting_ != null) {
        if (realTimeBiddingSetting_ == null) {
          RealTimeBiddingSetting = new global::Google.Ads.GoogleAds.V1.Common.RealTimeBiddingSetting();
        }
        RealTimeBiddingSetting.MergeFrom(other.RealTimeBiddingSetting);
      }
      if (other.networkSettings_ != null) {
        if (networkSettings_ == null) {
          NetworkSettings = new global::Google.Ads.GoogleAds.V1.Resources.Campaign.Types.NetworkSettings();
        }
        NetworkSettings.MergeFrom(other.NetworkSettings);
      }
      if (other.hotelSetting_ != null) {
        if (hotelSetting_ == null) {
          HotelSetting = new global::Google.Ads.GoogleAds.V1.Resources.Campaign.Types.HotelSettingInfo();
        }
        HotelSetting.MergeFrom(other.HotelSetting);
      }
      if (other.dynamicSearchAdsSetting_ != null) {
        if (dynamicSearchAdsSetting_ == null) {
          DynamicSearchAdsSetting = new global::Google.Ads.GoogleAds.V1.Resources.Campaign.Types.DynamicSearchAdsSetting();
        }
        DynamicSearchAdsSetting.MergeFrom(other.DynamicSearchAdsSetting);
      }
      if (other.shoppingSetting_ != null) {
        if (shoppingSetting_ == null) {
          ShoppingSetting = new global::Google.Ads.GoogleAds.V1.Resources.Campaign.Types.ShoppingSetting();
        }
        ShoppingSetting.MergeFrom(other.ShoppingSetting);
      }
      if (other.targetingSetting_ != null) {
        if (targetingSetting_ == null) {
          TargetingSetting = new global::Google.Ads.GoogleAds.V1.Common.TargetingSetting();
        }
        TargetingSetting.MergeFrom(other.TargetingSetting);
      }
      if (other.geoTargetTypeSetting_ != null) {
        if (geoTargetTypeSetting_ == null) {
          GeoTargetTypeSetting = new global::Google.Ads.GoogleAds.V1.Resources.Campaign.Types.GeoTargetTypeSetting();
        }
        GeoTargetTypeSetting.MergeFrom(other.GeoTargetTypeSetting);
      }
      if (other.appCampaignSetting_ != null) {
        if (appCampaignSetting_ == null) {
          AppCampaignSetting = new global::Google.Ads.GoogleAds.V1.Resources.Campaign.Types.AppCampaignSetting();
        }
        AppCampaignSetting.MergeFrom(other.AppCampaignSetting);
      }
      labels_.Add(other.labels_);
      if (other.ExperimentType != global::Google.Ads.GoogleAds.V1.Enums.CampaignExperimentTypeEnum.Types.CampaignExperimentType.Unspecified) {
        ExperimentType = other.ExperimentType;
      }
      if (other.baseCampaign_ != null) {
        if (baseCampaign_ == null || other.BaseCampaign != "") {
          BaseCampaign = other.BaseCampaign;
        }
      }
      if (other.campaignBudget_ != null) {
        if (campaignBudget_ == null || other.CampaignBudget != "") {
          CampaignBudget = other.CampaignBudget;
        }
      }
      if (other.BiddingStrategyType != global::Google.Ads.GoogleAds.V1.Enums.BiddingStrategyTypeEnum.Types.BiddingStrategyType.Unspecified) {
        BiddingStrategyType = other.BiddingStrategyType;
      }
      if (other.startDate_ != null) {
        if (startDate_ == null || other.StartDate != "") {
          StartDate = other.StartDate;
        }
      }
      if (other.endDate_ != null) {
        if (endDate_ == null || other.EndDate != "") {
          EndDate = other.EndDate;
        }
      }
      if (other.finalUrlSuffix_ != null) {
        if (finalUrlSuffix_ == null || other.FinalUrlSuffix != "") {
          FinalUrlSuffix = other.FinalUrlSuffix;
        }
      }
      frequencyCaps_.Add(other.frequencyCaps_);
      if (other.VideoBrandSafetySuitability != global::Google.Ads.GoogleAds.V1.Enums.BrandSafetySuitabilityEnum.Types.BrandSafetySuitability.Unspecified) {
        VideoBrandSafetySuitability = other.VideoBrandSafetySuitability;
      }
      if (other.vanityPharma_ != null) {
        if (vanityPharma_ == null) {
          VanityPharma = new global::Google.Ads.GoogleAds.V1.Resources.Campaign.Types.VanityPharma();
        }
        VanityPharma.MergeFrom(other.VanityPharma);
      }
      if (other.selectiveOptimization_ != null) {
        if (selectiveOptimization_ == null) {
          SelectiveOptimization = new global::Google.Ads.GoogleAds.V1.Resources.Campaign.Types.SelectiveOptimization();
        }
        SelectiveOptimization.MergeFrom(other.SelectiveOptimization);
      }
      if (other.trackingSetting_ != null) {
        if (trackingSetting_ == null) {
          TrackingSetting = new global::Google.Ads.GoogleAds.V1.Resources.Campaign.Types.TrackingSetting();
        }
        TrackingSetting.MergeFrom(other.TrackingSetting);
      }
      if (other.PaymentMode != global::Google.Ads.GoogleAds.V1.Enums.PaymentModeEnum.Types.PaymentMode.Unspecified) {
        PaymentMode = other.PaymentMode;
      }
      switch (other.CampaignBiddingStrategyCase) {
        case CampaignBiddingStrategyOneofCase.BiddingStrategy:
          BiddingStrategy = other.BiddingStrategy;
          break;
        case CampaignBiddingStrategyOneofCase.Commission:
          if (Commission == null) {
            Commission = new global::Google.Ads.GoogleAds.V1.Common.Commission();
          }
          Commission.MergeFrom(other.Commission);
          break;
        case CampaignBiddingStrategyOneofCase.ManualCpc:
          if (ManualCpc == null) {
            ManualCpc = new global::Google.Ads.GoogleAds.V1.Common.ManualCpc();
          }
          ManualCpc.MergeFrom(other.ManualCpc);
          break;
        case CampaignBiddingStrategyOneofCase.ManualCpm:
          if (ManualCpm == null) {
            ManualCpm = new global::Google.Ads.GoogleAds.V1.Common.ManualCpm();
          }
          ManualCpm.MergeFrom(other.ManualCpm);
          break;
        case CampaignBiddingStrategyOneofCase.ManualCpv:
          if (ManualCpv == null) {
            ManualCpv = new global::Google.Ads.GoogleAds.V1.Common.ManualCpv();
          }
          ManualCpv.MergeFrom(other.ManualCpv);
          break;
        case CampaignBiddingStrategyOneofCase.MaximizeConversions:
          if (MaximizeConversions == null) {
            MaximizeConversions = new global::Google.Ads.GoogleAds.V1.Common.MaximizeConversions();
          }
          MaximizeConversions.MergeFrom(other.MaximizeConversions);
          break;
        case CampaignBiddingStrategyOneofCase.MaximizeConversionValue:
          if (MaximizeConversionValue == null) {
            MaximizeConversionValue = new global::Google.Ads.GoogleAds.V1.Common.MaximizeConversionValue();
          }
          MaximizeConversionValue.MergeFrom(other.MaximizeConversionValue);
          break;
        case CampaignBiddingStrategyOneofCase.TargetCpa:
          if (TargetCpa == null) {
            TargetCpa = new global::Google.Ads.GoogleAds.V1.Common.TargetCpa();
          }
          TargetCpa.MergeFrom(other.TargetCpa);
          break;
        case CampaignBiddingStrategyOneofCase.TargetImpressionShare:
          if (TargetImpressionShare == null) {
            TargetImpressionShare = new global::Google.Ads.GoogleAds.V1.Common.TargetImpressionShare();
          }
          TargetImpressionShare.MergeFrom(other.TargetImpressionShare);
          break;
        case CampaignBiddingStrategyOneofCase.TargetRoas:
          if (TargetRoas == null) {
            TargetRoas = new global::Google.Ads.GoogleAds.V1.Common.TargetRoas();
          }
          TargetRoas.MergeFrom(other.TargetRoas);
          break;
        case CampaignBiddingStrategyOneofCase.TargetSpend:
          if (TargetSpend == null) {
            TargetSpend = new global::Google.Ads.GoogleAds.V1.Common.TargetSpend();
          }
          TargetSpend.MergeFrom(other.TargetSpend);
          break;
        case CampaignBiddingStrategyOneofCase.PercentCpc:
          if (PercentCpc == null) {
            PercentCpc = new global::Google.Ads.GoogleAds.V1.Common.PercentCpc();
          }
          PercentCpc.MergeFrom(other.PercentCpc);
          break;
        case CampaignBiddingStrategyOneofCase.TargetCpm:
          if (TargetCpm == null) {
            TargetCpm = new global::Google.Ads.GoogleAds.V1.Common.TargetCpm();
          }
          TargetCpm.MergeFrom(other.TargetCpm);
          break;
      }

      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            ResourceName = input.ReadString();
            break;
          }
          case 26: {
            long? value = _single_id_codec.Read(input);
            if (id_ == null || value != 0L) {
              Id = value;
            }
            break;
          }
          case 34: {
            string value = _single_name_codec.Read(input);
            if (name_ == null || value != "") {
              Name = value;
            }
            break;
          }
          case 40: {
            Status = (global::Google.Ads.GoogleAds.V1.Enums.CampaignStatusEnum.Types.CampaignStatus) input.ReadEnum();
            break;
          }
          case 50: {
            string value = _single_campaignBudget_codec.Read(input);
            if (campaignBudget_ == null || value != "") {
              CampaignBudget = value;
            }
            break;
          }
          case 64: {
            AdServingOptimizationStatus = (global::Google.Ads.GoogleAds.V1.Enums.AdServingOptimizationStatusEnum.Types.AdServingOptimizationStatus) input.ReadEnum();
            break;
          }
          case 72: {
            AdvertisingChannelType = (global::Google.Ads.GoogleAds.V1.Enums.AdvertisingChannelTypeEnum.Types.AdvertisingChannelType) input.ReadEnum();
            break;
          }
          case 80: {
            AdvertisingChannelSubType = (global::Google.Ads.GoogleAds.V1.Enums.AdvertisingChannelSubTypeEnum.Types.AdvertisingChannelSubType) input.ReadEnum();
            break;
          }
          case 90: {
            string value = _single_trackingUrlTemplate_codec.Read(input);
            if (trackingUrlTemplate_ == null || value != "") {
              TrackingUrlTemplate = value;
            }
            break;
          }
          case 98: {
            urlCustomParameters_.AddEntriesFrom(input, _repeated_urlCustomParameters_codec);
            break;
          }
          case 114: {
            if (networkSettings_ == null) {
              NetworkSettings = new global::Google.Ads.GoogleAds.V1.Resources.Campaign.Types.NetworkSettings();
            }
            input.ReadMessage(NetworkSettings);
            break;
          }
          case 136: {
            ExperimentType = (global::Google.Ads.GoogleAds.V1.Enums.CampaignExperimentTypeEnum.Types.CampaignExperimentType) input.ReadEnum();
            break;
          }
          case 154: {
            string value = _single_startDate_codec.Read(input);
            if (startDate_ == null || value != "") {
              StartDate = value;
            }
            break;
          }
          case 162: {
            string value = _single_endDate_codec.Read(input);
            if (endDate_ == null || value != "") {
              EndDate = value;
            }
            break;
          }
          case 168: {
            ServingStatus = (global::Google.Ads.GoogleAds.V1.Enums.CampaignServingStatusEnum.Types.CampaignServingStatus) input.ReadEnum();
            break;
          }
          case 176: {
            BiddingStrategyType = (global::Google.Ads.GoogleAds.V1.Enums.BiddingStrategyTypeEnum.Types.BiddingStrategyType) input.ReadEnum();
            break;
          }
          case 186: {
            BiddingStrategy = _oneof_biddingStrategy_codec.Read(input);
            break;
          }
          case 194: {
            global::Google.Ads.GoogleAds.V1.Common.ManualCpc subBuilder = new global::Google.Ads.GoogleAds.V1.Common.ManualCpc();
            if (campaignBiddingStrategyCase_ == CampaignBiddingStrategyOneofCase.ManualCpc) {
              subBuilder.MergeFrom(ManualCpc);
            }
            input.ReadMessage(subBuilder);
            ManualCpc = subBuilder;
            break;
          }
          case 202: {
            global::Google.Ads.GoogleAds.V1.Common.ManualCpm subBuilder = new global::Google.Ads.GoogleAds.V1.Common.ManualCpm();
            if (campaignBiddingStrategyCase_ == CampaignBiddingStrategyOneofCase.ManualCpm) {
              subBuilder.MergeFrom(ManualCpm);
            }
            input.ReadMessage(subBuilder);
            ManualCpm = subBuilder;
            break;
          }
          case 210: {
            global::Google.Ads.GoogleAds.V1.Common.TargetCpa subBuilder = new global::Google.Ads.GoogleAds.V1.Common.TargetCpa();
            if (campaignBiddingStrategyCase_ == CampaignBiddingStrategyOneofCase.TargetCpa) {
              subBuilder.MergeFrom(TargetCpa);
            }
            input.ReadMessage(subBuilder);
            TargetCpa = subBuilder;
            break;
          }
          case 218: {
            global::Google.Ads.GoogleAds.V1.Common.TargetSpend subBuilder = new global::Google.Ads.GoogleAds.V1.Common.TargetSpend();
            if (campaignBiddingStrategyCase_ == CampaignBiddingStrategyOneofCase.TargetSpend) {
              subBuilder.MergeFrom(TargetSpend);
            }
            input.ReadMessage(subBuilder);
            TargetSpend = subBuilder;
            break;
          }
          case 226: {
            string value = _single_baseCampaign_codec.Read(input);
            if (baseCampaign_ == null || value != "") {
              BaseCampaign = value;
            }
            break;
          }
          case 234: {
            global::Google.Ads.GoogleAds.V1.Common.TargetRoas subBuilder = new global::Google.Ads.GoogleAds.V1.Common.TargetRoas();
            if (campaignBiddingStrategyCase_ == CampaignBiddingStrategyOneofCase.TargetRoas) {
              subBuilder.MergeFrom(TargetRoas);
            }
            input.ReadMessage(subBuilder);
            TargetRoas = subBuilder;
            break;
          }
          case 242: {
            global::Google.Ads.GoogleAds.V1.Common.MaximizeConversions subBuilder = new global::Google.Ads.GoogleAds.V1.Common.MaximizeConversions();
            if (campaignBiddingStrategyCase_ == CampaignBiddingStrategyOneofCase.MaximizeConversions) {
              subBuilder.MergeFrom(MaximizeConversions);
            }
            input.ReadMessage(subBuilder);
            MaximizeConversions = subBuilder;
            break;
          }
          case 250: {
            global::Google.Ads.GoogleAds.V1.Common.MaximizeConversionValue subBuilder = new global::Google.Ads.GoogleAds.V1.Common.MaximizeConversionValue();
            if (campaignBiddingStrategyCase_ == CampaignBiddingStrategyOneofCase.MaximizeConversionValue) {
              subBuilder.MergeFrom(MaximizeConversionValue);
            }
            input.ReadMessage(subBuilder);
            MaximizeConversionValue = subBuilder;
            break;
          }
          case 258: {
            if (hotelSetting_ == null) {
              HotelSetting = new global::Google.Ads.GoogleAds.V1.Resources.Campaign.Types.HotelSettingInfo();
            }
            input.ReadMessage(HotelSetting);
            break;
          }
          case 266: {
            if (dynamicSearchAdsSetting_ == null) {
              DynamicSearchAdsSetting = new global::Google.Ads.GoogleAds.V1.Resources.Campaign.Types.DynamicSearchAdsSetting();
            }
            input.ReadMessage(DynamicSearchAdsSetting);
            break;
          }
          case 274: {
            global::Google.Ads.GoogleAds.V1.Common.PercentCpc subBuilder = new global::Google.Ads.GoogleAds.V1.Common.PercentCpc();
            if (campaignBiddingStrategyCase_ == CampaignBiddingStrategyOneofCase.PercentCpc) {
              subBuilder.MergeFrom(PercentCpc);
            }
            input.ReadMessage(subBuilder);
            PercentCpc = subBuilder;
            break;
          }
          case 290: {
            if (shoppingSetting_ == null) {
              ShoppingSetting = new global::Google.Ads.GoogleAds.V1.Resources.Campaign.Types.ShoppingSetting();
            }
            input.ReadMessage(ShoppingSetting);
            break;
          }
          case 298: {
            global::Google.Ads.GoogleAds.V1.Common.ManualCpv subBuilder = new global::Google.Ads.GoogleAds.V1.Common.ManualCpv();
            if (campaignBiddingStrategyCase_ == CampaignBiddingStrategyOneofCase.ManualCpv) {
              subBuilder.MergeFrom(ManualCpv);
            }
            input.ReadMessage(subBuilder);
            ManualCpv = subBuilder;
            break;
          }
          case 306: {
            string value = _single_finalUrlSuffix_codec.Read(input);
            if (finalUrlSuffix_ == null || value != "") {
              FinalUrlSuffix = value;
            }
            break;
          }
          case 314: {
            if (realTimeBiddingSetting_ == null) {
              RealTimeBiddingSetting = new global::Google.Ads.GoogleAds.V1.Common.RealTimeBiddingSetting();
            }
            input.ReadMessage(RealTimeBiddingSetting);
            break;
          }
          case 322: {
            frequencyCaps_.AddEntriesFrom(input, _repeated_frequencyCaps_codec);
            break;
          }
          case 330: {
            global::Google.Ads.GoogleAds.V1.Common.TargetCpm subBuilder = new global::Google.Ads.GoogleAds.V1.Common.TargetCpm();
            if (campaignBiddingStrategyCase_ == CampaignBiddingStrategyOneofCase.TargetCpm) {
              subBuilder.MergeFrom(TargetCpm);
            }
            input.ReadMessage(subBuilder);
            TargetCpm = subBuilder;
            break;
          }
          case 336: {
            VideoBrandSafetySuitability = (global::Google.Ads.GoogleAds.V1.Enums.BrandSafetySuitabilityEnum.Types.BrandSafetySuitability) input.ReadEnum();
            break;
          }
          case 346: {
            if (targetingSetting_ == null) {
              TargetingSetting = new global::Google.Ads.GoogleAds.V1.Common.TargetingSetting();
            }
            input.ReadMessage(TargetingSetting);
            break;
          }
          case 354: {
            if (vanityPharma_ == null) {
              VanityPharma = new global::Google.Ads.GoogleAds.V1.Resources.Campaign.Types.VanityPharma();
            }
            input.ReadMessage(VanityPharma);
            break;
          }
          case 362: {
            if (selectiveOptimization_ == null) {
              SelectiveOptimization = new global::Google.Ads.GoogleAds.V1.Resources.Campaign.Types.SelectiveOptimization();
            }
            input.ReadMessage(SelectiveOptimization);
            break;
          }
          case 370: {
            if (trackingSetting_ == null) {
              TrackingSetting = new global::Google.Ads.GoogleAds.V1.Resources.Campaign.Types.TrackingSetting();
            }
            input.ReadMessage(TrackingSetting);
            break;
          }
          case 378: {
            if (geoTargetTypeSetting_ == null) {
              GeoTargetTypeSetting = new global::Google.Ads.GoogleAds.V1.Resources.Campaign.Types.GeoTargetTypeSetting();
            }
            input.ReadMessage(GeoTargetTypeSetting);
            break;
          }
          case 386: {
            global::Google.Ads.GoogleAds.V1.Common.TargetImpressionShare subBuilder = new global::Google.Ads.GoogleAds.V1.Common.TargetImpressionShare();
            if (campaignBiddingStrategyCase_ == CampaignBiddingStrategyOneofCase.TargetImpressionShare) {
              subBuilder.MergeFrom(TargetImpressionShare);
            }
            input.ReadMessage(subBuilder);
            TargetImpressionShare = subBuilder;
            break;
          }
          case 394: {
            global::Google.Ads.GoogleAds.V1.Common.Commission subBuilder = new global::Google.Ads.GoogleAds.V1.Common.Commission();
            if (campaignBiddingStrategyCase_ == CampaignBiddingStrategyOneofCase.Commission) {
              subBuilder.MergeFrom(Commission);
            }
            input.ReadMessage(subBuilder);
            Commission = subBuilder;
            break;
          }
          case 410: {
            if (appCampaignSetting_ == null) {
              AppCampaignSetting = new global::Google.Ads.GoogleAds.V1.Resources.Campaign.Types.AppCampaignSetting();
            }
            input.ReadMessage(AppCampaignSetting);
            break;
          }
          case 416: {
            PaymentMode = (global::Google.Ads.GoogleAds.V1.Enums.PaymentModeEnum.Types.PaymentMode) input.ReadEnum();
            break;
          }
          case 426: {
            labels_.AddEntriesFrom(input, _repeated_labels_codec);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the Campaign message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      /// <summary>
      /// The network settings for the campaign.
      /// </summary>
      public sealed partial class NetworkSettings : pb::IMessage<NetworkSettings> {
        private static readonly pb::MessageParser<NetworkSettings> _parser = new pb::MessageParser<NetworkSettings>(() => new NetworkSettings());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<NetworkSettings> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Google.Ads.GoogleAds.V1.Resources.Campaign.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public NetworkSettings() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public NetworkSettings(NetworkSettings other) : this() {
          TargetGoogleSearch = other.TargetGoogleSearch;
          TargetSearchNetwork = other.TargetSearchNetwork;
          TargetContentNetwork = other.TargetContentNetwork;
          TargetPartnerSearchNetwork = other.TargetPartnerSearchNetwork;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public NetworkSettings Clone() {
          return new NetworkSettings(this);
        }

        /// <summary>Field number for the "target_google_search" field.</summary>
        public const int TargetGoogleSearchFieldNumber = 1;
        private static readonly pb::FieldCodec<bool?> _single_targetGoogleSearch_codec = pb::FieldCodec.ForStructWrapper<bool>(10);
        private bool? targetGoogleSearch_;
        /// <summary>
        /// Whether ads will be served with google.com search results.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool? TargetGoogleSearch {
          get { return targetGoogleSearch_; }
          set {
            targetGoogleSearch_ = value;
          }
        }


        /// <summary>Field number for the "target_search_network" field.</summary>
        public const int TargetSearchNetworkFieldNumber = 2;
        private static readonly pb::FieldCodec<bool?> _single_targetSearchNetwork_codec = pb::FieldCodec.ForStructWrapper<bool>(18);
        private bool? targetSearchNetwork_;
        /// <summary>
        /// Whether ads will be served on partner sites in the Google Search Network
        /// (requires `target_google_search` to also be `true`).
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool? TargetSearchNetwork {
          get { return targetSearchNetwork_; }
          set {
            targetSearchNetwork_ = value;
          }
        }


        /// <summary>Field number for the "target_content_network" field.</summary>
        public const int TargetContentNetworkFieldNumber = 3;
        private static readonly pb::FieldCodec<bool?> _single_targetContentNetwork_codec = pb::FieldCodec.ForStructWrapper<bool>(26);
        private bool? targetContentNetwork_;
        /// <summary>
        /// Whether ads will be served on specified placements in the Google Display
        /// Network. Placements are specified using the Placement criterion.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool? TargetContentNetwork {
          get { return targetContentNetwork_; }
          set {
            targetContentNetwork_ = value;
          }
        }


        /// <summary>Field number for the "target_partner_search_network" field.</summary>
        public const int TargetPartnerSearchNetworkFieldNumber = 4;
        private static readonly pb::FieldCodec<bool?> _single_targetPartnerSearchNetwork_codec = pb::FieldCodec.ForStructWrapper<bool>(34);
        private bool? targetPartnerSearchNetwork_;
        /// <summary>
        /// Whether ads will be served on the Google Partner Network.
        /// This is available only to some select Google partner accounts.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool? TargetPartnerSearchNetwork {
          get { return targetPartnerSearchNetwork_; }
          set {
            targetPartnerSearchNetwork_ = value;
          }
        }


        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as NetworkSettings);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(NetworkSettings other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (TargetGoogleSearch != other.TargetGoogleSearch) return false;
          if (TargetSearchNetwork != other.TargetSearchNetwork) return false;
          if (TargetContentNetwork != other.TargetContentNetwork) return false;
          if (TargetPartnerSearchNetwork != other.TargetPartnerSearchNetwork) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (targetGoogleSearch_ != null) hash ^= TargetGoogleSearch.GetHashCode();
          if (targetSearchNetwork_ != null) hash ^= TargetSearchNetwork.GetHashCode();
          if (targetContentNetwork_ != null) hash ^= TargetContentNetwork.GetHashCode();
          if (targetPartnerSearchNetwork_ != null) hash ^= TargetPartnerSearchNetwork.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (targetGoogleSearch_ != null) {
            _single_targetGoogleSearch_codec.WriteTagAndValue(output, TargetGoogleSearch);
          }
          if (targetSearchNetwork_ != null) {
            _single_targetSearchNetwork_codec.WriteTagAndValue(output, TargetSearchNetwork);
          }
          if (targetContentNetwork_ != null) {
            _single_targetContentNetwork_codec.WriteTagAndValue(output, TargetContentNetwork);
          }
          if (targetPartnerSearchNetwork_ != null) {
            _single_targetPartnerSearchNetwork_codec.WriteTagAndValue(output, TargetPartnerSearchNetwork);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (targetGoogleSearch_ != null) {
            size += _single_targetGoogleSearch_codec.CalculateSizeWithTag(TargetGoogleSearch);
          }
          if (targetSearchNetwork_ != null) {
            size += _single_targetSearchNetwork_codec.CalculateSizeWithTag(TargetSearchNetwork);
          }
          if (targetContentNetwork_ != null) {
            size += _single_targetContentNetwork_codec.CalculateSizeWithTag(TargetContentNetwork);
          }
          if (targetPartnerSearchNetwork_ != null) {
            size += _single_targetPartnerSearchNetwork_codec.CalculateSizeWithTag(TargetPartnerSearchNetwork);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(NetworkSettings other) {
          if (other == null) {
            return;
          }
          if (other.targetGoogleSearch_ != null) {
            if (targetGoogleSearch_ == null || other.TargetGoogleSearch != false) {
              TargetGoogleSearch = other.TargetGoogleSearch;
            }
          }
          if (other.targetSearchNetwork_ != null) {
            if (targetSearchNetwork_ == null || other.TargetSearchNetwork != false) {
              TargetSearchNetwork = other.TargetSearchNetwork;
            }
          }
          if (other.targetContentNetwork_ != null) {
            if (targetContentNetwork_ == null || other.TargetContentNetwork != false) {
              TargetContentNetwork = other.TargetContentNetwork;
            }
          }
          if (other.targetPartnerSearchNetwork_ != null) {
            if (targetPartnerSearchNetwork_ == null || other.TargetPartnerSearchNetwork != false) {
              TargetPartnerSearchNetwork = other.TargetPartnerSearchNetwork;
            }
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                bool? value = _single_targetGoogleSearch_codec.Read(input);
                if (targetGoogleSearch_ == null || value != false) {
                  TargetGoogleSearch = value;
                }
                break;
              }
              case 18: {
                bool? value = _single_targetSearchNetwork_codec.Read(input);
                if (targetSearchNetwork_ == null || value != false) {
                  TargetSearchNetwork = value;
                }
                break;
              }
              case 26: {
                bool? value = _single_targetContentNetwork_codec.Read(input);
                if (targetContentNetwork_ == null || value != false) {
                  TargetContentNetwork = value;
                }
                break;
              }
              case 34: {
                bool? value = _single_targetPartnerSearchNetwork_codec.Read(input);
                if (targetPartnerSearchNetwork_ == null || value != false) {
                  TargetPartnerSearchNetwork = value;
                }
                break;
              }
            }
          }
        }

      }

      /// <summary>
      /// Campaign-level settings for hotel ads.
      /// </summary>
      public sealed partial class HotelSettingInfo : pb::IMessage<HotelSettingInfo> {
        private static readonly pb::MessageParser<HotelSettingInfo> _parser = new pb::MessageParser<HotelSettingInfo>(() => new HotelSettingInfo());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<HotelSettingInfo> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Google.Ads.GoogleAds.V1.Resources.Campaign.Descriptor.NestedTypes[1]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public HotelSettingInfo() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public HotelSettingInfo(HotelSettingInfo other) : this() {
          HotelCenterId = other.HotelCenterId;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public HotelSettingInfo Clone() {
          return new HotelSettingInfo(this);
        }

        /// <summary>Field number for the "hotel_center_id" field.</summary>
        public const int HotelCenterIdFieldNumber = 1;
        private static readonly pb::FieldCodec<long?> _single_hotelCenterId_codec = pb::FieldCodec.ForStructWrapper<long>(10);
        private long? hotelCenterId_;
        /// <summary>
        /// Immutable. The linked Hotel Center account.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public long? HotelCenterId {
          get { return hotelCenterId_; }
          set {
            hotelCenterId_ = value;
          }
        }


        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as HotelSettingInfo);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(HotelSettingInfo other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (HotelCenterId != other.HotelCenterId) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (hotelCenterId_ != null) hash ^= HotelCenterId.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (hotelCenterId_ != null) {
            _single_hotelCenterId_codec.WriteTagAndValue(output, HotelCenterId);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (hotelCenterId_ != null) {
            size += _single_hotelCenterId_codec.CalculateSizeWithTag(HotelCenterId);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(HotelSettingInfo other) {
          if (other == null) {
            return;
          }
          if (other.hotelCenterId_ != null) {
            if (hotelCenterId_ == null || other.HotelCenterId != 0L) {
              HotelCenterId = other.HotelCenterId;
            }
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                long? value = _single_hotelCenterId_codec.Read(input);
                if (hotelCenterId_ == null || value != 0L) {
                  HotelCenterId = value;
                }
                break;
              }
            }
          }
        }

      }

      /// <summary>
      /// The setting for controlling Dynamic Search Ads (DSA).
      /// </summary>
      public sealed partial class DynamicSearchAdsSetting : pb::IMessage<DynamicSearchAdsSetting> {
        private static readonly pb::MessageParser<DynamicSearchAdsSetting> _parser = new pb::MessageParser<DynamicSearchAdsSetting>(() => new DynamicSearchAdsSetting());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<DynamicSearchAdsSetting> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Google.Ads.GoogleAds.V1.Resources.Campaign.Descriptor.NestedTypes[2]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public DynamicSearchAdsSetting() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public DynamicSearchAdsSetting(DynamicSearchAdsSetting other) : this() {
          DomainName = other.DomainName;
          LanguageCode = other.LanguageCode;
          UseSuppliedUrlsOnly = other.UseSuppliedUrlsOnly;
          feeds_ = other.feeds_.Clone();
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public DynamicSearchAdsSetting Clone() {
          return new DynamicSearchAdsSetting(this);
        }

        /// <summary>Field number for the "domain_name" field.</summary>
        public const int DomainNameFieldNumber = 1;
        private static readonly pb::FieldCodec<string> _single_domainName_codec = pb::FieldCodec.ForClassWrapper<string>(10);
        private string domainName_;
        /// <summary>
        /// The Internet domain name that this setting represents, e.g., "google.com"
        /// or "www.google.com".
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string DomainName {
          get { return domainName_; }
          set {
            domainName_ = value;
          }
        }


        /// <summary>Field number for the "language_code" field.</summary>
        public const int LanguageCodeFieldNumber = 2;
        private static readonly pb::FieldCodec<string> _single_languageCode_codec = pb::FieldCodec.ForClassWrapper<string>(18);
        private string languageCode_;
        /// <summary>
        /// The language code specifying the language of the domain, e.g., "en".
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string LanguageCode {
          get { return languageCode_; }
          set {
            languageCode_ = value;
          }
        }


        /// <summary>Field number for the "use_supplied_urls_only" field.</summary>
        public const int UseSuppliedUrlsOnlyFieldNumber = 3;
        private static readonly pb::FieldCodec<bool?> _single_useSuppliedUrlsOnly_codec = pb::FieldCodec.ForStructWrapper<bool>(26);
        private bool? useSuppliedUrlsOnly_;
        /// <summary>
        /// Whether the campaign uses advertiser supplied URLs exclusively.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool? UseSuppliedUrlsOnly {
          get { return useSuppliedUrlsOnly_; }
          set {
            useSuppliedUrlsOnly_ = value;
          }
        }


        /// <summary>Field number for the "feeds" field.</summary>
        public const int FeedsFieldNumber = 5;
        private static readonly pb::FieldCodec<string> _repeated_feeds_codec
            = pb::FieldCodec.ForClassWrapper<string>(42);
        private readonly pbc::RepeatedField<string> feeds_ = new pbc::RepeatedField<string>();
        /// <summary>
        /// Output only. The list of page feeds associated with the campaign.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<string> Feeds {
          get { return feeds_; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as DynamicSearchAdsSetting);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(DynamicSearchAdsSetting other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (DomainName != other.DomainName) return false;
          if (LanguageCode != other.LanguageCode) return false;
          if (UseSuppliedUrlsOnly != other.UseSuppliedUrlsOnly) return false;
          if(!feeds_.Equals(other.feeds_)) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (domainName_ != null) hash ^= DomainName.GetHashCode();
          if (languageCode_ != null) hash ^= LanguageCode.GetHashCode();
          if (useSuppliedUrlsOnly_ != null) hash ^= UseSuppliedUrlsOnly.GetHashCode();
          hash ^= feeds_.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (domainName_ != null) {
            _single_domainName_codec.WriteTagAndValue(output, DomainName);
          }
          if (languageCode_ != null) {
            _single_languageCode_codec.WriteTagAndValue(output, LanguageCode);
          }
          if (useSuppliedUrlsOnly_ != null) {
            _single_useSuppliedUrlsOnly_codec.WriteTagAndValue(output, UseSuppliedUrlsOnly);
          }
          feeds_.WriteTo(output, _repeated_feeds_codec);
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (domainName_ != null) {
            size += _single_domainName_codec.CalculateSizeWithTag(DomainName);
          }
          if (languageCode_ != null) {
            size += _single_languageCode_codec.CalculateSizeWithTag(LanguageCode);
          }
          if (useSuppliedUrlsOnly_ != null) {
            size += _single_useSuppliedUrlsOnly_codec.CalculateSizeWithTag(UseSuppliedUrlsOnly);
          }
          size += feeds_.CalculateSize(_repeated_feeds_codec);
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(DynamicSearchAdsSetting other) {
          if (other == null) {
            return;
          }
          if (other.domainName_ != null) {
            if (domainName_ == null || other.DomainName != "") {
              DomainName = other.DomainName;
            }
          }
          if (other.languageCode_ != null) {
            if (languageCode_ == null || other.LanguageCode != "") {
              LanguageCode = other.LanguageCode;
            }
          }
          if (other.useSuppliedUrlsOnly_ != null) {
            if (useSuppliedUrlsOnly_ == null || other.UseSuppliedUrlsOnly != false) {
              UseSuppliedUrlsOnly = other.UseSuppliedUrlsOnly;
            }
          }
          feeds_.Add(other.feeds_);
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                string value = _single_domainName_codec.Read(input);
                if (domainName_ == null || value != "") {
                  DomainName = value;
                }
                break;
              }
              case 18: {
                string value = _single_languageCode_codec.Read(input);
                if (languageCode_ == null || value != "") {
                  LanguageCode = value;
                }
                break;
              }
              case 26: {
                bool? value = _single_useSuppliedUrlsOnly_codec.Read(input);
                if (useSuppliedUrlsOnly_ == null || value != false) {
                  UseSuppliedUrlsOnly = value;
                }
                break;
              }
              case 42: {
                feeds_.AddEntriesFrom(input, _repeated_feeds_codec);
                break;
              }
            }
          }
        }

      }

      /// <summary>
      /// The setting for Shopping campaigns. Defines the universe of products that
      /// can be advertised by the campaign, and how this campaign interacts with
      /// other Shopping campaigns.
      /// </summary>
      public sealed partial class ShoppingSetting : pb::IMessage<ShoppingSetting> {
        private static readonly pb::MessageParser<ShoppingSetting> _parser = new pb::MessageParser<ShoppingSetting>(() => new ShoppingSetting());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<ShoppingSetting> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Google.Ads.GoogleAds.V1.Resources.Campaign.Descriptor.NestedTypes[3]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ShoppingSetting() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ShoppingSetting(ShoppingSetting other) : this() {
          MerchantId = other.MerchantId;
          SalesCountry = other.SalesCountry;
          CampaignPriority = other.CampaignPriority;
          EnableLocal = other.EnableLocal;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ShoppingSetting Clone() {
          return new ShoppingSetting(this);
        }

        /// <summary>Field number for the "merchant_id" field.</summary>
        public const int MerchantIdFieldNumber = 1;
        private static readonly pb::FieldCodec<long?> _single_merchantId_codec = pb::FieldCodec.ForStructWrapper<long>(10);
        private long? merchantId_;
        /// <summary>
        /// Immutable. ID of the Merchant Center account.
        /// This field is required for create operations. This field is immutable for
        /// Shopping campaigns.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public long? MerchantId {
          get { return merchantId_; }
          set {
            merchantId_ = value;
          }
        }


        /// <summary>Field number for the "sales_country" field.</summary>
        public const int SalesCountryFieldNumber = 2;
        private static readonly pb::FieldCodec<string> _single_salesCountry_codec = pb::FieldCodec.ForClassWrapper<string>(18);
        private string salesCountry_;
        /// <summary>
        /// Immutable. Sales country of products to include in the campaign.
        /// This field is required for Shopping campaigns. This field is immutable.
        /// This field is optional for non-Shopping campaigns, but it must be equal
        /// to 'ZZ' if set.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string SalesCountry {
          get { return salesCountry_; }
          set {
            salesCountry_ = value;
          }
        }


        /// <summary>Field number for the "campaign_priority" field.</summary>
        public const int CampaignPriorityFieldNumber = 3;
        private static readonly pb::FieldCodec<int?> _single_campaignPriority_codec = pb::FieldCodec.ForStructWrapper<int>(26);
        private int? campaignPriority_;
        /// <summary>
        /// Priority of the campaign. Campaigns with numerically higher priorities
        /// take precedence over those with lower priorities.
        /// This field is required for Shopping campaigns, with values between 0 and
        /// 2, inclusive.
        /// This field is optional for Smart Shopping campaigns, but must be equal to
        /// 3 if set.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int? CampaignPriority {
          get { return campaignPriority_; }
          set {
            campaignPriority_ = value;
          }
        }


        /// <summary>Field number for the "enable_local" field.</summary>
        public const int EnableLocalFieldNumber = 4;
        private static readonly pb::FieldCodec<bool?> _single_enableLocal_codec = pb::FieldCodec.ForStructWrapper<bool>(34);
        private bool? enableLocal_;
        /// <summary>
        /// Whether to include local products.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool? EnableLocal {
          get { return enableLocal_; }
          set {
            enableLocal_ = value;
          }
        }


        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as ShoppingSetting);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(ShoppingSetting other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (MerchantId != other.MerchantId) return false;
          if (SalesCountry != other.SalesCountry) return false;
          if (CampaignPriority != other.CampaignPriority) return false;
          if (EnableLocal != other.EnableLocal) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (merchantId_ != null) hash ^= MerchantId.GetHashCode();
          if (salesCountry_ != null) hash ^= SalesCountry.GetHashCode();
          if (campaignPriority_ != null) hash ^= CampaignPriority.GetHashCode();
          if (enableLocal_ != null) hash ^= EnableLocal.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (merchantId_ != null) {
            _single_merchantId_codec.WriteTagAndValue(output, MerchantId);
          }
          if (salesCountry_ != null) {
            _single_salesCountry_codec.WriteTagAndValue(output, SalesCountry);
          }
          if (campaignPriority_ != null) {
            _single_campaignPriority_codec.WriteTagAndValue(output, CampaignPriority);
          }
          if (enableLocal_ != null) {
            _single_enableLocal_codec.WriteTagAndValue(output, EnableLocal);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (merchantId_ != null) {
            size += _single_merchantId_codec.CalculateSizeWithTag(MerchantId);
          }
          if (salesCountry_ != null) {
            size += _single_salesCountry_codec.CalculateSizeWithTag(SalesCountry);
          }
          if (campaignPriority_ != null) {
            size += _single_campaignPriority_codec.CalculateSizeWithTag(CampaignPriority);
          }
          if (enableLocal_ != null) {
            size += _single_enableLocal_codec.CalculateSizeWithTag(EnableLocal);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(ShoppingSetting other) {
          if (other == null) {
            return;
          }
          if (other.merchantId_ != null) {
            if (merchantId_ == null || other.MerchantId != 0L) {
              MerchantId = other.MerchantId;
            }
          }
          if (other.salesCountry_ != null) {
            if (salesCountry_ == null || other.SalesCountry != "") {
              SalesCountry = other.SalesCountry;
            }
          }
          if (other.campaignPriority_ != null) {
            if (campaignPriority_ == null || other.CampaignPriority != 0) {
              CampaignPriority = other.CampaignPriority;
            }
          }
          if (other.enableLocal_ != null) {
            if (enableLocal_ == null || other.EnableLocal != false) {
              EnableLocal = other.EnableLocal;
            }
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                long? value = _single_merchantId_codec.Read(input);
                if (merchantId_ == null || value != 0L) {
                  MerchantId = value;
                }
                break;
              }
              case 18: {
                string value = _single_salesCountry_codec.Read(input);
                if (salesCountry_ == null || value != "") {
                  SalesCountry = value;
                }
                break;
              }
              case 26: {
                int? value = _single_campaignPriority_codec.Read(input);
                if (campaignPriority_ == null || value != 0) {
                  CampaignPriority = value;
                }
                break;
              }
              case 34: {
                bool? value = _single_enableLocal_codec.Read(input);
                if (enableLocal_ == null || value != false) {
                  EnableLocal = value;
                }
                break;
              }
            }
          }
        }

      }

      /// <summary>
      /// Campaign-level settings for tracking information.
      /// </summary>
      public sealed partial class TrackingSetting : pb::IMessage<TrackingSetting> {
        private static readonly pb::MessageParser<TrackingSetting> _parser = new pb::MessageParser<TrackingSetting>(() => new TrackingSetting());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<TrackingSetting> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Google.Ads.GoogleAds.V1.Resources.Campaign.Descriptor.NestedTypes[4]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public TrackingSetting() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public TrackingSetting(TrackingSetting other) : this() {
          TrackingUrl = other.TrackingUrl;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public TrackingSetting Clone() {
          return new TrackingSetting(this);
        }

        /// <summary>Field number for the "tracking_url" field.</summary>
        public const int TrackingUrlFieldNumber = 1;
        private static readonly pb::FieldCodec<string> _single_trackingUrl_codec = pb::FieldCodec.ForClassWrapper<string>(10);
        private string trackingUrl_;
        /// <summary>
        /// Output only. The url used for dynamic tracking.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string TrackingUrl {
          get { return trackingUrl_; }
          set {
            trackingUrl_ = value;
          }
        }


        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as TrackingSetting);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(TrackingSetting other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (TrackingUrl != other.TrackingUrl) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (trackingUrl_ != null) hash ^= TrackingUrl.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (trackingUrl_ != null) {
            _single_trackingUrl_codec.WriteTagAndValue(output, TrackingUrl);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (trackingUrl_ != null) {
            size += _single_trackingUrl_codec.CalculateSizeWithTag(TrackingUrl);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(TrackingSetting other) {
          if (other == null) {
            return;
          }
          if (other.trackingUrl_ != null) {
            if (trackingUrl_ == null || other.TrackingUrl != "") {
              TrackingUrl = other.TrackingUrl;
            }
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                string value = _single_trackingUrl_codec.Read(input);
                if (trackingUrl_ == null || value != "") {
                  TrackingUrl = value;
                }
                break;
              }
            }
          }
        }

      }

      /// <summary>
      /// Selective optimization setting for this campaign, which includes a set of
      /// conversion actions to optimize this campaign towards.
      /// </summary>
      public sealed partial class SelectiveOptimization : pb::IMessage<SelectiveOptimization> {
        private static readonly pb::MessageParser<SelectiveOptimization> _parser = new pb::MessageParser<SelectiveOptimization>(() => new SelectiveOptimization());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<SelectiveOptimization> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Google.Ads.GoogleAds.V1.Resources.Campaign.Descriptor.NestedTypes[5]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public SelectiveOptimization() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public SelectiveOptimization(SelectiveOptimization other) : this() {
          conversionActions_ = other.conversionActions_.Clone();
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public SelectiveOptimization Clone() {
          return new SelectiveOptimization(this);
        }

        /// <summary>Field number for the "conversion_actions" field.</summary>
        public const int ConversionActionsFieldNumber = 1;
        private static readonly pb::FieldCodec<string> _repeated_conversionActions_codec
            = pb::FieldCodec.ForClassWrapper<string>(10);
        private readonly pbc::RepeatedField<string> conversionActions_ = new pbc::RepeatedField<string>();
        /// <summary>
        /// The selected set of conversion actions for optimizing this campaign.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<string> ConversionActions {
          get { return conversionActions_; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as SelectiveOptimization);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(SelectiveOptimization other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if(!conversionActions_.Equals(other.conversionActions_)) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          hash ^= conversionActions_.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          conversionActions_.WriteTo(output, _repeated_conversionActions_codec);
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          size += conversionActions_.CalculateSize(_repeated_conversionActions_codec);
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(SelectiveOptimization other) {
          if (other == null) {
            return;
          }
          conversionActions_.Add(other.conversionActions_);
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                conversionActions_.AddEntriesFrom(input, _repeated_conversionActions_codec);
                break;
              }
            }
          }
        }

      }

      /// <summary>
      /// Represents a collection of settings related to ads geotargeting.
      /// </summary>
      public sealed partial class GeoTargetTypeSetting : pb::IMessage<GeoTargetTypeSetting> {
        private static readonly pb::MessageParser<GeoTargetTypeSetting> _parser = new pb::MessageParser<GeoTargetTypeSetting>(() => new GeoTargetTypeSetting());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<GeoTargetTypeSetting> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Google.Ads.GoogleAds.V1.Resources.Campaign.Descriptor.NestedTypes[6]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public GeoTargetTypeSetting() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public GeoTargetTypeSetting(GeoTargetTypeSetting other) : this() {
          positiveGeoTargetType_ = other.positiveGeoTargetType_;
          negativeGeoTargetType_ = other.negativeGeoTargetType_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public GeoTargetTypeSetting Clone() {
          return new GeoTargetTypeSetting(this);
        }

        /// <summary>Field number for the "positive_geo_target_type" field.</summary>
        public const int PositiveGeoTargetTypeFieldNumber = 1;
        private global::Google.Ads.GoogleAds.V1.Enums.PositiveGeoTargetTypeEnum.Types.PositiveGeoTargetType positiveGeoTargetType_ = global::Google.Ads.GoogleAds.V1.Enums.PositiveGeoTargetTypeEnum.Types.PositiveGeoTargetType.Unspecified;
        /// <summary>
        /// The setting used for positive geotargeting in this particular campaign.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Google.Ads.GoogleAds.V1.Enums.PositiveGeoTargetTypeEnum.Types.PositiveGeoTargetType PositiveGeoTargetType {
          get { return positiveGeoTargetType_; }
          set {
            positiveGeoTargetType_ = value;
          }
        }

        /// <summary>Field number for the "negative_geo_target_type" field.</summary>
        public const int NegativeGeoTargetTypeFieldNumber = 2;
        private global::Google.Ads.GoogleAds.V1.Enums.NegativeGeoTargetTypeEnum.Types.NegativeGeoTargetType negativeGeoTargetType_ = global::Google.Ads.GoogleAds.V1.Enums.NegativeGeoTargetTypeEnum.Types.NegativeGeoTargetType.Unspecified;
        /// <summary>
        /// The setting used for negative geotargeting in this particular campaign.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Google.Ads.GoogleAds.V1.Enums.NegativeGeoTargetTypeEnum.Types.NegativeGeoTargetType NegativeGeoTargetType {
          get { return negativeGeoTargetType_; }
          set {
            negativeGeoTargetType_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as GeoTargetTypeSetting);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(GeoTargetTypeSetting other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (PositiveGeoTargetType != other.PositiveGeoTargetType) return false;
          if (NegativeGeoTargetType != other.NegativeGeoTargetType) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (PositiveGeoTargetType != global::Google.Ads.GoogleAds.V1.Enums.PositiveGeoTargetTypeEnum.Types.PositiveGeoTargetType.Unspecified) hash ^= PositiveGeoTargetType.GetHashCode();
          if (NegativeGeoTargetType != global::Google.Ads.GoogleAds.V1.Enums.NegativeGeoTargetTypeEnum.Types.NegativeGeoTargetType.Unspecified) hash ^= NegativeGeoTargetType.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (PositiveGeoTargetType != global::Google.Ads.GoogleAds.V1.Enums.PositiveGeoTargetTypeEnum.Types.PositiveGeoTargetType.Unspecified) {
            output.WriteRawTag(8);
            output.WriteEnum((int) PositiveGeoTargetType);
          }
          if (NegativeGeoTargetType != global::Google.Ads.GoogleAds.V1.Enums.NegativeGeoTargetTypeEnum.Types.NegativeGeoTargetType.Unspecified) {
            output.WriteRawTag(16);
            output.WriteEnum((int) NegativeGeoTargetType);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (PositiveGeoTargetType != global::Google.Ads.GoogleAds.V1.Enums.PositiveGeoTargetTypeEnum.Types.PositiveGeoTargetType.Unspecified) {
            size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) PositiveGeoTargetType);
          }
          if (NegativeGeoTargetType != global::Google.Ads.GoogleAds.V1.Enums.NegativeGeoTargetTypeEnum.Types.NegativeGeoTargetType.Unspecified) {
            size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) NegativeGeoTargetType);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(GeoTargetTypeSetting other) {
          if (other == null) {
            return;
          }
          if (other.PositiveGeoTargetType != global::Google.Ads.GoogleAds.V1.Enums.PositiveGeoTargetTypeEnum.Types.PositiveGeoTargetType.Unspecified) {
            PositiveGeoTargetType = other.PositiveGeoTargetType;
          }
          if (other.NegativeGeoTargetType != global::Google.Ads.GoogleAds.V1.Enums.NegativeGeoTargetTypeEnum.Types.NegativeGeoTargetType.Unspecified) {
            NegativeGeoTargetType = other.NegativeGeoTargetType;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 8: {
                PositiveGeoTargetType = (global::Google.Ads.GoogleAds.V1.Enums.PositiveGeoTargetTypeEnum.Types.PositiveGeoTargetType) input.ReadEnum();
                break;
              }
              case 16: {
                NegativeGeoTargetType = (global::Google.Ads.GoogleAds.V1.Enums.NegativeGeoTargetTypeEnum.Types.NegativeGeoTargetType) input.ReadEnum();
                break;
              }
            }
          }
        }

      }

      /// <summary>
      /// Campaign-level settings for App Campaigns.
      /// </summary>
      public sealed partial class AppCampaignSetting : pb::IMessage<AppCampaignSetting> {
        private static readonly pb::MessageParser<AppCampaignSetting> _parser = new pb::MessageParser<AppCampaignSetting>(() => new AppCampaignSetting());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<AppCampaignSetting> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Google.Ads.GoogleAds.V1.Resources.Campaign.Descriptor.NestedTypes[7]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public AppCampaignSetting() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public AppCampaignSetting(AppCampaignSetting other) : this() {
          biddingStrategyGoalType_ = other.biddingStrategyGoalType_;
          AppId = other.AppId;
          appStore_ = other.appStore_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public AppCampaignSetting Clone() {
          return new AppCampaignSetting(this);
        }

        /// <summary>Field number for the "bidding_strategy_goal_type" field.</summary>
        public const int BiddingStrategyGoalTypeFieldNumber = 1;
        private global::Google.Ads.GoogleAds.V1.Enums.AppCampaignBiddingStrategyGoalTypeEnum.Types.AppCampaignBiddingStrategyGoalType biddingStrategyGoalType_ = global::Google.Ads.GoogleAds.V1.Enums.AppCampaignBiddingStrategyGoalTypeEnum.Types.AppCampaignBiddingStrategyGoalType.Unspecified;
        /// <summary>
        /// Represents the goal which the bidding strategy of this app campaign
        /// should optimize towards.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Google.Ads.GoogleAds.V1.Enums.AppCampaignBiddingStrategyGoalTypeEnum.Types.AppCampaignBiddingStrategyGoalType BiddingStrategyGoalType {
          get { return biddingStrategyGoalType_; }
          set {
            biddingStrategyGoalType_ = value;
          }
        }

        /// <summary>Field number for the "app_id" field.</summary>
        public const int AppIdFieldNumber = 2;
        private static readonly pb::FieldCodec<string> _single_appId_codec = pb::FieldCodec.ForClassWrapper<string>(18);
        private string appId_;
        /// <summary>
        /// Immutable. A string that uniquely identifies a mobile application.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string AppId {
          get { return appId_; }
          set {
            appId_ = value;
          }
        }


        /// <summary>Field number for the "app_store" field.</summary>
        public const int AppStoreFieldNumber = 3;
        private global::Google.Ads.GoogleAds.V1.Enums.AppCampaignAppStoreEnum.Types.AppCampaignAppStore appStore_ = global::Google.Ads.GoogleAds.V1.Enums.AppCampaignAppStoreEnum.Types.AppCampaignAppStore.Unspecified;
        /// <summary>
        /// Immutable. The application store that distributes this specific app.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Google.Ads.GoogleAds.V1.Enums.AppCampaignAppStoreEnum.Types.AppCampaignAppStore AppStore {
          get { return appStore_; }
          set {
            appStore_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as AppCampaignSetting);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(AppCampaignSetting other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (BiddingStrategyGoalType != other.BiddingStrategyGoalType) return false;
          if (AppId != other.AppId) return false;
          if (AppStore != other.AppStore) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (BiddingStrategyGoalType != global::Google.Ads.GoogleAds.V1.Enums.AppCampaignBiddingStrategyGoalTypeEnum.Types.AppCampaignBiddingStrategyGoalType.Unspecified) hash ^= BiddingStrategyGoalType.GetHashCode();
          if (appId_ != null) hash ^= AppId.GetHashCode();
          if (AppStore != global::Google.Ads.GoogleAds.V1.Enums.AppCampaignAppStoreEnum.Types.AppCampaignAppStore.Unspecified) hash ^= AppStore.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (BiddingStrategyGoalType != global::Google.Ads.GoogleAds.V1.Enums.AppCampaignBiddingStrategyGoalTypeEnum.Types.AppCampaignBiddingStrategyGoalType.Unspecified) {
            output.WriteRawTag(8);
            output.WriteEnum((int) BiddingStrategyGoalType);
          }
          if (appId_ != null) {
            _single_appId_codec.WriteTagAndValue(output, AppId);
          }
          if (AppStore != global::Google.Ads.GoogleAds.V1.Enums.AppCampaignAppStoreEnum.Types.AppCampaignAppStore.Unspecified) {
            output.WriteRawTag(24);
            output.WriteEnum((int) AppStore);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (BiddingStrategyGoalType != global::Google.Ads.GoogleAds.V1.Enums.AppCampaignBiddingStrategyGoalTypeEnum.Types.AppCampaignBiddingStrategyGoalType.Unspecified) {
            size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) BiddingStrategyGoalType);
          }
          if (appId_ != null) {
            size += _single_appId_codec.CalculateSizeWithTag(AppId);
          }
          if (AppStore != global::Google.Ads.GoogleAds.V1.Enums.AppCampaignAppStoreEnum.Types.AppCampaignAppStore.Unspecified) {
            size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) AppStore);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(AppCampaignSetting other) {
          if (other == null) {
            return;
          }
          if (other.BiddingStrategyGoalType != global::Google.Ads.GoogleAds.V1.Enums.AppCampaignBiddingStrategyGoalTypeEnum.Types.AppCampaignBiddingStrategyGoalType.Unspecified) {
            BiddingStrategyGoalType = other.BiddingStrategyGoalType;
          }
          if (other.appId_ != null) {
            if (appId_ == null || other.AppId != "") {
              AppId = other.AppId;
            }
          }
          if (other.AppStore != global::Google.Ads.GoogleAds.V1.Enums.AppCampaignAppStoreEnum.Types.AppCampaignAppStore.Unspecified) {
            AppStore = other.AppStore;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 8: {
                BiddingStrategyGoalType = (global::Google.Ads.GoogleAds.V1.Enums.AppCampaignBiddingStrategyGoalTypeEnum.Types.AppCampaignBiddingStrategyGoalType) input.ReadEnum();
                break;
              }
              case 18: {
                string value = _single_appId_codec.Read(input);
                if (appId_ == null || value != "") {
                  AppId = value;
                }
                break;
              }
              case 24: {
                AppStore = (global::Google.Ads.GoogleAds.V1.Enums.AppCampaignAppStoreEnum.Types.AppCampaignAppStore) input.ReadEnum();
                break;
              }
            }
          }
        }

      }

      /// <summary>
      /// Describes how unbranded pharma ads will be displayed.
      /// </summary>
      public sealed partial class VanityPharma : pb::IMessage<VanityPharma> {
        private static readonly pb::MessageParser<VanityPharma> _parser = new pb::MessageParser<VanityPharma>(() => new VanityPharma());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<VanityPharma> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Google.Ads.GoogleAds.V1.Resources.Campaign.Descriptor.NestedTypes[8]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public VanityPharma() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public VanityPharma(VanityPharma other) : this() {
          vanityPharmaDisplayUrlMode_ = other.vanityPharmaDisplayUrlMode_;
          vanityPharmaText_ = other.vanityPharmaText_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public VanityPharma Clone() {
          return new VanityPharma(this);
        }

        /// <summary>Field number for the "vanity_pharma_display_url_mode" field.</summary>
        public const int VanityPharmaDisplayUrlModeFieldNumber = 1;
        private global::Google.Ads.GoogleAds.V1.Enums.VanityPharmaDisplayUrlModeEnum.Types.VanityPharmaDisplayUrlMode vanityPharmaDisplayUrlMode_ = global::Google.Ads.GoogleAds.V1.Enums.VanityPharmaDisplayUrlModeEnum.Types.VanityPharmaDisplayUrlMode.Unspecified;
        /// <summary>
        /// The display mode for vanity pharma URLs.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Google.Ads.GoogleAds.V1.Enums.VanityPharmaDisplayUrlModeEnum.Types.VanityPharmaDisplayUrlMode VanityPharmaDisplayUrlMode {
          get { return vanityPharmaDisplayUrlMode_; }
          set {
            vanityPharmaDisplayUrlMode_ = value;
          }
        }

        /// <summary>Field number for the "vanity_pharma_text" field.</summary>
        public const int VanityPharmaTextFieldNumber = 2;
        private global::Google.Ads.GoogleAds.V1.Enums.VanityPharmaTextEnum.Types.VanityPharmaText vanityPharmaText_ = global::Google.Ads.GoogleAds.V1.Enums.VanityPharmaTextEnum.Types.VanityPharmaText.Unspecified;
        /// <summary>
        /// The text that will be displayed in display URL of the text ad when
        /// website description is the selected display mode for vanity pharma URLs.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Google.Ads.GoogleAds.V1.Enums.VanityPharmaTextEnum.Types.VanityPharmaText VanityPharmaText {
          get { return vanityPharmaText_; }
          set {
            vanityPharmaText_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as VanityPharma);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(VanityPharma other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (VanityPharmaDisplayUrlMode != other.VanityPharmaDisplayUrlMode) return false;
          if (VanityPharmaText != other.VanityPharmaText) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (VanityPharmaDisplayUrlMode != global::Google.Ads.GoogleAds.V1.Enums.VanityPharmaDisplayUrlModeEnum.Types.VanityPharmaDisplayUrlMode.Unspecified) hash ^= VanityPharmaDisplayUrlMode.GetHashCode();
          if (VanityPharmaText != global::Google.Ads.GoogleAds.V1.Enums.VanityPharmaTextEnum.Types.VanityPharmaText.Unspecified) hash ^= VanityPharmaText.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (VanityPharmaDisplayUrlMode != global::Google.Ads.GoogleAds.V1.Enums.VanityPharmaDisplayUrlModeEnum.Types.VanityPharmaDisplayUrlMode.Unspecified) {
            output.WriteRawTag(8);
            output.WriteEnum((int) VanityPharmaDisplayUrlMode);
          }
          if (VanityPharmaText != global::Google.Ads.GoogleAds.V1.Enums.VanityPharmaTextEnum.Types.VanityPharmaText.Unspecified) {
            output.WriteRawTag(16);
            output.WriteEnum((int) VanityPharmaText);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (VanityPharmaDisplayUrlMode != global::Google.Ads.GoogleAds.V1.Enums.VanityPharmaDisplayUrlModeEnum.Types.VanityPharmaDisplayUrlMode.Unspecified) {
            size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) VanityPharmaDisplayUrlMode);
          }
          if (VanityPharmaText != global::Google.Ads.GoogleAds.V1.Enums.VanityPharmaTextEnum.Types.VanityPharmaText.Unspecified) {
            size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) VanityPharmaText);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(VanityPharma other) {
          if (other == null) {
            return;
          }
          if (other.VanityPharmaDisplayUrlMode != global::Google.Ads.GoogleAds.V1.Enums.VanityPharmaDisplayUrlModeEnum.Types.VanityPharmaDisplayUrlMode.Unspecified) {
            VanityPharmaDisplayUrlMode = other.VanityPharmaDisplayUrlMode;
          }
          if (other.VanityPharmaText != global::Google.Ads.GoogleAds.V1.Enums.VanityPharmaTextEnum.Types.VanityPharmaText.Unspecified) {
            VanityPharmaText = other.VanityPharmaText;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 8: {
                VanityPharmaDisplayUrlMode = (global::Google.Ads.GoogleAds.V1.Enums.VanityPharmaDisplayUrlModeEnum.Types.VanityPharmaDisplayUrlMode) input.ReadEnum();
                break;
              }
              case 16: {
                VanityPharmaText = (global::Google.Ads.GoogleAds.V1.Enums.VanityPharmaTextEnum.Types.VanityPharmaText) input.ReadEnum();
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  #endregion

}

#endregion Designer generated code
