// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: google/ads/googleads/v10/errors/conversion_upload_error.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Google.Ads.GoogleAds.V10.Errors {

  /// <summary>Holder for reflection information generated from google/ads/googleads/v10/errors/conversion_upload_error.proto</summary>
  public static partial class ConversionUploadErrorReflection {

    #region Descriptor
    /// <summary>File descriptor for google/ads/googleads/v10/errors/conversion_upload_error.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static ConversionUploadErrorReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Cj1nb29nbGUvYWRzL2dvb2dsZWFkcy92MTAvZXJyb3JzL2NvbnZlcnNpb25f",
            "dXBsb2FkX2Vycm9yLnByb3RvEh9nb29nbGUuYWRzLmdvb2dsZWFkcy52MTAu",
            "ZXJyb3JzGhxnb29nbGUvYXBpL2Fubm90YXRpb25zLnByb3RvIpkMChlDb252",
            "ZXJzaW9uVXBsb2FkRXJyb3JFbnVtIvsLChVDb252ZXJzaW9uVXBsb2FkRXJy",
            "b3ISDwoLVU5TUEVDSUZJRUQQABILCgdVTktOT1dOEAESIwofVE9PX01BTllf",
            "Q09OVkVSU0lPTlNfSU5fUkVRVUVTVBACEhUKEVVOUEFSU0VBQkxFX0dDTElE",
            "EAMSHQoZQ09OVkVSU0lPTl9QUkVDRURFU19FVkVOVBAqEhEKDUVYUElSRURf",
            "RVZFTlQQKxIUChBUT09fUkVDRU5UX0VWRU5UECwSEwoPRVZFTlRfTk9UX0ZP",
            "VU5EEC0SGQoVVU5BVVRIT1JJWkVEX0NVU1RPTUVSEAgSHQoZSU5WQUxJRF9D",
            "T05WRVJTSU9OX0FDVElPThAJEiAKHFRPT19SRUNFTlRfQ09OVkVSU0lPTl9B",
            "Q1RJT04QChI2CjJDT05WRVJTSU9OX1RSQUNLSU5HX05PVF9FTkFCTEVEX0FU",
            "X0lNUFJFU1NJT05fVElNRRALElEKTUVYVEVSTkFMX0FUVFJJQlVUSU9OX0RB",
            "VEFfU0VUX0ZPUl9OT05fRVhURVJOQUxMWV9BVFRSSUJVVEVEX0NPTlZFUlNJ",
            "T05fQUNUSU9OEAwSUQpNRVhURVJOQUxfQVRUUklCVVRJT05fREFUQV9OT1Rf",
            "U0VUX0ZPUl9FWFRFUk5BTExZX0FUVFJJQlVURURfQ09OVkVSU0lPTl9BQ1RJ",
            "T04QDRJGCkJPUkRFUl9JRF9OT1RfUEVSTUlUVEVEX0ZPUl9FWFRFUk5BTExZ",
            "X0FUVFJJQlVURURfQ09OVkVSU0lPTl9BQ1RJT04QDhIbChdPUkRFUl9JRF9B",
            "TFJFQURZX0lOX1VTRRAPEhYKEkRVUExJQ0FURV9PUkRFUl9JRBAQEhMKD1RP",
            "T19SRUNFTlRfQ0FMTBAREhAKDEVYUElSRURfQ0FMTBASEhIKDkNBTExfTk9U",
            "X0ZPVU5EEBMSHAoYQ09OVkVSU0lPTl9QUkVDRURFU19DQUxMEBQSMAosQ09O",
            "VkVSU0lPTl9UUkFDS0lOR19OT1RfRU5BQkxFRF9BVF9DQUxMX1RJTUUQFRIk",
            "CiBVTlBBUlNFQUJMRV9DQUxMRVJTX1BIT05FX05VTUJFUhAWEiMKH0NMSUNL",
            "X0NPTlZFUlNJT05fQUxSRUFEWV9FWElTVFMQFxIiCh5DQUxMX0NPTlZFUlNJ",
            "T05fQUxSRUFEWV9FWElTVFMQGBIpCiVEVVBMSUNBVEVfQ0xJQ0tfQ09OVkVS",
            "U0lPTl9JTl9SRVFVRVNUEBkSKAokRFVQTElDQVRFX0NBTExfQ09OVkVSU0lP",
            "Tl9JTl9SRVFVRVNUEBoSHwobQ1VTVE9NX1ZBUklBQkxFX05PVF9FTkFCTEVE",
            "EBwSJgoiQ1VTVE9NX1ZBUklBQkxFX1ZBTFVFX0NPTlRBSU5TX1BJSRAdEh4K",
            "GklOVkFMSURfQ1VTVE9NRVJfRk9SX0NMSUNLEB4SHQoZSU5WQUxJRF9DVVNU",
            "T01FUl9GT1JfQ0FMTBAfEiwKKENPTlZFUlNJT05fTk9UX0NPTVBMSUFOVF9X",
            "SVRIX0FUVF9QT0xJQ1kQIBITCg9DTElDS19OT1RfRk9VTkQQIRIbChdJTlZB",
            "TElEX1VTRVJfSURFTlRJRklFUhAiEk4KSkVYVEVSTkFMTFlfQVRUUklCVVRF",
            "RF9DT05WRVJTSU9OX0FDVElPTl9OT1RfUEVSTUlUVEVEX1dJVEhfVVNFUl9J",
            "REVOVElGSUVSECMSHwobVU5TVVBQT1JURURfVVNFUl9JREVOVElGSUVSECQS",
            "GgoWR0JSQUlEX1dCUkFJRF9CT1RIX1NFVBAmEhYKElVOUEFSU0VBQkxFX1dC",
            "UkFJRBAnEhYKElVOUEFSU0VBQkxFX0dCUkFJRBAoEkIKPkVYVEVSTkFMTFlf",
            "QVRUUklCVVRFRF9DT05WRVJTSU9OX1RZUEVfTk9UX1BFUk1JVFRFRF9XSVRI",
            "X0JSQUlEECkSPAo4T05FX1BFUl9DTElDS19DT05WRVJTSU9OX0FDVElPTl9O",
            "T1RfUEVSTUlUVEVEX1dJVEhfQlJBSUQQLkL6AQojY29tLmdvb2dsZS5hZHMu",
            "Z29vZ2xlYWRzLnYxMC5lcnJvcnNCGkNvbnZlcnNpb25VcGxvYWRFcnJvclBy",
            "b3RvUAFaRWdvb2dsZS5nb2xhbmcub3JnL2dlbnByb3RvL2dvb2dsZWFwaXMv",
            "YWRzL2dvb2dsZWFkcy92MTAvZXJyb3JzO2Vycm9yc6ICA0dBQaoCH0dvb2ds",
            "ZS5BZHMuR29vZ2xlQWRzLlYxMC5FcnJvcnPKAh9Hb29nbGVcQWRzXEdvb2ds",
            "ZUFkc1xWMTBcRXJyb3Jz6gIjR29vZ2xlOjpBZHM6Okdvb2dsZUFkczo6VjEw",
            "OjpFcnJvcnNiBnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Google.Api.AnnotationsReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Ads.GoogleAds.V10.Errors.ConversionUploadErrorEnum), global::Google.Ads.GoogleAds.V10.Errors.ConversionUploadErrorEnum.Parser, null, null, new[]{ typeof(global::Google.Ads.GoogleAds.V10.Errors.ConversionUploadErrorEnum.Types.ConversionUploadError) }, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  /// <summary>
  /// Container for enum describing possible conversion upload errors.
  /// </summary>
  public sealed partial class ConversionUploadErrorEnum : pb::IMessage<ConversionUploadErrorEnum>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<ConversionUploadErrorEnum> _parser = new pb::MessageParser<ConversionUploadErrorEnum>(() => new ConversionUploadErrorEnum());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<ConversionUploadErrorEnum> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Ads.GoogleAds.V10.Errors.ConversionUploadErrorReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ConversionUploadErrorEnum() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ConversionUploadErrorEnum(ConversionUploadErrorEnum other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ConversionUploadErrorEnum Clone() {
      return new ConversionUploadErrorEnum(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as ConversionUploadErrorEnum);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(ConversionUploadErrorEnum other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(ConversionUploadErrorEnum other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
        }
      }
    }
    #endif

    #region Nested types
    /// <summary>Container for nested types declared in the ConversionUploadErrorEnum message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static partial class Types {
      /// <summary>
      /// Enum describing possible conversion upload errors.
      /// </summary>
      public enum ConversionUploadError {
        /// <summary>
        /// Enum unspecified.
        /// </summary>
        [pbr::OriginalName("UNSPECIFIED")] Unspecified = 0,
        /// <summary>
        /// The received error code is not known in this version.
        /// </summary>
        [pbr::OriginalName("UNKNOWN")] Unknown = 1,
        /// <summary>
        /// The request contained more than 2000 conversions.
        /// </summary>
        [pbr::OriginalName("TOO_MANY_CONVERSIONS_IN_REQUEST")] TooManyConversionsInRequest = 2,
        /// <summary>
        /// The specified gclid could not be decoded.
        /// </summary>
        [pbr::OriginalName("UNPARSEABLE_GCLID")] UnparseableGclid = 3,
        /// <summary>
        /// The specified conversion_date_time is before the event time
        /// associated with the given identifier or iOS URL parameter.
        /// </summary>
        [pbr::OriginalName("CONVERSION_PRECEDES_EVENT")] ConversionPrecedesEvent = 42,
        /// <summary>
        /// The click associated with the given identifier or iOS URL parameter is
        /// either too old to be imported or occurred outside of the click through
        /// lookback window for the specified conversion action.
        /// </summary>
        [pbr::OriginalName("EXPIRED_EVENT")] ExpiredEvent = 43,
        /// <summary>
        /// The click associated with the given identifier or iOS URL parameter
        /// occurred too recently. Please try uploading again after 6 hours have
        /// passed since the click occurred.
        /// </summary>
        [pbr::OriginalName("TOO_RECENT_EVENT")] TooRecentEvent = 44,
        /// <summary>
        /// The click associated with the given identifier or iOS URL parameter could
        /// not be found in the system. This can happen if the identifier or iOS URL
        /// parameter are collected for non Google Ads clicks.
        /// </summary>
        [pbr::OriginalName("EVENT_NOT_FOUND")] EventNotFound = 45,
        /// <summary>
        /// The click associated with the given identifier or iOS URL parameter is
        /// owned by a customer account that the uploading customer does not manage.
        /// </summary>
        [pbr::OriginalName("UNAUTHORIZED_CUSTOMER")] UnauthorizedCustomer = 8,
        /// <summary>
        /// No upload eligible conversion action that matches the provided
        /// information can be found for the customer.
        /// </summary>
        [pbr::OriginalName("INVALID_CONVERSION_ACTION")] InvalidConversionAction = 9,
        /// <summary>
        /// The specified conversion action was created too recently.
        /// Please try the upload again after 4-6 hours have passed since the
        /// conversion action was created.
        /// </summary>
        [pbr::OriginalName("TOO_RECENT_CONVERSION_ACTION")] TooRecentConversionAction = 10,
        /// <summary>
        /// The click associated with the given identifier does not contain
        /// conversion tracking information.
        /// </summary>
        [pbr::OriginalName("CONVERSION_TRACKING_NOT_ENABLED_AT_IMPRESSION_TIME")] ConversionTrackingNotEnabledAtImpressionTime = 11,
        /// <summary>
        /// The specified conversion action does not use an external attribution
        /// model, but external_attribution_data was set.
        /// </summary>
        [pbr::OriginalName("EXTERNAL_ATTRIBUTION_DATA_SET_FOR_NON_EXTERNALLY_ATTRIBUTED_CONVERSION_ACTION")] ExternalAttributionDataSetForNonExternallyAttributedConversionAction = 12,
        /// <summary>
        /// The specified conversion action uses an external attribution model, but
        /// external_attribution_data or one of its contained fields was not set.
        /// Both external_attribution_credit and external_attribution_model must be
        /// set for externally attributed conversion actions.
        /// </summary>
        [pbr::OriginalName("EXTERNAL_ATTRIBUTION_DATA_NOT_SET_FOR_EXTERNALLY_ATTRIBUTED_CONVERSION_ACTION")] ExternalAttributionDataNotSetForExternallyAttributedConversionAction = 13,
        /// <summary>
        /// Order IDs are not supported for conversion actions which use an external
        /// attribution model.
        /// </summary>
        [pbr::OriginalName("ORDER_ID_NOT_PERMITTED_FOR_EXTERNALLY_ATTRIBUTED_CONVERSION_ACTION")] OrderIdNotPermittedForExternallyAttributedConversionAction = 14,
        /// <summary>
        /// A conversion with the same order id and conversion action combination
        /// already exists in our system.
        /// </summary>
        [pbr::OriginalName("ORDER_ID_ALREADY_IN_USE")] OrderIdAlreadyInUse = 15,
        /// <summary>
        /// The request contained two or more conversions with the same order id and
        /// conversion action combination.
        /// </summary>
        [pbr::OriginalName("DUPLICATE_ORDER_ID")] DuplicateOrderId = 16,
        /// <summary>
        /// The call occurred too recently. Please try uploading again after 12 hours
        /// have passed since the call occurred.
        /// </summary>
        [pbr::OriginalName("TOO_RECENT_CALL")] TooRecentCall = 17,
        /// <summary>
        /// The click that initiated the call is too old for this conversion to be
        /// imported.
        /// </summary>
        [pbr::OriginalName("EXPIRED_CALL")] ExpiredCall = 18,
        /// <summary>
        /// The call or the click leading to the call was not found.
        /// </summary>
        [pbr::OriginalName("CALL_NOT_FOUND")] CallNotFound = 19,
        /// <summary>
        /// The specified conversion_date_time is before the call_start_date_time.
        /// </summary>
        [pbr::OriginalName("CONVERSION_PRECEDES_CALL")] ConversionPrecedesCall = 20,
        /// <summary>
        /// The click associated with the call does not contain conversion tracking
        /// information.
        /// </summary>
        [pbr::OriginalName("CONVERSION_TRACKING_NOT_ENABLED_AT_CALL_TIME")] ConversionTrackingNotEnabledAtCallTime = 21,
        /// <summary>
        /// The caller's phone number cannot be parsed. It should be formatted either
        /// as E.164 "+16502531234", International "+64 3-331 6005" or US national
        /// number "6502531234".
        /// </summary>
        [pbr::OriginalName("UNPARSEABLE_CALLERS_PHONE_NUMBER")] UnparseableCallersPhoneNumber = 22,
        /// <summary>
        /// A conversion with this timestamp already exists for this click. To upload
        /// another conversion, please use a different timestamp.
        /// </summary>
        [pbr::OriginalName("CLICK_CONVERSION_ALREADY_EXISTS")] ClickConversionAlreadyExists = 23,
        /// <summary>
        /// A conversion with this timestamp already exists for this call. To upload
        /// another conversion, please use a different timestamp.
        /// </summary>
        [pbr::OriginalName("CALL_CONVERSION_ALREADY_EXISTS")] CallConversionAlreadyExists = 24,
        /// <summary>
        /// This conversion has the same click and timestamp as another conversion in
        /// the request. To upload another conversion for this click, please use a
        /// different timestamp.
        /// </summary>
        [pbr::OriginalName("DUPLICATE_CLICK_CONVERSION_IN_REQUEST")] DuplicateClickConversionInRequest = 25,
        /// <summary>
        /// This conversion has the same call and timestamp as another conversion in
        /// the request. To upload another conversion for this call, please use a
        /// different timestamp.
        /// </summary>
        [pbr::OriginalName("DUPLICATE_CALL_CONVERSION_IN_REQUEST")] DuplicateCallConversionInRequest = 26,
        /// <summary>
        /// The custom variable is not enabled.
        /// </summary>
        [pbr::OriginalName("CUSTOM_VARIABLE_NOT_ENABLED")] CustomVariableNotEnabled = 28,
        /// <summary>
        /// The value of the custom variable contains private customer data, such
        /// as email addresses or phone numbers.
        /// </summary>
        [pbr::OriginalName("CUSTOM_VARIABLE_VALUE_CONTAINS_PII")] CustomVariableValueContainsPii = 29,
        /// <summary>
        /// The click associated with the given identifier or iOS URL parameter isn't
        /// from the account where conversion tracking is set up.
        /// </summary>
        [pbr::OriginalName("INVALID_CUSTOMER_FOR_CLICK")] InvalidCustomerForClick = 30,
        /// <summary>
        /// The click associated with the given call isn't from the account where
        /// conversion tracking is set up.
        /// </summary>
        [pbr::OriginalName("INVALID_CUSTOMER_FOR_CALL")] InvalidCustomerForCall = 31,
        /// <summary>
        /// The conversion can't be uploaded because the conversion source didn't
        /// comply with the App Tracking Transparency (ATT) policy or the person who
        /// converted didn't consent to tracking.
        /// </summary>
        [pbr::OriginalName("CONVERSION_NOT_COMPLIANT_WITH_ATT_POLICY")] ConversionNotCompliantWithAttPolicy = 32,
        /// <summary>
        /// No click was found for the provided user identifiers that could be
        /// applied to the specified conversion action.
        /// </summary>
        [pbr::OriginalName("CLICK_NOT_FOUND")] ClickNotFound = 33,
        /// <summary>
        /// The provided user identifier is not a SHA-256 hash. It is either unhashed
        /// or hashed using a different hash function.
        /// </summary>
        [pbr::OriginalName("INVALID_USER_IDENTIFIER")] InvalidUserIdentifier = 34,
        /// <summary>
        /// Conversion actions which use an external attribution model cannot be used
        /// with UserIdentifier.
        /// </summary>
        [pbr::OriginalName("EXTERNALLY_ATTRIBUTED_CONVERSION_ACTION_NOT_PERMITTED_WITH_USER_IDENTIFIER")] ExternallyAttributedConversionActionNotPermittedWithUserIdentifier = 35,
        /// <summary>
        /// The provided user identifier is not supported. ConversionUploadService
        /// only supports hashed_email and hashed_phone_number.
        /// </summary>
        [pbr::OriginalName("UNSUPPORTED_USER_IDENTIFIER")] UnsupportedUserIdentifier = 36,
        /// <summary>
        /// gbraid and wbraid are both set in the request. Only one is allowed.
        /// </summary>
        [pbr::OriginalName("GBRAID_WBRAID_BOTH_SET")] GbraidWbraidBothSet = 38,
        /// <summary>
        /// The specified wbraid could not be decoded.
        /// </summary>
        [pbr::OriginalName("UNPARSEABLE_WBRAID")] UnparseableWbraid = 39,
        /// <summary>
        /// The specified gbraid could not be decoded.
        /// </summary>
        [pbr::OriginalName("UNPARSEABLE_GBRAID")] UnparseableGbraid = 40,
        /// <summary>
        /// Conversion types which use an external attribution model cannot be used
        /// with gbraid or wbraid.
        /// </summary>
        [pbr::OriginalName("EXTERNALLY_ATTRIBUTED_CONVERSION_TYPE_NOT_PERMITTED_WITH_BRAID")] ExternallyAttributedConversionTypeNotPermittedWithBraid = 41,
        /// <summary>
        /// Conversion actions which use the one-per-click counting type cannot be
        /// used with gbraid or wbraid.
        /// </summary>
        [pbr::OriginalName("ONE_PER_CLICK_CONVERSION_ACTION_NOT_PERMITTED_WITH_BRAID")] OnePerClickConversionActionNotPermittedWithBraid = 46,
      }

    }
    #endregion

  }

  #endregion

}

#endregion Designer generated code
