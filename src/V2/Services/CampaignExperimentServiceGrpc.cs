// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: google/ads/googleads/v2/services/campaign_experiment_service.proto
// </auto-generated>
// Original file comments:
// Copyright 2020 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
#pragma warning disable 0414, 1591
#region Designer generated code

using grpc = global::Grpc.Core;

namespace Google.Ads.GoogleAds.V2.Services {
  /// <summary>
  /// CampaignExperimentService manages the life cycle of campaign experiments.
  /// It is used to create new experiments from drafts, modify experiment
  /// properties, promote changes in an experiment back to its base campaign,
  /// graduate experiments into new stand-alone campaigns, and to remove an
  /// experiment.
  ///
  /// An experiment consists of two variants or arms - the base campaign and the
  /// experiment campaign, directing a fixed share of traffic to each arm.
  /// A campaign experiment is created from a draft of changes to the base campaign
  /// and will be a snapshot of changes in the draft at the time of creation.
  /// </summary>
  public static partial class CampaignExperimentService
  {
    static readonly string __ServiceName = "google.ads.googleads.v2.services.CampaignExperimentService";

    static readonly grpc::Marshaller<global::Google.Ads.GoogleAds.V2.Services.GetCampaignExperimentRequest> __Marshaller_google_ads_googleads_v2_services_GetCampaignExperimentRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Ads.GoogleAds.V2.Services.GetCampaignExperimentRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Ads.GoogleAds.V2.Resources.CampaignExperiment> __Marshaller_google_ads_googleads_v2_resources_CampaignExperiment = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Ads.GoogleAds.V2.Resources.CampaignExperiment.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Ads.GoogleAds.V2.Services.CreateCampaignExperimentRequest> __Marshaller_google_ads_googleads_v2_services_CreateCampaignExperimentRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Ads.GoogleAds.V2.Services.CreateCampaignExperimentRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.LongRunning.Operation> __Marshaller_google_longrunning_Operation = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.LongRunning.Operation.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Ads.GoogleAds.V2.Services.MutateCampaignExperimentsRequest> __Marshaller_google_ads_googleads_v2_services_MutateCampaignExperimentsRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Ads.GoogleAds.V2.Services.MutateCampaignExperimentsRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Ads.GoogleAds.V2.Services.MutateCampaignExperimentsResponse> __Marshaller_google_ads_googleads_v2_services_MutateCampaignExperimentsResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Ads.GoogleAds.V2.Services.MutateCampaignExperimentsResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Ads.GoogleAds.V2.Services.GraduateCampaignExperimentRequest> __Marshaller_google_ads_googleads_v2_services_GraduateCampaignExperimentRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Ads.GoogleAds.V2.Services.GraduateCampaignExperimentRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Ads.GoogleAds.V2.Services.GraduateCampaignExperimentResponse> __Marshaller_google_ads_googleads_v2_services_GraduateCampaignExperimentResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Ads.GoogleAds.V2.Services.GraduateCampaignExperimentResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Ads.GoogleAds.V2.Services.PromoteCampaignExperimentRequest> __Marshaller_google_ads_googleads_v2_services_PromoteCampaignExperimentRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Ads.GoogleAds.V2.Services.PromoteCampaignExperimentRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Ads.GoogleAds.V2.Services.EndCampaignExperimentRequest> __Marshaller_google_ads_googleads_v2_services_EndCampaignExperimentRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Ads.GoogleAds.V2.Services.EndCampaignExperimentRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Protobuf.WellKnownTypes.Empty> __Marshaller_google_protobuf_Empty = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Protobuf.WellKnownTypes.Empty.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Ads.GoogleAds.V2.Services.ListCampaignExperimentAsyncErrorsRequest> __Marshaller_google_ads_googleads_v2_services_ListCampaignExperimentAsyncErrorsRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Ads.GoogleAds.V2.Services.ListCampaignExperimentAsyncErrorsRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Ads.GoogleAds.V2.Services.ListCampaignExperimentAsyncErrorsResponse> __Marshaller_google_ads_googleads_v2_services_ListCampaignExperimentAsyncErrorsResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Ads.GoogleAds.V2.Services.ListCampaignExperimentAsyncErrorsResponse.Parser.ParseFrom);

    static readonly grpc::Method<global::Google.Ads.GoogleAds.V2.Services.GetCampaignExperimentRequest, global::Google.Ads.GoogleAds.V2.Resources.CampaignExperiment> __Method_GetCampaignExperiment = new grpc::Method<global::Google.Ads.GoogleAds.V2.Services.GetCampaignExperimentRequest, global::Google.Ads.GoogleAds.V2.Resources.CampaignExperiment>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetCampaignExperiment",
        __Marshaller_google_ads_googleads_v2_services_GetCampaignExperimentRequest,
        __Marshaller_google_ads_googleads_v2_resources_CampaignExperiment);

    static readonly grpc::Method<global::Google.Ads.GoogleAds.V2.Services.CreateCampaignExperimentRequest, global::Google.LongRunning.Operation> __Method_CreateCampaignExperiment = new grpc::Method<global::Google.Ads.GoogleAds.V2.Services.CreateCampaignExperimentRequest, global::Google.LongRunning.Operation>(
        grpc::MethodType.Unary,
        __ServiceName,
        "CreateCampaignExperiment",
        __Marshaller_google_ads_googleads_v2_services_CreateCampaignExperimentRequest,
        __Marshaller_google_longrunning_Operation);

    static readonly grpc::Method<global::Google.Ads.GoogleAds.V2.Services.MutateCampaignExperimentsRequest, global::Google.Ads.GoogleAds.V2.Services.MutateCampaignExperimentsResponse> __Method_MutateCampaignExperiments = new grpc::Method<global::Google.Ads.GoogleAds.V2.Services.MutateCampaignExperimentsRequest, global::Google.Ads.GoogleAds.V2.Services.MutateCampaignExperimentsResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "MutateCampaignExperiments",
        __Marshaller_google_ads_googleads_v2_services_MutateCampaignExperimentsRequest,
        __Marshaller_google_ads_googleads_v2_services_MutateCampaignExperimentsResponse);

    static readonly grpc::Method<global::Google.Ads.GoogleAds.V2.Services.GraduateCampaignExperimentRequest, global::Google.Ads.GoogleAds.V2.Services.GraduateCampaignExperimentResponse> __Method_GraduateCampaignExperiment = new grpc::Method<global::Google.Ads.GoogleAds.V2.Services.GraduateCampaignExperimentRequest, global::Google.Ads.GoogleAds.V2.Services.GraduateCampaignExperimentResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GraduateCampaignExperiment",
        __Marshaller_google_ads_googleads_v2_services_GraduateCampaignExperimentRequest,
        __Marshaller_google_ads_googleads_v2_services_GraduateCampaignExperimentResponse);

    static readonly grpc::Method<global::Google.Ads.GoogleAds.V2.Services.PromoteCampaignExperimentRequest, global::Google.LongRunning.Operation> __Method_PromoteCampaignExperiment = new grpc::Method<global::Google.Ads.GoogleAds.V2.Services.PromoteCampaignExperimentRequest, global::Google.LongRunning.Operation>(
        grpc::MethodType.Unary,
        __ServiceName,
        "PromoteCampaignExperiment",
        __Marshaller_google_ads_googleads_v2_services_PromoteCampaignExperimentRequest,
        __Marshaller_google_longrunning_Operation);

    static readonly grpc::Method<global::Google.Ads.GoogleAds.V2.Services.EndCampaignExperimentRequest, global::Google.Protobuf.WellKnownTypes.Empty> __Method_EndCampaignExperiment = new grpc::Method<global::Google.Ads.GoogleAds.V2.Services.EndCampaignExperimentRequest, global::Google.Protobuf.WellKnownTypes.Empty>(
        grpc::MethodType.Unary,
        __ServiceName,
        "EndCampaignExperiment",
        __Marshaller_google_ads_googleads_v2_services_EndCampaignExperimentRequest,
        __Marshaller_google_protobuf_Empty);

    static readonly grpc::Method<global::Google.Ads.GoogleAds.V2.Services.ListCampaignExperimentAsyncErrorsRequest, global::Google.Ads.GoogleAds.V2.Services.ListCampaignExperimentAsyncErrorsResponse> __Method_ListCampaignExperimentAsyncErrors = new grpc::Method<global::Google.Ads.GoogleAds.V2.Services.ListCampaignExperimentAsyncErrorsRequest, global::Google.Ads.GoogleAds.V2.Services.ListCampaignExperimentAsyncErrorsResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ListCampaignExperimentAsyncErrors",
        __Marshaller_google_ads_googleads_v2_services_ListCampaignExperimentAsyncErrorsRequest,
        __Marshaller_google_ads_googleads_v2_services_ListCampaignExperimentAsyncErrorsResponse);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::Google.Ads.GoogleAds.V2.Services.CampaignExperimentServiceReflection.Descriptor.Services[0]; }
    }

    /// <summary>Base class for server-side implementations of CampaignExperimentService</summary>
    [grpc::BindServiceMethod(typeof(CampaignExperimentService), "BindService")]
    public abstract partial class CampaignExperimentServiceBase
    {
      /// <summary>
      /// Returns the requested campaign experiment in full detail.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Ads.GoogleAds.V2.Resources.CampaignExperiment> GetCampaignExperiment(global::Google.Ads.GoogleAds.V2.Services.GetCampaignExperimentRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Creates a campaign experiment based on a campaign draft. The draft campaign
      /// will be forked into a real campaign (called the experiment campaign) that
      /// will begin serving ads if successfully created.
      ///
      /// The campaign experiment is created immediately with status INITIALIZING.
      /// This method return a long running operation that tracks the forking of the
      /// draft campaign. If the forking fails, a list of errors can be retrieved
      /// using the ListCampaignExperimentAsyncErrors method. The operation's
      /// metadata will be a StringValue containing the resource name of the created
      /// campaign experiment.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.LongRunning.Operation> CreateCampaignExperiment(global::Google.Ads.GoogleAds.V2.Services.CreateCampaignExperimentRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Updates campaign experiments. Operation statuses are returned.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Ads.GoogleAds.V2.Services.MutateCampaignExperimentsResponse> MutateCampaignExperiments(global::Google.Ads.GoogleAds.V2.Services.MutateCampaignExperimentsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Graduates a campaign experiment to a full campaign. The base and experiment
      /// campaigns will start running independently with their own budgets.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Ads.GoogleAds.V2.Services.GraduateCampaignExperimentResponse> GraduateCampaignExperiment(global::Google.Ads.GoogleAds.V2.Services.GraduateCampaignExperimentRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Promotes the changes in a experiment campaign back to the base campaign.
      ///
      /// The campaign experiment is updated immediately with status PROMOTING.
      /// This method return a long running operation that tracks the promoting of
      /// the experiment campaign. If the promoting fails, a list of errors can be
      /// retrieved using the ListCampaignExperimentAsyncErrors method.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.LongRunning.Operation> PromoteCampaignExperiment(global::Google.Ads.GoogleAds.V2.Services.PromoteCampaignExperimentRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Immediately ends a campaign experiment, changing the experiment's scheduled
      /// end date and without waiting for end of day. End date is updated to be the
      /// time of the request.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Protobuf.WellKnownTypes.Empty> EndCampaignExperiment(global::Google.Ads.GoogleAds.V2.Services.EndCampaignExperimentRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Returns all errors that occurred during CampaignExperiment create or
      /// promote (whichever occurred last).
      /// Supports standard list paging.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Ads.GoogleAds.V2.Services.ListCampaignExperimentAsyncErrorsResponse> ListCampaignExperimentAsyncErrors(global::Google.Ads.GoogleAds.V2.Services.ListCampaignExperimentAsyncErrorsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for CampaignExperimentService</summary>
    public partial class CampaignExperimentServiceClient : grpc::ClientBase<CampaignExperimentServiceClient>
    {
      /// <summary>Creates a new client for CampaignExperimentService</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      public CampaignExperimentServiceClient(grpc::ChannelBase channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for CampaignExperimentService that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      public CampaignExperimentServiceClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      protected CampaignExperimentServiceClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      protected CampaignExperimentServiceClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      /// <summary>
      /// Returns the requested campaign experiment in full detail.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Ads.GoogleAds.V2.Resources.CampaignExperiment GetCampaignExperiment(global::Google.Ads.GoogleAds.V2.Services.GetCampaignExperimentRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetCampaignExperiment(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Returns the requested campaign experiment in full detail.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Ads.GoogleAds.V2.Resources.CampaignExperiment GetCampaignExperiment(global::Google.Ads.GoogleAds.V2.Services.GetCampaignExperimentRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetCampaignExperiment, null, options, request);
      }
      /// <summary>
      /// Returns the requested campaign experiment in full detail.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Ads.GoogleAds.V2.Resources.CampaignExperiment> GetCampaignExperimentAsync(global::Google.Ads.GoogleAds.V2.Services.GetCampaignExperimentRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetCampaignExperimentAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Returns the requested campaign experiment in full detail.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Ads.GoogleAds.V2.Resources.CampaignExperiment> GetCampaignExperimentAsync(global::Google.Ads.GoogleAds.V2.Services.GetCampaignExperimentRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetCampaignExperiment, null, options, request);
      }
      /// <summary>
      /// Creates a campaign experiment based on a campaign draft. The draft campaign
      /// will be forked into a real campaign (called the experiment campaign) that
      /// will begin serving ads if successfully created.
      ///
      /// The campaign experiment is created immediately with status INITIALIZING.
      /// This method return a long running operation that tracks the forking of the
      /// draft campaign. If the forking fails, a list of errors can be retrieved
      /// using the ListCampaignExperimentAsyncErrors method. The operation's
      /// metadata will be a StringValue containing the resource name of the created
      /// campaign experiment.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.LongRunning.Operation CreateCampaignExperiment(global::Google.Ads.GoogleAds.V2.Services.CreateCampaignExperimentRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreateCampaignExperiment(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Creates a campaign experiment based on a campaign draft. The draft campaign
      /// will be forked into a real campaign (called the experiment campaign) that
      /// will begin serving ads if successfully created.
      ///
      /// The campaign experiment is created immediately with status INITIALIZING.
      /// This method return a long running operation that tracks the forking of the
      /// draft campaign. If the forking fails, a list of errors can be retrieved
      /// using the ListCampaignExperimentAsyncErrors method. The operation's
      /// metadata will be a StringValue containing the resource name of the created
      /// campaign experiment.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.LongRunning.Operation CreateCampaignExperiment(global::Google.Ads.GoogleAds.V2.Services.CreateCampaignExperimentRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_CreateCampaignExperiment, null, options, request);
      }
      /// <summary>
      /// Creates a campaign experiment based on a campaign draft. The draft campaign
      /// will be forked into a real campaign (called the experiment campaign) that
      /// will begin serving ads if successfully created.
      ///
      /// The campaign experiment is created immediately with status INITIALIZING.
      /// This method return a long running operation that tracks the forking of the
      /// draft campaign. If the forking fails, a list of errors can be retrieved
      /// using the ListCampaignExperimentAsyncErrors method. The operation's
      /// metadata will be a StringValue containing the resource name of the created
      /// campaign experiment.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.LongRunning.Operation> CreateCampaignExperimentAsync(global::Google.Ads.GoogleAds.V2.Services.CreateCampaignExperimentRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreateCampaignExperimentAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Creates a campaign experiment based on a campaign draft. The draft campaign
      /// will be forked into a real campaign (called the experiment campaign) that
      /// will begin serving ads if successfully created.
      ///
      /// The campaign experiment is created immediately with status INITIALIZING.
      /// This method return a long running operation that tracks the forking of the
      /// draft campaign. If the forking fails, a list of errors can be retrieved
      /// using the ListCampaignExperimentAsyncErrors method. The operation's
      /// metadata will be a StringValue containing the resource name of the created
      /// campaign experiment.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.LongRunning.Operation> CreateCampaignExperimentAsync(global::Google.Ads.GoogleAds.V2.Services.CreateCampaignExperimentRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_CreateCampaignExperiment, null, options, request);
      }
      /// <summary>
      /// Updates campaign experiments. Operation statuses are returned.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Ads.GoogleAds.V2.Services.MutateCampaignExperimentsResponse MutateCampaignExperiments(global::Google.Ads.GoogleAds.V2.Services.MutateCampaignExperimentsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return MutateCampaignExperiments(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Updates campaign experiments. Operation statuses are returned.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Ads.GoogleAds.V2.Services.MutateCampaignExperimentsResponse MutateCampaignExperiments(global::Google.Ads.GoogleAds.V2.Services.MutateCampaignExperimentsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_MutateCampaignExperiments, null, options, request);
      }
      /// <summary>
      /// Updates campaign experiments. Operation statuses are returned.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Ads.GoogleAds.V2.Services.MutateCampaignExperimentsResponse> MutateCampaignExperimentsAsync(global::Google.Ads.GoogleAds.V2.Services.MutateCampaignExperimentsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return MutateCampaignExperimentsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Updates campaign experiments. Operation statuses are returned.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Ads.GoogleAds.V2.Services.MutateCampaignExperimentsResponse> MutateCampaignExperimentsAsync(global::Google.Ads.GoogleAds.V2.Services.MutateCampaignExperimentsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_MutateCampaignExperiments, null, options, request);
      }
      /// <summary>
      /// Graduates a campaign experiment to a full campaign. The base and experiment
      /// campaigns will start running independently with their own budgets.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Ads.GoogleAds.V2.Services.GraduateCampaignExperimentResponse GraduateCampaignExperiment(global::Google.Ads.GoogleAds.V2.Services.GraduateCampaignExperimentRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GraduateCampaignExperiment(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Graduates a campaign experiment to a full campaign. The base and experiment
      /// campaigns will start running independently with their own budgets.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Ads.GoogleAds.V2.Services.GraduateCampaignExperimentResponse GraduateCampaignExperiment(global::Google.Ads.GoogleAds.V2.Services.GraduateCampaignExperimentRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GraduateCampaignExperiment, null, options, request);
      }
      /// <summary>
      /// Graduates a campaign experiment to a full campaign. The base and experiment
      /// campaigns will start running independently with their own budgets.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Ads.GoogleAds.V2.Services.GraduateCampaignExperimentResponse> GraduateCampaignExperimentAsync(global::Google.Ads.GoogleAds.V2.Services.GraduateCampaignExperimentRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GraduateCampaignExperimentAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Graduates a campaign experiment to a full campaign. The base and experiment
      /// campaigns will start running independently with their own budgets.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Ads.GoogleAds.V2.Services.GraduateCampaignExperimentResponse> GraduateCampaignExperimentAsync(global::Google.Ads.GoogleAds.V2.Services.GraduateCampaignExperimentRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GraduateCampaignExperiment, null, options, request);
      }
      /// <summary>
      /// Promotes the changes in a experiment campaign back to the base campaign.
      ///
      /// The campaign experiment is updated immediately with status PROMOTING.
      /// This method return a long running operation that tracks the promoting of
      /// the experiment campaign. If the promoting fails, a list of errors can be
      /// retrieved using the ListCampaignExperimentAsyncErrors method.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.LongRunning.Operation PromoteCampaignExperiment(global::Google.Ads.GoogleAds.V2.Services.PromoteCampaignExperimentRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PromoteCampaignExperiment(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Promotes the changes in a experiment campaign back to the base campaign.
      ///
      /// The campaign experiment is updated immediately with status PROMOTING.
      /// This method return a long running operation that tracks the promoting of
      /// the experiment campaign. If the promoting fails, a list of errors can be
      /// retrieved using the ListCampaignExperimentAsyncErrors method.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.LongRunning.Operation PromoteCampaignExperiment(global::Google.Ads.GoogleAds.V2.Services.PromoteCampaignExperimentRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_PromoteCampaignExperiment, null, options, request);
      }
      /// <summary>
      /// Promotes the changes in a experiment campaign back to the base campaign.
      ///
      /// The campaign experiment is updated immediately with status PROMOTING.
      /// This method return a long running operation that tracks the promoting of
      /// the experiment campaign. If the promoting fails, a list of errors can be
      /// retrieved using the ListCampaignExperimentAsyncErrors method.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.LongRunning.Operation> PromoteCampaignExperimentAsync(global::Google.Ads.GoogleAds.V2.Services.PromoteCampaignExperimentRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PromoteCampaignExperimentAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Promotes the changes in a experiment campaign back to the base campaign.
      ///
      /// The campaign experiment is updated immediately with status PROMOTING.
      /// This method return a long running operation that tracks the promoting of
      /// the experiment campaign. If the promoting fails, a list of errors can be
      /// retrieved using the ListCampaignExperimentAsyncErrors method.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.LongRunning.Operation> PromoteCampaignExperimentAsync(global::Google.Ads.GoogleAds.V2.Services.PromoteCampaignExperimentRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_PromoteCampaignExperiment, null, options, request);
      }
      /// <summary>
      /// Immediately ends a campaign experiment, changing the experiment's scheduled
      /// end date and without waiting for end of day. End date is updated to be the
      /// time of the request.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Protobuf.WellKnownTypes.Empty EndCampaignExperiment(global::Google.Ads.GoogleAds.V2.Services.EndCampaignExperimentRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return EndCampaignExperiment(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Immediately ends a campaign experiment, changing the experiment's scheduled
      /// end date and without waiting for end of day. End date is updated to be the
      /// time of the request.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Protobuf.WellKnownTypes.Empty EndCampaignExperiment(global::Google.Ads.GoogleAds.V2.Services.EndCampaignExperimentRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_EndCampaignExperiment, null, options, request);
      }
      /// <summary>
      /// Immediately ends a campaign experiment, changing the experiment's scheduled
      /// end date and without waiting for end of day. End date is updated to be the
      /// time of the request.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Protobuf.WellKnownTypes.Empty> EndCampaignExperimentAsync(global::Google.Ads.GoogleAds.V2.Services.EndCampaignExperimentRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return EndCampaignExperimentAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Immediately ends a campaign experiment, changing the experiment's scheduled
      /// end date and without waiting for end of day. End date is updated to be the
      /// time of the request.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Protobuf.WellKnownTypes.Empty> EndCampaignExperimentAsync(global::Google.Ads.GoogleAds.V2.Services.EndCampaignExperimentRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_EndCampaignExperiment, null, options, request);
      }
      /// <summary>
      /// Returns all errors that occurred during CampaignExperiment create or
      /// promote (whichever occurred last).
      /// Supports standard list paging.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Ads.GoogleAds.V2.Services.ListCampaignExperimentAsyncErrorsResponse ListCampaignExperimentAsyncErrors(global::Google.Ads.GoogleAds.V2.Services.ListCampaignExperimentAsyncErrorsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListCampaignExperimentAsyncErrors(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Returns all errors that occurred during CampaignExperiment create or
      /// promote (whichever occurred last).
      /// Supports standard list paging.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Ads.GoogleAds.V2.Services.ListCampaignExperimentAsyncErrorsResponse ListCampaignExperimentAsyncErrors(global::Google.Ads.GoogleAds.V2.Services.ListCampaignExperimentAsyncErrorsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ListCampaignExperimentAsyncErrors, null, options, request);
      }
      /// <summary>
      /// Returns all errors that occurred during CampaignExperiment create or
      /// promote (whichever occurred last).
      /// Supports standard list paging.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Ads.GoogleAds.V2.Services.ListCampaignExperimentAsyncErrorsResponse> ListCampaignExperimentAsyncErrorsAsync(global::Google.Ads.GoogleAds.V2.Services.ListCampaignExperimentAsyncErrorsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListCampaignExperimentAsyncErrorsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Returns all errors that occurred during CampaignExperiment create or
      /// promote (whichever occurred last).
      /// Supports standard list paging.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Ads.GoogleAds.V2.Services.ListCampaignExperimentAsyncErrorsResponse> ListCampaignExperimentAsyncErrorsAsync(global::Google.Ads.GoogleAds.V2.Services.ListCampaignExperimentAsyncErrorsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ListCampaignExperimentAsyncErrors, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      protected override CampaignExperimentServiceClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new CampaignExperimentServiceClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static grpc::ServerServiceDefinition BindService(CampaignExperimentServiceBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_GetCampaignExperiment, serviceImpl.GetCampaignExperiment)
          .AddMethod(__Method_CreateCampaignExperiment, serviceImpl.CreateCampaignExperiment)
          .AddMethod(__Method_MutateCampaignExperiments, serviceImpl.MutateCampaignExperiments)
          .AddMethod(__Method_GraduateCampaignExperiment, serviceImpl.GraduateCampaignExperiment)
          .AddMethod(__Method_PromoteCampaignExperiment, serviceImpl.PromoteCampaignExperiment)
          .AddMethod(__Method_EndCampaignExperiment, serviceImpl.EndCampaignExperiment)
          .AddMethod(__Method_ListCampaignExperimentAsyncErrors, serviceImpl.ListCampaignExperimentAsyncErrors).Build();
    }

    /// <summary>Register service method with a service binder with or without implementation. Useful when customizing the  service binding logic.
    /// Note: this method is part of an experimental API that can change or be removed without any prior notice.</summary>
    /// <param name="serviceBinder">Service methods will be bound by calling <c>AddMethod</c> on this object.</param>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static void BindService(grpc::ServiceBinderBase serviceBinder, CampaignExperimentServiceBase serviceImpl)
    {
      serviceBinder.AddMethod(__Method_GetCampaignExperiment, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Ads.GoogleAds.V2.Services.GetCampaignExperimentRequest, global::Google.Ads.GoogleAds.V2.Resources.CampaignExperiment>(serviceImpl.GetCampaignExperiment));
      serviceBinder.AddMethod(__Method_CreateCampaignExperiment, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Ads.GoogleAds.V2.Services.CreateCampaignExperimentRequest, global::Google.LongRunning.Operation>(serviceImpl.CreateCampaignExperiment));
      serviceBinder.AddMethod(__Method_MutateCampaignExperiments, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Ads.GoogleAds.V2.Services.MutateCampaignExperimentsRequest, global::Google.Ads.GoogleAds.V2.Services.MutateCampaignExperimentsResponse>(serviceImpl.MutateCampaignExperiments));
      serviceBinder.AddMethod(__Method_GraduateCampaignExperiment, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Ads.GoogleAds.V2.Services.GraduateCampaignExperimentRequest, global::Google.Ads.GoogleAds.V2.Services.GraduateCampaignExperimentResponse>(serviceImpl.GraduateCampaignExperiment));
      serviceBinder.AddMethod(__Method_PromoteCampaignExperiment, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Ads.GoogleAds.V2.Services.PromoteCampaignExperimentRequest, global::Google.LongRunning.Operation>(serviceImpl.PromoteCampaignExperiment));
      serviceBinder.AddMethod(__Method_EndCampaignExperiment, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Ads.GoogleAds.V2.Services.EndCampaignExperimentRequest, global::Google.Protobuf.WellKnownTypes.Empty>(serviceImpl.EndCampaignExperiment));
      serviceBinder.AddMethod(__Method_ListCampaignExperimentAsyncErrors, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Ads.GoogleAds.V2.Services.ListCampaignExperimentAsyncErrorsRequest, global::Google.Ads.GoogleAds.V2.Services.ListCampaignExperimentAsyncErrorsResponse>(serviceImpl.ListCampaignExperimentAsyncErrors));
    }

  }
}
#endregion
