// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: google/ads/googleads/v2/resources/geographic_view.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Google.Ads.GoogleAds.V2.Resources {

  /// <summary>Holder for reflection information generated from google/ads/googleads/v2/resources/geographic_view.proto</summary>
  public static partial class GeographicViewReflection {

    #region Descriptor
    /// <summary>File descriptor for google/ads/googleads/v2/resources/geographic_view.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static GeographicViewReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Cjdnb29nbGUvYWRzL2dvb2dsZWFkcy92Mi9yZXNvdXJjZXMvZ2VvZ3JhcGhp",
            "Y192aWV3LnByb3RvEiFnb29nbGUuYWRzLmdvb2dsZWFkcy52Mi5yZXNvdXJj",
            "ZXMaNmdvb2dsZS9hZHMvZ29vZ2xlYWRzL3YyL2VudW1zL2dlb190YXJnZXRp",
            "bmdfdHlwZS5wcm90bxoeZ29vZ2xlL3Byb3RvYnVmL3dyYXBwZXJzLnByb3Rv",
            "Ghxnb29nbGUvYXBpL2Fubm90YXRpb25zLnByb3RvIr8BCg5HZW9ncmFwaGlj",
            "VmlldxIVCg1yZXNvdXJjZV9uYW1lGAEgASgJElsKDWxvY2F0aW9uX3R5cGUY",
            "AyABKA4yRC5nb29nbGUuYWRzLmdvb2dsZWFkcy52Mi5lbnVtcy5HZW9UYXJn",
            "ZXRpbmdUeXBlRW51bS5HZW9UYXJnZXRpbmdUeXBlEjkKFGNvdW50cnlfY3Jp",
            "dGVyaW9uX2lkGAQgASgLMhsuZ29vZ2xlLnByb3RvYnVmLkludDY0VmFsdWVC",
            "gAIKJWNvbS5nb29nbGUuYWRzLmdvb2dsZWFkcy52Mi5yZXNvdXJjZXNCE0dl",
            "b2dyYXBoaWNWaWV3UHJvdG9QAVpKZ29vZ2xlLmdvbGFuZy5vcmcvZ2VucHJv",
            "dG8vZ29vZ2xlYXBpcy9hZHMvZ29vZ2xlYWRzL3YyL3Jlc291cmNlcztyZXNv",
            "dXJjZXOiAgNHQUGqAiFHb29nbGUuQWRzLkdvb2dsZUFkcy5WMi5SZXNvdXJj",
            "ZXPKAiFHb29nbGVcQWRzXEdvb2dsZUFkc1xWMlxSZXNvdXJjZXPqAiVHb29n",
            "bGU6OkFkczo6R29vZ2xlQWRzOjpWMjo6UmVzb3VyY2VzYgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Google.Ads.GoogleAds.V2.Enums.GeoTargetingTypeReflection.Descriptor, global::Google.Protobuf.WellKnownTypes.WrappersReflection.Descriptor, global::Google.Api.AnnotationsReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Ads.GoogleAds.V2.Resources.GeographicView), global::Google.Ads.GoogleAds.V2.Resources.GeographicView.Parser, new[]{ "ResourceName", "LocationType", "CountryCriterionId" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  /// <summary>
  /// A geographic view.
  ///
  /// Geographic View includes all metrics aggregated at the country level,
  /// one row per country. It reports metrics at either actual physical location of
  /// the user or an area of interest. If other segment fields are used, you may
  /// get more than one row per country.
  /// </summary>
  public sealed partial class GeographicView : pb::IMessage<GeographicView> {
    private static readonly pb::MessageParser<GeographicView> _parser = new pb::MessageParser<GeographicView>(() => new GeographicView());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GeographicView> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Ads.GoogleAds.V2.Resources.GeographicViewReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GeographicView() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GeographicView(GeographicView other) : this() {
      resourceName_ = other.resourceName_;
      locationType_ = other.locationType_;
      CountryCriterionId = other.CountryCriterionId;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GeographicView Clone() {
      return new GeographicView(this);
    }

    /// <summary>Field number for the "resource_name" field.</summary>
    public const int ResourceNameFieldNumber = 1;
    private string resourceName_ = "";
    /// <summary>
    /// The resource name of the geographic view.
    /// Geographic view resource names have the form:
    ///
    /// `customers/{customer_id}/geographicViews/{country_criterion_id}~{location_type}`
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ResourceName {
      get { return resourceName_; }
      set {
        resourceName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "location_type" field.</summary>
    public const int LocationTypeFieldNumber = 3;
    private global::Google.Ads.GoogleAds.V2.Enums.GeoTargetingTypeEnum.Types.GeoTargetingType locationType_ = 0;
    /// <summary>
    /// Type of the geo targeting of the campaign.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Ads.GoogleAds.V2.Enums.GeoTargetingTypeEnum.Types.GeoTargetingType LocationType {
      get { return locationType_; }
      set {
        locationType_ = value;
      }
    }

    /// <summary>Field number for the "country_criterion_id" field.</summary>
    public const int CountryCriterionIdFieldNumber = 4;
    private static readonly pb::FieldCodec<long?> _single_countryCriterionId_codec = pb::FieldCodec.ForStructWrapper<long>(34);
    private long? countryCriterionId_;
    /// <summary>
    /// Criterion Id for the country.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long? CountryCriterionId {
      get { return countryCriterionId_; }
      set {
        countryCriterionId_ = value;
      }
    }


    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GeographicView);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GeographicView other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ResourceName != other.ResourceName) return false;
      if (LocationType != other.LocationType) return false;
      if (CountryCriterionId != other.CountryCriterionId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ResourceName.Length != 0) hash ^= ResourceName.GetHashCode();
      if (LocationType != 0) hash ^= LocationType.GetHashCode();
      if (countryCriterionId_ != null) hash ^= CountryCriterionId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ResourceName.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(ResourceName);
      }
      if (LocationType != 0) {
        output.WriteRawTag(24);
        output.WriteEnum((int) LocationType);
      }
      if (countryCriterionId_ != null) {
        _single_countryCriterionId_codec.WriteTagAndValue(output, CountryCriterionId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ResourceName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ResourceName);
      }
      if (LocationType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) LocationType);
      }
      if (countryCriterionId_ != null) {
        size += _single_countryCriterionId_codec.CalculateSizeWithTag(CountryCriterionId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GeographicView other) {
      if (other == null) {
        return;
      }
      if (other.ResourceName.Length != 0) {
        ResourceName = other.ResourceName;
      }
      if (other.LocationType != 0) {
        LocationType = other.LocationType;
      }
      if (other.countryCriterionId_ != null) {
        if (countryCriterionId_ == null || other.CountryCriterionId != 0L) {
          CountryCriterionId = other.CountryCriterionId;
        }
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            ResourceName = input.ReadString();
            break;
          }
          case 24: {
            LocationType = (global::Google.Ads.GoogleAds.V2.Enums.GeoTargetingTypeEnum.Types.GeoTargetingType) input.ReadEnum();
            break;
          }
          case 34: {
            long? value = _single_countryCriterionId_codec.Read(input);
            if (countryCriterionId_ == null || value != 0L) {
              CountryCriterionId = value;
            }
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
