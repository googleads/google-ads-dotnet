// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: google/ads/googleads/v2/errors/setting_error.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Google.Ads.GoogleAds.V2.Errors {

  /// <summary>Holder for reflection information generated from google/ads/googleads/v2/errors/setting_error.proto</summary>
  public static partial class SettingErrorReflection {

    #region Descriptor
    /// <summary>File descriptor for google/ads/googleads/v2/errors/setting_error.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static SettingErrorReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CjJnb29nbGUvYWRzL2dvb2dsZWFkcy92Mi9lcnJvcnMvc2V0dGluZ19lcnJv",
            "ci5wcm90bxIeZ29vZ2xlLmFkcy5nb29nbGVhZHMudjIuZXJyb3JzGhxnb29n",
            "bGUvYXBpL2Fubm90YXRpb25zLnByb3RvIr4IChBTZXR0aW5nRXJyb3JFbnVt",
            "IqkICgxTZXR0aW5nRXJyb3ISDwoLVU5TUEVDSUZJRUQQABILCgdVTktOT1dO",
            "EAESIQodU0VUVElOR19UWVBFX0lTX05PVF9BVkFJTEFCTEUQAxIwCixTRVRU",
            "SU5HX1RZUEVfSVNfTk9UX0NPTVBBVElCTEVfV0lUSF9DQU1QQUlHThAEEjsK",
            "N1RBUkdFVElOR19TRVRUSU5HX0NPTlRBSU5TX0lOVkFMSURfQ1JJVEVSSU9O",
            "X1RZUEVfR1JPVVAQBRJRCk1UQVJHRVRJTkdfU0VUVElOR19ERU1PR1JBUEhJ",
            "Q19DUklURVJJT05fVFlQRV9HUk9VUFNfTVVTVF9CRV9TRVRfVE9fVEFSR0VU",
            "X0FMTBAGElwKWFRBUkdFVElOR19TRVRUSU5HX0NBTk5PVF9DSEFOR0VfVEFS",
            "R0VUX0FMTF9UT19GQUxTRV9GT1JfREVNT0dSQVBISUNfQ1JJVEVSSU9OX1RZ",
            "UEVfR1JPVVAQBxJDCj9EWU5BTUlDX1NFQVJDSF9BRFNfU0VUVElOR19BVF9M",
            "RUFTVF9PTkVfRkVFRF9JRF9NVVNUX0JFX1BSRVNFTlQQCBI7CjdEWU5BTUlD",
            "X1NFQVJDSF9BRFNfU0VUVElOR19DT05UQUlOU19JTlZBTElEX0RPTUFJTl9O",
            "QU1FEAkSNgoyRFlOQU1JQ19TRUFSQ0hfQURTX1NFVFRJTkdfQ09OVEFJTlNf",
            "U1VCRE9NQUlOX05BTUUQChI9CjlEWU5BTUlDX1NFQVJDSF9BRFNfU0VUVElO",
            "R19DT05UQUlOU19JTlZBTElEX0xBTkdVQUdFX0NPREUQCxI+CjpUQVJHRVRf",
            "QUxMX0lTX05PVF9BTExPV0VEX0ZPUl9QTEFDRU1FTlRfSU5fU0VBUkNIX0NB",
            "TVBBSUdOEAwSOAo0VU5JVkVSU0FMX0FQUF9DQU1QQUlHTl9TRVRUSU5HX0RV",
            "UExJQ0FURV9ERVNDUklQVElPThANEkIKPlVOSVZFUlNBTF9BUFBfQ0FNUEFJ",
            "R05fU0VUVElOR19ERVNDUklQVElPTl9MSU5FX1dJRFRIX1RPT19MT05HEA4S",
            "PAo4VU5JVkVSU0FMX0FQUF9DQU1QQUlHTl9TRVRUSU5HX0FQUF9JRF9DQU5O",
            "T1RfQkVfTU9ESUZJRUQQDxI4CjRUT09fTUFOWV9ZT1VUVUJFX01FRElBX0lE",
            "U19JTl9VTklWRVJTQUxfQVBQX0NBTVBBSUdOEBASNgoyVE9PX01BTllfSU1B",
            "R0VfTUVESUFfSURTX0lOX1VOSVZFUlNBTF9BUFBfQ0FNUEFJR04QERIxCi1N",
            "RURJQV9JTkNPTVBBVElCTEVfRk9SX1VOSVZFUlNBTF9BUFBfQ0FNUEFJR04Q",
            "EhIeChpUT09fTUFOWV9FWENMQU1BVElPTl9NQVJLUxATQuwBCiJjb20uZ29v",
            "Z2xlLmFkcy5nb29nbGVhZHMudjIuZXJyb3JzQhFTZXR0aW5nRXJyb3JQcm90",
            "b1ABWkRnb29nbGUuZ29sYW5nLm9yZy9nZW5wcm90by9nb29nbGVhcGlzL2Fk",
            "cy9nb29nbGVhZHMvdjIvZXJyb3JzO2Vycm9yc6ICA0dBQaoCHkdvb2dsZS5B",
            "ZHMuR29vZ2xlQWRzLlYyLkVycm9yc8oCHkdvb2dsZVxBZHNcR29vZ2xlQWRz",
            "XFYyXEVycm9yc+oCIkdvb2dsZTo6QWRzOjpHb29nbGVBZHM6OlYyOjpFcnJv",
            "cnNiBnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Google.Api.AnnotationsReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Ads.GoogleAds.V2.Errors.SettingErrorEnum), global::Google.Ads.GoogleAds.V2.Errors.SettingErrorEnum.Parser, null, null, new[]{ typeof(global::Google.Ads.GoogleAds.V2.Errors.SettingErrorEnum.Types.SettingError) }, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  /// <summary>
  /// Container for enum describing possible setting errors.
  /// </summary>
  public sealed partial class SettingErrorEnum : pb::IMessage<SettingErrorEnum> {
    private static readonly pb::MessageParser<SettingErrorEnum> _parser = new pb::MessageParser<SettingErrorEnum>(() => new SettingErrorEnum());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SettingErrorEnum> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Ads.GoogleAds.V2.Errors.SettingErrorReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SettingErrorEnum() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SettingErrorEnum(SettingErrorEnum other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SettingErrorEnum Clone() {
      return new SettingErrorEnum(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SettingErrorEnum);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SettingErrorEnum other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SettingErrorEnum other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the SettingErrorEnum message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      /// <summary>
      /// Enum describing possible setting errors.
      /// </summary>
      public enum SettingError {
        /// <summary>
        /// Enum unspecified.
        /// </summary>
        [pbr::OriginalName("UNSPECIFIED")] Unspecified = 0,
        /// <summary>
        /// The received error code is not known in this version.
        /// </summary>
        [pbr::OriginalName("UNKNOWN")] Unknown = 1,
        /// <summary>
        /// The campaign setting is not available for this Google Ads account.
        /// </summary>
        [pbr::OriginalName("SETTING_TYPE_IS_NOT_AVAILABLE")] SettingTypeIsNotAvailable = 3,
        /// <summary>
        /// The setting is not compatible with the campaign.
        /// </summary>
        [pbr::OriginalName("SETTING_TYPE_IS_NOT_COMPATIBLE_WITH_CAMPAIGN")] SettingTypeIsNotCompatibleWithCampaign = 4,
        /// <summary>
        /// The supplied TargetingSetting contains an invalid CriterionTypeGroup. See
        /// CriterionTypeGroup documentation for CriterionTypeGroups allowed
        /// in Campaign or AdGroup TargetingSettings.
        /// </summary>
        [pbr::OriginalName("TARGETING_SETTING_CONTAINS_INVALID_CRITERION_TYPE_GROUP")] TargetingSettingContainsInvalidCriterionTypeGroup = 5,
        /// <summary>
        /// TargetingSetting must not explicitly
        /// set any of the Demographic CriterionTypeGroups (AGE_RANGE, GENDER,
        /// PARENT, INCOME_RANGE) to false (it's okay to not set them at all, in
        /// which case the system will set them to true automatically).
        /// </summary>
        [pbr::OriginalName("TARGETING_SETTING_DEMOGRAPHIC_CRITERION_TYPE_GROUPS_MUST_BE_SET_TO_TARGET_ALL")] TargetingSettingDemographicCriterionTypeGroupsMustBeSetToTargetAll = 6,
        /// <summary>
        /// TargetingSetting cannot change any of
        /// the Demographic CriterionTypeGroups (AGE_RANGE, GENDER, PARENT,
        /// INCOME_RANGE) from true to false.
        /// </summary>
        [pbr::OriginalName("TARGETING_SETTING_CANNOT_CHANGE_TARGET_ALL_TO_FALSE_FOR_DEMOGRAPHIC_CRITERION_TYPE_GROUP")] TargetingSettingCannotChangeTargetAllToFalseForDemographicCriterionTypeGroup = 7,
        /// <summary>
        /// At least one feed id should be present.
        /// </summary>
        [pbr::OriginalName("DYNAMIC_SEARCH_ADS_SETTING_AT_LEAST_ONE_FEED_ID_MUST_BE_PRESENT")] DynamicSearchAdsSettingAtLeastOneFeedIdMustBePresent = 8,
        /// <summary>
        /// The supplied DynamicSearchAdsSetting contains an invalid domain name.
        /// </summary>
        [pbr::OriginalName("DYNAMIC_SEARCH_ADS_SETTING_CONTAINS_INVALID_DOMAIN_NAME")] DynamicSearchAdsSettingContainsInvalidDomainName = 9,
        /// <summary>
        /// The supplied DynamicSearchAdsSetting contains a subdomain name.
        /// </summary>
        [pbr::OriginalName("DYNAMIC_SEARCH_ADS_SETTING_CONTAINS_SUBDOMAIN_NAME")] DynamicSearchAdsSettingContainsSubdomainName = 10,
        /// <summary>
        /// The supplied DynamicSearchAdsSetting contains an invalid language code.
        /// </summary>
        [pbr::OriginalName("DYNAMIC_SEARCH_ADS_SETTING_CONTAINS_INVALID_LANGUAGE_CODE")] DynamicSearchAdsSettingContainsInvalidLanguageCode = 11,
        /// <summary>
        /// TargetingSettings in search campaigns should not have
        /// CriterionTypeGroup.PLACEMENT set to targetAll.
        /// </summary>
        [pbr::OriginalName("TARGET_ALL_IS_NOT_ALLOWED_FOR_PLACEMENT_IN_SEARCH_CAMPAIGN")] TargetAllIsNotAllowedForPlacementInSearchCampaign = 12,
        /// <summary>
        /// Duplicate description in universal app setting description field.
        /// </summary>
        [pbr::OriginalName("UNIVERSAL_APP_CAMPAIGN_SETTING_DUPLICATE_DESCRIPTION")] UniversalAppCampaignSettingDuplicateDescription = 13,
        /// <summary>
        /// Description line width is too long in universal app setting description
        /// field.
        /// </summary>
        [pbr::OriginalName("UNIVERSAL_APP_CAMPAIGN_SETTING_DESCRIPTION_LINE_WIDTH_TOO_LONG")] UniversalAppCampaignSettingDescriptionLineWidthTooLong = 14,
        /// <summary>
        /// Universal app setting appId field cannot be modified for COMPLETE
        /// campaigns.
        /// </summary>
        [pbr::OriginalName("UNIVERSAL_APP_CAMPAIGN_SETTING_APP_ID_CANNOT_BE_MODIFIED")] UniversalAppCampaignSettingAppIdCannotBeModified = 15,
        /// <summary>
        /// YoutubeVideoMediaIds in universal app setting cannot exceed size limit.
        /// </summary>
        [pbr::OriginalName("TOO_MANY_YOUTUBE_MEDIA_IDS_IN_UNIVERSAL_APP_CAMPAIGN")] TooManyYoutubeMediaIdsInUniversalAppCampaign = 16,
        /// <summary>
        /// ImageMediaIds in universal app setting cannot exceed size limit.
        /// </summary>
        [pbr::OriginalName("TOO_MANY_IMAGE_MEDIA_IDS_IN_UNIVERSAL_APP_CAMPAIGN")] TooManyImageMediaIdsInUniversalAppCampaign = 17,
        /// <summary>
        /// Media is incompatible for universal app campaign.
        /// </summary>
        [pbr::OriginalName("MEDIA_INCOMPATIBLE_FOR_UNIVERSAL_APP_CAMPAIGN")] MediaIncompatibleForUniversalAppCampaign = 18,
        /// <summary>
        /// Too many exclamation marks in universal app campaign ad text ideas.
        /// </summary>
        [pbr::OriginalName("TOO_MANY_EXCLAMATION_MARKS")] TooManyExclamationMarks = 19,
      }

    }
    #endregion

  }

  #endregion

}

#endregion Designer generated code
