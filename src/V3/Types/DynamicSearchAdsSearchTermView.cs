// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: google/ads/googleads/v3/resources/dynamic_search_ads_search_term_view.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Google.Ads.GoogleAds.V3.Resources {

  /// <summary>Holder for reflection information generated from google/ads/googleads/v3/resources/dynamic_search_ads_search_term_view.proto</summary>
  public static partial class DynamicSearchAdsSearchTermViewReflection {

    #region Descriptor
    /// <summary>File descriptor for google/ads/googleads/v3/resources/dynamic_search_ads_search_term_view.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static DynamicSearchAdsSearchTermViewReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Cktnb29nbGUvYWRzL2dvb2dsZWFkcy92My9yZXNvdXJjZXMvZHluYW1pY19z",
            "ZWFyY2hfYWRzX3NlYXJjaF90ZXJtX3ZpZXcucHJvdG8SIWdvb2dsZS5hZHMu",
            "Z29vZ2xlYWRzLnYzLnJlc291cmNlcxofZ29vZ2xlL2FwaS9maWVsZF9iZWhh",
            "dmlvci5wcm90bxoZZ29vZ2xlL2FwaS9yZXNvdXJjZS5wcm90bxoeZ29vZ2xl",
            "L3Byb3RvYnVmL3dyYXBwZXJzLnByb3RvGhxnb29nbGUvYXBpL2Fubm90YXRp",
            "b25zLnByb3RvIqgFCh5EeW5hbWljU2VhcmNoQWRzU2VhcmNoVGVybVZpZXcS",
            "VgoNcmVzb3VyY2VfbmFtZRgBIAEoCUI/4EED+kE5Cjdnb29nbGVhZHMuZ29v",
            "Z2xlYXBpcy5jb20vRHluYW1pY1NlYXJjaEFkc1NlYXJjaFRlcm1WaWV3EjYK",
            "C3NlYXJjaF90ZXJtGAIgASgLMhwuZ29vZ2xlLnByb3RvYnVmLlN0cmluZ1Zh",
            "bHVlQgPgQQMSMwoIaGVhZGxpbmUYAyABKAsyHC5nb29nbGUucHJvdG9idWYu",
            "U3RyaW5nVmFsdWVCA+BBAxI3CgxsYW5kaW5nX3BhZ2UYBCABKAsyHC5nb29n",
            "bGUucHJvdG9idWYuU3RyaW5nVmFsdWVCA+BBAxIzCghwYWdlX3VybBgFIAEo",
            "CzIcLmdvb2dsZS5wcm90b2J1Zi5TdHJpbmdWYWx1ZUID4EEDEj0KFGhhc19u",
            "ZWdhdGl2ZV9rZXl3b3JkGAYgASgLMhouZ29vZ2xlLnByb3RvYnVmLkJvb2xW",
            "YWx1ZUID4EEDEj0KFGhhc19tYXRjaGluZ19rZXl3b3JkGAcgASgLMhouZ29v",
            "Z2xlLnByb3RvYnVmLkJvb2xWYWx1ZUID4EEDEjkKEGhhc19uZWdhdGl2ZV91",
            "cmwYCCABKAsyGi5nb29nbGUucHJvdG9idWYuQm9vbFZhbHVlQgPgQQM6mQHq",
            "QZUBCjdnb29nbGVhZHMuZ29vZ2xlYXBpcy5jb20vRHluYW1pY1NlYXJjaEFk",
            "c1NlYXJjaFRlcm1WaWV3ElpjdXN0b21lcnMve2N1c3RvbWVyfS9keW5hbWlj",
            "U2VhcmNoQWRzU2VhcmNoVGVybVZpZXdzL3tkeW5hbWljX3NlYXJjaF9hZHNf",
            "c2VhcmNoX3Rlcm1fdmlld31CkAIKJWNvbS5nb29nbGUuYWRzLmdvb2dsZWFk",
            "cy52My5yZXNvdXJjZXNCI0R5bmFtaWNTZWFyY2hBZHNTZWFyY2hUZXJtVmll",
            "d1Byb3RvUAFaSmdvb2dsZS5nb2xhbmcub3JnL2dlbnByb3RvL2dvb2dsZWFw",
            "aXMvYWRzL2dvb2dsZWFkcy92My9yZXNvdXJjZXM7cmVzb3VyY2VzogIDR0FB",
            "qgIhR29vZ2xlLkFkcy5Hb29nbGVBZHMuVjMuUmVzb3VyY2VzygIhR29vZ2xl",
            "XEFkc1xHb29nbGVBZHNcVjNcUmVzb3VyY2Vz6gIlR29vZ2xlOjpBZHM6Okdv",
            "b2dsZUFkczo6VjM6OlJlc291cmNlc2IGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Google.Api.FieldBehaviorReflection.Descriptor, global::Google.Api.ResourceReflection.Descriptor, global::Google.Protobuf.WellKnownTypes.WrappersReflection.Descriptor, global::Google.Api.AnnotationsReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Ads.GoogleAds.V3.Resources.DynamicSearchAdsSearchTermView), global::Google.Ads.GoogleAds.V3.Resources.DynamicSearchAdsSearchTermView.Parser, new[]{ "ResourceName", "SearchTerm", "Headline", "LandingPage", "PageUrl", "HasNegativeKeyword", "HasMatchingKeyword", "HasNegativeUrl" }, null, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  /// <summary>
  /// A dynamic search ads search term view.
  /// </summary>
  public sealed partial class DynamicSearchAdsSearchTermView : pb::IMessage<DynamicSearchAdsSearchTermView> {
    private static readonly pb::MessageParser<DynamicSearchAdsSearchTermView> _parser = new pb::MessageParser<DynamicSearchAdsSearchTermView>(() => new DynamicSearchAdsSearchTermView());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DynamicSearchAdsSearchTermView> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Ads.GoogleAds.V3.Resources.DynamicSearchAdsSearchTermViewReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DynamicSearchAdsSearchTermView() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DynamicSearchAdsSearchTermView(DynamicSearchAdsSearchTermView other) : this() {
      resourceName_ = other.resourceName_;
      SearchTerm = other.SearchTerm;
      Headline = other.Headline;
      LandingPage = other.LandingPage;
      PageUrl = other.PageUrl;
      HasNegativeKeyword = other.HasNegativeKeyword;
      HasMatchingKeyword = other.HasMatchingKeyword;
      HasNegativeUrl = other.HasNegativeUrl;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DynamicSearchAdsSearchTermView Clone() {
      return new DynamicSearchAdsSearchTermView(this);
    }

    /// <summary>Field number for the "resource_name" field.</summary>
    public const int ResourceNameFieldNumber = 1;
    private string resourceName_ = "";
    /// <summary>
    /// Output only. The resource name of the dynamic search ads search term view.
    /// Dynamic search ads search term view resource names have the form:
    ///
    /// `customers/{customer_id}/dynamicSearchAdsSearchTermViews/{ad_group_id}~{search_term_fp}~{headline_fp}~{landing_page_fp}~{page_url_fp}`
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ResourceName {
      get { return resourceName_; }
      set {
        resourceName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "search_term" field.</summary>
    public const int SearchTermFieldNumber = 2;
    private static readonly pb::FieldCodec<string> _single_searchTerm_codec = pb::FieldCodec.ForClassWrapper<string>(18);
    private string searchTerm_;
    /// <summary>
    /// Output only. Search term
    ///
    /// This field is read-only.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SearchTerm {
      get { return searchTerm_; }
      set {
        searchTerm_ = value;
      }
    }


    /// <summary>Field number for the "headline" field.</summary>
    public const int HeadlineFieldNumber = 3;
    private static readonly pb::FieldCodec<string> _single_headline_codec = pb::FieldCodec.ForClassWrapper<string>(26);
    private string headline_;
    /// <summary>
    /// Output only. The dynamically generated headline of the Dynamic Search Ad.
    ///
    /// This field is read-only.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Headline {
      get { return headline_; }
      set {
        headline_ = value;
      }
    }


    /// <summary>Field number for the "landing_page" field.</summary>
    public const int LandingPageFieldNumber = 4;
    private static readonly pb::FieldCodec<string> _single_landingPage_codec = pb::FieldCodec.ForClassWrapper<string>(34);
    private string landingPage_;
    /// <summary>
    /// Output only. The dynamically selected landing page URL of the impression.
    ///
    /// This field is read-only.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string LandingPage {
      get { return landingPage_; }
      set {
        landingPage_ = value;
      }
    }


    /// <summary>Field number for the "page_url" field.</summary>
    public const int PageUrlFieldNumber = 5;
    private static readonly pb::FieldCodec<string> _single_pageUrl_codec = pb::FieldCodec.ForClassWrapper<string>(42);
    private string pageUrl_;
    /// <summary>
    /// Output only. The URL of page feed item served for the impression.
    ///
    /// This field is read-only.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PageUrl {
      get { return pageUrl_; }
      set {
        pageUrl_ = value;
      }
    }


    /// <summary>Field number for the "has_negative_keyword" field.</summary>
    public const int HasNegativeKeywordFieldNumber = 6;
    private static readonly pb::FieldCodec<bool?> _single_hasNegativeKeyword_codec = pb::FieldCodec.ForStructWrapper<bool>(50);
    private bool? hasNegativeKeyword_;
    /// <summary>
    /// Output only. True if query matches a negative keyword.
    ///
    /// This field is read-only.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool? HasNegativeKeyword {
      get { return hasNegativeKeyword_; }
      set {
        hasNegativeKeyword_ = value;
      }
    }


    /// <summary>Field number for the "has_matching_keyword" field.</summary>
    public const int HasMatchingKeywordFieldNumber = 7;
    private static readonly pb::FieldCodec<bool?> _single_hasMatchingKeyword_codec = pb::FieldCodec.ForStructWrapper<bool>(58);
    private bool? hasMatchingKeyword_;
    /// <summary>
    /// Output only. True if query is added to targeted keywords.
    ///
    /// This field is read-only.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool? HasMatchingKeyword {
      get { return hasMatchingKeyword_; }
      set {
        hasMatchingKeyword_ = value;
      }
    }


    /// <summary>Field number for the "has_negative_url" field.</summary>
    public const int HasNegativeUrlFieldNumber = 8;
    private static readonly pb::FieldCodec<bool?> _single_hasNegativeUrl_codec = pb::FieldCodec.ForStructWrapper<bool>(66);
    private bool? hasNegativeUrl_;
    /// <summary>
    /// Output only. True if query matches a negative url.
    ///
    /// This field is read-only.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool? HasNegativeUrl {
      get { return hasNegativeUrl_; }
      set {
        hasNegativeUrl_ = value;
      }
    }


    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DynamicSearchAdsSearchTermView);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DynamicSearchAdsSearchTermView other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ResourceName != other.ResourceName) return false;
      if (SearchTerm != other.SearchTerm) return false;
      if (Headline != other.Headline) return false;
      if (LandingPage != other.LandingPage) return false;
      if (PageUrl != other.PageUrl) return false;
      if (HasNegativeKeyword != other.HasNegativeKeyword) return false;
      if (HasMatchingKeyword != other.HasMatchingKeyword) return false;
      if (HasNegativeUrl != other.HasNegativeUrl) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ResourceName.Length != 0) hash ^= ResourceName.GetHashCode();
      if (searchTerm_ != null) hash ^= SearchTerm.GetHashCode();
      if (headline_ != null) hash ^= Headline.GetHashCode();
      if (landingPage_ != null) hash ^= LandingPage.GetHashCode();
      if (pageUrl_ != null) hash ^= PageUrl.GetHashCode();
      if (hasNegativeKeyword_ != null) hash ^= HasNegativeKeyword.GetHashCode();
      if (hasMatchingKeyword_ != null) hash ^= HasMatchingKeyword.GetHashCode();
      if (hasNegativeUrl_ != null) hash ^= HasNegativeUrl.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ResourceName.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(ResourceName);
      }
      if (searchTerm_ != null) {
        _single_searchTerm_codec.WriteTagAndValue(output, SearchTerm);
      }
      if (headline_ != null) {
        _single_headline_codec.WriteTagAndValue(output, Headline);
      }
      if (landingPage_ != null) {
        _single_landingPage_codec.WriteTagAndValue(output, LandingPage);
      }
      if (pageUrl_ != null) {
        _single_pageUrl_codec.WriteTagAndValue(output, PageUrl);
      }
      if (hasNegativeKeyword_ != null) {
        _single_hasNegativeKeyword_codec.WriteTagAndValue(output, HasNegativeKeyword);
      }
      if (hasMatchingKeyword_ != null) {
        _single_hasMatchingKeyword_codec.WriteTagAndValue(output, HasMatchingKeyword);
      }
      if (hasNegativeUrl_ != null) {
        _single_hasNegativeUrl_codec.WriteTagAndValue(output, HasNegativeUrl);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ResourceName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ResourceName);
      }
      if (searchTerm_ != null) {
        size += _single_searchTerm_codec.CalculateSizeWithTag(SearchTerm);
      }
      if (headline_ != null) {
        size += _single_headline_codec.CalculateSizeWithTag(Headline);
      }
      if (landingPage_ != null) {
        size += _single_landingPage_codec.CalculateSizeWithTag(LandingPage);
      }
      if (pageUrl_ != null) {
        size += _single_pageUrl_codec.CalculateSizeWithTag(PageUrl);
      }
      if (hasNegativeKeyword_ != null) {
        size += _single_hasNegativeKeyword_codec.CalculateSizeWithTag(HasNegativeKeyword);
      }
      if (hasMatchingKeyword_ != null) {
        size += _single_hasMatchingKeyword_codec.CalculateSizeWithTag(HasMatchingKeyword);
      }
      if (hasNegativeUrl_ != null) {
        size += _single_hasNegativeUrl_codec.CalculateSizeWithTag(HasNegativeUrl);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DynamicSearchAdsSearchTermView other) {
      if (other == null) {
        return;
      }
      if (other.ResourceName.Length != 0) {
        ResourceName = other.ResourceName;
      }
      if (other.searchTerm_ != null) {
        if (searchTerm_ == null || other.SearchTerm != "") {
          SearchTerm = other.SearchTerm;
        }
      }
      if (other.headline_ != null) {
        if (headline_ == null || other.Headline != "") {
          Headline = other.Headline;
        }
      }
      if (other.landingPage_ != null) {
        if (landingPage_ == null || other.LandingPage != "") {
          LandingPage = other.LandingPage;
        }
      }
      if (other.pageUrl_ != null) {
        if (pageUrl_ == null || other.PageUrl != "") {
          PageUrl = other.PageUrl;
        }
      }
      if (other.hasNegativeKeyword_ != null) {
        if (hasNegativeKeyword_ == null || other.HasNegativeKeyword != false) {
          HasNegativeKeyword = other.HasNegativeKeyword;
        }
      }
      if (other.hasMatchingKeyword_ != null) {
        if (hasMatchingKeyword_ == null || other.HasMatchingKeyword != false) {
          HasMatchingKeyword = other.HasMatchingKeyword;
        }
      }
      if (other.hasNegativeUrl_ != null) {
        if (hasNegativeUrl_ == null || other.HasNegativeUrl != false) {
          HasNegativeUrl = other.HasNegativeUrl;
        }
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            ResourceName = input.ReadString();
            break;
          }
          case 18: {
            string value = _single_searchTerm_codec.Read(input);
            if (searchTerm_ == null || value != "") {
              SearchTerm = value;
            }
            break;
          }
          case 26: {
            string value = _single_headline_codec.Read(input);
            if (headline_ == null || value != "") {
              Headline = value;
            }
            break;
          }
          case 34: {
            string value = _single_landingPage_codec.Read(input);
            if (landingPage_ == null || value != "") {
              LandingPage = value;
            }
            break;
          }
          case 42: {
            string value = _single_pageUrl_codec.Read(input);
            if (pageUrl_ == null || value != "") {
              PageUrl = value;
            }
            break;
          }
          case 50: {
            bool? value = _single_hasNegativeKeyword_codec.Read(input);
            if (hasNegativeKeyword_ == null || value != false) {
              HasNegativeKeyword = value;
            }
            break;
          }
          case 58: {
            bool? value = _single_hasMatchingKeyword_codec.Read(input);
            if (hasMatchingKeyword_ == null || value != false) {
              HasMatchingKeyword = value;
            }
            break;
          }
          case 66: {
            bool? value = _single_hasNegativeUrl_codec.Read(input);
            if (hasNegativeUrl_ == null || value != false) {
              HasNegativeUrl = value;
            }
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
