// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: google/ads/googleads/v3/common/metrics.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Google.Ads.GoogleAds.V3.Common {

  /// <summary>Holder for reflection information generated from google/ads/googleads/v3/common/metrics.proto</summary>
  public static partial class MetricsReflection {

    #region Descriptor
    /// <summary>File descriptor for google/ads/googleads/v3/common/metrics.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static MetricsReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Cixnb29nbGUvYWRzL2dvb2dsZWFkcy92My9jb21tb24vbWV0cmljcy5wcm90",
            "bxIeZ29vZ2xlLmFkcy5nb29nbGVhZHMudjMuY29tbW9uGjpnb29nbGUvYWRz",
            "L2dvb2dsZWFkcy92My9lbnVtcy9pbnRlcmFjdGlvbl9ldmVudF90eXBlLnBy",
            "b3RvGjhnb29nbGUvYWRzL2dvb2dsZWFkcy92My9lbnVtcy9xdWFsaXR5X3Nj",
            "b3JlX2J1Y2tldC5wcm90bxoeZ29vZ2xlL3Byb3RvYnVmL3dyYXBwZXJzLnBy",
            "b3RvGhxnb29nbGUvYXBpL2Fubm90YXRpb25zLnByb3RvIv05CgdNZXRyaWNz",
            "EkgKImFic29sdXRlX3RvcF9pbXByZXNzaW9uX3BlcmNlbnRhZ2UYXyABKAsy",
            "HC5nb29nbGUucHJvdG9idWYuRG91YmxlVmFsdWUSNQoPYWN0aXZlX3ZpZXdf",
            "Y3BtGAEgASgLMhwuZ29vZ2xlLnByb3RvYnVmLkRvdWJsZVZhbHVlEjUKD2Fj",
            "dGl2ZV92aWV3X2N0chhPIAEoCzIcLmdvb2dsZS5wcm90b2J1Zi5Eb3VibGVW",
            "YWx1ZRI8ChdhY3RpdmVfdmlld19pbXByZXNzaW9ucxgCIAEoCzIbLmdvb2ds",
            "ZS5wcm90b2J1Zi5JbnQ2NFZhbHVlEj8KGWFjdGl2ZV92aWV3X21lYXN1cmFi",
            "aWxpdHkYYCABKAsyHC5nb29nbGUucHJvdG9idWYuRG91YmxlVmFsdWUSRwoi",
            "YWN0aXZlX3ZpZXdfbWVhc3VyYWJsZV9jb3N0X21pY3JvcxgDIAEoCzIbLmdv",
            "b2dsZS5wcm90b2J1Zi5JbnQ2NFZhbHVlEkcKImFjdGl2ZV92aWV3X21lYXN1",
            "cmFibGVfaW1wcmVzc2lvbnMYBCABKAsyGy5nb29nbGUucHJvdG9idWYuSW50",
            "NjRWYWx1ZRI9ChdhY3RpdmVfdmlld192aWV3YWJpbGl0eRhhIAEoCzIcLmdv",
            "b2dsZS5wcm90b2J1Zi5Eb3VibGVWYWx1ZRJMCiZhbGxfY29udmVyc2lvbnNf",
            "ZnJvbV9pbnRlcmFjdGlvbnNfcmF0ZRhBIAEoCzIcLmdvb2dsZS5wcm90b2J1",
            "Zi5Eb3VibGVWYWx1ZRI7ChVhbGxfY29udmVyc2lvbnNfdmFsdWUYQiABKAsy",
            "HC5nb29nbGUucHJvdG9idWYuRG91YmxlVmFsdWUSNQoPYWxsX2NvbnZlcnNp",
            "b25zGAcgASgLMhwuZ29vZ2xlLnByb3RvYnVmLkRvdWJsZVZhbHVlEkQKHmFs",
            "bF9jb252ZXJzaW9uc192YWx1ZV9wZXJfY29zdBg+IAEoCzIcLmdvb2dsZS5w",
            "cm90b2J1Zi5Eb3VibGVWYWx1ZRJICiJhbGxfY29udmVyc2lvbnNfZnJvbV9j",
            "bGlja190b19jYWxsGHYgASgLMhwuZ29vZ2xlLnByb3RvYnVmLkRvdWJsZVZh",
            "bHVlEkUKH2FsbF9jb252ZXJzaW9uc19mcm9tX2RpcmVjdGlvbnMYdyABKAsy",
            "HC5nb29nbGUucHJvdG9idWYuRG91YmxlVmFsdWUSXQo3YWxsX2NvbnZlcnNp",
            "b25zX2Zyb21faW50ZXJhY3Rpb25zX3ZhbHVlX3Blcl9pbnRlcmFjdGlvbhhD",
            "IAEoCzIcLmdvb2dsZS5wcm90b2J1Zi5Eb3VibGVWYWx1ZRI/ChlhbGxfY29u",
            "dmVyc2lvbnNfZnJvbV9tZW51GHggASgLMhwuZ29vZ2xlLnByb3RvYnVmLkRv",
            "dWJsZVZhbHVlEkAKGmFsbF9jb252ZXJzaW9uc19mcm9tX29yZGVyGHkgASgL",
            "MhwuZ29vZ2xlLnByb3RvYnVmLkRvdWJsZVZhbHVlEksKJWFsbF9jb252ZXJz",
            "aW9uc19mcm9tX290aGVyX2VuZ2FnZW1lbnQYeiABKAsyHC5nb29nbGUucHJv",
            "dG9idWYuRG91YmxlVmFsdWUSRgogYWxsX2NvbnZlcnNpb25zX2Zyb21fc3Rv",
            "cmVfdmlzaXQYeyABKAsyHC5nb29nbGUucHJvdG9idWYuRG91YmxlVmFsdWUS",
            "SAoiYWxsX2NvbnZlcnNpb25zX2Zyb21fc3RvcmVfd2Vic2l0ZRh8IAEoCzIc",
            "Lmdvb2dsZS5wcm90b2J1Zi5Eb3VibGVWYWx1ZRIyCgxhdmVyYWdlX2Nvc3QY",
            "CCABKAsyHC5nb29nbGUucHJvdG9idWYuRG91YmxlVmFsdWUSMQoLYXZlcmFn",
            "ZV9jcGMYCSABKAsyHC5nb29nbGUucHJvdG9idWYuRG91YmxlVmFsdWUSMQoL",
            "YXZlcmFnZV9jcGUYYiABKAsyHC5nb29nbGUucHJvdG9idWYuRG91YmxlVmFs",
            "dWUSMQoLYXZlcmFnZV9jcG0YCiABKAsyHC5nb29nbGUucHJvdG9idWYuRG91",
            "YmxlVmFsdWUSMQoLYXZlcmFnZV9jcHYYCyABKAsyHC5nb29nbGUucHJvdG9i",
            "dWYuRG91YmxlVmFsdWUSOAoSYXZlcmFnZV9wYWdlX3ZpZXdzGGMgASgLMhwu",
            "Z29vZ2xlLnByb3RvYnVmLkRvdWJsZVZhbHVlEjoKFGF2ZXJhZ2VfdGltZV9v",
            "bl9zaXRlGFQgASgLMhwuZ29vZ2xlLnByb3RvYnVmLkRvdWJsZVZhbHVlEj8K",
            "GWJlbmNobWFya19hdmVyYWdlX21heF9jcGMYDiABKAsyHC5nb29nbGUucHJv",
            "dG9idWYuRG91YmxlVmFsdWUSMwoNYmVuY2htYXJrX2N0chhNIAEoCzIcLmdv",
            "b2dsZS5wcm90b2J1Zi5Eb3VibGVWYWx1ZRIxCgtib3VuY2VfcmF0ZRgPIAEo",
            "CzIcLmdvb2dsZS5wcm90b2J1Zi5Eb3VibGVWYWx1ZRIrCgZjbGlja3MYEyAB",
            "KAsyGy5nb29nbGUucHJvdG9idWYuSW50NjRWYWx1ZRI0Cg9jb21iaW5lZF9j",
            "bGlja3MYcyABKAsyGy5nb29nbGUucHJvdG9idWYuSW50NjRWYWx1ZRI/Chlj",
            "b21iaW5lZF9jbGlja3NfcGVyX3F1ZXJ5GHQgASgLMhwuZ29vZ2xlLnByb3Rv",
            "YnVmLkRvdWJsZVZhbHVlEjUKEGNvbWJpbmVkX3F1ZXJpZXMYdSABKAsyGy5n",
            "b29nbGUucHJvdG9idWYuSW50NjRWYWx1ZRJKCiRjb250ZW50X2J1ZGdldF9s",
            "b3N0X2ltcHJlc3Npb25fc2hhcmUYFCABKAsyHC5nb29nbGUucHJvdG9idWYu",
            "RG91YmxlVmFsdWUSPgoYY29udGVudF9pbXByZXNzaW9uX3NoYXJlGBUgASgL",
            "MhwuZ29vZ2xlLnByb3RvYnVmLkRvdWJsZVZhbHVlElAKKmNvbnZlcnNpb25f",
            "bGFzdF9yZWNlaXZlZF9yZXF1ZXN0X2RhdGVfdGltZRhJIAEoCzIcLmdvb2ds",
            "ZS5wcm90b2J1Zi5TdHJpbmdWYWx1ZRJFCh9jb252ZXJzaW9uX2xhc3RfY29u",
            "dmVyc2lvbl9kYXRlGEogASgLMhwuZ29vZ2xlLnByb3RvYnVmLlN0cmluZ1Zh",
            "bHVlEkgKImNvbnRlbnRfcmFua19sb3N0X2ltcHJlc3Npb25fc2hhcmUYFiAB",
            "KAsyHC5nb29nbGUucHJvdG9idWYuRG91YmxlVmFsdWUSSAoiY29udmVyc2lv",
            "bnNfZnJvbV9pbnRlcmFjdGlvbnNfcmF0ZRhFIAEoCzIcLmdvb2dsZS5wcm90",
            "b2J1Zi5Eb3VibGVWYWx1ZRI3ChFjb252ZXJzaW9uc192YWx1ZRhGIAEoCzIc",
            "Lmdvb2dsZS5wcm90b2J1Zi5Eb3VibGVWYWx1ZRJAChpjb252ZXJzaW9uc192",
            "YWx1ZV9wZXJfY29zdBhHIAEoCzIcLmdvb2dsZS5wcm90b2J1Zi5Eb3VibGVW",
            "YWx1ZRJZCjNjb252ZXJzaW9uc19mcm9tX2ludGVyYWN0aW9uc192YWx1ZV9w",
            "ZXJfaW50ZXJhY3Rpb24YSCABKAsyHC5nb29nbGUucHJvdG9idWYuRG91Ymxl",
            "VmFsdWUSMQoLY29udmVyc2lvbnMYGSABKAsyHC5nb29nbGUucHJvdG9idWYu",
            "RG91YmxlVmFsdWUSMAoLY29zdF9taWNyb3MYGiABKAsyGy5nb29nbGUucHJv",
            "dG9idWYuSW50NjRWYWx1ZRI+Chhjb3N0X3Blcl9hbGxfY29udmVyc2lvbnMY",
            "RCABKAsyHC5nb29nbGUucHJvdG9idWYuRG91YmxlVmFsdWUSOQoTY29zdF9w",
            "ZXJfY29udmVyc2lvbhgcIAEoCzIcLmdvb2dsZS5wcm90b2J1Zi5Eb3VibGVW",
            "YWx1ZRJSCixjb3N0X3Blcl9jdXJyZW50X21vZGVsX2F0dHJpYnV0ZWRfY29u",
            "dmVyc2lvbhhqIAEoCzIcLmdvb2dsZS5wcm90b2J1Zi5Eb3VibGVWYWx1ZRI+",
            "Chhjcm9zc19kZXZpY2VfY29udmVyc2lvbnMYHSABKAsyHC5nb29nbGUucHJv",
            "dG9idWYuRG91YmxlVmFsdWUSKQoDY3RyGB4gASgLMhwuZ29vZ2xlLnByb3Rv",
            "YnVmLkRvdWJsZVZhbHVlEkoKJGN1cnJlbnRfbW9kZWxfYXR0cmlidXRlZF9j",
            "b252ZXJzaW9ucxhlIAEoCzIcLmdvb2dsZS5wcm90b2J1Zi5Eb3VibGVWYWx1",
            "ZRJhCjtjdXJyZW50X21vZGVsX2F0dHJpYnV0ZWRfY29udmVyc2lvbnNfZnJv",
            "bV9pbnRlcmFjdGlvbnNfcmF0ZRhmIAEoCzIcLmdvb2dsZS5wcm90b2J1Zi5E",
            "b3VibGVWYWx1ZRJyCkxjdXJyZW50X21vZGVsX2F0dHJpYnV0ZWRfY29udmVy",
            "c2lvbnNfZnJvbV9pbnRlcmFjdGlvbnNfdmFsdWVfcGVyX2ludGVyYWN0aW9u",
            "GGcgASgLMhwuZ29vZ2xlLnByb3RvYnVmLkRvdWJsZVZhbHVlElAKKmN1cnJl",
            "bnRfbW9kZWxfYXR0cmlidXRlZF9jb252ZXJzaW9uc192YWx1ZRhoIAEoCzIc",
            "Lmdvb2dsZS5wcm90b2J1Zi5Eb3VibGVWYWx1ZRJZCjNjdXJyZW50X21vZGVs",
            "X2F0dHJpYnV0ZWRfY29udmVyc2lvbnNfdmFsdWVfcGVyX2Nvc3QYaSABKAsy",
            "HC5nb29nbGUucHJvdG9idWYuRG91YmxlVmFsdWUSNQoPZW5nYWdlbWVudF9y",
            "YXRlGB8gASgLMhwuZ29vZ2xlLnByb3RvYnVmLkRvdWJsZVZhbHVlEjAKC2Vu",
            "Z2FnZW1lbnRzGCAgASgLMhsuZ29vZ2xlLnByb3RvYnVmLkludDY0VmFsdWUS",
            "RQofaG90ZWxfYXZlcmFnZV9sZWFkX3ZhbHVlX21pY3JvcxhLIAEoCzIcLmdv",
            "b2dsZS5wcm90b2J1Zi5Eb3VibGVWYWx1ZRJICiFob3RlbF9wcmljZV9kaWZm",
            "ZXJlbmNlX3BlcmNlbnRhZ2UYgQEgASgLMhwuZ29vZ2xlLnByb3RvYnVmLkRv",
            "dWJsZVZhbHVlEnMKIWhpc3RvcmljYWxfY3JlYXRpdmVfcXVhbGl0eV9zY29y",
            "ZRhQIAEoDjJILmdvb2dsZS5hZHMuZ29vZ2xlYWRzLnYzLmVudW1zLlF1YWxp",
            "dHlTY29yZUJ1Y2tldEVudW0uUXVhbGl0eVNjb3JlQnVja2V0EncKJWhpc3Rv",
            "cmljYWxfbGFuZGluZ19wYWdlX3F1YWxpdHlfc2NvcmUYUSABKA4ySC5nb29n",
            "bGUuYWRzLmdvb2dsZWFkcy52My5lbnVtcy5RdWFsaXR5U2NvcmVCdWNrZXRF",
            "bnVtLlF1YWxpdHlTY29yZUJ1Y2tldBI9ChhoaXN0b3JpY2FsX3F1YWxpdHlf",
            "c2NvcmUYUiABKAsyGy5nb29nbGUucHJvdG9idWYuSW50NjRWYWx1ZRJxCh9o",
            "aXN0b3JpY2FsX3NlYXJjaF9wcmVkaWN0ZWRfY3RyGFMgASgOMkguZ29vZ2xl",
            "LmFkcy5nb29nbGVhZHMudjMuZW51bXMuUXVhbGl0eVNjb3JlQnVja2V0RW51",
            "bS5RdWFsaXR5U2NvcmVCdWNrZXQSMwoOZ21haWxfZm9yd2FyZHMYVSABKAsy",
            "Gy5nb29nbGUucHJvdG9idWYuSW50NjRWYWx1ZRIwCgtnbWFpbF9zYXZlcxhW",
            "IAEoCzIbLmdvb2dsZS5wcm90b2J1Zi5JbnQ2NFZhbHVlEjsKFmdtYWlsX3Nl",
            "Y29uZGFyeV9jbGlja3MYVyABKAsyGy5nb29nbGUucHJvdG9idWYuSW50NjRW",
            "YWx1ZRJBChxpbXByZXNzaW9uc19mcm9tX3N0b3JlX3JlYWNoGH0gASgLMhsu",
            "Z29vZ2xlLnByb3RvYnVmLkludDY0VmFsdWUSMAoLaW1wcmVzc2lvbnMYJSAB",
            "KAsyGy5nb29nbGUucHJvdG9idWYuSW50NjRWYWx1ZRI2ChBpbnRlcmFjdGlv",
            "bl9yYXRlGCYgASgLMhwuZ29vZ2xlLnByb3RvYnVmLkRvdWJsZVZhbHVlEjEK",
            "DGludGVyYWN0aW9ucxgnIAEoCzIbLmdvb2dsZS5wcm90b2J1Zi5JbnQ2NFZh",
            "bHVlEm0KF2ludGVyYWN0aW9uX2V2ZW50X3R5cGVzGGQgAygOMkwuZ29vZ2xl",
            "LmFkcy5nb29nbGVhZHMudjMuZW51bXMuSW50ZXJhY3Rpb25FdmVudFR5cGVF",
            "bnVtLkludGVyYWN0aW9uRXZlbnRUeXBlEjgKEmludmFsaWRfY2xpY2tfcmF0",
            "ZRgoIAEoCzIcLmdvb2dsZS5wcm90b2J1Zi5Eb3VibGVWYWx1ZRIzCg5pbnZh",
            "bGlkX2NsaWNrcxgpIAEoCzIbLmdvb2dsZS5wcm90b2J1Zi5JbnQ2NFZhbHVl",
            "EjIKDW1lc3NhZ2VfY2hhdHMYfiABKAsyGy5nb29nbGUucHJvdG9idWYuSW50",
            "NjRWYWx1ZRI4ChNtZXNzYWdlX2ltcHJlc3Npb25zGH8gASgLMhsuZ29vZ2xl",
            "LnByb3RvYnVmLkludDY0VmFsdWUSOAoRbWVzc2FnZV9jaGF0X3JhdGUYgAEg",
            "ASgLMhwuZ29vZ2xlLnByb3RvYnVmLkRvdWJsZVZhbHVlEkcKIW1vYmlsZV9m",
            "cmllbmRseV9jbGlja3NfcGVyY2VudGFnZRhtIAEoCzIcLmdvb2dsZS5wcm90",
            "b2J1Zi5Eb3VibGVWYWx1ZRIzCg5vcmdhbmljX2NsaWNrcxhuIAEoCzIbLmdv",
            "b2dsZS5wcm90b2J1Zi5JbnQ2NFZhbHVlEj4KGG9yZ2FuaWNfY2xpY2tzX3Bl",
            "cl9xdWVyeRhvIAEoCzIcLmdvb2dsZS5wcm90b2J1Zi5Eb3VibGVWYWx1ZRI4",
            "ChNvcmdhbmljX2ltcHJlc3Npb25zGHAgASgLMhsuZ29vZ2xlLnByb3RvYnVm",
            "LkludDY0VmFsdWUSQwodb3JnYW5pY19pbXByZXNzaW9uc19wZXJfcXVlcnkY",
            "cSABKAsyHC5nb29nbGUucHJvdG9idWYuRG91YmxlVmFsdWUSNAoPb3JnYW5p",
            "Y19xdWVyaWVzGHIgASgLMhsuZ29vZ2xlLnByb3RvYnVmLkludDY0VmFsdWUS",
            "OgoUcGVyY2VudF9uZXdfdmlzaXRvcnMYKiABKAsyHC5nb29nbGUucHJvdG9i",
            "dWYuRG91YmxlVmFsdWUSMAoLcGhvbmVfY2FsbHMYKyABKAsyGy5nb29nbGUu",
            "cHJvdG9idWYuSW50NjRWYWx1ZRI2ChFwaG9uZV9pbXByZXNzaW9ucxgsIAEo",
            "CzIbLmdvb2dsZS5wcm90b2J1Zi5JbnQ2NFZhbHVlEjgKEnBob25lX3Rocm91",
            "Z2hfcmF0ZRgtIAEoCzIcLmdvb2dsZS5wcm90b2J1Zi5Eb3VibGVWYWx1ZRIy",
            "CgxyZWxhdGl2ZV9jdHIYLiABKAsyHC5nb29nbGUucHJvdG9idWYuRG91Ymxl",
            "VmFsdWUSSgokc2VhcmNoX2Fic29sdXRlX3RvcF9pbXByZXNzaW9uX3NoYXJl",
            "GE4gASgLMhwuZ29vZ2xlLnByb3RvYnVmLkRvdWJsZVZhbHVlElYKMHNlYXJj",
            "aF9idWRnZXRfbG9zdF9hYnNvbHV0ZV90b3BfaW1wcmVzc2lvbl9zaGFyZRhY",
            "IAEoCzIcLmdvb2dsZS5wcm90b2J1Zi5Eb3VibGVWYWx1ZRJJCiNzZWFyY2hf",
            "YnVkZ2V0X2xvc3RfaW1wcmVzc2lvbl9zaGFyZRgvIAEoCzIcLmdvb2dsZS5w",
            "cm90b2J1Zi5Eb3VibGVWYWx1ZRJNCidzZWFyY2hfYnVkZ2V0X2xvc3RfdG9w",
            "X2ltcHJlc3Npb25fc2hhcmUYWSABKAsyHC5nb29nbGUucHJvdG9idWYuRG91",
            "YmxlVmFsdWUSOAoSc2VhcmNoX2NsaWNrX3NoYXJlGDAgASgLMhwuZ29vZ2xl",
            "LnByb3RvYnVmLkRvdWJsZVZhbHVlEkkKI3NlYXJjaF9leGFjdF9tYXRjaF9p",
            "bXByZXNzaW9uX3NoYXJlGDEgASgLMhwuZ29vZ2xlLnByb3RvYnVmLkRvdWJs",
            "ZVZhbHVlEj0KF3NlYXJjaF9pbXByZXNzaW9uX3NoYXJlGDIgASgLMhwuZ29v",
            "Z2xlLnByb3RvYnVmLkRvdWJsZVZhbHVlElQKLnNlYXJjaF9yYW5rX2xvc3Rf",
            "YWJzb2x1dGVfdG9wX2ltcHJlc3Npb25fc2hhcmUYWiABKAsyHC5nb29nbGUu",
            "cHJvdG9idWYuRG91YmxlVmFsdWUSRwohc2VhcmNoX3JhbmtfbG9zdF9pbXBy",
            "ZXNzaW9uX3NoYXJlGDMgASgLMhwuZ29vZ2xlLnByb3RvYnVmLkRvdWJsZVZh",
            "bHVlEksKJXNlYXJjaF9yYW5rX2xvc3RfdG9wX2ltcHJlc3Npb25fc2hhcmUY",
            "WyABKAsyHC5nb29nbGUucHJvdG9idWYuRG91YmxlVmFsdWUSQQobc2VhcmNo",
            "X3RvcF9pbXByZXNzaW9uX3NoYXJlGFwgASgLMhwuZ29vZ2xlLnByb3RvYnVm",
            "LkRvdWJsZVZhbHVlEjAKC3NwZWVkX3Njb3JlGGsgASgLMhsuZ29vZ2xlLnBy",
            "b3RvYnVmLkludDY0VmFsdWUSPwoZdG9wX2ltcHJlc3Npb25fcGVyY2VudGFn",
            "ZRhdIAEoCzIcLmdvb2dsZS5wcm90b2J1Zi5Eb3VibGVWYWx1ZRJWCjB2YWxp",
            "ZF9hY2NlbGVyYXRlZF9tb2JpbGVfcGFnZXNfY2xpY2tzX3BlcmNlbnRhZ2UY",
            "bCABKAsyHC5nb29nbGUucHJvdG9idWYuRG91YmxlVmFsdWUSPwoZdmFsdWVf",
            "cGVyX2FsbF9jb252ZXJzaW9ucxg0IAEoCzIcLmdvb2dsZS5wcm90b2J1Zi5E",
            "b3VibGVWYWx1ZRI6ChR2YWx1ZV9wZXJfY29udmVyc2lvbhg1IAEoCzIcLmdv",
            "b2dsZS5wcm90b2J1Zi5Eb3VibGVWYWx1ZRJTCi12YWx1ZV9wZXJfY3VycmVu",
            "dF9tb2RlbF9hdHRyaWJ1dGVkX2NvbnZlcnNpb24YXiABKAsyHC5nb29nbGUu",
            "cHJvdG9idWYuRG91YmxlVmFsdWUSPQoXdmlkZW9fcXVhcnRpbGVfMTAwX3Jh",
            "dGUYNiABKAsyHC5nb29nbGUucHJvdG9idWYuRG91YmxlVmFsdWUSPAoWdmlk",
            "ZW9fcXVhcnRpbGVfMjVfcmF0ZRg3IAEoCzIcLmdvb2dsZS5wcm90b2J1Zi5E",
            "b3VibGVWYWx1ZRI8ChZ2aWRlb19xdWFydGlsZV81MF9yYXRlGDggASgLMhwu",
            "Z29vZ2xlLnByb3RvYnVmLkRvdWJsZVZhbHVlEjwKFnZpZGVvX3F1YXJ0aWxl",
            "Xzc1X3JhdGUYOSABKAsyHC5nb29nbGUucHJvdG9idWYuRG91YmxlVmFsdWUS",
            "NQoPdmlkZW9fdmlld19yYXRlGDogASgLMhwuZ29vZ2xlLnByb3RvYnVmLkRv",
            "dWJsZVZhbHVlEjAKC3ZpZGVvX3ZpZXdzGDsgASgLMhsuZ29vZ2xlLnByb3Rv",
            "YnVmLkludDY0VmFsdWUSPQoYdmlld190aHJvdWdoX2NvbnZlcnNpb25zGDwg",
            "ASgLMhsuZ29vZ2xlLnByb3RvYnVmLkludDY0VmFsdWVC5wEKImNvbS5nb29n",
            "bGUuYWRzLmdvb2dsZWFkcy52My5jb21tb25CDE1ldHJpY3NQcm90b1ABWkRn",
            "b29nbGUuZ29sYW5nLm9yZy9nZW5wcm90by9nb29nbGVhcGlzL2Fkcy9nb29n",
            "bGVhZHMvdjMvY29tbW9uO2NvbW1vbqICA0dBQaoCHkdvb2dsZS5BZHMuR29v",
            "Z2xlQWRzLlYzLkNvbW1vbsoCHkdvb2dsZVxBZHNcR29vZ2xlQWRzXFYzXENv",
            "bW1vbuoCIkdvb2dsZTo6QWRzOjpHb29nbGVBZHM6OlYzOjpDb21tb25iBnBy",
            "b3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Google.Ads.GoogleAds.V3.Enums.InteractionEventTypeReflection.Descriptor, global::Google.Ads.GoogleAds.V3.Enums.QualityScoreBucketReflection.Descriptor, global::Google.Protobuf.WellKnownTypes.WrappersReflection.Descriptor, global::Google.Api.AnnotationsReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Ads.GoogleAds.V3.Common.Metrics), global::Google.Ads.GoogleAds.V3.Common.Metrics.Parser, new[]{ "AbsoluteTopImpressionPercentage", "ActiveViewCpm", "ActiveViewCtr", "ActiveViewImpressions", "ActiveViewMeasurability", "ActiveViewMeasurableCostMicros", "ActiveViewMeasurableImpressions", "ActiveViewViewability", "AllConversionsFromInteractionsRate", "AllConversionsValue", "AllConversions", "AllConversionsValuePerCost", "AllConversionsFromClickToCall", "AllConversionsFromDirections", "AllConversionsFromInteractionsValuePerInteraction", "AllConversionsFromMenu", "AllConversionsFromOrder", "AllConversionsFromOtherEngagement", "AllConversionsFromStoreVisit", "AllConversionsFromStoreWebsite", "AverageCost", "AverageCpc", "AverageCpe", "AverageCpm", "AverageCpv", "AveragePageViews", "AverageTimeOnSite", "BenchmarkAverageMaxCpc", "BenchmarkCtr", "BounceRate", "Clicks", "CombinedClicks", "CombinedClicksPerQuery", "CombinedQueries", "ContentBudgetLostImpressionShare", "ContentImpressionShare", "ConversionLastReceivedRequestDateTime", "ConversionLastConversionDate", "ContentRankLostImpressionShare", "ConversionsFromInteractionsRate", "ConversionsValue", "ConversionsValuePerCost", "ConversionsFromInteractionsValuePerInteraction", "Conversions", "CostMicros", "CostPerAllConversions", "CostPerConversion", "CostPerCurrentModelAttributedConversion", "CrossDeviceConversions", "Ctr", "CurrentModelAttributedConversions", "CurrentModelAttributedConversionsFromInteractionsRate", "CurrentModelAttributedConversionsFromInteractionsValuePerInteraction", "CurrentModelAttributedConversionsValue", "CurrentModelAttributedConversionsValuePerCost", "EngagementRate", "Engagements", "HotelAverageLeadValueMicros", "HotelPriceDifferencePercentage", "HistoricalCreativeQualityScore", "HistoricalLandingPageQualityScore", "HistoricalQualityScore", "HistoricalSearchPredictedCtr", "GmailForwards", "GmailSaves", "GmailSecondaryClicks", "ImpressionsFromStoreReach", "Impressions", "InteractionRate", "Interactions", "InteractionEventTypes", "InvalidClickRate", "InvalidClicks", "MessageChats", "MessageImpressions", "MessageChatRate", "MobileFriendlyClicksPercentage", "OrganicClicks", "OrganicClicksPerQuery", "OrganicImpressions", "OrganicImpressionsPerQuery", "OrganicQueries", "PercentNewVisitors", "PhoneCalls", "PhoneImpressions", "PhoneThroughRate", "RelativeCtr", "SearchAbsoluteTopImpressionShare", "SearchBudgetLostAbsoluteTopImpressionShare", "SearchBudgetLostImpressionShare", "SearchBudgetLostTopImpressionShare", "SearchClickShare", "SearchExactMatchImpressionShare", "SearchImpressionShare", "SearchRankLostAbsoluteTopImpressionShare", "SearchRankLostImpressionShare", "SearchRankLostTopImpressionShare", "SearchTopImpressionShare", "SpeedScore", "TopImpressionPercentage", "ValidAcceleratedMobilePagesClicksPercentage", "ValuePerAllConversions", "ValuePerConversion", "ValuePerCurrentModelAttributedConversion", "VideoQuartile100Rate", "VideoQuartile25Rate", "VideoQuartile50Rate", "VideoQuartile75Rate", "VideoViewRate", "VideoViews", "ViewThroughConversions" }, null, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  /// <summary>
  /// Metrics data.
  /// </summary>
  public sealed partial class Metrics : pb::IMessage<Metrics> {
    private static readonly pb::MessageParser<Metrics> _parser = new pb::MessageParser<Metrics>(() => new Metrics());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Metrics> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Ads.GoogleAds.V3.Common.MetricsReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Metrics() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Metrics(Metrics other) : this() {
      AbsoluteTopImpressionPercentage = other.AbsoluteTopImpressionPercentage;
      ActiveViewCpm = other.ActiveViewCpm;
      ActiveViewCtr = other.ActiveViewCtr;
      ActiveViewImpressions = other.ActiveViewImpressions;
      ActiveViewMeasurability = other.ActiveViewMeasurability;
      ActiveViewMeasurableCostMicros = other.ActiveViewMeasurableCostMicros;
      ActiveViewMeasurableImpressions = other.ActiveViewMeasurableImpressions;
      ActiveViewViewability = other.ActiveViewViewability;
      AllConversionsFromInteractionsRate = other.AllConversionsFromInteractionsRate;
      AllConversionsValue = other.AllConversionsValue;
      AllConversions = other.AllConversions;
      AllConversionsValuePerCost = other.AllConversionsValuePerCost;
      AllConversionsFromClickToCall = other.AllConversionsFromClickToCall;
      AllConversionsFromDirections = other.AllConversionsFromDirections;
      AllConversionsFromInteractionsValuePerInteraction = other.AllConversionsFromInteractionsValuePerInteraction;
      AllConversionsFromMenu = other.AllConversionsFromMenu;
      AllConversionsFromOrder = other.AllConversionsFromOrder;
      AllConversionsFromOtherEngagement = other.AllConversionsFromOtherEngagement;
      AllConversionsFromStoreVisit = other.AllConversionsFromStoreVisit;
      AllConversionsFromStoreWebsite = other.AllConversionsFromStoreWebsite;
      AverageCost = other.AverageCost;
      AverageCpc = other.AverageCpc;
      AverageCpe = other.AverageCpe;
      AverageCpm = other.AverageCpm;
      AverageCpv = other.AverageCpv;
      AveragePageViews = other.AveragePageViews;
      AverageTimeOnSite = other.AverageTimeOnSite;
      BenchmarkAverageMaxCpc = other.BenchmarkAverageMaxCpc;
      BenchmarkCtr = other.BenchmarkCtr;
      BounceRate = other.BounceRate;
      Clicks = other.Clicks;
      CombinedClicks = other.CombinedClicks;
      CombinedClicksPerQuery = other.CombinedClicksPerQuery;
      CombinedQueries = other.CombinedQueries;
      ContentBudgetLostImpressionShare = other.ContentBudgetLostImpressionShare;
      ContentImpressionShare = other.ContentImpressionShare;
      ConversionLastReceivedRequestDateTime = other.ConversionLastReceivedRequestDateTime;
      ConversionLastConversionDate = other.ConversionLastConversionDate;
      ContentRankLostImpressionShare = other.ContentRankLostImpressionShare;
      ConversionsFromInteractionsRate = other.ConversionsFromInteractionsRate;
      ConversionsValue = other.ConversionsValue;
      ConversionsValuePerCost = other.ConversionsValuePerCost;
      ConversionsFromInteractionsValuePerInteraction = other.ConversionsFromInteractionsValuePerInteraction;
      Conversions = other.Conversions;
      CostMicros = other.CostMicros;
      CostPerAllConversions = other.CostPerAllConversions;
      CostPerConversion = other.CostPerConversion;
      CostPerCurrentModelAttributedConversion = other.CostPerCurrentModelAttributedConversion;
      CrossDeviceConversions = other.CrossDeviceConversions;
      Ctr = other.Ctr;
      CurrentModelAttributedConversions = other.CurrentModelAttributedConversions;
      CurrentModelAttributedConversionsFromInteractionsRate = other.CurrentModelAttributedConversionsFromInteractionsRate;
      CurrentModelAttributedConversionsFromInteractionsValuePerInteraction = other.CurrentModelAttributedConversionsFromInteractionsValuePerInteraction;
      CurrentModelAttributedConversionsValue = other.CurrentModelAttributedConversionsValue;
      CurrentModelAttributedConversionsValuePerCost = other.CurrentModelAttributedConversionsValuePerCost;
      EngagementRate = other.EngagementRate;
      Engagements = other.Engagements;
      HotelAverageLeadValueMicros = other.HotelAverageLeadValueMicros;
      HotelPriceDifferencePercentage = other.HotelPriceDifferencePercentage;
      historicalCreativeQualityScore_ = other.historicalCreativeQualityScore_;
      historicalLandingPageQualityScore_ = other.historicalLandingPageQualityScore_;
      HistoricalQualityScore = other.HistoricalQualityScore;
      historicalSearchPredictedCtr_ = other.historicalSearchPredictedCtr_;
      GmailForwards = other.GmailForwards;
      GmailSaves = other.GmailSaves;
      GmailSecondaryClicks = other.GmailSecondaryClicks;
      ImpressionsFromStoreReach = other.ImpressionsFromStoreReach;
      Impressions = other.Impressions;
      InteractionRate = other.InteractionRate;
      Interactions = other.Interactions;
      interactionEventTypes_ = other.interactionEventTypes_.Clone();
      InvalidClickRate = other.InvalidClickRate;
      InvalidClicks = other.InvalidClicks;
      MessageChats = other.MessageChats;
      MessageImpressions = other.MessageImpressions;
      MessageChatRate = other.MessageChatRate;
      MobileFriendlyClicksPercentage = other.MobileFriendlyClicksPercentage;
      OrganicClicks = other.OrganicClicks;
      OrganicClicksPerQuery = other.OrganicClicksPerQuery;
      OrganicImpressions = other.OrganicImpressions;
      OrganicImpressionsPerQuery = other.OrganicImpressionsPerQuery;
      OrganicQueries = other.OrganicQueries;
      PercentNewVisitors = other.PercentNewVisitors;
      PhoneCalls = other.PhoneCalls;
      PhoneImpressions = other.PhoneImpressions;
      PhoneThroughRate = other.PhoneThroughRate;
      RelativeCtr = other.RelativeCtr;
      SearchAbsoluteTopImpressionShare = other.SearchAbsoluteTopImpressionShare;
      SearchBudgetLostAbsoluteTopImpressionShare = other.SearchBudgetLostAbsoluteTopImpressionShare;
      SearchBudgetLostImpressionShare = other.SearchBudgetLostImpressionShare;
      SearchBudgetLostTopImpressionShare = other.SearchBudgetLostTopImpressionShare;
      SearchClickShare = other.SearchClickShare;
      SearchExactMatchImpressionShare = other.SearchExactMatchImpressionShare;
      SearchImpressionShare = other.SearchImpressionShare;
      SearchRankLostAbsoluteTopImpressionShare = other.SearchRankLostAbsoluteTopImpressionShare;
      SearchRankLostImpressionShare = other.SearchRankLostImpressionShare;
      SearchRankLostTopImpressionShare = other.SearchRankLostTopImpressionShare;
      SearchTopImpressionShare = other.SearchTopImpressionShare;
      SpeedScore = other.SpeedScore;
      TopImpressionPercentage = other.TopImpressionPercentage;
      ValidAcceleratedMobilePagesClicksPercentage = other.ValidAcceleratedMobilePagesClicksPercentage;
      ValuePerAllConversions = other.ValuePerAllConversions;
      ValuePerConversion = other.ValuePerConversion;
      ValuePerCurrentModelAttributedConversion = other.ValuePerCurrentModelAttributedConversion;
      VideoQuartile100Rate = other.VideoQuartile100Rate;
      VideoQuartile25Rate = other.VideoQuartile25Rate;
      VideoQuartile50Rate = other.VideoQuartile50Rate;
      VideoQuartile75Rate = other.VideoQuartile75Rate;
      VideoViewRate = other.VideoViewRate;
      VideoViews = other.VideoViews;
      ViewThroughConversions = other.ViewThroughConversions;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Metrics Clone() {
      return new Metrics(this);
    }

    /// <summary>Field number for the "absolute_top_impression_percentage" field.</summary>
    public const int AbsoluteTopImpressionPercentageFieldNumber = 95;
    private static readonly pb::FieldCodec<double?> _single_absoluteTopImpressionPercentage_codec = pb::FieldCodec.ForStructWrapper<double>(762);
    private double? absoluteTopImpressionPercentage_;
    /// <summary>
    /// The percent of your ad impressions that are shown as the very first ad
    /// above the organic search results.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double? AbsoluteTopImpressionPercentage {
      get { return absoluteTopImpressionPercentage_; }
      set {
        absoluteTopImpressionPercentage_ = value;
      }
    }


    /// <summary>Field number for the "active_view_cpm" field.</summary>
    public const int ActiveViewCpmFieldNumber = 1;
    private static readonly pb::FieldCodec<double?> _single_activeViewCpm_codec = pb::FieldCodec.ForStructWrapper<double>(10);
    private double? activeViewCpm_;
    /// <summary>
    /// Average cost of viewable impressions (`active_view_impressions`).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double? ActiveViewCpm {
      get { return activeViewCpm_; }
      set {
        activeViewCpm_ = value;
      }
    }


    /// <summary>Field number for the "active_view_ctr" field.</summary>
    public const int ActiveViewCtrFieldNumber = 79;
    private static readonly pb::FieldCodec<double?> _single_activeViewCtr_codec = pb::FieldCodec.ForStructWrapper<double>(634);
    private double? activeViewCtr_;
    /// <summary>
    /// Active view measurable clicks divided by active view viewable impressions.
    /// This metric is reported only for display network.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double? ActiveViewCtr {
      get { return activeViewCtr_; }
      set {
        activeViewCtr_ = value;
      }
    }


    /// <summary>Field number for the "active_view_impressions" field.</summary>
    public const int ActiveViewImpressionsFieldNumber = 2;
    private static readonly pb::FieldCodec<long?> _single_activeViewImpressions_codec = pb::FieldCodec.ForStructWrapper<long>(18);
    private long? activeViewImpressions_;
    /// <summary>
    /// A measurement of how often your ad has become viewable on a Display
    /// Network site.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long? ActiveViewImpressions {
      get { return activeViewImpressions_; }
      set {
        activeViewImpressions_ = value;
      }
    }


    /// <summary>Field number for the "active_view_measurability" field.</summary>
    public const int ActiveViewMeasurabilityFieldNumber = 96;
    private static readonly pb::FieldCodec<double?> _single_activeViewMeasurability_codec = pb::FieldCodec.ForStructWrapper<double>(770);
    private double? activeViewMeasurability_;
    /// <summary>
    /// The ratio of impressions that could be measured by Active View over the
    /// number of served impressions.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double? ActiveViewMeasurability {
      get { return activeViewMeasurability_; }
      set {
        activeViewMeasurability_ = value;
      }
    }


    /// <summary>Field number for the "active_view_measurable_cost_micros" field.</summary>
    public const int ActiveViewMeasurableCostMicrosFieldNumber = 3;
    private static readonly pb::FieldCodec<long?> _single_activeViewMeasurableCostMicros_codec = pb::FieldCodec.ForStructWrapper<long>(26);
    private long? activeViewMeasurableCostMicros_;
    /// <summary>
    /// The cost of the impressions you received that were measurable by Active
    /// View.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long? ActiveViewMeasurableCostMicros {
      get { return activeViewMeasurableCostMicros_; }
      set {
        activeViewMeasurableCostMicros_ = value;
      }
    }


    /// <summary>Field number for the "active_view_measurable_impressions" field.</summary>
    public const int ActiveViewMeasurableImpressionsFieldNumber = 4;
    private static readonly pb::FieldCodec<long?> _single_activeViewMeasurableImpressions_codec = pb::FieldCodec.ForStructWrapper<long>(34);
    private long? activeViewMeasurableImpressions_;
    /// <summary>
    /// The number of times your ads are appearing on placements in positions
    /// where they can be seen.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long? ActiveViewMeasurableImpressions {
      get { return activeViewMeasurableImpressions_; }
      set {
        activeViewMeasurableImpressions_ = value;
      }
    }


    /// <summary>Field number for the "active_view_viewability" field.</summary>
    public const int ActiveViewViewabilityFieldNumber = 97;
    private static readonly pb::FieldCodec<double?> _single_activeViewViewability_codec = pb::FieldCodec.ForStructWrapper<double>(778);
    private double? activeViewViewability_;
    /// <summary>
    /// The percentage of time when your ad appeared on an Active View enabled site
    /// (measurable impressions) and was viewable (viewable impressions).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double? ActiveViewViewability {
      get { return activeViewViewability_; }
      set {
        activeViewViewability_ = value;
      }
    }


    /// <summary>Field number for the "all_conversions_from_interactions_rate" field.</summary>
    public const int AllConversionsFromInteractionsRateFieldNumber = 65;
    private static readonly pb::FieldCodec<double?> _single_allConversionsFromInteractionsRate_codec = pb::FieldCodec.ForStructWrapper<double>(522);
    private double? allConversionsFromInteractionsRate_;
    /// <summary>
    /// All conversions from interactions (as oppose to view through conversions)
    /// divided by the number of ad interactions.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double? AllConversionsFromInteractionsRate {
      get { return allConversionsFromInteractionsRate_; }
      set {
        allConversionsFromInteractionsRate_ = value;
      }
    }


    /// <summary>Field number for the "all_conversions_value" field.</summary>
    public const int AllConversionsValueFieldNumber = 66;
    private static readonly pb::FieldCodec<double?> _single_allConversionsValue_codec = pb::FieldCodec.ForStructWrapper<double>(530);
    private double? allConversionsValue_;
    /// <summary>
    /// The total value of all conversions.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double? AllConversionsValue {
      get { return allConversionsValue_; }
      set {
        allConversionsValue_ = value;
      }
    }


    /// <summary>Field number for the "all_conversions" field.</summary>
    public const int AllConversionsFieldNumber = 7;
    private static readonly pb::FieldCodec<double?> _single_allConversions_codec = pb::FieldCodec.ForStructWrapper<double>(58);
    private double? allConversions_;
    /// <summary>
    /// The total number of conversions. This only includes conversion actions
    /// which include_in_conversions_metric attribute is set to true.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double? AllConversions {
      get { return allConversions_; }
      set {
        allConversions_ = value;
      }
    }


    /// <summary>Field number for the "all_conversions_value_per_cost" field.</summary>
    public const int AllConversionsValuePerCostFieldNumber = 62;
    private static readonly pb::FieldCodec<double?> _single_allConversionsValuePerCost_codec = pb::FieldCodec.ForStructWrapper<double>(498);
    private double? allConversionsValuePerCost_;
    /// <summary>
    /// The value of all conversions divided by the total cost of ad interactions
    /// (such as clicks for text ads or views for video ads).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double? AllConversionsValuePerCost {
      get { return allConversionsValuePerCost_; }
      set {
        allConversionsValuePerCost_ = value;
      }
    }


    /// <summary>Field number for the "all_conversions_from_click_to_call" field.</summary>
    public const int AllConversionsFromClickToCallFieldNumber = 118;
    private static readonly pb::FieldCodec<double?> _single_allConversionsFromClickToCall_codec = pb::FieldCodec.ForStructWrapper<double>(946);
    private double? allConversionsFromClickToCall_;
    /// <summary>
    /// The number of times people clicked the "Call" button to call a store during
    /// or after clicking an ad. This number doesn't include whether or not calls
    /// were connected, or the duration of any calls.
    /// This metric applies to feed items only.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double? AllConversionsFromClickToCall {
      get { return allConversionsFromClickToCall_; }
      set {
        allConversionsFromClickToCall_ = value;
      }
    }


    /// <summary>Field number for the "all_conversions_from_directions" field.</summary>
    public const int AllConversionsFromDirectionsFieldNumber = 119;
    private static readonly pb::FieldCodec<double?> _single_allConversionsFromDirections_codec = pb::FieldCodec.ForStructWrapper<double>(954);
    private double? allConversionsFromDirections_;
    /// <summary>
    /// The number of times people clicked a "Get directions" button to navigate to
    /// a store after clicking an ad.
    /// This metric applies to feed items only.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double? AllConversionsFromDirections {
      get { return allConversionsFromDirections_; }
      set {
        allConversionsFromDirections_ = value;
      }
    }


    /// <summary>Field number for the "all_conversions_from_interactions_value_per_interaction" field.</summary>
    public const int AllConversionsFromInteractionsValuePerInteractionFieldNumber = 67;
    private static readonly pb::FieldCodec<double?> _single_allConversionsFromInteractionsValuePerInteraction_codec = pb::FieldCodec.ForStructWrapper<double>(538);
    private double? allConversionsFromInteractionsValuePerInteraction_;
    /// <summary>
    /// The value of all conversions from interactions divided by the total number
    /// of interactions.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double? AllConversionsFromInteractionsValuePerInteraction {
      get { return allConversionsFromInteractionsValuePerInteraction_; }
      set {
        allConversionsFromInteractionsValuePerInteraction_ = value;
      }
    }


    /// <summary>Field number for the "all_conversions_from_menu" field.</summary>
    public const int AllConversionsFromMenuFieldNumber = 120;
    private static readonly pb::FieldCodec<double?> _single_allConversionsFromMenu_codec = pb::FieldCodec.ForStructWrapper<double>(962);
    private double? allConversionsFromMenu_;
    /// <summary>
    /// The number of times people clicked a link to view a store's menu after
    /// clicking an ad.
    /// This metric applies to feed items only.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double? AllConversionsFromMenu {
      get { return allConversionsFromMenu_; }
      set {
        allConversionsFromMenu_ = value;
      }
    }


    /// <summary>Field number for the "all_conversions_from_order" field.</summary>
    public const int AllConversionsFromOrderFieldNumber = 121;
    private static readonly pb::FieldCodec<double?> _single_allConversionsFromOrder_codec = pb::FieldCodec.ForStructWrapper<double>(970);
    private double? allConversionsFromOrder_;
    /// <summary>
    /// The number of times people placed an order at a store after clicking an ad.
    /// This metric applies to feed items only.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double? AllConversionsFromOrder {
      get { return allConversionsFromOrder_; }
      set {
        allConversionsFromOrder_ = value;
      }
    }


    /// <summary>Field number for the "all_conversions_from_other_engagement" field.</summary>
    public const int AllConversionsFromOtherEngagementFieldNumber = 122;
    private static readonly pb::FieldCodec<double?> _single_allConversionsFromOtherEngagement_codec = pb::FieldCodec.ForStructWrapper<double>(978);
    private double? allConversionsFromOtherEngagement_;
    /// <summary>
    /// The number of other conversions (for example, posting a review or saving a
    /// location for a store) that occurred after people clicked an ad.
    /// This metric applies to feed items only.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double? AllConversionsFromOtherEngagement {
      get { return allConversionsFromOtherEngagement_; }
      set {
        allConversionsFromOtherEngagement_ = value;
      }
    }


    /// <summary>Field number for the "all_conversions_from_store_visit" field.</summary>
    public const int AllConversionsFromStoreVisitFieldNumber = 123;
    private static readonly pb::FieldCodec<double?> _single_allConversionsFromStoreVisit_codec = pb::FieldCodec.ForStructWrapper<double>(986);
    private double? allConversionsFromStoreVisit_;
    /// <summary>
    /// Estimated number of times people visited a store after clicking an ad.
    /// This metric applies to feed items only.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double? AllConversionsFromStoreVisit {
      get { return allConversionsFromStoreVisit_; }
      set {
        allConversionsFromStoreVisit_ = value;
      }
    }


    /// <summary>Field number for the "all_conversions_from_store_website" field.</summary>
    public const int AllConversionsFromStoreWebsiteFieldNumber = 124;
    private static readonly pb::FieldCodec<double?> _single_allConversionsFromStoreWebsite_codec = pb::FieldCodec.ForStructWrapper<double>(994);
    private double? allConversionsFromStoreWebsite_;
    /// <summary>
    /// The number of times that people were taken to a store's URL after clicking
    /// an ad.
    /// This metric applies to feed items only.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double? AllConversionsFromStoreWebsite {
      get { return allConversionsFromStoreWebsite_; }
      set {
        allConversionsFromStoreWebsite_ = value;
      }
    }


    /// <summary>Field number for the "average_cost" field.</summary>
    public const int AverageCostFieldNumber = 8;
    private static readonly pb::FieldCodec<double?> _single_averageCost_codec = pb::FieldCodec.ForStructWrapper<double>(66);
    private double? averageCost_;
    /// <summary>
    /// The average amount you pay per interaction. This amount is the total cost
    /// of your ads divided by the total number of interactions.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double? AverageCost {
      get { return averageCost_; }
      set {
        averageCost_ = value;
      }
    }


    /// <summary>Field number for the "average_cpc" field.</summary>
    public const int AverageCpcFieldNumber = 9;
    private static readonly pb::FieldCodec<double?> _single_averageCpc_codec = pb::FieldCodec.ForStructWrapper<double>(74);
    private double? averageCpc_;
    /// <summary>
    /// The total cost of all clicks divided by the total number of clicks
    /// received.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double? AverageCpc {
      get { return averageCpc_; }
      set {
        averageCpc_ = value;
      }
    }


    /// <summary>Field number for the "average_cpe" field.</summary>
    public const int AverageCpeFieldNumber = 98;
    private static readonly pb::FieldCodec<double?> _single_averageCpe_codec = pb::FieldCodec.ForStructWrapper<double>(786);
    private double? averageCpe_;
    /// <summary>
    /// The average amount that you've been charged for an ad engagement. This
    /// amount is the total cost of all ad engagements divided by the total number
    /// of ad engagements.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double? AverageCpe {
      get { return averageCpe_; }
      set {
        averageCpe_ = value;
      }
    }


    /// <summary>Field number for the "average_cpm" field.</summary>
    public const int AverageCpmFieldNumber = 10;
    private static readonly pb::FieldCodec<double?> _single_averageCpm_codec = pb::FieldCodec.ForStructWrapper<double>(82);
    private double? averageCpm_;
    /// <summary>
    /// Average cost-per-thousand impressions (CPM).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double? AverageCpm {
      get { return averageCpm_; }
      set {
        averageCpm_ = value;
      }
    }


    /// <summary>Field number for the "average_cpv" field.</summary>
    public const int AverageCpvFieldNumber = 11;
    private static readonly pb::FieldCodec<double?> _single_averageCpv_codec = pb::FieldCodec.ForStructWrapper<double>(90);
    private double? averageCpv_;
    /// <summary>
    /// The average amount you pay each time someone views your ad.
    /// The average CPV is defined by the total cost of all ad views divided by
    /// the number of views.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double? AverageCpv {
      get { return averageCpv_; }
      set {
        averageCpv_ = value;
      }
    }


    /// <summary>Field number for the "average_page_views" field.</summary>
    public const int AveragePageViewsFieldNumber = 99;
    private static readonly pb::FieldCodec<double?> _single_averagePageViews_codec = pb::FieldCodec.ForStructWrapper<double>(794);
    private double? averagePageViews_;
    /// <summary>
    /// Average number of pages viewed per session.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double? AveragePageViews {
      get { return averagePageViews_; }
      set {
        averagePageViews_ = value;
      }
    }


    /// <summary>Field number for the "average_time_on_site" field.</summary>
    public const int AverageTimeOnSiteFieldNumber = 84;
    private static readonly pb::FieldCodec<double?> _single_averageTimeOnSite_codec = pb::FieldCodec.ForStructWrapper<double>(674);
    private double? averageTimeOnSite_;
    /// <summary>
    /// Total duration of all sessions (in seconds) / number of sessions. Imported
    /// from Google Analytics.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double? AverageTimeOnSite {
      get { return averageTimeOnSite_; }
      set {
        averageTimeOnSite_ = value;
      }
    }


    /// <summary>Field number for the "benchmark_average_max_cpc" field.</summary>
    public const int BenchmarkAverageMaxCpcFieldNumber = 14;
    private static readonly pb::FieldCodec<double?> _single_benchmarkAverageMaxCpc_codec = pb::FieldCodec.ForStructWrapper<double>(114);
    private double? benchmarkAverageMaxCpc_;
    /// <summary>
    /// An indication of how other advertisers are bidding on similar products.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double? BenchmarkAverageMaxCpc {
      get { return benchmarkAverageMaxCpc_; }
      set {
        benchmarkAverageMaxCpc_ = value;
      }
    }


    /// <summary>Field number for the "benchmark_ctr" field.</summary>
    public const int BenchmarkCtrFieldNumber = 77;
    private static readonly pb::FieldCodec<double?> _single_benchmarkCtr_codec = pb::FieldCodec.ForStructWrapper<double>(618);
    private double? benchmarkCtr_;
    /// <summary>
    /// An indication on how other advertisers' Shopping ads for similar products
    /// are performing based on how often people who see their ad click on it.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double? BenchmarkCtr {
      get { return benchmarkCtr_; }
      set {
        benchmarkCtr_ = value;
      }
    }


    /// <summary>Field number for the "bounce_rate" field.</summary>
    public const int BounceRateFieldNumber = 15;
    private static readonly pb::FieldCodec<double?> _single_bounceRate_codec = pb::FieldCodec.ForStructWrapper<double>(122);
    private double? bounceRate_;
    /// <summary>
    /// Percentage of clicks where the user only visited a single page on your
    /// site. Imported from Google Analytics.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double? BounceRate {
      get { return bounceRate_; }
      set {
        bounceRate_ = value;
      }
    }


    /// <summary>Field number for the "clicks" field.</summary>
    public const int ClicksFieldNumber = 19;
    private static readonly pb::FieldCodec<long?> _single_clicks_codec = pb::FieldCodec.ForStructWrapper<long>(154);
    private long? clicks_;
    /// <summary>
    /// The number of clicks.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long? Clicks {
      get { return clicks_; }
      set {
        clicks_ = value;
      }
    }


    /// <summary>Field number for the "combined_clicks" field.</summary>
    public const int CombinedClicksFieldNumber = 115;
    private static readonly pb::FieldCodec<long?> _single_combinedClicks_codec = pb::FieldCodec.ForStructWrapper<long>(922);
    private long? combinedClicks_;
    /// <summary>
    /// The number of times your ad or your site's listing in the unpaid
    /// results was clicked. See the help page at
    /// https://support.google.com/google-ads/answer/3097241 for details.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long? CombinedClicks {
      get { return combinedClicks_; }
      set {
        combinedClicks_ = value;
      }
    }


    /// <summary>Field number for the "combined_clicks_per_query" field.</summary>
    public const int CombinedClicksPerQueryFieldNumber = 116;
    private static readonly pb::FieldCodec<double?> _single_combinedClicksPerQuery_codec = pb::FieldCodec.ForStructWrapper<double>(930);
    private double? combinedClicksPerQuery_;
    /// <summary>
    /// The number of times your ad or your site's listing in the unpaid
    /// results was clicked (combined_clicks) divided by combined_queries. See the
    /// help page at https://support.google.com/google-ads/answer/3097241 for
    /// details.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double? CombinedClicksPerQuery {
      get { return combinedClicksPerQuery_; }
      set {
        combinedClicksPerQuery_ = value;
      }
    }


    /// <summary>Field number for the "combined_queries" field.</summary>
    public const int CombinedQueriesFieldNumber = 117;
    private static readonly pb::FieldCodec<long?> _single_combinedQueries_codec = pb::FieldCodec.ForStructWrapper<long>(938);
    private long? combinedQueries_;
    /// <summary>
    /// The number of searches that returned pages from your site in the unpaid
    /// results or showed one of your text ads. See the help page at
    /// https://support.google.com/google-ads/answer/3097241 for details.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long? CombinedQueries {
      get { return combinedQueries_; }
      set {
        combinedQueries_ = value;
      }
    }


    /// <summary>Field number for the "content_budget_lost_impression_share" field.</summary>
    public const int ContentBudgetLostImpressionShareFieldNumber = 20;
    private static readonly pb::FieldCodec<double?> _single_contentBudgetLostImpressionShare_codec = pb::FieldCodec.ForStructWrapper<double>(162);
    private double? contentBudgetLostImpressionShare_;
    /// <summary>
    /// The estimated percent of times that your ad was eligible to show
    /// on the Display Network but didn't because your budget was too low.
    /// Note: Content budget lost impression share is reported in the range of 0
    /// to 0.9. Any value above 0.9 is reported as 0.9001.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double? ContentBudgetLostImpressionShare {
      get { return contentBudgetLostImpressionShare_; }
      set {
        contentBudgetLostImpressionShare_ = value;
      }
    }


    /// <summary>Field number for the "content_impression_share" field.</summary>
    public const int ContentImpressionShareFieldNumber = 21;
    private static readonly pb::FieldCodec<double?> _single_contentImpressionShare_codec = pb::FieldCodec.ForStructWrapper<double>(170);
    private double? contentImpressionShare_;
    /// <summary>
    /// The impressions you've received on the Display Network divided
    /// by the estimated number of impressions you were eligible to receive.
    /// Note: Content impression share is reported in the range of 0.1 to 1. Any
    /// value below 0.1 is reported as 0.0999.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double? ContentImpressionShare {
      get { return contentImpressionShare_; }
      set {
        contentImpressionShare_ = value;
      }
    }


    /// <summary>Field number for the "conversion_last_received_request_date_time" field.</summary>
    public const int ConversionLastReceivedRequestDateTimeFieldNumber = 73;
    private static readonly pb::FieldCodec<string> _single_conversionLastReceivedRequestDateTime_codec = pb::FieldCodec.ForClassWrapper<string>(586);
    private string conversionLastReceivedRequestDateTime_;
    /// <summary>
    /// The last date/time a conversion tag for this conversion action successfully
    /// fired and was seen by Google Ads. This firing event may not have been the
    /// result of an attributable conversion (e.g. because the tag was fired from a
    /// browser that did not previously click an ad from an appropriate
    /// advertiser). The date/time is in the customer's time zone.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ConversionLastReceivedRequestDateTime {
      get { return conversionLastReceivedRequestDateTime_; }
      set {
        conversionLastReceivedRequestDateTime_ = value;
      }
    }


    /// <summary>Field number for the "conversion_last_conversion_date" field.</summary>
    public const int ConversionLastConversionDateFieldNumber = 74;
    private static readonly pb::FieldCodec<string> _single_conversionLastConversionDate_codec = pb::FieldCodec.ForClassWrapper<string>(594);
    private string conversionLastConversionDate_;
    /// <summary>
    /// The date of the most recent conversion for this conversion action. The date
    /// is in the customer's time zone.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ConversionLastConversionDate {
      get { return conversionLastConversionDate_; }
      set {
        conversionLastConversionDate_ = value;
      }
    }


    /// <summary>Field number for the "content_rank_lost_impression_share" field.</summary>
    public const int ContentRankLostImpressionShareFieldNumber = 22;
    private static readonly pb::FieldCodec<double?> _single_contentRankLostImpressionShare_codec = pb::FieldCodec.ForStructWrapper<double>(178);
    private double? contentRankLostImpressionShare_;
    /// <summary>
    /// The estimated percentage of impressions on the Display Network
    /// that your ads didn't receive due to poor Ad Rank.
    /// Note: Content rank lost impression share is reported in the range of 0
    /// to 0.9. Any value above 0.9 is reported as 0.9001.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double? ContentRankLostImpressionShare {
      get { return contentRankLostImpressionShare_; }
      set {
        contentRankLostImpressionShare_ = value;
      }
    }


    /// <summary>Field number for the "conversions_from_interactions_rate" field.</summary>
    public const int ConversionsFromInteractionsRateFieldNumber = 69;
    private static readonly pb::FieldCodec<double?> _single_conversionsFromInteractionsRate_codec = pb::FieldCodec.ForStructWrapper<double>(554);
    private double? conversionsFromInteractionsRate_;
    /// <summary>
    /// Conversions from interactions divided by the number of ad interactions
    /// (such as clicks for text ads or views for video ads). This only includes
    /// conversion actions which include_in_conversions_metric attribute is set to
    /// true.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double? ConversionsFromInteractionsRate {
      get { return conversionsFromInteractionsRate_; }
      set {
        conversionsFromInteractionsRate_ = value;
      }
    }


    /// <summary>Field number for the "conversions_value" field.</summary>
    public const int ConversionsValueFieldNumber = 70;
    private static readonly pb::FieldCodec<double?> _single_conversionsValue_codec = pb::FieldCodec.ForStructWrapper<double>(562);
    private double? conversionsValue_;
    /// <summary>
    /// The total value of conversions. This only includes conversion actions which
    /// include_in_conversions_metric attribute is set to true.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double? ConversionsValue {
      get { return conversionsValue_; }
      set {
        conversionsValue_ = value;
      }
    }


    /// <summary>Field number for the "conversions_value_per_cost" field.</summary>
    public const int ConversionsValuePerCostFieldNumber = 71;
    private static readonly pb::FieldCodec<double?> _single_conversionsValuePerCost_codec = pb::FieldCodec.ForStructWrapper<double>(570);
    private double? conversionsValuePerCost_;
    /// <summary>
    /// The value of conversions divided by the cost of ad interactions. This only
    /// includes conversion actions which include_in_conversions_metric attribute
    /// is set to true.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double? ConversionsValuePerCost {
      get { return conversionsValuePerCost_; }
      set {
        conversionsValuePerCost_ = value;
      }
    }


    /// <summary>Field number for the "conversions_from_interactions_value_per_interaction" field.</summary>
    public const int ConversionsFromInteractionsValuePerInteractionFieldNumber = 72;
    private static readonly pb::FieldCodec<double?> _single_conversionsFromInteractionsValuePerInteraction_codec = pb::FieldCodec.ForStructWrapper<double>(578);
    private double? conversionsFromInteractionsValuePerInteraction_;
    /// <summary>
    /// The value of conversions from interactions divided by the number of ad
    /// interactions. This only includes conversion actions which
    /// include_in_conversions_metric attribute is set to true.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double? ConversionsFromInteractionsValuePerInteraction {
      get { return conversionsFromInteractionsValuePerInteraction_; }
      set {
        conversionsFromInteractionsValuePerInteraction_ = value;
      }
    }


    /// <summary>Field number for the "conversions" field.</summary>
    public const int ConversionsFieldNumber = 25;
    private static readonly pb::FieldCodec<double?> _single_conversions_codec = pb::FieldCodec.ForStructWrapper<double>(202);
    private double? conversions_;
    /// <summary>
    /// The number of conversions. This only includes conversion actions which
    /// include_in_conversions_metric attribute is set to true.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double? Conversions {
      get { return conversions_; }
      set {
        conversions_ = value;
      }
    }


    /// <summary>Field number for the "cost_micros" field.</summary>
    public const int CostMicrosFieldNumber = 26;
    private static readonly pb::FieldCodec<long?> _single_costMicros_codec = pb::FieldCodec.ForStructWrapper<long>(210);
    private long? costMicros_;
    /// <summary>
    /// The sum of your cost-per-click (CPC) and cost-per-thousand impressions
    /// (CPM) costs during this period.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long? CostMicros {
      get { return costMicros_; }
      set {
        costMicros_ = value;
      }
    }


    /// <summary>Field number for the "cost_per_all_conversions" field.</summary>
    public const int CostPerAllConversionsFieldNumber = 68;
    private static readonly pb::FieldCodec<double?> _single_costPerAllConversions_codec = pb::FieldCodec.ForStructWrapper<double>(546);
    private double? costPerAllConversions_;
    /// <summary>
    /// The cost of ad interactions divided by all conversions.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double? CostPerAllConversions {
      get { return costPerAllConversions_; }
      set {
        costPerAllConversions_ = value;
      }
    }


    /// <summary>Field number for the "cost_per_conversion" field.</summary>
    public const int CostPerConversionFieldNumber = 28;
    private static readonly pb::FieldCodec<double?> _single_costPerConversion_codec = pb::FieldCodec.ForStructWrapper<double>(226);
    private double? costPerConversion_;
    /// <summary>
    /// The cost of ad interactions divided by conversions. This only includes
    /// conversion actions which include_in_conversions_metric attribute is set to
    /// true.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double? CostPerConversion {
      get { return costPerConversion_; }
      set {
        costPerConversion_ = value;
      }
    }


    /// <summary>Field number for the "cost_per_current_model_attributed_conversion" field.</summary>
    public const int CostPerCurrentModelAttributedConversionFieldNumber = 106;
    private static readonly pb::FieldCodec<double?> _single_costPerCurrentModelAttributedConversion_codec = pb::FieldCodec.ForStructWrapper<double>(850);
    private double? costPerCurrentModelAttributedConversion_;
    /// <summary>
    /// The cost of ad interactions divided by current model attributed
    /// conversions. This only includes conversion actions which
    /// include_in_conversions_metric attribute is set to true.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double? CostPerCurrentModelAttributedConversion {
      get { return costPerCurrentModelAttributedConversion_; }
      set {
        costPerCurrentModelAttributedConversion_ = value;
      }
    }


    /// <summary>Field number for the "cross_device_conversions" field.</summary>
    public const int CrossDeviceConversionsFieldNumber = 29;
    private static readonly pb::FieldCodec<double?> _single_crossDeviceConversions_codec = pb::FieldCodec.ForStructWrapper<double>(234);
    private double? crossDeviceConversions_;
    /// <summary>
    /// Conversions from when a customer clicks on a Google Ads ad on one device,
    /// then converts on a different device or browser.
    /// Cross-device conversions are already included in all_conversions.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double? CrossDeviceConversions {
      get { return crossDeviceConversions_; }
      set {
        crossDeviceConversions_ = value;
      }
    }


    /// <summary>Field number for the "ctr" field.</summary>
    public const int CtrFieldNumber = 30;
    private static readonly pb::FieldCodec<double?> _single_ctr_codec = pb::FieldCodec.ForStructWrapper<double>(242);
    private double? ctr_;
    /// <summary>
    /// The number of clicks your ad receives (Clicks) divided by the number
    /// of times your ad is shown (Impressions).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double? Ctr {
      get { return ctr_; }
      set {
        ctr_ = value;
      }
    }


    /// <summary>Field number for the "current_model_attributed_conversions" field.</summary>
    public const int CurrentModelAttributedConversionsFieldNumber = 101;
    private static readonly pb::FieldCodec<double?> _single_currentModelAttributedConversions_codec = pb::FieldCodec.ForStructWrapper<double>(810);
    private double? currentModelAttributedConversions_;
    /// <summary>
    /// Shows how your historic conversions data would look under the attribution
    /// model you've currently selected. This only includes conversion actions
    /// which include_in_conversions_metric attribute is set to true.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double? CurrentModelAttributedConversions {
      get { return currentModelAttributedConversions_; }
      set {
        currentModelAttributedConversions_ = value;
      }
    }


    /// <summary>Field number for the "current_model_attributed_conversions_from_interactions_rate" field.</summary>
    public const int CurrentModelAttributedConversionsFromInteractionsRateFieldNumber = 102;
    private static readonly pb::FieldCodec<double?> _single_currentModelAttributedConversionsFromInteractionsRate_codec = pb::FieldCodec.ForStructWrapper<double>(818);
    private double? currentModelAttributedConversionsFromInteractionsRate_;
    /// <summary>
    /// Current model attributed conversions from interactions divided by the
    /// number of ad interactions (such as clicks for text ads or views for video
    /// ads). This only includes conversion actions which
    /// include_in_conversions_metric attribute is set to true.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double? CurrentModelAttributedConversionsFromInteractionsRate {
      get { return currentModelAttributedConversionsFromInteractionsRate_; }
      set {
        currentModelAttributedConversionsFromInteractionsRate_ = value;
      }
    }


    /// <summary>Field number for the "current_model_attributed_conversions_from_interactions_value_per_interaction" field.</summary>
    public const int CurrentModelAttributedConversionsFromInteractionsValuePerInteractionFieldNumber = 103;
    private static readonly pb::FieldCodec<double?> _single_currentModelAttributedConversionsFromInteractionsValuePerInteraction_codec = pb::FieldCodec.ForStructWrapper<double>(826);
    private double? currentModelAttributedConversionsFromInteractionsValuePerInteraction_;
    /// <summary>
    /// The value of current model attributed conversions from interactions divided
    /// by the number of ad interactions. This only includes conversion actions
    /// which include_in_conversions_metric attribute is set to true.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double? CurrentModelAttributedConversionsFromInteractionsValuePerInteraction {
      get { return currentModelAttributedConversionsFromInteractionsValuePerInteraction_; }
      set {
        currentModelAttributedConversionsFromInteractionsValuePerInteraction_ = value;
      }
    }


    /// <summary>Field number for the "current_model_attributed_conversions_value" field.</summary>
    public const int CurrentModelAttributedConversionsValueFieldNumber = 104;
    private static readonly pb::FieldCodec<double?> _single_currentModelAttributedConversionsValue_codec = pb::FieldCodec.ForStructWrapper<double>(834);
    private double? currentModelAttributedConversionsValue_;
    /// <summary>
    /// The total value of current model attributed conversions. This only includes
    /// conversion actions which include_in_conversions_metric attribute is set to
    /// true.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double? CurrentModelAttributedConversionsValue {
      get { return currentModelAttributedConversionsValue_; }
      set {
        currentModelAttributedConversionsValue_ = value;
      }
    }


    /// <summary>Field number for the "current_model_attributed_conversions_value_per_cost" field.</summary>
    public const int CurrentModelAttributedConversionsValuePerCostFieldNumber = 105;
    private static readonly pb::FieldCodec<double?> _single_currentModelAttributedConversionsValuePerCost_codec = pb::FieldCodec.ForStructWrapper<double>(842);
    private double? currentModelAttributedConversionsValuePerCost_;
    /// <summary>
    /// The value of current model attributed conversions divided by the cost of ad
    /// interactions. This only includes conversion actions which
    /// include_in_conversions_metric attribute is set to true.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double? CurrentModelAttributedConversionsValuePerCost {
      get { return currentModelAttributedConversionsValuePerCost_; }
      set {
        currentModelAttributedConversionsValuePerCost_ = value;
      }
    }


    /// <summary>Field number for the "engagement_rate" field.</summary>
    public const int EngagementRateFieldNumber = 31;
    private static readonly pb::FieldCodec<double?> _single_engagementRate_codec = pb::FieldCodec.ForStructWrapper<double>(250);
    private double? engagementRate_;
    /// <summary>
    /// How often people engage with your ad after it's shown to them. This is the
    /// number of ad expansions divided by the number of times your ad is shown.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double? EngagementRate {
      get { return engagementRate_; }
      set {
        engagementRate_ = value;
      }
    }


    /// <summary>Field number for the "engagements" field.</summary>
    public const int EngagementsFieldNumber = 32;
    private static readonly pb::FieldCodec<long?> _single_engagements_codec = pb::FieldCodec.ForStructWrapper<long>(258);
    private long? engagements_;
    /// <summary>
    /// The number of engagements.
    /// An engagement occurs when a viewer expands your Lightbox ad. Also, in the
    /// future, other ad types may support engagement metrics.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long? Engagements {
      get { return engagements_; }
      set {
        engagements_ = value;
      }
    }


    /// <summary>Field number for the "hotel_average_lead_value_micros" field.</summary>
    public const int HotelAverageLeadValueMicrosFieldNumber = 75;
    private static readonly pb::FieldCodec<double?> _single_hotelAverageLeadValueMicros_codec = pb::FieldCodec.ForStructWrapper<double>(602);
    private double? hotelAverageLeadValueMicros_;
    /// <summary>
    /// Average lead value based on clicks.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double? HotelAverageLeadValueMicros {
      get { return hotelAverageLeadValueMicros_; }
      set {
        hotelAverageLeadValueMicros_ = value;
      }
    }


    /// <summary>Field number for the "hotel_price_difference_percentage" field.</summary>
    public const int HotelPriceDifferencePercentageFieldNumber = 129;
    private static readonly pb::FieldCodec<double?> _single_hotelPriceDifferencePercentage_codec = pb::FieldCodec.ForStructWrapper<double>(1034);
    private double? hotelPriceDifferencePercentage_;
    /// <summary>
    /// The average price difference between the price offered by reporting hotel
    /// advertiser and the cheapest price offered by the competing advertiser.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double? HotelPriceDifferencePercentage {
      get { return hotelPriceDifferencePercentage_; }
      set {
        hotelPriceDifferencePercentage_ = value;
      }
    }


    /// <summary>Field number for the "historical_creative_quality_score" field.</summary>
    public const int HistoricalCreativeQualityScoreFieldNumber = 80;
    private global::Google.Ads.GoogleAds.V3.Enums.QualityScoreBucketEnum.Types.QualityScoreBucket historicalCreativeQualityScore_ = global::Google.Ads.GoogleAds.V3.Enums.QualityScoreBucketEnum.Types.QualityScoreBucket.Unspecified;
    /// <summary>
    /// The creative historical quality score.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Ads.GoogleAds.V3.Enums.QualityScoreBucketEnum.Types.QualityScoreBucket HistoricalCreativeQualityScore {
      get { return historicalCreativeQualityScore_; }
      set {
        historicalCreativeQualityScore_ = value;
      }
    }

    /// <summary>Field number for the "historical_landing_page_quality_score" field.</summary>
    public const int HistoricalLandingPageQualityScoreFieldNumber = 81;
    private global::Google.Ads.GoogleAds.V3.Enums.QualityScoreBucketEnum.Types.QualityScoreBucket historicalLandingPageQualityScore_ = global::Google.Ads.GoogleAds.V3.Enums.QualityScoreBucketEnum.Types.QualityScoreBucket.Unspecified;
    /// <summary>
    /// The quality of historical landing page experience.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Ads.GoogleAds.V3.Enums.QualityScoreBucketEnum.Types.QualityScoreBucket HistoricalLandingPageQualityScore {
      get { return historicalLandingPageQualityScore_; }
      set {
        historicalLandingPageQualityScore_ = value;
      }
    }

    /// <summary>Field number for the "historical_quality_score" field.</summary>
    public const int HistoricalQualityScoreFieldNumber = 82;
    private static readonly pb::FieldCodec<long?> _single_historicalQualityScore_codec = pb::FieldCodec.ForStructWrapper<long>(658);
    private long? historicalQualityScore_;
    /// <summary>
    /// The historical quality score.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long? HistoricalQualityScore {
      get { return historicalQualityScore_; }
      set {
        historicalQualityScore_ = value;
      }
    }


    /// <summary>Field number for the "historical_search_predicted_ctr" field.</summary>
    public const int HistoricalSearchPredictedCtrFieldNumber = 83;
    private global::Google.Ads.GoogleAds.V3.Enums.QualityScoreBucketEnum.Types.QualityScoreBucket historicalSearchPredictedCtr_ = global::Google.Ads.GoogleAds.V3.Enums.QualityScoreBucketEnum.Types.QualityScoreBucket.Unspecified;
    /// <summary>
    /// The historical search predicted click through rate (CTR).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Ads.GoogleAds.V3.Enums.QualityScoreBucketEnum.Types.QualityScoreBucket HistoricalSearchPredictedCtr {
      get { return historicalSearchPredictedCtr_; }
      set {
        historicalSearchPredictedCtr_ = value;
      }
    }

    /// <summary>Field number for the "gmail_forwards" field.</summary>
    public const int GmailForwardsFieldNumber = 85;
    private static readonly pb::FieldCodec<long?> _single_gmailForwards_codec = pb::FieldCodec.ForStructWrapper<long>(682);
    private long? gmailForwards_;
    /// <summary>
    /// The number of times the ad was forwarded to someone else as a message.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long? GmailForwards {
      get { return gmailForwards_; }
      set {
        gmailForwards_ = value;
      }
    }


    /// <summary>Field number for the "gmail_saves" field.</summary>
    public const int GmailSavesFieldNumber = 86;
    private static readonly pb::FieldCodec<long?> _single_gmailSaves_codec = pb::FieldCodec.ForStructWrapper<long>(690);
    private long? gmailSaves_;
    /// <summary>
    /// The number of times someone has saved your Gmail ad to their inbox as a
    /// message.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long? GmailSaves {
      get { return gmailSaves_; }
      set {
        gmailSaves_ = value;
      }
    }


    /// <summary>Field number for the "gmail_secondary_clicks" field.</summary>
    public const int GmailSecondaryClicksFieldNumber = 87;
    private static readonly pb::FieldCodec<long?> _single_gmailSecondaryClicks_codec = pb::FieldCodec.ForStructWrapper<long>(698);
    private long? gmailSecondaryClicks_;
    /// <summary>
    /// The number of clicks to the landing page on the expanded state of Gmail
    /// ads.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long? GmailSecondaryClicks {
      get { return gmailSecondaryClicks_; }
      set {
        gmailSecondaryClicks_ = value;
      }
    }


    /// <summary>Field number for the "impressions_from_store_reach" field.</summary>
    public const int ImpressionsFromStoreReachFieldNumber = 125;
    private static readonly pb::FieldCodec<long?> _single_impressionsFromStoreReach_codec = pb::FieldCodec.ForStructWrapper<long>(1002);
    private long? impressionsFromStoreReach_;
    /// <summary>
    /// The number of times a store's location-based ad was shown.
    /// This metric applies to feed items only.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long? ImpressionsFromStoreReach {
      get { return impressionsFromStoreReach_; }
      set {
        impressionsFromStoreReach_ = value;
      }
    }


    /// <summary>Field number for the "impressions" field.</summary>
    public const int ImpressionsFieldNumber = 37;
    private static readonly pb::FieldCodec<long?> _single_impressions_codec = pb::FieldCodec.ForStructWrapper<long>(298);
    private long? impressions_;
    /// <summary>
    /// Count of how often your ad has appeared on a search results page or
    /// website on the Google Network.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long? Impressions {
      get { return impressions_; }
      set {
        impressions_ = value;
      }
    }


    /// <summary>Field number for the "interaction_rate" field.</summary>
    public const int InteractionRateFieldNumber = 38;
    private static readonly pb::FieldCodec<double?> _single_interactionRate_codec = pb::FieldCodec.ForStructWrapper<double>(306);
    private double? interactionRate_;
    /// <summary>
    /// How often people interact with your ad after it is shown to them.
    /// This is the number of interactions divided by the number of times your ad
    /// is shown.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double? InteractionRate {
      get { return interactionRate_; }
      set {
        interactionRate_ = value;
      }
    }


    /// <summary>Field number for the "interactions" field.</summary>
    public const int InteractionsFieldNumber = 39;
    private static readonly pb::FieldCodec<long?> _single_interactions_codec = pb::FieldCodec.ForStructWrapper<long>(314);
    private long? interactions_;
    /// <summary>
    /// The number of interactions.
    /// An interaction is the main user action associated with an ad format-clicks
    /// for text and shopping ads, views for video ads, and so on.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long? Interactions {
      get { return interactions_; }
      set {
        interactions_ = value;
      }
    }


    /// <summary>Field number for the "interaction_event_types" field.</summary>
    public const int InteractionEventTypesFieldNumber = 100;
    private static readonly pb::FieldCodec<global::Google.Ads.GoogleAds.V3.Enums.InteractionEventTypeEnum.Types.InteractionEventType> _repeated_interactionEventTypes_codec
        = pb::FieldCodec.ForEnum(802, x => (int) x, x => (global::Google.Ads.GoogleAds.V3.Enums.InteractionEventTypeEnum.Types.InteractionEventType) x);
    private readonly pbc::RepeatedField<global::Google.Ads.GoogleAds.V3.Enums.InteractionEventTypeEnum.Types.InteractionEventType> interactionEventTypes_ = new pbc::RepeatedField<global::Google.Ads.GoogleAds.V3.Enums.InteractionEventTypeEnum.Types.InteractionEventType>();
    /// <summary>
    /// The types of payable and free interactions.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Google.Ads.GoogleAds.V3.Enums.InteractionEventTypeEnum.Types.InteractionEventType> InteractionEventTypes {
      get { return interactionEventTypes_; }
    }

    /// <summary>Field number for the "invalid_click_rate" field.</summary>
    public const int InvalidClickRateFieldNumber = 40;
    private static readonly pb::FieldCodec<double?> _single_invalidClickRate_codec = pb::FieldCodec.ForStructWrapper<double>(322);
    private double? invalidClickRate_;
    /// <summary>
    /// The percentage of clicks filtered out of your total number of clicks
    /// (filtered + non-filtered clicks) during the reporting period.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double? InvalidClickRate {
      get { return invalidClickRate_; }
      set {
        invalidClickRate_ = value;
      }
    }


    /// <summary>Field number for the "invalid_clicks" field.</summary>
    public const int InvalidClicksFieldNumber = 41;
    private static readonly pb::FieldCodec<long?> _single_invalidClicks_codec = pb::FieldCodec.ForStructWrapper<long>(330);
    private long? invalidClicks_;
    /// <summary>
    /// Number of clicks Google considers illegitimate and doesn't charge you for.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long? InvalidClicks {
      get { return invalidClicks_; }
      set {
        invalidClicks_ = value;
      }
    }


    /// <summary>Field number for the "message_chats" field.</summary>
    public const int MessageChatsFieldNumber = 126;
    private static readonly pb::FieldCodec<long?> _single_messageChats_codec = pb::FieldCodec.ForStructWrapper<long>(1010);
    private long? messageChats_;
    /// <summary>
    /// Number of message chats initiated for Click To Message impressions that
    /// were message tracking eligible.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long? MessageChats {
      get { return messageChats_; }
      set {
        messageChats_ = value;
      }
    }


    /// <summary>Field number for the "message_impressions" field.</summary>
    public const int MessageImpressionsFieldNumber = 127;
    private static readonly pb::FieldCodec<long?> _single_messageImpressions_codec = pb::FieldCodec.ForStructWrapper<long>(1018);
    private long? messageImpressions_;
    /// <summary>
    /// Number of Click To Message impressions that were message tracking eligible.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long? MessageImpressions {
      get { return messageImpressions_; }
      set {
        messageImpressions_ = value;
      }
    }


    /// <summary>Field number for the "message_chat_rate" field.</summary>
    public const int MessageChatRateFieldNumber = 128;
    private static readonly pb::FieldCodec<double?> _single_messageChatRate_codec = pb::FieldCodec.ForStructWrapper<double>(1026);
    private double? messageChatRate_;
    /// <summary>
    /// Number of message chats initiated (message_chats) divided by the number
    /// of message impressions (message_impressions).
    /// Rate at which a user initiates a message chat from an ad impression with
    /// a messaging option and message tracking enabled.
    /// Note that this rate can be more than 1.0 for a given message impression.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double? MessageChatRate {
      get { return messageChatRate_; }
      set {
        messageChatRate_ = value;
      }
    }


    /// <summary>Field number for the "mobile_friendly_clicks_percentage" field.</summary>
    public const int MobileFriendlyClicksPercentageFieldNumber = 109;
    private static readonly pb::FieldCodec<double?> _single_mobileFriendlyClicksPercentage_codec = pb::FieldCodec.ForStructWrapper<double>(874);
    private double? mobileFriendlyClicksPercentage_;
    /// <summary>
    /// The percentage of mobile clicks that go to a mobile-friendly page.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double? MobileFriendlyClicksPercentage {
      get { return mobileFriendlyClicksPercentage_; }
      set {
        mobileFriendlyClicksPercentage_ = value;
      }
    }


    /// <summary>Field number for the "organic_clicks" field.</summary>
    public const int OrganicClicksFieldNumber = 110;
    private static readonly pb::FieldCodec<long?> _single_organicClicks_codec = pb::FieldCodec.ForStructWrapper<long>(882);
    private long? organicClicks_;
    /// <summary>
    /// The number of times someone clicked your site's listing in the unpaid
    /// results for a particular query. See the help page at
    /// https://support.google.com/google-ads/answer/3097241 for details.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long? OrganicClicks {
      get { return organicClicks_; }
      set {
        organicClicks_ = value;
      }
    }


    /// <summary>Field number for the "organic_clicks_per_query" field.</summary>
    public const int OrganicClicksPerQueryFieldNumber = 111;
    private static readonly pb::FieldCodec<double?> _single_organicClicksPerQuery_codec = pb::FieldCodec.ForStructWrapper<double>(890);
    private double? organicClicksPerQuery_;
    /// <summary>
    /// The number of times someone clicked your site's listing in the unpaid
    /// results (organic_clicks) divided by the total number of searches that
    /// returned pages from your site (organic_queries). See the help page at
    /// https://support.google.com/google-ads/answer/3097241 for details.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double? OrganicClicksPerQuery {
      get { return organicClicksPerQuery_; }
      set {
        organicClicksPerQuery_ = value;
      }
    }


    /// <summary>Field number for the "organic_impressions" field.</summary>
    public const int OrganicImpressionsFieldNumber = 112;
    private static readonly pb::FieldCodec<long?> _single_organicImpressions_codec = pb::FieldCodec.ForStructWrapper<long>(898);
    private long? organicImpressions_;
    /// <summary>
    /// The number of listings for your site in the unpaid search results. See the
    /// help page at https://support.google.com/google-ads/answer/3097241 for
    /// details.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long? OrganicImpressions {
      get { return organicImpressions_; }
      set {
        organicImpressions_ = value;
      }
    }


    /// <summary>Field number for the "organic_impressions_per_query" field.</summary>
    public const int OrganicImpressionsPerQueryFieldNumber = 113;
    private static readonly pb::FieldCodec<double?> _single_organicImpressionsPerQuery_codec = pb::FieldCodec.ForStructWrapper<double>(906);
    private double? organicImpressionsPerQuery_;
    /// <summary>
    /// The number of times a page from your site was listed in the unpaid search
    /// results (organic_impressions) divided by the number of searches returning
    /// your site's listing in the unpaid results (organic_queries). See the help
    /// page at https://support.google.com/google-ads/answer/3097241 for details.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double? OrganicImpressionsPerQuery {
      get { return organicImpressionsPerQuery_; }
      set {
        organicImpressionsPerQuery_ = value;
      }
    }


    /// <summary>Field number for the "organic_queries" field.</summary>
    public const int OrganicQueriesFieldNumber = 114;
    private static readonly pb::FieldCodec<long?> _single_organicQueries_codec = pb::FieldCodec.ForStructWrapper<long>(914);
    private long? organicQueries_;
    /// <summary>
    /// The total number of searches that returned your site's listing in the
    /// unpaid results. See the help page at
    /// https://support.google.com/google-ads/answer/3097241 for details.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long? OrganicQueries {
      get { return organicQueries_; }
      set {
        organicQueries_ = value;
      }
    }


    /// <summary>Field number for the "percent_new_visitors" field.</summary>
    public const int PercentNewVisitorsFieldNumber = 42;
    private static readonly pb::FieldCodec<double?> _single_percentNewVisitors_codec = pb::FieldCodec.ForStructWrapper<double>(338);
    private double? percentNewVisitors_;
    /// <summary>
    /// Percentage of first-time sessions (from people who had never visited your
    /// site before). Imported from Google Analytics.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double? PercentNewVisitors {
      get { return percentNewVisitors_; }
      set {
        percentNewVisitors_ = value;
      }
    }


    /// <summary>Field number for the "phone_calls" field.</summary>
    public const int PhoneCallsFieldNumber = 43;
    private static readonly pb::FieldCodec<long?> _single_phoneCalls_codec = pb::FieldCodec.ForStructWrapper<long>(346);
    private long? phoneCalls_;
    /// <summary>
    /// Number of offline phone calls.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long? PhoneCalls {
      get { return phoneCalls_; }
      set {
        phoneCalls_ = value;
      }
    }


    /// <summary>Field number for the "phone_impressions" field.</summary>
    public const int PhoneImpressionsFieldNumber = 44;
    private static readonly pb::FieldCodec<long?> _single_phoneImpressions_codec = pb::FieldCodec.ForStructWrapper<long>(354);
    private long? phoneImpressions_;
    /// <summary>
    /// Number of offline phone impressions.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long? PhoneImpressions {
      get { return phoneImpressions_; }
      set {
        phoneImpressions_ = value;
      }
    }


    /// <summary>Field number for the "phone_through_rate" field.</summary>
    public const int PhoneThroughRateFieldNumber = 45;
    private static readonly pb::FieldCodec<double?> _single_phoneThroughRate_codec = pb::FieldCodec.ForStructWrapper<double>(362);
    private double? phoneThroughRate_;
    /// <summary>
    /// Number of phone calls received (phone_calls) divided by the number of
    /// times your phone number is shown (phone_impressions).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double? PhoneThroughRate {
      get { return phoneThroughRate_; }
      set {
        phoneThroughRate_ = value;
      }
    }


    /// <summary>Field number for the "relative_ctr" field.</summary>
    public const int RelativeCtrFieldNumber = 46;
    private static readonly pb::FieldCodec<double?> _single_relativeCtr_codec = pb::FieldCodec.ForStructWrapper<double>(370);
    private double? relativeCtr_;
    /// <summary>
    /// Your clickthrough rate (Ctr) divided by the average clickthrough rate of
    /// all advertisers on the websites that show your ads. Measures how your ads
    /// perform on Display Network sites compared to other ads on the same sites.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double? RelativeCtr {
      get { return relativeCtr_; }
      set {
        relativeCtr_ = value;
      }
    }


    /// <summary>Field number for the "search_absolute_top_impression_share" field.</summary>
    public const int SearchAbsoluteTopImpressionShareFieldNumber = 78;
    private static readonly pb::FieldCodec<double?> _single_searchAbsoluteTopImpressionShare_codec = pb::FieldCodec.ForStructWrapper<double>(626);
    private double? searchAbsoluteTopImpressionShare_;
    /// <summary>
    /// The percentage of the customer's Shopping or Search ad impressions that are
    /// shown in the most prominent Shopping position. See
    /// https://support.google.com/google-ads/answer/7501826
    /// for details. Any value below 0.1 is reported as 0.0999.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double? SearchAbsoluteTopImpressionShare {
      get { return searchAbsoluteTopImpressionShare_; }
      set {
        searchAbsoluteTopImpressionShare_ = value;
      }
    }


    /// <summary>Field number for the "search_budget_lost_absolute_top_impression_share" field.</summary>
    public const int SearchBudgetLostAbsoluteTopImpressionShareFieldNumber = 88;
    private static readonly pb::FieldCodec<double?> _single_searchBudgetLostAbsoluteTopImpressionShare_codec = pb::FieldCodec.ForStructWrapper<double>(706);
    private double? searchBudgetLostAbsoluteTopImpressionShare_;
    /// <summary>
    /// The number estimating how often your ad wasn't the very first ad above the
    /// organic search results due to a low budget. Note: Search
    /// budget lost absolute top impression share is reported in the range of 0 to
    /// 0.9. Any value above 0.9 is reported as 0.9001.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double? SearchBudgetLostAbsoluteTopImpressionShare {
      get { return searchBudgetLostAbsoluteTopImpressionShare_; }
      set {
        searchBudgetLostAbsoluteTopImpressionShare_ = value;
      }
    }


    /// <summary>Field number for the "search_budget_lost_impression_share" field.</summary>
    public const int SearchBudgetLostImpressionShareFieldNumber = 47;
    private static readonly pb::FieldCodec<double?> _single_searchBudgetLostImpressionShare_codec = pb::FieldCodec.ForStructWrapper<double>(378);
    private double? searchBudgetLostImpressionShare_;
    /// <summary>
    /// The estimated percent of times that your ad was eligible to show on the
    /// Search Network but didn't because your budget was too low. Note: Search
    /// budget lost impression share is reported in the range of 0 to 0.9. Any
    /// value above 0.9 is reported as 0.9001.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double? SearchBudgetLostImpressionShare {
      get { return searchBudgetLostImpressionShare_; }
      set {
        searchBudgetLostImpressionShare_ = value;
      }
    }


    /// <summary>Field number for the "search_budget_lost_top_impression_share" field.</summary>
    public const int SearchBudgetLostTopImpressionShareFieldNumber = 89;
    private static readonly pb::FieldCodec<double?> _single_searchBudgetLostTopImpressionShare_codec = pb::FieldCodec.ForStructWrapper<double>(714);
    private double? searchBudgetLostTopImpressionShare_;
    /// <summary>
    /// The number estimating how often your ad didn't show anywhere above the
    /// organic search results due to a low budget. Note: Search
    /// budget lost top impression share is reported in the range of 0 to 0.9. Any
    /// value above 0.9 is reported as 0.9001.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double? SearchBudgetLostTopImpressionShare {
      get { return searchBudgetLostTopImpressionShare_; }
      set {
        searchBudgetLostTopImpressionShare_ = value;
      }
    }


    /// <summary>Field number for the "search_click_share" field.</summary>
    public const int SearchClickShareFieldNumber = 48;
    private static readonly pb::FieldCodec<double?> _single_searchClickShare_codec = pb::FieldCodec.ForStructWrapper<double>(386);
    private double? searchClickShare_;
    /// <summary>
    /// The number of clicks you've received on the Search Network
    /// divided by the estimated number of clicks you were eligible to receive.
    /// Note: Search click share is reported in the range of 0.1 to 1. Any value
    /// below 0.1 is reported as 0.0999.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double? SearchClickShare {
      get { return searchClickShare_; }
      set {
        searchClickShare_ = value;
      }
    }


    /// <summary>Field number for the "search_exact_match_impression_share" field.</summary>
    public const int SearchExactMatchImpressionShareFieldNumber = 49;
    private static readonly pb::FieldCodec<double?> _single_searchExactMatchImpressionShare_codec = pb::FieldCodec.ForStructWrapper<double>(394);
    private double? searchExactMatchImpressionShare_;
    /// <summary>
    /// The impressions you've received divided by the estimated number of
    /// impressions you were eligible to receive on the Search Network for search
    /// terms that matched your keywords exactly (or were close variants of your
    /// keyword), regardless of your keyword match types. Note: Search exact match
    /// impression share is reported in the range of 0.1 to 1. Any value below 0.1
    /// is reported as 0.0999.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double? SearchExactMatchImpressionShare {
      get { return searchExactMatchImpressionShare_; }
      set {
        searchExactMatchImpressionShare_ = value;
      }
    }


    /// <summary>Field number for the "search_impression_share" field.</summary>
    public const int SearchImpressionShareFieldNumber = 50;
    private static readonly pb::FieldCodec<double?> _single_searchImpressionShare_codec = pb::FieldCodec.ForStructWrapper<double>(402);
    private double? searchImpressionShare_;
    /// <summary>
    /// The impressions you've received on the Search Network divided
    /// by the estimated number of impressions you were eligible to receive.
    /// Note: Search impression share is reported in the range of 0.1 to 1. Any
    /// value below 0.1 is reported as 0.0999.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double? SearchImpressionShare {
      get { return searchImpressionShare_; }
      set {
        searchImpressionShare_ = value;
      }
    }


    /// <summary>Field number for the "search_rank_lost_absolute_top_impression_share" field.</summary>
    public const int SearchRankLostAbsoluteTopImpressionShareFieldNumber = 90;
    private static readonly pb::FieldCodec<double?> _single_searchRankLostAbsoluteTopImpressionShare_codec = pb::FieldCodec.ForStructWrapper<double>(722);
    private double? searchRankLostAbsoluteTopImpressionShare_;
    /// <summary>
    /// The number estimating how often your ad wasn't the very first ad above the
    /// organic search results due to poor Ad Rank.
    /// Note: Search rank lost absolute top impression share is reported in the
    /// range of 0 to 0.9. Any value above 0.9 is reported as 0.9001.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double? SearchRankLostAbsoluteTopImpressionShare {
      get { return searchRankLostAbsoluteTopImpressionShare_; }
      set {
        searchRankLostAbsoluteTopImpressionShare_ = value;
      }
    }


    /// <summary>Field number for the "search_rank_lost_impression_share" field.</summary>
    public const int SearchRankLostImpressionShareFieldNumber = 51;
    private static readonly pb::FieldCodec<double?> _single_searchRankLostImpressionShare_codec = pb::FieldCodec.ForStructWrapper<double>(410);
    private double? searchRankLostImpressionShare_;
    /// <summary>
    /// The estimated percentage of impressions on the Search Network
    /// that your ads didn't receive due to poor Ad Rank.
    /// Note: Search rank lost impression share is reported in the range of 0 to
    /// 0.9. Any value above 0.9 is reported as 0.9001.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double? SearchRankLostImpressionShare {
      get { return searchRankLostImpressionShare_; }
      set {
        searchRankLostImpressionShare_ = value;
      }
    }


    /// <summary>Field number for the "search_rank_lost_top_impression_share" field.</summary>
    public const int SearchRankLostTopImpressionShareFieldNumber = 91;
    private static readonly pb::FieldCodec<double?> _single_searchRankLostTopImpressionShare_codec = pb::FieldCodec.ForStructWrapper<double>(730);
    private double? searchRankLostTopImpressionShare_;
    /// <summary>
    /// The number estimating how often your ad didn't show anywhere above the
    /// organic search results due to poor Ad Rank.
    /// Note: Search rank lost top impression share is reported in the range of 0
    /// to 0.9. Any value above 0.9 is reported as 0.9001.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double? SearchRankLostTopImpressionShare {
      get { return searchRankLostTopImpressionShare_; }
      set {
        searchRankLostTopImpressionShare_ = value;
      }
    }


    /// <summary>Field number for the "search_top_impression_share" field.</summary>
    public const int SearchTopImpressionShareFieldNumber = 92;
    private static readonly pb::FieldCodec<double?> _single_searchTopImpressionShare_codec = pb::FieldCodec.ForStructWrapper<double>(738);
    private double? searchTopImpressionShare_;
    /// <summary>
    /// The impressions you've received in the top location (anywhere above the
    /// organic search results) compared to the estimated number of impressions you
    /// were eligible to receive in the top location.
    /// Note: Search top impression share is reported in the range of 0.1 to 1. Any
    /// value below 0.1 is reported as 0.0999.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double? SearchTopImpressionShare {
      get { return searchTopImpressionShare_; }
      set {
        searchTopImpressionShare_ = value;
      }
    }


    /// <summary>Field number for the "speed_score" field.</summary>
    public const int SpeedScoreFieldNumber = 107;
    private static readonly pb::FieldCodec<long?> _single_speedScore_codec = pb::FieldCodec.ForStructWrapper<long>(858);
    private long? speedScore_;
    /// <summary>
    /// A measure of how quickly your page loads after clicks on your mobile ads.
    /// The score is a range from 1 to 10, 10 being the fastest.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long? SpeedScore {
      get { return speedScore_; }
      set {
        speedScore_ = value;
      }
    }


    /// <summary>Field number for the "top_impression_percentage" field.</summary>
    public const int TopImpressionPercentageFieldNumber = 93;
    private static readonly pb::FieldCodec<double?> _single_topImpressionPercentage_codec = pb::FieldCodec.ForStructWrapper<double>(746);
    private double? topImpressionPercentage_;
    /// <summary>
    /// The percent of your ad impressions that are shown anywhere above the
    /// organic search results.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double? TopImpressionPercentage {
      get { return topImpressionPercentage_; }
      set {
        topImpressionPercentage_ = value;
      }
    }


    /// <summary>Field number for the "valid_accelerated_mobile_pages_clicks_percentage" field.</summary>
    public const int ValidAcceleratedMobilePagesClicksPercentageFieldNumber = 108;
    private static readonly pb::FieldCodec<double?> _single_validAcceleratedMobilePagesClicksPercentage_codec = pb::FieldCodec.ForStructWrapper<double>(866);
    private double? validAcceleratedMobilePagesClicksPercentage_;
    /// <summary>
    /// The percentage of ad clicks to Accelerated Mobile Pages (AMP) landing pages
    /// that reach a valid AMP page.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double? ValidAcceleratedMobilePagesClicksPercentage {
      get { return validAcceleratedMobilePagesClicksPercentage_; }
      set {
        validAcceleratedMobilePagesClicksPercentage_ = value;
      }
    }


    /// <summary>Field number for the "value_per_all_conversions" field.</summary>
    public const int ValuePerAllConversionsFieldNumber = 52;
    private static readonly pb::FieldCodec<double?> _single_valuePerAllConversions_codec = pb::FieldCodec.ForStructWrapper<double>(418);
    private double? valuePerAllConversions_;
    /// <summary>
    /// The value of all conversions divided by the number of all conversions.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double? ValuePerAllConversions {
      get { return valuePerAllConversions_; }
      set {
        valuePerAllConversions_ = value;
      }
    }


    /// <summary>Field number for the "value_per_conversion" field.</summary>
    public const int ValuePerConversionFieldNumber = 53;
    private static readonly pb::FieldCodec<double?> _single_valuePerConversion_codec = pb::FieldCodec.ForStructWrapper<double>(426);
    private double? valuePerConversion_;
    /// <summary>
    /// The value of conversions divided by the number of conversions. This only
    /// includes conversion actions which include_in_conversions_metric attribute
    /// is set to true.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double? ValuePerConversion {
      get { return valuePerConversion_; }
      set {
        valuePerConversion_ = value;
      }
    }


    /// <summary>Field number for the "value_per_current_model_attributed_conversion" field.</summary>
    public const int ValuePerCurrentModelAttributedConversionFieldNumber = 94;
    private static readonly pb::FieldCodec<double?> _single_valuePerCurrentModelAttributedConversion_codec = pb::FieldCodec.ForStructWrapper<double>(754);
    private double? valuePerCurrentModelAttributedConversion_;
    /// <summary>
    /// The value of current model attributed conversions divided by the number of
    /// the conversions. This only includes conversion actions which
    /// include_in_conversions_metric attribute is set to true.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double? ValuePerCurrentModelAttributedConversion {
      get { return valuePerCurrentModelAttributedConversion_; }
      set {
        valuePerCurrentModelAttributedConversion_ = value;
      }
    }


    /// <summary>Field number for the "video_quartile_100_rate" field.</summary>
    public const int VideoQuartile100RateFieldNumber = 54;
    private static readonly pb::FieldCodec<double?> _single_videoQuartile100Rate_codec = pb::FieldCodec.ForStructWrapper<double>(434);
    private double? videoQuartile100Rate_;
    /// <summary>
    /// Percentage of impressions where the viewer watched all of your video.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double? VideoQuartile100Rate {
      get { return videoQuartile100Rate_; }
      set {
        videoQuartile100Rate_ = value;
      }
    }


    /// <summary>Field number for the "video_quartile_25_rate" field.</summary>
    public const int VideoQuartile25RateFieldNumber = 55;
    private static readonly pb::FieldCodec<double?> _single_videoQuartile25Rate_codec = pb::FieldCodec.ForStructWrapper<double>(442);
    private double? videoQuartile25Rate_;
    /// <summary>
    /// Percentage of impressions where the viewer watched 25% of your video.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double? VideoQuartile25Rate {
      get { return videoQuartile25Rate_; }
      set {
        videoQuartile25Rate_ = value;
      }
    }


    /// <summary>Field number for the "video_quartile_50_rate" field.</summary>
    public const int VideoQuartile50RateFieldNumber = 56;
    private static readonly pb::FieldCodec<double?> _single_videoQuartile50Rate_codec = pb::FieldCodec.ForStructWrapper<double>(450);
    private double? videoQuartile50Rate_;
    /// <summary>
    /// Percentage of impressions where the viewer watched 50% of your video.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double? VideoQuartile50Rate {
      get { return videoQuartile50Rate_; }
      set {
        videoQuartile50Rate_ = value;
      }
    }


    /// <summary>Field number for the "video_quartile_75_rate" field.</summary>
    public const int VideoQuartile75RateFieldNumber = 57;
    private static readonly pb::FieldCodec<double?> _single_videoQuartile75Rate_codec = pb::FieldCodec.ForStructWrapper<double>(458);
    private double? videoQuartile75Rate_;
    /// <summary>
    /// Percentage of impressions where the viewer watched 75% of your video.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double? VideoQuartile75Rate {
      get { return videoQuartile75Rate_; }
      set {
        videoQuartile75Rate_ = value;
      }
    }


    /// <summary>Field number for the "video_view_rate" field.</summary>
    public const int VideoViewRateFieldNumber = 58;
    private static readonly pb::FieldCodec<double?> _single_videoViewRate_codec = pb::FieldCodec.ForStructWrapper<double>(466);
    private double? videoViewRate_;
    /// <summary>
    /// The number of views your TrueView video ad receives divided by its number
    /// of impressions, including thumbnail impressions for TrueView in-display
    /// ads.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double? VideoViewRate {
      get { return videoViewRate_; }
      set {
        videoViewRate_ = value;
      }
    }


    /// <summary>Field number for the "video_views" field.</summary>
    public const int VideoViewsFieldNumber = 59;
    private static readonly pb::FieldCodec<long?> _single_videoViews_codec = pb::FieldCodec.ForStructWrapper<long>(474);
    private long? videoViews_;
    /// <summary>
    /// The number of times your video ads were viewed.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long? VideoViews {
      get { return videoViews_; }
      set {
        videoViews_ = value;
      }
    }


    /// <summary>Field number for the "view_through_conversions" field.</summary>
    public const int ViewThroughConversionsFieldNumber = 60;
    private static readonly pb::FieldCodec<long?> _single_viewThroughConversions_codec = pb::FieldCodec.ForStructWrapper<long>(482);
    private long? viewThroughConversions_;
    /// <summary>
    /// The total number of view-through conversions.
    /// These happen when a customer sees an image or rich media ad, then later
    /// completes a conversion on your site without interacting with (e.g.,
    /// clicking on) another ad.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long? ViewThroughConversions {
      get { return viewThroughConversions_; }
      set {
        viewThroughConversions_ = value;
      }
    }


    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Metrics);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Metrics other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!pbc::ProtobufEqualityComparers.BitwiseNullableDoubleEqualityComparer.Equals(AbsoluteTopImpressionPercentage, other.AbsoluteTopImpressionPercentage)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseNullableDoubleEqualityComparer.Equals(ActiveViewCpm, other.ActiveViewCpm)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseNullableDoubleEqualityComparer.Equals(ActiveViewCtr, other.ActiveViewCtr)) return false;
      if (ActiveViewImpressions != other.ActiveViewImpressions) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseNullableDoubleEqualityComparer.Equals(ActiveViewMeasurability, other.ActiveViewMeasurability)) return false;
      if (ActiveViewMeasurableCostMicros != other.ActiveViewMeasurableCostMicros) return false;
      if (ActiveViewMeasurableImpressions != other.ActiveViewMeasurableImpressions) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseNullableDoubleEqualityComparer.Equals(ActiveViewViewability, other.ActiveViewViewability)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseNullableDoubleEqualityComparer.Equals(AllConversionsFromInteractionsRate, other.AllConversionsFromInteractionsRate)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseNullableDoubleEqualityComparer.Equals(AllConversionsValue, other.AllConversionsValue)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseNullableDoubleEqualityComparer.Equals(AllConversions, other.AllConversions)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseNullableDoubleEqualityComparer.Equals(AllConversionsValuePerCost, other.AllConversionsValuePerCost)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseNullableDoubleEqualityComparer.Equals(AllConversionsFromClickToCall, other.AllConversionsFromClickToCall)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseNullableDoubleEqualityComparer.Equals(AllConversionsFromDirections, other.AllConversionsFromDirections)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseNullableDoubleEqualityComparer.Equals(AllConversionsFromInteractionsValuePerInteraction, other.AllConversionsFromInteractionsValuePerInteraction)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseNullableDoubleEqualityComparer.Equals(AllConversionsFromMenu, other.AllConversionsFromMenu)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseNullableDoubleEqualityComparer.Equals(AllConversionsFromOrder, other.AllConversionsFromOrder)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseNullableDoubleEqualityComparer.Equals(AllConversionsFromOtherEngagement, other.AllConversionsFromOtherEngagement)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseNullableDoubleEqualityComparer.Equals(AllConversionsFromStoreVisit, other.AllConversionsFromStoreVisit)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseNullableDoubleEqualityComparer.Equals(AllConversionsFromStoreWebsite, other.AllConversionsFromStoreWebsite)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseNullableDoubleEqualityComparer.Equals(AverageCost, other.AverageCost)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseNullableDoubleEqualityComparer.Equals(AverageCpc, other.AverageCpc)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseNullableDoubleEqualityComparer.Equals(AverageCpe, other.AverageCpe)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseNullableDoubleEqualityComparer.Equals(AverageCpm, other.AverageCpm)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseNullableDoubleEqualityComparer.Equals(AverageCpv, other.AverageCpv)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseNullableDoubleEqualityComparer.Equals(AveragePageViews, other.AveragePageViews)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseNullableDoubleEqualityComparer.Equals(AverageTimeOnSite, other.AverageTimeOnSite)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseNullableDoubleEqualityComparer.Equals(BenchmarkAverageMaxCpc, other.BenchmarkAverageMaxCpc)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseNullableDoubleEqualityComparer.Equals(BenchmarkCtr, other.BenchmarkCtr)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseNullableDoubleEqualityComparer.Equals(BounceRate, other.BounceRate)) return false;
      if (Clicks != other.Clicks) return false;
      if (CombinedClicks != other.CombinedClicks) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseNullableDoubleEqualityComparer.Equals(CombinedClicksPerQuery, other.CombinedClicksPerQuery)) return false;
      if (CombinedQueries != other.CombinedQueries) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseNullableDoubleEqualityComparer.Equals(ContentBudgetLostImpressionShare, other.ContentBudgetLostImpressionShare)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseNullableDoubleEqualityComparer.Equals(ContentImpressionShare, other.ContentImpressionShare)) return false;
      if (ConversionLastReceivedRequestDateTime != other.ConversionLastReceivedRequestDateTime) return false;
      if (ConversionLastConversionDate != other.ConversionLastConversionDate) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseNullableDoubleEqualityComparer.Equals(ContentRankLostImpressionShare, other.ContentRankLostImpressionShare)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseNullableDoubleEqualityComparer.Equals(ConversionsFromInteractionsRate, other.ConversionsFromInteractionsRate)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseNullableDoubleEqualityComparer.Equals(ConversionsValue, other.ConversionsValue)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseNullableDoubleEqualityComparer.Equals(ConversionsValuePerCost, other.ConversionsValuePerCost)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseNullableDoubleEqualityComparer.Equals(ConversionsFromInteractionsValuePerInteraction, other.ConversionsFromInteractionsValuePerInteraction)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseNullableDoubleEqualityComparer.Equals(Conversions, other.Conversions)) return false;
      if (CostMicros != other.CostMicros) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseNullableDoubleEqualityComparer.Equals(CostPerAllConversions, other.CostPerAllConversions)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseNullableDoubleEqualityComparer.Equals(CostPerConversion, other.CostPerConversion)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseNullableDoubleEqualityComparer.Equals(CostPerCurrentModelAttributedConversion, other.CostPerCurrentModelAttributedConversion)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseNullableDoubleEqualityComparer.Equals(CrossDeviceConversions, other.CrossDeviceConversions)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseNullableDoubleEqualityComparer.Equals(Ctr, other.Ctr)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseNullableDoubleEqualityComparer.Equals(CurrentModelAttributedConversions, other.CurrentModelAttributedConversions)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseNullableDoubleEqualityComparer.Equals(CurrentModelAttributedConversionsFromInteractionsRate, other.CurrentModelAttributedConversionsFromInteractionsRate)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseNullableDoubleEqualityComparer.Equals(CurrentModelAttributedConversionsFromInteractionsValuePerInteraction, other.CurrentModelAttributedConversionsFromInteractionsValuePerInteraction)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseNullableDoubleEqualityComparer.Equals(CurrentModelAttributedConversionsValue, other.CurrentModelAttributedConversionsValue)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseNullableDoubleEqualityComparer.Equals(CurrentModelAttributedConversionsValuePerCost, other.CurrentModelAttributedConversionsValuePerCost)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseNullableDoubleEqualityComparer.Equals(EngagementRate, other.EngagementRate)) return false;
      if (Engagements != other.Engagements) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseNullableDoubleEqualityComparer.Equals(HotelAverageLeadValueMicros, other.HotelAverageLeadValueMicros)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseNullableDoubleEqualityComparer.Equals(HotelPriceDifferencePercentage, other.HotelPriceDifferencePercentage)) return false;
      if (HistoricalCreativeQualityScore != other.HistoricalCreativeQualityScore) return false;
      if (HistoricalLandingPageQualityScore != other.HistoricalLandingPageQualityScore) return false;
      if (HistoricalQualityScore != other.HistoricalQualityScore) return false;
      if (HistoricalSearchPredictedCtr != other.HistoricalSearchPredictedCtr) return false;
      if (GmailForwards != other.GmailForwards) return false;
      if (GmailSaves != other.GmailSaves) return false;
      if (GmailSecondaryClicks != other.GmailSecondaryClicks) return false;
      if (ImpressionsFromStoreReach != other.ImpressionsFromStoreReach) return false;
      if (Impressions != other.Impressions) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseNullableDoubleEqualityComparer.Equals(InteractionRate, other.InteractionRate)) return false;
      if (Interactions != other.Interactions) return false;
      if(!interactionEventTypes_.Equals(other.interactionEventTypes_)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseNullableDoubleEqualityComparer.Equals(InvalidClickRate, other.InvalidClickRate)) return false;
      if (InvalidClicks != other.InvalidClicks) return false;
      if (MessageChats != other.MessageChats) return false;
      if (MessageImpressions != other.MessageImpressions) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseNullableDoubleEqualityComparer.Equals(MessageChatRate, other.MessageChatRate)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseNullableDoubleEqualityComparer.Equals(MobileFriendlyClicksPercentage, other.MobileFriendlyClicksPercentage)) return false;
      if (OrganicClicks != other.OrganicClicks) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseNullableDoubleEqualityComparer.Equals(OrganicClicksPerQuery, other.OrganicClicksPerQuery)) return false;
      if (OrganicImpressions != other.OrganicImpressions) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseNullableDoubleEqualityComparer.Equals(OrganicImpressionsPerQuery, other.OrganicImpressionsPerQuery)) return false;
      if (OrganicQueries != other.OrganicQueries) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseNullableDoubleEqualityComparer.Equals(PercentNewVisitors, other.PercentNewVisitors)) return false;
      if (PhoneCalls != other.PhoneCalls) return false;
      if (PhoneImpressions != other.PhoneImpressions) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseNullableDoubleEqualityComparer.Equals(PhoneThroughRate, other.PhoneThroughRate)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseNullableDoubleEqualityComparer.Equals(RelativeCtr, other.RelativeCtr)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseNullableDoubleEqualityComparer.Equals(SearchAbsoluteTopImpressionShare, other.SearchAbsoluteTopImpressionShare)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseNullableDoubleEqualityComparer.Equals(SearchBudgetLostAbsoluteTopImpressionShare, other.SearchBudgetLostAbsoluteTopImpressionShare)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseNullableDoubleEqualityComparer.Equals(SearchBudgetLostImpressionShare, other.SearchBudgetLostImpressionShare)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseNullableDoubleEqualityComparer.Equals(SearchBudgetLostTopImpressionShare, other.SearchBudgetLostTopImpressionShare)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseNullableDoubleEqualityComparer.Equals(SearchClickShare, other.SearchClickShare)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseNullableDoubleEqualityComparer.Equals(SearchExactMatchImpressionShare, other.SearchExactMatchImpressionShare)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseNullableDoubleEqualityComparer.Equals(SearchImpressionShare, other.SearchImpressionShare)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseNullableDoubleEqualityComparer.Equals(SearchRankLostAbsoluteTopImpressionShare, other.SearchRankLostAbsoluteTopImpressionShare)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseNullableDoubleEqualityComparer.Equals(SearchRankLostImpressionShare, other.SearchRankLostImpressionShare)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseNullableDoubleEqualityComparer.Equals(SearchRankLostTopImpressionShare, other.SearchRankLostTopImpressionShare)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseNullableDoubleEqualityComparer.Equals(SearchTopImpressionShare, other.SearchTopImpressionShare)) return false;
      if (SpeedScore != other.SpeedScore) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseNullableDoubleEqualityComparer.Equals(TopImpressionPercentage, other.TopImpressionPercentage)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseNullableDoubleEqualityComparer.Equals(ValidAcceleratedMobilePagesClicksPercentage, other.ValidAcceleratedMobilePagesClicksPercentage)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseNullableDoubleEqualityComparer.Equals(ValuePerAllConversions, other.ValuePerAllConversions)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseNullableDoubleEqualityComparer.Equals(ValuePerConversion, other.ValuePerConversion)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseNullableDoubleEqualityComparer.Equals(ValuePerCurrentModelAttributedConversion, other.ValuePerCurrentModelAttributedConversion)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseNullableDoubleEqualityComparer.Equals(VideoQuartile100Rate, other.VideoQuartile100Rate)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseNullableDoubleEqualityComparer.Equals(VideoQuartile25Rate, other.VideoQuartile25Rate)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseNullableDoubleEqualityComparer.Equals(VideoQuartile50Rate, other.VideoQuartile50Rate)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseNullableDoubleEqualityComparer.Equals(VideoQuartile75Rate, other.VideoQuartile75Rate)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseNullableDoubleEqualityComparer.Equals(VideoViewRate, other.VideoViewRate)) return false;
      if (VideoViews != other.VideoViews) return false;
      if (ViewThroughConversions != other.ViewThroughConversions) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (absoluteTopImpressionPercentage_ != null) hash ^= pbc::ProtobufEqualityComparers.BitwiseNullableDoubleEqualityComparer.GetHashCode(AbsoluteTopImpressionPercentage);
      if (activeViewCpm_ != null) hash ^= pbc::ProtobufEqualityComparers.BitwiseNullableDoubleEqualityComparer.GetHashCode(ActiveViewCpm);
      if (activeViewCtr_ != null) hash ^= pbc::ProtobufEqualityComparers.BitwiseNullableDoubleEqualityComparer.GetHashCode(ActiveViewCtr);
      if (activeViewImpressions_ != null) hash ^= ActiveViewImpressions.GetHashCode();
      if (activeViewMeasurability_ != null) hash ^= pbc::ProtobufEqualityComparers.BitwiseNullableDoubleEqualityComparer.GetHashCode(ActiveViewMeasurability);
      if (activeViewMeasurableCostMicros_ != null) hash ^= ActiveViewMeasurableCostMicros.GetHashCode();
      if (activeViewMeasurableImpressions_ != null) hash ^= ActiveViewMeasurableImpressions.GetHashCode();
      if (activeViewViewability_ != null) hash ^= pbc::ProtobufEqualityComparers.BitwiseNullableDoubleEqualityComparer.GetHashCode(ActiveViewViewability);
      if (allConversionsFromInteractionsRate_ != null) hash ^= pbc::ProtobufEqualityComparers.BitwiseNullableDoubleEqualityComparer.GetHashCode(AllConversionsFromInteractionsRate);
      if (allConversionsValue_ != null) hash ^= pbc::ProtobufEqualityComparers.BitwiseNullableDoubleEqualityComparer.GetHashCode(AllConversionsValue);
      if (allConversions_ != null) hash ^= pbc::ProtobufEqualityComparers.BitwiseNullableDoubleEqualityComparer.GetHashCode(AllConversions);
      if (allConversionsValuePerCost_ != null) hash ^= pbc::ProtobufEqualityComparers.BitwiseNullableDoubleEqualityComparer.GetHashCode(AllConversionsValuePerCost);
      if (allConversionsFromClickToCall_ != null) hash ^= pbc::ProtobufEqualityComparers.BitwiseNullableDoubleEqualityComparer.GetHashCode(AllConversionsFromClickToCall);
      if (allConversionsFromDirections_ != null) hash ^= pbc::ProtobufEqualityComparers.BitwiseNullableDoubleEqualityComparer.GetHashCode(AllConversionsFromDirections);
      if (allConversionsFromInteractionsValuePerInteraction_ != null) hash ^= pbc::ProtobufEqualityComparers.BitwiseNullableDoubleEqualityComparer.GetHashCode(AllConversionsFromInteractionsValuePerInteraction);
      if (allConversionsFromMenu_ != null) hash ^= pbc::ProtobufEqualityComparers.BitwiseNullableDoubleEqualityComparer.GetHashCode(AllConversionsFromMenu);
      if (allConversionsFromOrder_ != null) hash ^= pbc::ProtobufEqualityComparers.BitwiseNullableDoubleEqualityComparer.GetHashCode(AllConversionsFromOrder);
      if (allConversionsFromOtherEngagement_ != null) hash ^= pbc::ProtobufEqualityComparers.BitwiseNullableDoubleEqualityComparer.GetHashCode(AllConversionsFromOtherEngagement);
      if (allConversionsFromStoreVisit_ != null) hash ^= pbc::ProtobufEqualityComparers.BitwiseNullableDoubleEqualityComparer.GetHashCode(AllConversionsFromStoreVisit);
      if (allConversionsFromStoreWebsite_ != null) hash ^= pbc::ProtobufEqualityComparers.BitwiseNullableDoubleEqualityComparer.GetHashCode(AllConversionsFromStoreWebsite);
      if (averageCost_ != null) hash ^= pbc::ProtobufEqualityComparers.BitwiseNullableDoubleEqualityComparer.GetHashCode(AverageCost);
      if (averageCpc_ != null) hash ^= pbc::ProtobufEqualityComparers.BitwiseNullableDoubleEqualityComparer.GetHashCode(AverageCpc);
      if (averageCpe_ != null) hash ^= pbc::ProtobufEqualityComparers.BitwiseNullableDoubleEqualityComparer.GetHashCode(AverageCpe);
      if (averageCpm_ != null) hash ^= pbc::ProtobufEqualityComparers.BitwiseNullableDoubleEqualityComparer.GetHashCode(AverageCpm);
      if (averageCpv_ != null) hash ^= pbc::ProtobufEqualityComparers.BitwiseNullableDoubleEqualityComparer.GetHashCode(AverageCpv);
      if (averagePageViews_ != null) hash ^= pbc::ProtobufEqualityComparers.BitwiseNullableDoubleEqualityComparer.GetHashCode(AveragePageViews);
      if (averageTimeOnSite_ != null) hash ^= pbc::ProtobufEqualityComparers.BitwiseNullableDoubleEqualityComparer.GetHashCode(AverageTimeOnSite);
      if (benchmarkAverageMaxCpc_ != null) hash ^= pbc::ProtobufEqualityComparers.BitwiseNullableDoubleEqualityComparer.GetHashCode(BenchmarkAverageMaxCpc);
      if (benchmarkCtr_ != null) hash ^= pbc::ProtobufEqualityComparers.BitwiseNullableDoubleEqualityComparer.GetHashCode(BenchmarkCtr);
      if (bounceRate_ != null) hash ^= pbc::ProtobufEqualityComparers.BitwiseNullableDoubleEqualityComparer.GetHashCode(BounceRate);
      if (clicks_ != null) hash ^= Clicks.GetHashCode();
      if (combinedClicks_ != null) hash ^= CombinedClicks.GetHashCode();
      if (combinedClicksPerQuery_ != null) hash ^= pbc::ProtobufEqualityComparers.BitwiseNullableDoubleEqualityComparer.GetHashCode(CombinedClicksPerQuery);
      if (combinedQueries_ != null) hash ^= CombinedQueries.GetHashCode();
      if (contentBudgetLostImpressionShare_ != null) hash ^= pbc::ProtobufEqualityComparers.BitwiseNullableDoubleEqualityComparer.GetHashCode(ContentBudgetLostImpressionShare);
      if (contentImpressionShare_ != null) hash ^= pbc::ProtobufEqualityComparers.BitwiseNullableDoubleEqualityComparer.GetHashCode(ContentImpressionShare);
      if (conversionLastReceivedRequestDateTime_ != null) hash ^= ConversionLastReceivedRequestDateTime.GetHashCode();
      if (conversionLastConversionDate_ != null) hash ^= ConversionLastConversionDate.GetHashCode();
      if (contentRankLostImpressionShare_ != null) hash ^= pbc::ProtobufEqualityComparers.BitwiseNullableDoubleEqualityComparer.GetHashCode(ContentRankLostImpressionShare);
      if (conversionsFromInteractionsRate_ != null) hash ^= pbc::ProtobufEqualityComparers.BitwiseNullableDoubleEqualityComparer.GetHashCode(ConversionsFromInteractionsRate);
      if (conversionsValue_ != null) hash ^= pbc::ProtobufEqualityComparers.BitwiseNullableDoubleEqualityComparer.GetHashCode(ConversionsValue);
      if (conversionsValuePerCost_ != null) hash ^= pbc::ProtobufEqualityComparers.BitwiseNullableDoubleEqualityComparer.GetHashCode(ConversionsValuePerCost);
      if (conversionsFromInteractionsValuePerInteraction_ != null) hash ^= pbc::ProtobufEqualityComparers.BitwiseNullableDoubleEqualityComparer.GetHashCode(ConversionsFromInteractionsValuePerInteraction);
      if (conversions_ != null) hash ^= pbc::ProtobufEqualityComparers.BitwiseNullableDoubleEqualityComparer.GetHashCode(Conversions);
      if (costMicros_ != null) hash ^= CostMicros.GetHashCode();
      if (costPerAllConversions_ != null) hash ^= pbc::ProtobufEqualityComparers.BitwiseNullableDoubleEqualityComparer.GetHashCode(CostPerAllConversions);
      if (costPerConversion_ != null) hash ^= pbc::ProtobufEqualityComparers.BitwiseNullableDoubleEqualityComparer.GetHashCode(CostPerConversion);
      if (costPerCurrentModelAttributedConversion_ != null) hash ^= pbc::ProtobufEqualityComparers.BitwiseNullableDoubleEqualityComparer.GetHashCode(CostPerCurrentModelAttributedConversion);
      if (crossDeviceConversions_ != null) hash ^= pbc::ProtobufEqualityComparers.BitwiseNullableDoubleEqualityComparer.GetHashCode(CrossDeviceConversions);
      if (ctr_ != null) hash ^= pbc::ProtobufEqualityComparers.BitwiseNullableDoubleEqualityComparer.GetHashCode(Ctr);
      if (currentModelAttributedConversions_ != null) hash ^= pbc::ProtobufEqualityComparers.BitwiseNullableDoubleEqualityComparer.GetHashCode(CurrentModelAttributedConversions);
      if (currentModelAttributedConversionsFromInteractionsRate_ != null) hash ^= pbc::ProtobufEqualityComparers.BitwiseNullableDoubleEqualityComparer.GetHashCode(CurrentModelAttributedConversionsFromInteractionsRate);
      if (currentModelAttributedConversionsFromInteractionsValuePerInteraction_ != null) hash ^= pbc::ProtobufEqualityComparers.BitwiseNullableDoubleEqualityComparer.GetHashCode(CurrentModelAttributedConversionsFromInteractionsValuePerInteraction);
      if (currentModelAttributedConversionsValue_ != null) hash ^= pbc::ProtobufEqualityComparers.BitwiseNullableDoubleEqualityComparer.GetHashCode(CurrentModelAttributedConversionsValue);
      if (currentModelAttributedConversionsValuePerCost_ != null) hash ^= pbc::ProtobufEqualityComparers.BitwiseNullableDoubleEqualityComparer.GetHashCode(CurrentModelAttributedConversionsValuePerCost);
      if (engagementRate_ != null) hash ^= pbc::ProtobufEqualityComparers.BitwiseNullableDoubleEqualityComparer.GetHashCode(EngagementRate);
      if (engagements_ != null) hash ^= Engagements.GetHashCode();
      if (hotelAverageLeadValueMicros_ != null) hash ^= pbc::ProtobufEqualityComparers.BitwiseNullableDoubleEqualityComparer.GetHashCode(HotelAverageLeadValueMicros);
      if (hotelPriceDifferencePercentage_ != null) hash ^= pbc::ProtobufEqualityComparers.BitwiseNullableDoubleEqualityComparer.GetHashCode(HotelPriceDifferencePercentage);
      if (HistoricalCreativeQualityScore != global::Google.Ads.GoogleAds.V3.Enums.QualityScoreBucketEnum.Types.QualityScoreBucket.Unspecified) hash ^= HistoricalCreativeQualityScore.GetHashCode();
      if (HistoricalLandingPageQualityScore != global::Google.Ads.GoogleAds.V3.Enums.QualityScoreBucketEnum.Types.QualityScoreBucket.Unspecified) hash ^= HistoricalLandingPageQualityScore.GetHashCode();
      if (historicalQualityScore_ != null) hash ^= HistoricalQualityScore.GetHashCode();
      if (HistoricalSearchPredictedCtr != global::Google.Ads.GoogleAds.V3.Enums.QualityScoreBucketEnum.Types.QualityScoreBucket.Unspecified) hash ^= HistoricalSearchPredictedCtr.GetHashCode();
      if (gmailForwards_ != null) hash ^= GmailForwards.GetHashCode();
      if (gmailSaves_ != null) hash ^= GmailSaves.GetHashCode();
      if (gmailSecondaryClicks_ != null) hash ^= GmailSecondaryClicks.GetHashCode();
      if (impressionsFromStoreReach_ != null) hash ^= ImpressionsFromStoreReach.GetHashCode();
      if (impressions_ != null) hash ^= Impressions.GetHashCode();
      if (interactionRate_ != null) hash ^= pbc::ProtobufEqualityComparers.BitwiseNullableDoubleEqualityComparer.GetHashCode(InteractionRate);
      if (interactions_ != null) hash ^= Interactions.GetHashCode();
      hash ^= interactionEventTypes_.GetHashCode();
      if (invalidClickRate_ != null) hash ^= pbc::ProtobufEqualityComparers.BitwiseNullableDoubleEqualityComparer.GetHashCode(InvalidClickRate);
      if (invalidClicks_ != null) hash ^= InvalidClicks.GetHashCode();
      if (messageChats_ != null) hash ^= MessageChats.GetHashCode();
      if (messageImpressions_ != null) hash ^= MessageImpressions.GetHashCode();
      if (messageChatRate_ != null) hash ^= pbc::ProtobufEqualityComparers.BitwiseNullableDoubleEqualityComparer.GetHashCode(MessageChatRate);
      if (mobileFriendlyClicksPercentage_ != null) hash ^= pbc::ProtobufEqualityComparers.BitwiseNullableDoubleEqualityComparer.GetHashCode(MobileFriendlyClicksPercentage);
      if (organicClicks_ != null) hash ^= OrganicClicks.GetHashCode();
      if (organicClicksPerQuery_ != null) hash ^= pbc::ProtobufEqualityComparers.BitwiseNullableDoubleEqualityComparer.GetHashCode(OrganicClicksPerQuery);
      if (organicImpressions_ != null) hash ^= OrganicImpressions.GetHashCode();
      if (organicImpressionsPerQuery_ != null) hash ^= pbc::ProtobufEqualityComparers.BitwiseNullableDoubleEqualityComparer.GetHashCode(OrganicImpressionsPerQuery);
      if (organicQueries_ != null) hash ^= OrganicQueries.GetHashCode();
      if (percentNewVisitors_ != null) hash ^= pbc::ProtobufEqualityComparers.BitwiseNullableDoubleEqualityComparer.GetHashCode(PercentNewVisitors);
      if (phoneCalls_ != null) hash ^= PhoneCalls.GetHashCode();
      if (phoneImpressions_ != null) hash ^= PhoneImpressions.GetHashCode();
      if (phoneThroughRate_ != null) hash ^= pbc::ProtobufEqualityComparers.BitwiseNullableDoubleEqualityComparer.GetHashCode(PhoneThroughRate);
      if (relativeCtr_ != null) hash ^= pbc::ProtobufEqualityComparers.BitwiseNullableDoubleEqualityComparer.GetHashCode(RelativeCtr);
      if (searchAbsoluteTopImpressionShare_ != null) hash ^= pbc::ProtobufEqualityComparers.BitwiseNullableDoubleEqualityComparer.GetHashCode(SearchAbsoluteTopImpressionShare);
      if (searchBudgetLostAbsoluteTopImpressionShare_ != null) hash ^= pbc::ProtobufEqualityComparers.BitwiseNullableDoubleEqualityComparer.GetHashCode(SearchBudgetLostAbsoluteTopImpressionShare);
      if (searchBudgetLostImpressionShare_ != null) hash ^= pbc::ProtobufEqualityComparers.BitwiseNullableDoubleEqualityComparer.GetHashCode(SearchBudgetLostImpressionShare);
      if (searchBudgetLostTopImpressionShare_ != null) hash ^= pbc::ProtobufEqualityComparers.BitwiseNullableDoubleEqualityComparer.GetHashCode(SearchBudgetLostTopImpressionShare);
      if (searchClickShare_ != null) hash ^= pbc::ProtobufEqualityComparers.BitwiseNullableDoubleEqualityComparer.GetHashCode(SearchClickShare);
      if (searchExactMatchImpressionShare_ != null) hash ^= pbc::ProtobufEqualityComparers.BitwiseNullableDoubleEqualityComparer.GetHashCode(SearchExactMatchImpressionShare);
      if (searchImpressionShare_ != null) hash ^= pbc::ProtobufEqualityComparers.BitwiseNullableDoubleEqualityComparer.GetHashCode(SearchImpressionShare);
      if (searchRankLostAbsoluteTopImpressionShare_ != null) hash ^= pbc::ProtobufEqualityComparers.BitwiseNullableDoubleEqualityComparer.GetHashCode(SearchRankLostAbsoluteTopImpressionShare);
      if (searchRankLostImpressionShare_ != null) hash ^= pbc::ProtobufEqualityComparers.BitwiseNullableDoubleEqualityComparer.GetHashCode(SearchRankLostImpressionShare);
      if (searchRankLostTopImpressionShare_ != null) hash ^= pbc::ProtobufEqualityComparers.BitwiseNullableDoubleEqualityComparer.GetHashCode(SearchRankLostTopImpressionShare);
      if (searchTopImpressionShare_ != null) hash ^= pbc::ProtobufEqualityComparers.BitwiseNullableDoubleEqualityComparer.GetHashCode(SearchTopImpressionShare);
      if (speedScore_ != null) hash ^= SpeedScore.GetHashCode();
      if (topImpressionPercentage_ != null) hash ^= pbc::ProtobufEqualityComparers.BitwiseNullableDoubleEqualityComparer.GetHashCode(TopImpressionPercentage);
      if (validAcceleratedMobilePagesClicksPercentage_ != null) hash ^= pbc::ProtobufEqualityComparers.BitwiseNullableDoubleEqualityComparer.GetHashCode(ValidAcceleratedMobilePagesClicksPercentage);
      if (valuePerAllConversions_ != null) hash ^= pbc::ProtobufEqualityComparers.BitwiseNullableDoubleEqualityComparer.GetHashCode(ValuePerAllConversions);
      if (valuePerConversion_ != null) hash ^= pbc::ProtobufEqualityComparers.BitwiseNullableDoubleEqualityComparer.GetHashCode(ValuePerConversion);
      if (valuePerCurrentModelAttributedConversion_ != null) hash ^= pbc::ProtobufEqualityComparers.BitwiseNullableDoubleEqualityComparer.GetHashCode(ValuePerCurrentModelAttributedConversion);
      if (videoQuartile100Rate_ != null) hash ^= pbc::ProtobufEqualityComparers.BitwiseNullableDoubleEqualityComparer.GetHashCode(VideoQuartile100Rate);
      if (videoQuartile25Rate_ != null) hash ^= pbc::ProtobufEqualityComparers.BitwiseNullableDoubleEqualityComparer.GetHashCode(VideoQuartile25Rate);
      if (videoQuartile50Rate_ != null) hash ^= pbc::ProtobufEqualityComparers.BitwiseNullableDoubleEqualityComparer.GetHashCode(VideoQuartile50Rate);
      if (videoQuartile75Rate_ != null) hash ^= pbc::ProtobufEqualityComparers.BitwiseNullableDoubleEqualityComparer.GetHashCode(VideoQuartile75Rate);
      if (videoViewRate_ != null) hash ^= pbc::ProtobufEqualityComparers.BitwiseNullableDoubleEqualityComparer.GetHashCode(VideoViewRate);
      if (videoViews_ != null) hash ^= VideoViews.GetHashCode();
      if (viewThroughConversions_ != null) hash ^= ViewThroughConversions.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (activeViewCpm_ != null) {
        _single_activeViewCpm_codec.WriteTagAndValue(output, ActiveViewCpm);
      }
      if (activeViewImpressions_ != null) {
        _single_activeViewImpressions_codec.WriteTagAndValue(output, ActiveViewImpressions);
      }
      if (activeViewMeasurableCostMicros_ != null) {
        _single_activeViewMeasurableCostMicros_codec.WriteTagAndValue(output, ActiveViewMeasurableCostMicros);
      }
      if (activeViewMeasurableImpressions_ != null) {
        _single_activeViewMeasurableImpressions_codec.WriteTagAndValue(output, ActiveViewMeasurableImpressions);
      }
      if (allConversions_ != null) {
        _single_allConversions_codec.WriteTagAndValue(output, AllConversions);
      }
      if (averageCost_ != null) {
        _single_averageCost_codec.WriteTagAndValue(output, AverageCost);
      }
      if (averageCpc_ != null) {
        _single_averageCpc_codec.WriteTagAndValue(output, AverageCpc);
      }
      if (averageCpm_ != null) {
        _single_averageCpm_codec.WriteTagAndValue(output, AverageCpm);
      }
      if (averageCpv_ != null) {
        _single_averageCpv_codec.WriteTagAndValue(output, AverageCpv);
      }
      if (benchmarkAverageMaxCpc_ != null) {
        _single_benchmarkAverageMaxCpc_codec.WriteTagAndValue(output, BenchmarkAverageMaxCpc);
      }
      if (bounceRate_ != null) {
        _single_bounceRate_codec.WriteTagAndValue(output, BounceRate);
      }
      if (clicks_ != null) {
        _single_clicks_codec.WriteTagAndValue(output, Clicks);
      }
      if (contentBudgetLostImpressionShare_ != null) {
        _single_contentBudgetLostImpressionShare_codec.WriteTagAndValue(output, ContentBudgetLostImpressionShare);
      }
      if (contentImpressionShare_ != null) {
        _single_contentImpressionShare_codec.WriteTagAndValue(output, ContentImpressionShare);
      }
      if (contentRankLostImpressionShare_ != null) {
        _single_contentRankLostImpressionShare_codec.WriteTagAndValue(output, ContentRankLostImpressionShare);
      }
      if (conversions_ != null) {
        _single_conversions_codec.WriteTagAndValue(output, Conversions);
      }
      if (costMicros_ != null) {
        _single_costMicros_codec.WriteTagAndValue(output, CostMicros);
      }
      if (costPerConversion_ != null) {
        _single_costPerConversion_codec.WriteTagAndValue(output, CostPerConversion);
      }
      if (crossDeviceConversions_ != null) {
        _single_crossDeviceConversions_codec.WriteTagAndValue(output, CrossDeviceConversions);
      }
      if (ctr_ != null) {
        _single_ctr_codec.WriteTagAndValue(output, Ctr);
      }
      if (engagementRate_ != null) {
        _single_engagementRate_codec.WriteTagAndValue(output, EngagementRate);
      }
      if (engagements_ != null) {
        _single_engagements_codec.WriteTagAndValue(output, Engagements);
      }
      if (impressions_ != null) {
        _single_impressions_codec.WriteTagAndValue(output, Impressions);
      }
      if (interactionRate_ != null) {
        _single_interactionRate_codec.WriteTagAndValue(output, InteractionRate);
      }
      if (interactions_ != null) {
        _single_interactions_codec.WriteTagAndValue(output, Interactions);
      }
      if (invalidClickRate_ != null) {
        _single_invalidClickRate_codec.WriteTagAndValue(output, InvalidClickRate);
      }
      if (invalidClicks_ != null) {
        _single_invalidClicks_codec.WriteTagAndValue(output, InvalidClicks);
      }
      if (percentNewVisitors_ != null) {
        _single_percentNewVisitors_codec.WriteTagAndValue(output, PercentNewVisitors);
      }
      if (phoneCalls_ != null) {
        _single_phoneCalls_codec.WriteTagAndValue(output, PhoneCalls);
      }
      if (phoneImpressions_ != null) {
        _single_phoneImpressions_codec.WriteTagAndValue(output, PhoneImpressions);
      }
      if (phoneThroughRate_ != null) {
        _single_phoneThroughRate_codec.WriteTagAndValue(output, PhoneThroughRate);
      }
      if (relativeCtr_ != null) {
        _single_relativeCtr_codec.WriteTagAndValue(output, RelativeCtr);
      }
      if (searchBudgetLostImpressionShare_ != null) {
        _single_searchBudgetLostImpressionShare_codec.WriteTagAndValue(output, SearchBudgetLostImpressionShare);
      }
      if (searchClickShare_ != null) {
        _single_searchClickShare_codec.WriteTagAndValue(output, SearchClickShare);
      }
      if (searchExactMatchImpressionShare_ != null) {
        _single_searchExactMatchImpressionShare_codec.WriteTagAndValue(output, SearchExactMatchImpressionShare);
      }
      if (searchImpressionShare_ != null) {
        _single_searchImpressionShare_codec.WriteTagAndValue(output, SearchImpressionShare);
      }
      if (searchRankLostImpressionShare_ != null) {
        _single_searchRankLostImpressionShare_codec.WriteTagAndValue(output, SearchRankLostImpressionShare);
      }
      if (valuePerAllConversions_ != null) {
        _single_valuePerAllConversions_codec.WriteTagAndValue(output, ValuePerAllConversions);
      }
      if (valuePerConversion_ != null) {
        _single_valuePerConversion_codec.WriteTagAndValue(output, ValuePerConversion);
      }
      if (videoQuartile100Rate_ != null) {
        _single_videoQuartile100Rate_codec.WriteTagAndValue(output, VideoQuartile100Rate);
      }
      if (videoQuartile25Rate_ != null) {
        _single_videoQuartile25Rate_codec.WriteTagAndValue(output, VideoQuartile25Rate);
      }
      if (videoQuartile50Rate_ != null) {
        _single_videoQuartile50Rate_codec.WriteTagAndValue(output, VideoQuartile50Rate);
      }
      if (videoQuartile75Rate_ != null) {
        _single_videoQuartile75Rate_codec.WriteTagAndValue(output, VideoQuartile75Rate);
      }
      if (videoViewRate_ != null) {
        _single_videoViewRate_codec.WriteTagAndValue(output, VideoViewRate);
      }
      if (videoViews_ != null) {
        _single_videoViews_codec.WriteTagAndValue(output, VideoViews);
      }
      if (viewThroughConversions_ != null) {
        _single_viewThroughConversions_codec.WriteTagAndValue(output, ViewThroughConversions);
      }
      if (allConversionsValuePerCost_ != null) {
        _single_allConversionsValuePerCost_codec.WriteTagAndValue(output, AllConversionsValuePerCost);
      }
      if (allConversionsFromInteractionsRate_ != null) {
        _single_allConversionsFromInteractionsRate_codec.WriteTagAndValue(output, AllConversionsFromInteractionsRate);
      }
      if (allConversionsValue_ != null) {
        _single_allConversionsValue_codec.WriteTagAndValue(output, AllConversionsValue);
      }
      if (allConversionsFromInteractionsValuePerInteraction_ != null) {
        _single_allConversionsFromInteractionsValuePerInteraction_codec.WriteTagAndValue(output, AllConversionsFromInteractionsValuePerInteraction);
      }
      if (costPerAllConversions_ != null) {
        _single_costPerAllConversions_codec.WriteTagAndValue(output, CostPerAllConversions);
      }
      if (conversionsFromInteractionsRate_ != null) {
        _single_conversionsFromInteractionsRate_codec.WriteTagAndValue(output, ConversionsFromInteractionsRate);
      }
      if (conversionsValue_ != null) {
        _single_conversionsValue_codec.WriteTagAndValue(output, ConversionsValue);
      }
      if (conversionsValuePerCost_ != null) {
        _single_conversionsValuePerCost_codec.WriteTagAndValue(output, ConversionsValuePerCost);
      }
      if (conversionsFromInteractionsValuePerInteraction_ != null) {
        _single_conversionsFromInteractionsValuePerInteraction_codec.WriteTagAndValue(output, ConversionsFromInteractionsValuePerInteraction);
      }
      if (conversionLastReceivedRequestDateTime_ != null) {
        _single_conversionLastReceivedRequestDateTime_codec.WriteTagAndValue(output, ConversionLastReceivedRequestDateTime);
      }
      if (conversionLastConversionDate_ != null) {
        _single_conversionLastConversionDate_codec.WriteTagAndValue(output, ConversionLastConversionDate);
      }
      if (hotelAverageLeadValueMicros_ != null) {
        _single_hotelAverageLeadValueMicros_codec.WriteTagAndValue(output, HotelAverageLeadValueMicros);
      }
      if (benchmarkCtr_ != null) {
        _single_benchmarkCtr_codec.WriteTagAndValue(output, BenchmarkCtr);
      }
      if (searchAbsoluteTopImpressionShare_ != null) {
        _single_searchAbsoluteTopImpressionShare_codec.WriteTagAndValue(output, SearchAbsoluteTopImpressionShare);
      }
      if (activeViewCtr_ != null) {
        _single_activeViewCtr_codec.WriteTagAndValue(output, ActiveViewCtr);
      }
      if (HistoricalCreativeQualityScore != global::Google.Ads.GoogleAds.V3.Enums.QualityScoreBucketEnum.Types.QualityScoreBucket.Unspecified) {
        output.WriteRawTag(128, 5);
        output.WriteEnum((int) HistoricalCreativeQualityScore);
      }
      if (HistoricalLandingPageQualityScore != global::Google.Ads.GoogleAds.V3.Enums.QualityScoreBucketEnum.Types.QualityScoreBucket.Unspecified) {
        output.WriteRawTag(136, 5);
        output.WriteEnum((int) HistoricalLandingPageQualityScore);
      }
      if (historicalQualityScore_ != null) {
        _single_historicalQualityScore_codec.WriteTagAndValue(output, HistoricalQualityScore);
      }
      if (HistoricalSearchPredictedCtr != global::Google.Ads.GoogleAds.V3.Enums.QualityScoreBucketEnum.Types.QualityScoreBucket.Unspecified) {
        output.WriteRawTag(152, 5);
        output.WriteEnum((int) HistoricalSearchPredictedCtr);
      }
      if (averageTimeOnSite_ != null) {
        _single_averageTimeOnSite_codec.WriteTagAndValue(output, AverageTimeOnSite);
      }
      if (gmailForwards_ != null) {
        _single_gmailForwards_codec.WriteTagAndValue(output, GmailForwards);
      }
      if (gmailSaves_ != null) {
        _single_gmailSaves_codec.WriteTagAndValue(output, GmailSaves);
      }
      if (gmailSecondaryClicks_ != null) {
        _single_gmailSecondaryClicks_codec.WriteTagAndValue(output, GmailSecondaryClicks);
      }
      if (searchBudgetLostAbsoluteTopImpressionShare_ != null) {
        _single_searchBudgetLostAbsoluteTopImpressionShare_codec.WriteTagAndValue(output, SearchBudgetLostAbsoluteTopImpressionShare);
      }
      if (searchBudgetLostTopImpressionShare_ != null) {
        _single_searchBudgetLostTopImpressionShare_codec.WriteTagAndValue(output, SearchBudgetLostTopImpressionShare);
      }
      if (searchRankLostAbsoluteTopImpressionShare_ != null) {
        _single_searchRankLostAbsoluteTopImpressionShare_codec.WriteTagAndValue(output, SearchRankLostAbsoluteTopImpressionShare);
      }
      if (searchRankLostTopImpressionShare_ != null) {
        _single_searchRankLostTopImpressionShare_codec.WriteTagAndValue(output, SearchRankLostTopImpressionShare);
      }
      if (searchTopImpressionShare_ != null) {
        _single_searchTopImpressionShare_codec.WriteTagAndValue(output, SearchTopImpressionShare);
      }
      if (topImpressionPercentage_ != null) {
        _single_topImpressionPercentage_codec.WriteTagAndValue(output, TopImpressionPercentage);
      }
      if (valuePerCurrentModelAttributedConversion_ != null) {
        _single_valuePerCurrentModelAttributedConversion_codec.WriteTagAndValue(output, ValuePerCurrentModelAttributedConversion);
      }
      if (absoluteTopImpressionPercentage_ != null) {
        _single_absoluteTopImpressionPercentage_codec.WriteTagAndValue(output, AbsoluteTopImpressionPercentage);
      }
      if (activeViewMeasurability_ != null) {
        _single_activeViewMeasurability_codec.WriteTagAndValue(output, ActiveViewMeasurability);
      }
      if (activeViewViewability_ != null) {
        _single_activeViewViewability_codec.WriteTagAndValue(output, ActiveViewViewability);
      }
      if (averageCpe_ != null) {
        _single_averageCpe_codec.WriteTagAndValue(output, AverageCpe);
      }
      if (averagePageViews_ != null) {
        _single_averagePageViews_codec.WriteTagAndValue(output, AveragePageViews);
      }
      interactionEventTypes_.WriteTo(output, _repeated_interactionEventTypes_codec);
      if (currentModelAttributedConversions_ != null) {
        _single_currentModelAttributedConversions_codec.WriteTagAndValue(output, CurrentModelAttributedConversions);
      }
      if (currentModelAttributedConversionsFromInteractionsRate_ != null) {
        _single_currentModelAttributedConversionsFromInteractionsRate_codec.WriteTagAndValue(output, CurrentModelAttributedConversionsFromInteractionsRate);
      }
      if (currentModelAttributedConversionsFromInteractionsValuePerInteraction_ != null) {
        _single_currentModelAttributedConversionsFromInteractionsValuePerInteraction_codec.WriteTagAndValue(output, CurrentModelAttributedConversionsFromInteractionsValuePerInteraction);
      }
      if (currentModelAttributedConversionsValue_ != null) {
        _single_currentModelAttributedConversionsValue_codec.WriteTagAndValue(output, CurrentModelAttributedConversionsValue);
      }
      if (currentModelAttributedConversionsValuePerCost_ != null) {
        _single_currentModelAttributedConversionsValuePerCost_codec.WriteTagAndValue(output, CurrentModelAttributedConversionsValuePerCost);
      }
      if (costPerCurrentModelAttributedConversion_ != null) {
        _single_costPerCurrentModelAttributedConversion_codec.WriteTagAndValue(output, CostPerCurrentModelAttributedConversion);
      }
      if (speedScore_ != null) {
        _single_speedScore_codec.WriteTagAndValue(output, SpeedScore);
      }
      if (validAcceleratedMobilePagesClicksPercentage_ != null) {
        _single_validAcceleratedMobilePagesClicksPercentage_codec.WriteTagAndValue(output, ValidAcceleratedMobilePagesClicksPercentage);
      }
      if (mobileFriendlyClicksPercentage_ != null) {
        _single_mobileFriendlyClicksPercentage_codec.WriteTagAndValue(output, MobileFriendlyClicksPercentage);
      }
      if (organicClicks_ != null) {
        _single_organicClicks_codec.WriteTagAndValue(output, OrganicClicks);
      }
      if (organicClicksPerQuery_ != null) {
        _single_organicClicksPerQuery_codec.WriteTagAndValue(output, OrganicClicksPerQuery);
      }
      if (organicImpressions_ != null) {
        _single_organicImpressions_codec.WriteTagAndValue(output, OrganicImpressions);
      }
      if (organicImpressionsPerQuery_ != null) {
        _single_organicImpressionsPerQuery_codec.WriteTagAndValue(output, OrganicImpressionsPerQuery);
      }
      if (organicQueries_ != null) {
        _single_organicQueries_codec.WriteTagAndValue(output, OrganicQueries);
      }
      if (combinedClicks_ != null) {
        _single_combinedClicks_codec.WriteTagAndValue(output, CombinedClicks);
      }
      if (combinedClicksPerQuery_ != null) {
        _single_combinedClicksPerQuery_codec.WriteTagAndValue(output, CombinedClicksPerQuery);
      }
      if (combinedQueries_ != null) {
        _single_combinedQueries_codec.WriteTagAndValue(output, CombinedQueries);
      }
      if (allConversionsFromClickToCall_ != null) {
        _single_allConversionsFromClickToCall_codec.WriteTagAndValue(output, AllConversionsFromClickToCall);
      }
      if (allConversionsFromDirections_ != null) {
        _single_allConversionsFromDirections_codec.WriteTagAndValue(output, AllConversionsFromDirections);
      }
      if (allConversionsFromMenu_ != null) {
        _single_allConversionsFromMenu_codec.WriteTagAndValue(output, AllConversionsFromMenu);
      }
      if (allConversionsFromOrder_ != null) {
        _single_allConversionsFromOrder_codec.WriteTagAndValue(output, AllConversionsFromOrder);
      }
      if (allConversionsFromOtherEngagement_ != null) {
        _single_allConversionsFromOtherEngagement_codec.WriteTagAndValue(output, AllConversionsFromOtherEngagement);
      }
      if (allConversionsFromStoreVisit_ != null) {
        _single_allConversionsFromStoreVisit_codec.WriteTagAndValue(output, AllConversionsFromStoreVisit);
      }
      if (allConversionsFromStoreWebsite_ != null) {
        _single_allConversionsFromStoreWebsite_codec.WriteTagAndValue(output, AllConversionsFromStoreWebsite);
      }
      if (impressionsFromStoreReach_ != null) {
        _single_impressionsFromStoreReach_codec.WriteTagAndValue(output, ImpressionsFromStoreReach);
      }
      if (messageChats_ != null) {
        _single_messageChats_codec.WriteTagAndValue(output, MessageChats);
      }
      if (messageImpressions_ != null) {
        _single_messageImpressions_codec.WriteTagAndValue(output, MessageImpressions);
      }
      if (messageChatRate_ != null) {
        _single_messageChatRate_codec.WriteTagAndValue(output, MessageChatRate);
      }
      if (hotelPriceDifferencePercentage_ != null) {
        _single_hotelPriceDifferencePercentage_codec.WriteTagAndValue(output, HotelPriceDifferencePercentage);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (absoluteTopImpressionPercentage_ != null) {
        size += _single_absoluteTopImpressionPercentage_codec.CalculateSizeWithTag(AbsoluteTopImpressionPercentage);
      }
      if (activeViewCpm_ != null) {
        size += _single_activeViewCpm_codec.CalculateSizeWithTag(ActiveViewCpm);
      }
      if (activeViewCtr_ != null) {
        size += _single_activeViewCtr_codec.CalculateSizeWithTag(ActiveViewCtr);
      }
      if (activeViewImpressions_ != null) {
        size += _single_activeViewImpressions_codec.CalculateSizeWithTag(ActiveViewImpressions);
      }
      if (activeViewMeasurability_ != null) {
        size += _single_activeViewMeasurability_codec.CalculateSizeWithTag(ActiveViewMeasurability);
      }
      if (activeViewMeasurableCostMicros_ != null) {
        size += _single_activeViewMeasurableCostMicros_codec.CalculateSizeWithTag(ActiveViewMeasurableCostMicros);
      }
      if (activeViewMeasurableImpressions_ != null) {
        size += _single_activeViewMeasurableImpressions_codec.CalculateSizeWithTag(ActiveViewMeasurableImpressions);
      }
      if (activeViewViewability_ != null) {
        size += _single_activeViewViewability_codec.CalculateSizeWithTag(ActiveViewViewability);
      }
      if (allConversionsFromInteractionsRate_ != null) {
        size += _single_allConversionsFromInteractionsRate_codec.CalculateSizeWithTag(AllConversionsFromInteractionsRate);
      }
      if (allConversionsValue_ != null) {
        size += _single_allConversionsValue_codec.CalculateSizeWithTag(AllConversionsValue);
      }
      if (allConversions_ != null) {
        size += _single_allConversions_codec.CalculateSizeWithTag(AllConversions);
      }
      if (allConversionsValuePerCost_ != null) {
        size += _single_allConversionsValuePerCost_codec.CalculateSizeWithTag(AllConversionsValuePerCost);
      }
      if (allConversionsFromClickToCall_ != null) {
        size += _single_allConversionsFromClickToCall_codec.CalculateSizeWithTag(AllConversionsFromClickToCall);
      }
      if (allConversionsFromDirections_ != null) {
        size += _single_allConversionsFromDirections_codec.CalculateSizeWithTag(AllConversionsFromDirections);
      }
      if (allConversionsFromInteractionsValuePerInteraction_ != null) {
        size += _single_allConversionsFromInteractionsValuePerInteraction_codec.CalculateSizeWithTag(AllConversionsFromInteractionsValuePerInteraction);
      }
      if (allConversionsFromMenu_ != null) {
        size += _single_allConversionsFromMenu_codec.CalculateSizeWithTag(AllConversionsFromMenu);
      }
      if (allConversionsFromOrder_ != null) {
        size += _single_allConversionsFromOrder_codec.CalculateSizeWithTag(AllConversionsFromOrder);
      }
      if (allConversionsFromOtherEngagement_ != null) {
        size += _single_allConversionsFromOtherEngagement_codec.CalculateSizeWithTag(AllConversionsFromOtherEngagement);
      }
      if (allConversionsFromStoreVisit_ != null) {
        size += _single_allConversionsFromStoreVisit_codec.CalculateSizeWithTag(AllConversionsFromStoreVisit);
      }
      if (allConversionsFromStoreWebsite_ != null) {
        size += _single_allConversionsFromStoreWebsite_codec.CalculateSizeWithTag(AllConversionsFromStoreWebsite);
      }
      if (averageCost_ != null) {
        size += _single_averageCost_codec.CalculateSizeWithTag(AverageCost);
      }
      if (averageCpc_ != null) {
        size += _single_averageCpc_codec.CalculateSizeWithTag(AverageCpc);
      }
      if (averageCpe_ != null) {
        size += _single_averageCpe_codec.CalculateSizeWithTag(AverageCpe);
      }
      if (averageCpm_ != null) {
        size += _single_averageCpm_codec.CalculateSizeWithTag(AverageCpm);
      }
      if (averageCpv_ != null) {
        size += _single_averageCpv_codec.CalculateSizeWithTag(AverageCpv);
      }
      if (averagePageViews_ != null) {
        size += _single_averagePageViews_codec.CalculateSizeWithTag(AveragePageViews);
      }
      if (averageTimeOnSite_ != null) {
        size += _single_averageTimeOnSite_codec.CalculateSizeWithTag(AverageTimeOnSite);
      }
      if (benchmarkAverageMaxCpc_ != null) {
        size += _single_benchmarkAverageMaxCpc_codec.CalculateSizeWithTag(BenchmarkAverageMaxCpc);
      }
      if (benchmarkCtr_ != null) {
        size += _single_benchmarkCtr_codec.CalculateSizeWithTag(BenchmarkCtr);
      }
      if (bounceRate_ != null) {
        size += _single_bounceRate_codec.CalculateSizeWithTag(BounceRate);
      }
      if (clicks_ != null) {
        size += _single_clicks_codec.CalculateSizeWithTag(Clicks);
      }
      if (combinedClicks_ != null) {
        size += _single_combinedClicks_codec.CalculateSizeWithTag(CombinedClicks);
      }
      if (combinedClicksPerQuery_ != null) {
        size += _single_combinedClicksPerQuery_codec.CalculateSizeWithTag(CombinedClicksPerQuery);
      }
      if (combinedQueries_ != null) {
        size += _single_combinedQueries_codec.CalculateSizeWithTag(CombinedQueries);
      }
      if (contentBudgetLostImpressionShare_ != null) {
        size += _single_contentBudgetLostImpressionShare_codec.CalculateSizeWithTag(ContentBudgetLostImpressionShare);
      }
      if (contentImpressionShare_ != null) {
        size += _single_contentImpressionShare_codec.CalculateSizeWithTag(ContentImpressionShare);
      }
      if (conversionLastReceivedRequestDateTime_ != null) {
        size += _single_conversionLastReceivedRequestDateTime_codec.CalculateSizeWithTag(ConversionLastReceivedRequestDateTime);
      }
      if (conversionLastConversionDate_ != null) {
        size += _single_conversionLastConversionDate_codec.CalculateSizeWithTag(ConversionLastConversionDate);
      }
      if (contentRankLostImpressionShare_ != null) {
        size += _single_contentRankLostImpressionShare_codec.CalculateSizeWithTag(ContentRankLostImpressionShare);
      }
      if (conversionsFromInteractionsRate_ != null) {
        size += _single_conversionsFromInteractionsRate_codec.CalculateSizeWithTag(ConversionsFromInteractionsRate);
      }
      if (conversionsValue_ != null) {
        size += _single_conversionsValue_codec.CalculateSizeWithTag(ConversionsValue);
      }
      if (conversionsValuePerCost_ != null) {
        size += _single_conversionsValuePerCost_codec.CalculateSizeWithTag(ConversionsValuePerCost);
      }
      if (conversionsFromInteractionsValuePerInteraction_ != null) {
        size += _single_conversionsFromInteractionsValuePerInteraction_codec.CalculateSizeWithTag(ConversionsFromInteractionsValuePerInteraction);
      }
      if (conversions_ != null) {
        size += _single_conversions_codec.CalculateSizeWithTag(Conversions);
      }
      if (costMicros_ != null) {
        size += _single_costMicros_codec.CalculateSizeWithTag(CostMicros);
      }
      if (costPerAllConversions_ != null) {
        size += _single_costPerAllConversions_codec.CalculateSizeWithTag(CostPerAllConversions);
      }
      if (costPerConversion_ != null) {
        size += _single_costPerConversion_codec.CalculateSizeWithTag(CostPerConversion);
      }
      if (costPerCurrentModelAttributedConversion_ != null) {
        size += _single_costPerCurrentModelAttributedConversion_codec.CalculateSizeWithTag(CostPerCurrentModelAttributedConversion);
      }
      if (crossDeviceConversions_ != null) {
        size += _single_crossDeviceConversions_codec.CalculateSizeWithTag(CrossDeviceConversions);
      }
      if (ctr_ != null) {
        size += _single_ctr_codec.CalculateSizeWithTag(Ctr);
      }
      if (currentModelAttributedConversions_ != null) {
        size += _single_currentModelAttributedConversions_codec.CalculateSizeWithTag(CurrentModelAttributedConversions);
      }
      if (currentModelAttributedConversionsFromInteractionsRate_ != null) {
        size += _single_currentModelAttributedConversionsFromInteractionsRate_codec.CalculateSizeWithTag(CurrentModelAttributedConversionsFromInteractionsRate);
      }
      if (currentModelAttributedConversionsFromInteractionsValuePerInteraction_ != null) {
        size += _single_currentModelAttributedConversionsFromInteractionsValuePerInteraction_codec.CalculateSizeWithTag(CurrentModelAttributedConversionsFromInteractionsValuePerInteraction);
      }
      if (currentModelAttributedConversionsValue_ != null) {
        size += _single_currentModelAttributedConversionsValue_codec.CalculateSizeWithTag(CurrentModelAttributedConversionsValue);
      }
      if (currentModelAttributedConversionsValuePerCost_ != null) {
        size += _single_currentModelAttributedConversionsValuePerCost_codec.CalculateSizeWithTag(CurrentModelAttributedConversionsValuePerCost);
      }
      if (engagementRate_ != null) {
        size += _single_engagementRate_codec.CalculateSizeWithTag(EngagementRate);
      }
      if (engagements_ != null) {
        size += _single_engagements_codec.CalculateSizeWithTag(Engagements);
      }
      if (hotelAverageLeadValueMicros_ != null) {
        size += _single_hotelAverageLeadValueMicros_codec.CalculateSizeWithTag(HotelAverageLeadValueMicros);
      }
      if (hotelPriceDifferencePercentage_ != null) {
        size += _single_hotelPriceDifferencePercentage_codec.CalculateSizeWithTag(HotelPriceDifferencePercentage);
      }
      if (HistoricalCreativeQualityScore != global::Google.Ads.GoogleAds.V3.Enums.QualityScoreBucketEnum.Types.QualityScoreBucket.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) HistoricalCreativeQualityScore);
      }
      if (HistoricalLandingPageQualityScore != global::Google.Ads.GoogleAds.V3.Enums.QualityScoreBucketEnum.Types.QualityScoreBucket.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) HistoricalLandingPageQualityScore);
      }
      if (historicalQualityScore_ != null) {
        size += _single_historicalQualityScore_codec.CalculateSizeWithTag(HistoricalQualityScore);
      }
      if (HistoricalSearchPredictedCtr != global::Google.Ads.GoogleAds.V3.Enums.QualityScoreBucketEnum.Types.QualityScoreBucket.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) HistoricalSearchPredictedCtr);
      }
      if (gmailForwards_ != null) {
        size += _single_gmailForwards_codec.CalculateSizeWithTag(GmailForwards);
      }
      if (gmailSaves_ != null) {
        size += _single_gmailSaves_codec.CalculateSizeWithTag(GmailSaves);
      }
      if (gmailSecondaryClicks_ != null) {
        size += _single_gmailSecondaryClicks_codec.CalculateSizeWithTag(GmailSecondaryClicks);
      }
      if (impressionsFromStoreReach_ != null) {
        size += _single_impressionsFromStoreReach_codec.CalculateSizeWithTag(ImpressionsFromStoreReach);
      }
      if (impressions_ != null) {
        size += _single_impressions_codec.CalculateSizeWithTag(Impressions);
      }
      if (interactionRate_ != null) {
        size += _single_interactionRate_codec.CalculateSizeWithTag(InteractionRate);
      }
      if (interactions_ != null) {
        size += _single_interactions_codec.CalculateSizeWithTag(Interactions);
      }
      size += interactionEventTypes_.CalculateSize(_repeated_interactionEventTypes_codec);
      if (invalidClickRate_ != null) {
        size += _single_invalidClickRate_codec.CalculateSizeWithTag(InvalidClickRate);
      }
      if (invalidClicks_ != null) {
        size += _single_invalidClicks_codec.CalculateSizeWithTag(InvalidClicks);
      }
      if (messageChats_ != null) {
        size += _single_messageChats_codec.CalculateSizeWithTag(MessageChats);
      }
      if (messageImpressions_ != null) {
        size += _single_messageImpressions_codec.CalculateSizeWithTag(MessageImpressions);
      }
      if (messageChatRate_ != null) {
        size += _single_messageChatRate_codec.CalculateSizeWithTag(MessageChatRate);
      }
      if (mobileFriendlyClicksPercentage_ != null) {
        size += _single_mobileFriendlyClicksPercentage_codec.CalculateSizeWithTag(MobileFriendlyClicksPercentage);
      }
      if (organicClicks_ != null) {
        size += _single_organicClicks_codec.CalculateSizeWithTag(OrganicClicks);
      }
      if (organicClicksPerQuery_ != null) {
        size += _single_organicClicksPerQuery_codec.CalculateSizeWithTag(OrganicClicksPerQuery);
      }
      if (organicImpressions_ != null) {
        size += _single_organicImpressions_codec.CalculateSizeWithTag(OrganicImpressions);
      }
      if (organicImpressionsPerQuery_ != null) {
        size += _single_organicImpressionsPerQuery_codec.CalculateSizeWithTag(OrganicImpressionsPerQuery);
      }
      if (organicQueries_ != null) {
        size += _single_organicQueries_codec.CalculateSizeWithTag(OrganicQueries);
      }
      if (percentNewVisitors_ != null) {
        size += _single_percentNewVisitors_codec.CalculateSizeWithTag(PercentNewVisitors);
      }
      if (phoneCalls_ != null) {
        size += _single_phoneCalls_codec.CalculateSizeWithTag(PhoneCalls);
      }
      if (phoneImpressions_ != null) {
        size += _single_phoneImpressions_codec.CalculateSizeWithTag(PhoneImpressions);
      }
      if (phoneThroughRate_ != null) {
        size += _single_phoneThroughRate_codec.CalculateSizeWithTag(PhoneThroughRate);
      }
      if (relativeCtr_ != null) {
        size += _single_relativeCtr_codec.CalculateSizeWithTag(RelativeCtr);
      }
      if (searchAbsoluteTopImpressionShare_ != null) {
        size += _single_searchAbsoluteTopImpressionShare_codec.CalculateSizeWithTag(SearchAbsoluteTopImpressionShare);
      }
      if (searchBudgetLostAbsoluteTopImpressionShare_ != null) {
        size += _single_searchBudgetLostAbsoluteTopImpressionShare_codec.CalculateSizeWithTag(SearchBudgetLostAbsoluteTopImpressionShare);
      }
      if (searchBudgetLostImpressionShare_ != null) {
        size += _single_searchBudgetLostImpressionShare_codec.CalculateSizeWithTag(SearchBudgetLostImpressionShare);
      }
      if (searchBudgetLostTopImpressionShare_ != null) {
        size += _single_searchBudgetLostTopImpressionShare_codec.CalculateSizeWithTag(SearchBudgetLostTopImpressionShare);
      }
      if (searchClickShare_ != null) {
        size += _single_searchClickShare_codec.CalculateSizeWithTag(SearchClickShare);
      }
      if (searchExactMatchImpressionShare_ != null) {
        size += _single_searchExactMatchImpressionShare_codec.CalculateSizeWithTag(SearchExactMatchImpressionShare);
      }
      if (searchImpressionShare_ != null) {
        size += _single_searchImpressionShare_codec.CalculateSizeWithTag(SearchImpressionShare);
      }
      if (searchRankLostAbsoluteTopImpressionShare_ != null) {
        size += _single_searchRankLostAbsoluteTopImpressionShare_codec.CalculateSizeWithTag(SearchRankLostAbsoluteTopImpressionShare);
      }
      if (searchRankLostImpressionShare_ != null) {
        size += _single_searchRankLostImpressionShare_codec.CalculateSizeWithTag(SearchRankLostImpressionShare);
      }
      if (searchRankLostTopImpressionShare_ != null) {
        size += _single_searchRankLostTopImpressionShare_codec.CalculateSizeWithTag(SearchRankLostTopImpressionShare);
      }
      if (searchTopImpressionShare_ != null) {
        size += _single_searchTopImpressionShare_codec.CalculateSizeWithTag(SearchTopImpressionShare);
      }
      if (speedScore_ != null) {
        size += _single_speedScore_codec.CalculateSizeWithTag(SpeedScore);
      }
      if (topImpressionPercentage_ != null) {
        size += _single_topImpressionPercentage_codec.CalculateSizeWithTag(TopImpressionPercentage);
      }
      if (validAcceleratedMobilePagesClicksPercentage_ != null) {
        size += _single_validAcceleratedMobilePagesClicksPercentage_codec.CalculateSizeWithTag(ValidAcceleratedMobilePagesClicksPercentage);
      }
      if (valuePerAllConversions_ != null) {
        size += _single_valuePerAllConversions_codec.CalculateSizeWithTag(ValuePerAllConversions);
      }
      if (valuePerConversion_ != null) {
        size += _single_valuePerConversion_codec.CalculateSizeWithTag(ValuePerConversion);
      }
      if (valuePerCurrentModelAttributedConversion_ != null) {
        size += _single_valuePerCurrentModelAttributedConversion_codec.CalculateSizeWithTag(ValuePerCurrentModelAttributedConversion);
      }
      if (videoQuartile100Rate_ != null) {
        size += _single_videoQuartile100Rate_codec.CalculateSizeWithTag(VideoQuartile100Rate);
      }
      if (videoQuartile25Rate_ != null) {
        size += _single_videoQuartile25Rate_codec.CalculateSizeWithTag(VideoQuartile25Rate);
      }
      if (videoQuartile50Rate_ != null) {
        size += _single_videoQuartile50Rate_codec.CalculateSizeWithTag(VideoQuartile50Rate);
      }
      if (videoQuartile75Rate_ != null) {
        size += _single_videoQuartile75Rate_codec.CalculateSizeWithTag(VideoQuartile75Rate);
      }
      if (videoViewRate_ != null) {
        size += _single_videoViewRate_codec.CalculateSizeWithTag(VideoViewRate);
      }
      if (videoViews_ != null) {
        size += _single_videoViews_codec.CalculateSizeWithTag(VideoViews);
      }
      if (viewThroughConversions_ != null) {
        size += _single_viewThroughConversions_codec.CalculateSizeWithTag(ViewThroughConversions);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Metrics other) {
      if (other == null) {
        return;
      }
      if (other.absoluteTopImpressionPercentage_ != null) {
        if (absoluteTopImpressionPercentage_ == null || other.AbsoluteTopImpressionPercentage != 0D) {
          AbsoluteTopImpressionPercentage = other.AbsoluteTopImpressionPercentage;
        }
      }
      if (other.activeViewCpm_ != null) {
        if (activeViewCpm_ == null || other.ActiveViewCpm != 0D) {
          ActiveViewCpm = other.ActiveViewCpm;
        }
      }
      if (other.activeViewCtr_ != null) {
        if (activeViewCtr_ == null || other.ActiveViewCtr != 0D) {
          ActiveViewCtr = other.ActiveViewCtr;
        }
      }
      if (other.activeViewImpressions_ != null) {
        if (activeViewImpressions_ == null || other.ActiveViewImpressions != 0L) {
          ActiveViewImpressions = other.ActiveViewImpressions;
        }
      }
      if (other.activeViewMeasurability_ != null) {
        if (activeViewMeasurability_ == null || other.ActiveViewMeasurability != 0D) {
          ActiveViewMeasurability = other.ActiveViewMeasurability;
        }
      }
      if (other.activeViewMeasurableCostMicros_ != null) {
        if (activeViewMeasurableCostMicros_ == null || other.ActiveViewMeasurableCostMicros != 0L) {
          ActiveViewMeasurableCostMicros = other.ActiveViewMeasurableCostMicros;
        }
      }
      if (other.activeViewMeasurableImpressions_ != null) {
        if (activeViewMeasurableImpressions_ == null || other.ActiveViewMeasurableImpressions != 0L) {
          ActiveViewMeasurableImpressions = other.ActiveViewMeasurableImpressions;
        }
      }
      if (other.activeViewViewability_ != null) {
        if (activeViewViewability_ == null || other.ActiveViewViewability != 0D) {
          ActiveViewViewability = other.ActiveViewViewability;
        }
      }
      if (other.allConversionsFromInteractionsRate_ != null) {
        if (allConversionsFromInteractionsRate_ == null || other.AllConversionsFromInteractionsRate != 0D) {
          AllConversionsFromInteractionsRate = other.AllConversionsFromInteractionsRate;
        }
      }
      if (other.allConversionsValue_ != null) {
        if (allConversionsValue_ == null || other.AllConversionsValue != 0D) {
          AllConversionsValue = other.AllConversionsValue;
        }
      }
      if (other.allConversions_ != null) {
        if (allConversions_ == null || other.AllConversions != 0D) {
          AllConversions = other.AllConversions;
        }
      }
      if (other.allConversionsValuePerCost_ != null) {
        if (allConversionsValuePerCost_ == null || other.AllConversionsValuePerCost != 0D) {
          AllConversionsValuePerCost = other.AllConversionsValuePerCost;
        }
      }
      if (other.allConversionsFromClickToCall_ != null) {
        if (allConversionsFromClickToCall_ == null || other.AllConversionsFromClickToCall != 0D) {
          AllConversionsFromClickToCall = other.AllConversionsFromClickToCall;
        }
      }
      if (other.allConversionsFromDirections_ != null) {
        if (allConversionsFromDirections_ == null || other.AllConversionsFromDirections != 0D) {
          AllConversionsFromDirections = other.AllConversionsFromDirections;
        }
      }
      if (other.allConversionsFromInteractionsValuePerInteraction_ != null) {
        if (allConversionsFromInteractionsValuePerInteraction_ == null || other.AllConversionsFromInteractionsValuePerInteraction != 0D) {
          AllConversionsFromInteractionsValuePerInteraction = other.AllConversionsFromInteractionsValuePerInteraction;
        }
      }
      if (other.allConversionsFromMenu_ != null) {
        if (allConversionsFromMenu_ == null || other.AllConversionsFromMenu != 0D) {
          AllConversionsFromMenu = other.AllConversionsFromMenu;
        }
      }
      if (other.allConversionsFromOrder_ != null) {
        if (allConversionsFromOrder_ == null || other.AllConversionsFromOrder != 0D) {
          AllConversionsFromOrder = other.AllConversionsFromOrder;
        }
      }
      if (other.allConversionsFromOtherEngagement_ != null) {
        if (allConversionsFromOtherEngagement_ == null || other.AllConversionsFromOtherEngagement != 0D) {
          AllConversionsFromOtherEngagement = other.AllConversionsFromOtherEngagement;
        }
      }
      if (other.allConversionsFromStoreVisit_ != null) {
        if (allConversionsFromStoreVisit_ == null || other.AllConversionsFromStoreVisit != 0D) {
          AllConversionsFromStoreVisit = other.AllConversionsFromStoreVisit;
        }
      }
      if (other.allConversionsFromStoreWebsite_ != null) {
        if (allConversionsFromStoreWebsite_ == null || other.AllConversionsFromStoreWebsite != 0D) {
          AllConversionsFromStoreWebsite = other.AllConversionsFromStoreWebsite;
        }
      }
      if (other.averageCost_ != null) {
        if (averageCost_ == null || other.AverageCost != 0D) {
          AverageCost = other.AverageCost;
        }
      }
      if (other.averageCpc_ != null) {
        if (averageCpc_ == null || other.AverageCpc != 0D) {
          AverageCpc = other.AverageCpc;
        }
      }
      if (other.averageCpe_ != null) {
        if (averageCpe_ == null || other.AverageCpe != 0D) {
          AverageCpe = other.AverageCpe;
        }
      }
      if (other.averageCpm_ != null) {
        if (averageCpm_ == null || other.AverageCpm != 0D) {
          AverageCpm = other.AverageCpm;
        }
      }
      if (other.averageCpv_ != null) {
        if (averageCpv_ == null || other.AverageCpv != 0D) {
          AverageCpv = other.AverageCpv;
        }
      }
      if (other.averagePageViews_ != null) {
        if (averagePageViews_ == null || other.AveragePageViews != 0D) {
          AveragePageViews = other.AveragePageViews;
        }
      }
      if (other.averageTimeOnSite_ != null) {
        if (averageTimeOnSite_ == null || other.AverageTimeOnSite != 0D) {
          AverageTimeOnSite = other.AverageTimeOnSite;
        }
      }
      if (other.benchmarkAverageMaxCpc_ != null) {
        if (benchmarkAverageMaxCpc_ == null || other.BenchmarkAverageMaxCpc != 0D) {
          BenchmarkAverageMaxCpc = other.BenchmarkAverageMaxCpc;
        }
      }
      if (other.benchmarkCtr_ != null) {
        if (benchmarkCtr_ == null || other.BenchmarkCtr != 0D) {
          BenchmarkCtr = other.BenchmarkCtr;
        }
      }
      if (other.bounceRate_ != null) {
        if (bounceRate_ == null || other.BounceRate != 0D) {
          BounceRate = other.BounceRate;
        }
      }
      if (other.clicks_ != null) {
        if (clicks_ == null || other.Clicks != 0L) {
          Clicks = other.Clicks;
        }
      }
      if (other.combinedClicks_ != null) {
        if (combinedClicks_ == null || other.CombinedClicks != 0L) {
          CombinedClicks = other.CombinedClicks;
        }
      }
      if (other.combinedClicksPerQuery_ != null) {
        if (combinedClicksPerQuery_ == null || other.CombinedClicksPerQuery != 0D) {
          CombinedClicksPerQuery = other.CombinedClicksPerQuery;
        }
      }
      if (other.combinedQueries_ != null) {
        if (combinedQueries_ == null || other.CombinedQueries != 0L) {
          CombinedQueries = other.CombinedQueries;
        }
      }
      if (other.contentBudgetLostImpressionShare_ != null) {
        if (contentBudgetLostImpressionShare_ == null || other.ContentBudgetLostImpressionShare != 0D) {
          ContentBudgetLostImpressionShare = other.ContentBudgetLostImpressionShare;
        }
      }
      if (other.contentImpressionShare_ != null) {
        if (contentImpressionShare_ == null || other.ContentImpressionShare != 0D) {
          ContentImpressionShare = other.ContentImpressionShare;
        }
      }
      if (other.conversionLastReceivedRequestDateTime_ != null) {
        if (conversionLastReceivedRequestDateTime_ == null || other.ConversionLastReceivedRequestDateTime != "") {
          ConversionLastReceivedRequestDateTime = other.ConversionLastReceivedRequestDateTime;
        }
      }
      if (other.conversionLastConversionDate_ != null) {
        if (conversionLastConversionDate_ == null || other.ConversionLastConversionDate != "") {
          ConversionLastConversionDate = other.ConversionLastConversionDate;
        }
      }
      if (other.contentRankLostImpressionShare_ != null) {
        if (contentRankLostImpressionShare_ == null || other.ContentRankLostImpressionShare != 0D) {
          ContentRankLostImpressionShare = other.ContentRankLostImpressionShare;
        }
      }
      if (other.conversionsFromInteractionsRate_ != null) {
        if (conversionsFromInteractionsRate_ == null || other.ConversionsFromInteractionsRate != 0D) {
          ConversionsFromInteractionsRate = other.ConversionsFromInteractionsRate;
        }
      }
      if (other.conversionsValue_ != null) {
        if (conversionsValue_ == null || other.ConversionsValue != 0D) {
          ConversionsValue = other.ConversionsValue;
        }
      }
      if (other.conversionsValuePerCost_ != null) {
        if (conversionsValuePerCost_ == null || other.ConversionsValuePerCost != 0D) {
          ConversionsValuePerCost = other.ConversionsValuePerCost;
        }
      }
      if (other.conversionsFromInteractionsValuePerInteraction_ != null) {
        if (conversionsFromInteractionsValuePerInteraction_ == null || other.ConversionsFromInteractionsValuePerInteraction != 0D) {
          ConversionsFromInteractionsValuePerInteraction = other.ConversionsFromInteractionsValuePerInteraction;
        }
      }
      if (other.conversions_ != null) {
        if (conversions_ == null || other.Conversions != 0D) {
          Conversions = other.Conversions;
        }
      }
      if (other.costMicros_ != null) {
        if (costMicros_ == null || other.CostMicros != 0L) {
          CostMicros = other.CostMicros;
        }
      }
      if (other.costPerAllConversions_ != null) {
        if (costPerAllConversions_ == null || other.CostPerAllConversions != 0D) {
          CostPerAllConversions = other.CostPerAllConversions;
        }
      }
      if (other.costPerConversion_ != null) {
        if (costPerConversion_ == null || other.CostPerConversion != 0D) {
          CostPerConversion = other.CostPerConversion;
        }
      }
      if (other.costPerCurrentModelAttributedConversion_ != null) {
        if (costPerCurrentModelAttributedConversion_ == null || other.CostPerCurrentModelAttributedConversion != 0D) {
          CostPerCurrentModelAttributedConversion = other.CostPerCurrentModelAttributedConversion;
        }
      }
      if (other.crossDeviceConversions_ != null) {
        if (crossDeviceConversions_ == null || other.CrossDeviceConversions != 0D) {
          CrossDeviceConversions = other.CrossDeviceConversions;
        }
      }
      if (other.ctr_ != null) {
        if (ctr_ == null || other.Ctr != 0D) {
          Ctr = other.Ctr;
        }
      }
      if (other.currentModelAttributedConversions_ != null) {
        if (currentModelAttributedConversions_ == null || other.CurrentModelAttributedConversions != 0D) {
          CurrentModelAttributedConversions = other.CurrentModelAttributedConversions;
        }
      }
      if (other.currentModelAttributedConversionsFromInteractionsRate_ != null) {
        if (currentModelAttributedConversionsFromInteractionsRate_ == null || other.CurrentModelAttributedConversionsFromInteractionsRate != 0D) {
          CurrentModelAttributedConversionsFromInteractionsRate = other.CurrentModelAttributedConversionsFromInteractionsRate;
        }
      }
      if (other.currentModelAttributedConversionsFromInteractionsValuePerInteraction_ != null) {
        if (currentModelAttributedConversionsFromInteractionsValuePerInteraction_ == null || other.CurrentModelAttributedConversionsFromInteractionsValuePerInteraction != 0D) {
          CurrentModelAttributedConversionsFromInteractionsValuePerInteraction = other.CurrentModelAttributedConversionsFromInteractionsValuePerInteraction;
        }
      }
      if (other.currentModelAttributedConversionsValue_ != null) {
        if (currentModelAttributedConversionsValue_ == null || other.CurrentModelAttributedConversionsValue != 0D) {
          CurrentModelAttributedConversionsValue = other.CurrentModelAttributedConversionsValue;
        }
      }
      if (other.currentModelAttributedConversionsValuePerCost_ != null) {
        if (currentModelAttributedConversionsValuePerCost_ == null || other.CurrentModelAttributedConversionsValuePerCost != 0D) {
          CurrentModelAttributedConversionsValuePerCost = other.CurrentModelAttributedConversionsValuePerCost;
        }
      }
      if (other.engagementRate_ != null) {
        if (engagementRate_ == null || other.EngagementRate != 0D) {
          EngagementRate = other.EngagementRate;
        }
      }
      if (other.engagements_ != null) {
        if (engagements_ == null || other.Engagements != 0L) {
          Engagements = other.Engagements;
        }
      }
      if (other.hotelAverageLeadValueMicros_ != null) {
        if (hotelAverageLeadValueMicros_ == null || other.HotelAverageLeadValueMicros != 0D) {
          HotelAverageLeadValueMicros = other.HotelAverageLeadValueMicros;
        }
      }
      if (other.hotelPriceDifferencePercentage_ != null) {
        if (hotelPriceDifferencePercentage_ == null || other.HotelPriceDifferencePercentage != 0D) {
          HotelPriceDifferencePercentage = other.HotelPriceDifferencePercentage;
        }
      }
      if (other.HistoricalCreativeQualityScore != global::Google.Ads.GoogleAds.V3.Enums.QualityScoreBucketEnum.Types.QualityScoreBucket.Unspecified) {
        HistoricalCreativeQualityScore = other.HistoricalCreativeQualityScore;
      }
      if (other.HistoricalLandingPageQualityScore != global::Google.Ads.GoogleAds.V3.Enums.QualityScoreBucketEnum.Types.QualityScoreBucket.Unspecified) {
        HistoricalLandingPageQualityScore = other.HistoricalLandingPageQualityScore;
      }
      if (other.historicalQualityScore_ != null) {
        if (historicalQualityScore_ == null || other.HistoricalQualityScore != 0L) {
          HistoricalQualityScore = other.HistoricalQualityScore;
        }
      }
      if (other.HistoricalSearchPredictedCtr != global::Google.Ads.GoogleAds.V3.Enums.QualityScoreBucketEnum.Types.QualityScoreBucket.Unspecified) {
        HistoricalSearchPredictedCtr = other.HistoricalSearchPredictedCtr;
      }
      if (other.gmailForwards_ != null) {
        if (gmailForwards_ == null || other.GmailForwards != 0L) {
          GmailForwards = other.GmailForwards;
        }
      }
      if (other.gmailSaves_ != null) {
        if (gmailSaves_ == null || other.GmailSaves != 0L) {
          GmailSaves = other.GmailSaves;
        }
      }
      if (other.gmailSecondaryClicks_ != null) {
        if (gmailSecondaryClicks_ == null || other.GmailSecondaryClicks != 0L) {
          GmailSecondaryClicks = other.GmailSecondaryClicks;
        }
      }
      if (other.impressionsFromStoreReach_ != null) {
        if (impressionsFromStoreReach_ == null || other.ImpressionsFromStoreReach != 0L) {
          ImpressionsFromStoreReach = other.ImpressionsFromStoreReach;
        }
      }
      if (other.impressions_ != null) {
        if (impressions_ == null || other.Impressions != 0L) {
          Impressions = other.Impressions;
        }
      }
      if (other.interactionRate_ != null) {
        if (interactionRate_ == null || other.InteractionRate != 0D) {
          InteractionRate = other.InteractionRate;
        }
      }
      if (other.interactions_ != null) {
        if (interactions_ == null || other.Interactions != 0L) {
          Interactions = other.Interactions;
        }
      }
      interactionEventTypes_.Add(other.interactionEventTypes_);
      if (other.invalidClickRate_ != null) {
        if (invalidClickRate_ == null || other.InvalidClickRate != 0D) {
          InvalidClickRate = other.InvalidClickRate;
        }
      }
      if (other.invalidClicks_ != null) {
        if (invalidClicks_ == null || other.InvalidClicks != 0L) {
          InvalidClicks = other.InvalidClicks;
        }
      }
      if (other.messageChats_ != null) {
        if (messageChats_ == null || other.MessageChats != 0L) {
          MessageChats = other.MessageChats;
        }
      }
      if (other.messageImpressions_ != null) {
        if (messageImpressions_ == null || other.MessageImpressions != 0L) {
          MessageImpressions = other.MessageImpressions;
        }
      }
      if (other.messageChatRate_ != null) {
        if (messageChatRate_ == null || other.MessageChatRate != 0D) {
          MessageChatRate = other.MessageChatRate;
        }
      }
      if (other.mobileFriendlyClicksPercentage_ != null) {
        if (mobileFriendlyClicksPercentage_ == null || other.MobileFriendlyClicksPercentage != 0D) {
          MobileFriendlyClicksPercentage = other.MobileFriendlyClicksPercentage;
        }
      }
      if (other.organicClicks_ != null) {
        if (organicClicks_ == null || other.OrganicClicks != 0L) {
          OrganicClicks = other.OrganicClicks;
        }
      }
      if (other.organicClicksPerQuery_ != null) {
        if (organicClicksPerQuery_ == null || other.OrganicClicksPerQuery != 0D) {
          OrganicClicksPerQuery = other.OrganicClicksPerQuery;
        }
      }
      if (other.organicImpressions_ != null) {
        if (organicImpressions_ == null || other.OrganicImpressions != 0L) {
          OrganicImpressions = other.OrganicImpressions;
        }
      }
      if (other.organicImpressionsPerQuery_ != null) {
        if (organicImpressionsPerQuery_ == null || other.OrganicImpressionsPerQuery != 0D) {
          OrganicImpressionsPerQuery = other.OrganicImpressionsPerQuery;
        }
      }
      if (other.organicQueries_ != null) {
        if (organicQueries_ == null || other.OrganicQueries != 0L) {
          OrganicQueries = other.OrganicQueries;
        }
      }
      if (other.percentNewVisitors_ != null) {
        if (percentNewVisitors_ == null || other.PercentNewVisitors != 0D) {
          PercentNewVisitors = other.PercentNewVisitors;
        }
      }
      if (other.phoneCalls_ != null) {
        if (phoneCalls_ == null || other.PhoneCalls != 0L) {
          PhoneCalls = other.PhoneCalls;
        }
      }
      if (other.phoneImpressions_ != null) {
        if (phoneImpressions_ == null || other.PhoneImpressions != 0L) {
          PhoneImpressions = other.PhoneImpressions;
        }
      }
      if (other.phoneThroughRate_ != null) {
        if (phoneThroughRate_ == null || other.PhoneThroughRate != 0D) {
          PhoneThroughRate = other.PhoneThroughRate;
        }
      }
      if (other.relativeCtr_ != null) {
        if (relativeCtr_ == null || other.RelativeCtr != 0D) {
          RelativeCtr = other.RelativeCtr;
        }
      }
      if (other.searchAbsoluteTopImpressionShare_ != null) {
        if (searchAbsoluteTopImpressionShare_ == null || other.SearchAbsoluteTopImpressionShare != 0D) {
          SearchAbsoluteTopImpressionShare = other.SearchAbsoluteTopImpressionShare;
        }
      }
      if (other.searchBudgetLostAbsoluteTopImpressionShare_ != null) {
        if (searchBudgetLostAbsoluteTopImpressionShare_ == null || other.SearchBudgetLostAbsoluteTopImpressionShare != 0D) {
          SearchBudgetLostAbsoluteTopImpressionShare = other.SearchBudgetLostAbsoluteTopImpressionShare;
        }
      }
      if (other.searchBudgetLostImpressionShare_ != null) {
        if (searchBudgetLostImpressionShare_ == null || other.SearchBudgetLostImpressionShare != 0D) {
          SearchBudgetLostImpressionShare = other.SearchBudgetLostImpressionShare;
        }
      }
      if (other.searchBudgetLostTopImpressionShare_ != null) {
        if (searchBudgetLostTopImpressionShare_ == null || other.SearchBudgetLostTopImpressionShare != 0D) {
          SearchBudgetLostTopImpressionShare = other.SearchBudgetLostTopImpressionShare;
        }
      }
      if (other.searchClickShare_ != null) {
        if (searchClickShare_ == null || other.SearchClickShare != 0D) {
          SearchClickShare = other.SearchClickShare;
        }
      }
      if (other.searchExactMatchImpressionShare_ != null) {
        if (searchExactMatchImpressionShare_ == null || other.SearchExactMatchImpressionShare != 0D) {
          SearchExactMatchImpressionShare = other.SearchExactMatchImpressionShare;
        }
      }
      if (other.searchImpressionShare_ != null) {
        if (searchImpressionShare_ == null || other.SearchImpressionShare != 0D) {
          SearchImpressionShare = other.SearchImpressionShare;
        }
      }
      if (other.searchRankLostAbsoluteTopImpressionShare_ != null) {
        if (searchRankLostAbsoluteTopImpressionShare_ == null || other.SearchRankLostAbsoluteTopImpressionShare != 0D) {
          SearchRankLostAbsoluteTopImpressionShare = other.SearchRankLostAbsoluteTopImpressionShare;
        }
      }
      if (other.searchRankLostImpressionShare_ != null) {
        if (searchRankLostImpressionShare_ == null || other.SearchRankLostImpressionShare != 0D) {
          SearchRankLostImpressionShare = other.SearchRankLostImpressionShare;
        }
      }
      if (other.searchRankLostTopImpressionShare_ != null) {
        if (searchRankLostTopImpressionShare_ == null || other.SearchRankLostTopImpressionShare != 0D) {
          SearchRankLostTopImpressionShare = other.SearchRankLostTopImpressionShare;
        }
      }
      if (other.searchTopImpressionShare_ != null) {
        if (searchTopImpressionShare_ == null || other.SearchTopImpressionShare != 0D) {
          SearchTopImpressionShare = other.SearchTopImpressionShare;
        }
      }
      if (other.speedScore_ != null) {
        if (speedScore_ == null || other.SpeedScore != 0L) {
          SpeedScore = other.SpeedScore;
        }
      }
      if (other.topImpressionPercentage_ != null) {
        if (topImpressionPercentage_ == null || other.TopImpressionPercentage != 0D) {
          TopImpressionPercentage = other.TopImpressionPercentage;
        }
      }
      if (other.validAcceleratedMobilePagesClicksPercentage_ != null) {
        if (validAcceleratedMobilePagesClicksPercentage_ == null || other.ValidAcceleratedMobilePagesClicksPercentage != 0D) {
          ValidAcceleratedMobilePagesClicksPercentage = other.ValidAcceleratedMobilePagesClicksPercentage;
        }
      }
      if (other.valuePerAllConversions_ != null) {
        if (valuePerAllConversions_ == null || other.ValuePerAllConversions != 0D) {
          ValuePerAllConversions = other.ValuePerAllConversions;
        }
      }
      if (other.valuePerConversion_ != null) {
        if (valuePerConversion_ == null || other.ValuePerConversion != 0D) {
          ValuePerConversion = other.ValuePerConversion;
        }
      }
      if (other.valuePerCurrentModelAttributedConversion_ != null) {
        if (valuePerCurrentModelAttributedConversion_ == null || other.ValuePerCurrentModelAttributedConversion != 0D) {
          ValuePerCurrentModelAttributedConversion = other.ValuePerCurrentModelAttributedConversion;
        }
      }
      if (other.videoQuartile100Rate_ != null) {
        if (videoQuartile100Rate_ == null || other.VideoQuartile100Rate != 0D) {
          VideoQuartile100Rate = other.VideoQuartile100Rate;
        }
      }
      if (other.videoQuartile25Rate_ != null) {
        if (videoQuartile25Rate_ == null || other.VideoQuartile25Rate != 0D) {
          VideoQuartile25Rate = other.VideoQuartile25Rate;
        }
      }
      if (other.videoQuartile50Rate_ != null) {
        if (videoQuartile50Rate_ == null || other.VideoQuartile50Rate != 0D) {
          VideoQuartile50Rate = other.VideoQuartile50Rate;
        }
      }
      if (other.videoQuartile75Rate_ != null) {
        if (videoQuartile75Rate_ == null || other.VideoQuartile75Rate != 0D) {
          VideoQuartile75Rate = other.VideoQuartile75Rate;
        }
      }
      if (other.videoViewRate_ != null) {
        if (videoViewRate_ == null || other.VideoViewRate != 0D) {
          VideoViewRate = other.VideoViewRate;
        }
      }
      if (other.videoViews_ != null) {
        if (videoViews_ == null || other.VideoViews != 0L) {
          VideoViews = other.VideoViews;
        }
      }
      if (other.viewThroughConversions_ != null) {
        if (viewThroughConversions_ == null || other.ViewThroughConversions != 0L) {
          ViewThroughConversions = other.ViewThroughConversions;
        }
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            double? value = _single_activeViewCpm_codec.Read(input);
            if (activeViewCpm_ == null || value != 0D) {
              ActiveViewCpm = value;
            }
            break;
          }
          case 18: {
            long? value = _single_activeViewImpressions_codec.Read(input);
            if (activeViewImpressions_ == null || value != 0L) {
              ActiveViewImpressions = value;
            }
            break;
          }
          case 26: {
            long? value = _single_activeViewMeasurableCostMicros_codec.Read(input);
            if (activeViewMeasurableCostMicros_ == null || value != 0L) {
              ActiveViewMeasurableCostMicros = value;
            }
            break;
          }
          case 34: {
            long? value = _single_activeViewMeasurableImpressions_codec.Read(input);
            if (activeViewMeasurableImpressions_ == null || value != 0L) {
              ActiveViewMeasurableImpressions = value;
            }
            break;
          }
          case 58: {
            double? value = _single_allConversions_codec.Read(input);
            if (allConversions_ == null || value != 0D) {
              AllConversions = value;
            }
            break;
          }
          case 66: {
            double? value = _single_averageCost_codec.Read(input);
            if (averageCost_ == null || value != 0D) {
              AverageCost = value;
            }
            break;
          }
          case 74: {
            double? value = _single_averageCpc_codec.Read(input);
            if (averageCpc_ == null || value != 0D) {
              AverageCpc = value;
            }
            break;
          }
          case 82: {
            double? value = _single_averageCpm_codec.Read(input);
            if (averageCpm_ == null || value != 0D) {
              AverageCpm = value;
            }
            break;
          }
          case 90: {
            double? value = _single_averageCpv_codec.Read(input);
            if (averageCpv_ == null || value != 0D) {
              AverageCpv = value;
            }
            break;
          }
          case 114: {
            double? value = _single_benchmarkAverageMaxCpc_codec.Read(input);
            if (benchmarkAverageMaxCpc_ == null || value != 0D) {
              BenchmarkAverageMaxCpc = value;
            }
            break;
          }
          case 122: {
            double? value = _single_bounceRate_codec.Read(input);
            if (bounceRate_ == null || value != 0D) {
              BounceRate = value;
            }
            break;
          }
          case 154: {
            long? value = _single_clicks_codec.Read(input);
            if (clicks_ == null || value != 0L) {
              Clicks = value;
            }
            break;
          }
          case 162: {
            double? value = _single_contentBudgetLostImpressionShare_codec.Read(input);
            if (contentBudgetLostImpressionShare_ == null || value != 0D) {
              ContentBudgetLostImpressionShare = value;
            }
            break;
          }
          case 170: {
            double? value = _single_contentImpressionShare_codec.Read(input);
            if (contentImpressionShare_ == null || value != 0D) {
              ContentImpressionShare = value;
            }
            break;
          }
          case 178: {
            double? value = _single_contentRankLostImpressionShare_codec.Read(input);
            if (contentRankLostImpressionShare_ == null || value != 0D) {
              ContentRankLostImpressionShare = value;
            }
            break;
          }
          case 202: {
            double? value = _single_conversions_codec.Read(input);
            if (conversions_ == null || value != 0D) {
              Conversions = value;
            }
            break;
          }
          case 210: {
            long? value = _single_costMicros_codec.Read(input);
            if (costMicros_ == null || value != 0L) {
              CostMicros = value;
            }
            break;
          }
          case 226: {
            double? value = _single_costPerConversion_codec.Read(input);
            if (costPerConversion_ == null || value != 0D) {
              CostPerConversion = value;
            }
            break;
          }
          case 234: {
            double? value = _single_crossDeviceConversions_codec.Read(input);
            if (crossDeviceConversions_ == null || value != 0D) {
              CrossDeviceConversions = value;
            }
            break;
          }
          case 242: {
            double? value = _single_ctr_codec.Read(input);
            if (ctr_ == null || value != 0D) {
              Ctr = value;
            }
            break;
          }
          case 250: {
            double? value = _single_engagementRate_codec.Read(input);
            if (engagementRate_ == null || value != 0D) {
              EngagementRate = value;
            }
            break;
          }
          case 258: {
            long? value = _single_engagements_codec.Read(input);
            if (engagements_ == null || value != 0L) {
              Engagements = value;
            }
            break;
          }
          case 298: {
            long? value = _single_impressions_codec.Read(input);
            if (impressions_ == null || value != 0L) {
              Impressions = value;
            }
            break;
          }
          case 306: {
            double? value = _single_interactionRate_codec.Read(input);
            if (interactionRate_ == null || value != 0D) {
              InteractionRate = value;
            }
            break;
          }
          case 314: {
            long? value = _single_interactions_codec.Read(input);
            if (interactions_ == null || value != 0L) {
              Interactions = value;
            }
            break;
          }
          case 322: {
            double? value = _single_invalidClickRate_codec.Read(input);
            if (invalidClickRate_ == null || value != 0D) {
              InvalidClickRate = value;
            }
            break;
          }
          case 330: {
            long? value = _single_invalidClicks_codec.Read(input);
            if (invalidClicks_ == null || value != 0L) {
              InvalidClicks = value;
            }
            break;
          }
          case 338: {
            double? value = _single_percentNewVisitors_codec.Read(input);
            if (percentNewVisitors_ == null || value != 0D) {
              PercentNewVisitors = value;
            }
            break;
          }
          case 346: {
            long? value = _single_phoneCalls_codec.Read(input);
            if (phoneCalls_ == null || value != 0L) {
              PhoneCalls = value;
            }
            break;
          }
          case 354: {
            long? value = _single_phoneImpressions_codec.Read(input);
            if (phoneImpressions_ == null || value != 0L) {
              PhoneImpressions = value;
            }
            break;
          }
          case 362: {
            double? value = _single_phoneThroughRate_codec.Read(input);
            if (phoneThroughRate_ == null || value != 0D) {
              PhoneThroughRate = value;
            }
            break;
          }
          case 370: {
            double? value = _single_relativeCtr_codec.Read(input);
            if (relativeCtr_ == null || value != 0D) {
              RelativeCtr = value;
            }
            break;
          }
          case 378: {
            double? value = _single_searchBudgetLostImpressionShare_codec.Read(input);
            if (searchBudgetLostImpressionShare_ == null || value != 0D) {
              SearchBudgetLostImpressionShare = value;
            }
            break;
          }
          case 386: {
            double? value = _single_searchClickShare_codec.Read(input);
            if (searchClickShare_ == null || value != 0D) {
              SearchClickShare = value;
            }
            break;
          }
          case 394: {
            double? value = _single_searchExactMatchImpressionShare_codec.Read(input);
            if (searchExactMatchImpressionShare_ == null || value != 0D) {
              SearchExactMatchImpressionShare = value;
            }
            break;
          }
          case 402: {
            double? value = _single_searchImpressionShare_codec.Read(input);
            if (searchImpressionShare_ == null || value != 0D) {
              SearchImpressionShare = value;
            }
            break;
          }
          case 410: {
            double? value = _single_searchRankLostImpressionShare_codec.Read(input);
            if (searchRankLostImpressionShare_ == null || value != 0D) {
              SearchRankLostImpressionShare = value;
            }
            break;
          }
          case 418: {
            double? value = _single_valuePerAllConversions_codec.Read(input);
            if (valuePerAllConversions_ == null || value != 0D) {
              ValuePerAllConversions = value;
            }
            break;
          }
          case 426: {
            double? value = _single_valuePerConversion_codec.Read(input);
            if (valuePerConversion_ == null || value != 0D) {
              ValuePerConversion = value;
            }
            break;
          }
          case 434: {
            double? value = _single_videoQuartile100Rate_codec.Read(input);
            if (videoQuartile100Rate_ == null || value != 0D) {
              VideoQuartile100Rate = value;
            }
            break;
          }
          case 442: {
            double? value = _single_videoQuartile25Rate_codec.Read(input);
            if (videoQuartile25Rate_ == null || value != 0D) {
              VideoQuartile25Rate = value;
            }
            break;
          }
          case 450: {
            double? value = _single_videoQuartile50Rate_codec.Read(input);
            if (videoQuartile50Rate_ == null || value != 0D) {
              VideoQuartile50Rate = value;
            }
            break;
          }
          case 458: {
            double? value = _single_videoQuartile75Rate_codec.Read(input);
            if (videoQuartile75Rate_ == null || value != 0D) {
              VideoQuartile75Rate = value;
            }
            break;
          }
          case 466: {
            double? value = _single_videoViewRate_codec.Read(input);
            if (videoViewRate_ == null || value != 0D) {
              VideoViewRate = value;
            }
            break;
          }
          case 474: {
            long? value = _single_videoViews_codec.Read(input);
            if (videoViews_ == null || value != 0L) {
              VideoViews = value;
            }
            break;
          }
          case 482: {
            long? value = _single_viewThroughConversions_codec.Read(input);
            if (viewThroughConversions_ == null || value != 0L) {
              ViewThroughConversions = value;
            }
            break;
          }
          case 498: {
            double? value = _single_allConversionsValuePerCost_codec.Read(input);
            if (allConversionsValuePerCost_ == null || value != 0D) {
              AllConversionsValuePerCost = value;
            }
            break;
          }
          case 522: {
            double? value = _single_allConversionsFromInteractionsRate_codec.Read(input);
            if (allConversionsFromInteractionsRate_ == null || value != 0D) {
              AllConversionsFromInteractionsRate = value;
            }
            break;
          }
          case 530: {
            double? value = _single_allConversionsValue_codec.Read(input);
            if (allConversionsValue_ == null || value != 0D) {
              AllConversionsValue = value;
            }
            break;
          }
          case 538: {
            double? value = _single_allConversionsFromInteractionsValuePerInteraction_codec.Read(input);
            if (allConversionsFromInteractionsValuePerInteraction_ == null || value != 0D) {
              AllConversionsFromInteractionsValuePerInteraction = value;
            }
            break;
          }
          case 546: {
            double? value = _single_costPerAllConversions_codec.Read(input);
            if (costPerAllConversions_ == null || value != 0D) {
              CostPerAllConversions = value;
            }
            break;
          }
          case 554: {
            double? value = _single_conversionsFromInteractionsRate_codec.Read(input);
            if (conversionsFromInteractionsRate_ == null || value != 0D) {
              ConversionsFromInteractionsRate = value;
            }
            break;
          }
          case 562: {
            double? value = _single_conversionsValue_codec.Read(input);
            if (conversionsValue_ == null || value != 0D) {
              ConversionsValue = value;
            }
            break;
          }
          case 570: {
            double? value = _single_conversionsValuePerCost_codec.Read(input);
            if (conversionsValuePerCost_ == null || value != 0D) {
              ConversionsValuePerCost = value;
            }
            break;
          }
          case 578: {
            double? value = _single_conversionsFromInteractionsValuePerInteraction_codec.Read(input);
            if (conversionsFromInteractionsValuePerInteraction_ == null || value != 0D) {
              ConversionsFromInteractionsValuePerInteraction = value;
            }
            break;
          }
          case 586: {
            string value = _single_conversionLastReceivedRequestDateTime_codec.Read(input);
            if (conversionLastReceivedRequestDateTime_ == null || value != "") {
              ConversionLastReceivedRequestDateTime = value;
            }
            break;
          }
          case 594: {
            string value = _single_conversionLastConversionDate_codec.Read(input);
            if (conversionLastConversionDate_ == null || value != "") {
              ConversionLastConversionDate = value;
            }
            break;
          }
          case 602: {
            double? value = _single_hotelAverageLeadValueMicros_codec.Read(input);
            if (hotelAverageLeadValueMicros_ == null || value != 0D) {
              HotelAverageLeadValueMicros = value;
            }
            break;
          }
          case 618: {
            double? value = _single_benchmarkCtr_codec.Read(input);
            if (benchmarkCtr_ == null || value != 0D) {
              BenchmarkCtr = value;
            }
            break;
          }
          case 626: {
            double? value = _single_searchAbsoluteTopImpressionShare_codec.Read(input);
            if (searchAbsoluteTopImpressionShare_ == null || value != 0D) {
              SearchAbsoluteTopImpressionShare = value;
            }
            break;
          }
          case 634: {
            double? value = _single_activeViewCtr_codec.Read(input);
            if (activeViewCtr_ == null || value != 0D) {
              ActiveViewCtr = value;
            }
            break;
          }
          case 640: {
            HistoricalCreativeQualityScore = (global::Google.Ads.GoogleAds.V3.Enums.QualityScoreBucketEnum.Types.QualityScoreBucket) input.ReadEnum();
            break;
          }
          case 648: {
            HistoricalLandingPageQualityScore = (global::Google.Ads.GoogleAds.V3.Enums.QualityScoreBucketEnum.Types.QualityScoreBucket) input.ReadEnum();
            break;
          }
          case 658: {
            long? value = _single_historicalQualityScore_codec.Read(input);
            if (historicalQualityScore_ == null || value != 0L) {
              HistoricalQualityScore = value;
            }
            break;
          }
          case 664: {
            HistoricalSearchPredictedCtr = (global::Google.Ads.GoogleAds.V3.Enums.QualityScoreBucketEnum.Types.QualityScoreBucket) input.ReadEnum();
            break;
          }
          case 674: {
            double? value = _single_averageTimeOnSite_codec.Read(input);
            if (averageTimeOnSite_ == null || value != 0D) {
              AverageTimeOnSite = value;
            }
            break;
          }
          case 682: {
            long? value = _single_gmailForwards_codec.Read(input);
            if (gmailForwards_ == null || value != 0L) {
              GmailForwards = value;
            }
            break;
          }
          case 690: {
            long? value = _single_gmailSaves_codec.Read(input);
            if (gmailSaves_ == null || value != 0L) {
              GmailSaves = value;
            }
            break;
          }
          case 698: {
            long? value = _single_gmailSecondaryClicks_codec.Read(input);
            if (gmailSecondaryClicks_ == null || value != 0L) {
              GmailSecondaryClicks = value;
            }
            break;
          }
          case 706: {
            double? value = _single_searchBudgetLostAbsoluteTopImpressionShare_codec.Read(input);
            if (searchBudgetLostAbsoluteTopImpressionShare_ == null || value != 0D) {
              SearchBudgetLostAbsoluteTopImpressionShare = value;
            }
            break;
          }
          case 714: {
            double? value = _single_searchBudgetLostTopImpressionShare_codec.Read(input);
            if (searchBudgetLostTopImpressionShare_ == null || value != 0D) {
              SearchBudgetLostTopImpressionShare = value;
            }
            break;
          }
          case 722: {
            double? value = _single_searchRankLostAbsoluteTopImpressionShare_codec.Read(input);
            if (searchRankLostAbsoluteTopImpressionShare_ == null || value != 0D) {
              SearchRankLostAbsoluteTopImpressionShare = value;
            }
            break;
          }
          case 730: {
            double? value = _single_searchRankLostTopImpressionShare_codec.Read(input);
            if (searchRankLostTopImpressionShare_ == null || value != 0D) {
              SearchRankLostTopImpressionShare = value;
            }
            break;
          }
          case 738: {
            double? value = _single_searchTopImpressionShare_codec.Read(input);
            if (searchTopImpressionShare_ == null || value != 0D) {
              SearchTopImpressionShare = value;
            }
            break;
          }
          case 746: {
            double? value = _single_topImpressionPercentage_codec.Read(input);
            if (topImpressionPercentage_ == null || value != 0D) {
              TopImpressionPercentage = value;
            }
            break;
          }
          case 754: {
            double? value = _single_valuePerCurrentModelAttributedConversion_codec.Read(input);
            if (valuePerCurrentModelAttributedConversion_ == null || value != 0D) {
              ValuePerCurrentModelAttributedConversion = value;
            }
            break;
          }
          case 762: {
            double? value = _single_absoluteTopImpressionPercentage_codec.Read(input);
            if (absoluteTopImpressionPercentage_ == null || value != 0D) {
              AbsoluteTopImpressionPercentage = value;
            }
            break;
          }
          case 770: {
            double? value = _single_activeViewMeasurability_codec.Read(input);
            if (activeViewMeasurability_ == null || value != 0D) {
              ActiveViewMeasurability = value;
            }
            break;
          }
          case 778: {
            double? value = _single_activeViewViewability_codec.Read(input);
            if (activeViewViewability_ == null || value != 0D) {
              ActiveViewViewability = value;
            }
            break;
          }
          case 786: {
            double? value = _single_averageCpe_codec.Read(input);
            if (averageCpe_ == null || value != 0D) {
              AverageCpe = value;
            }
            break;
          }
          case 794: {
            double? value = _single_averagePageViews_codec.Read(input);
            if (averagePageViews_ == null || value != 0D) {
              AveragePageViews = value;
            }
            break;
          }
          case 802:
          case 800: {
            interactionEventTypes_.AddEntriesFrom(input, _repeated_interactionEventTypes_codec);
            break;
          }
          case 810: {
            double? value = _single_currentModelAttributedConversions_codec.Read(input);
            if (currentModelAttributedConversions_ == null || value != 0D) {
              CurrentModelAttributedConversions = value;
            }
            break;
          }
          case 818: {
            double? value = _single_currentModelAttributedConversionsFromInteractionsRate_codec.Read(input);
            if (currentModelAttributedConversionsFromInteractionsRate_ == null || value != 0D) {
              CurrentModelAttributedConversionsFromInteractionsRate = value;
            }
            break;
          }
          case 826: {
            double? value = _single_currentModelAttributedConversionsFromInteractionsValuePerInteraction_codec.Read(input);
            if (currentModelAttributedConversionsFromInteractionsValuePerInteraction_ == null || value != 0D) {
              CurrentModelAttributedConversionsFromInteractionsValuePerInteraction = value;
            }
            break;
          }
          case 834: {
            double? value = _single_currentModelAttributedConversionsValue_codec.Read(input);
            if (currentModelAttributedConversionsValue_ == null || value != 0D) {
              CurrentModelAttributedConversionsValue = value;
            }
            break;
          }
          case 842: {
            double? value = _single_currentModelAttributedConversionsValuePerCost_codec.Read(input);
            if (currentModelAttributedConversionsValuePerCost_ == null || value != 0D) {
              CurrentModelAttributedConversionsValuePerCost = value;
            }
            break;
          }
          case 850: {
            double? value = _single_costPerCurrentModelAttributedConversion_codec.Read(input);
            if (costPerCurrentModelAttributedConversion_ == null || value != 0D) {
              CostPerCurrentModelAttributedConversion = value;
            }
            break;
          }
          case 858: {
            long? value = _single_speedScore_codec.Read(input);
            if (speedScore_ == null || value != 0L) {
              SpeedScore = value;
            }
            break;
          }
          case 866: {
            double? value = _single_validAcceleratedMobilePagesClicksPercentage_codec.Read(input);
            if (validAcceleratedMobilePagesClicksPercentage_ == null || value != 0D) {
              ValidAcceleratedMobilePagesClicksPercentage = value;
            }
            break;
          }
          case 874: {
            double? value = _single_mobileFriendlyClicksPercentage_codec.Read(input);
            if (mobileFriendlyClicksPercentage_ == null || value != 0D) {
              MobileFriendlyClicksPercentage = value;
            }
            break;
          }
          case 882: {
            long? value = _single_organicClicks_codec.Read(input);
            if (organicClicks_ == null || value != 0L) {
              OrganicClicks = value;
            }
            break;
          }
          case 890: {
            double? value = _single_organicClicksPerQuery_codec.Read(input);
            if (organicClicksPerQuery_ == null || value != 0D) {
              OrganicClicksPerQuery = value;
            }
            break;
          }
          case 898: {
            long? value = _single_organicImpressions_codec.Read(input);
            if (organicImpressions_ == null || value != 0L) {
              OrganicImpressions = value;
            }
            break;
          }
          case 906: {
            double? value = _single_organicImpressionsPerQuery_codec.Read(input);
            if (organicImpressionsPerQuery_ == null || value != 0D) {
              OrganicImpressionsPerQuery = value;
            }
            break;
          }
          case 914: {
            long? value = _single_organicQueries_codec.Read(input);
            if (organicQueries_ == null || value != 0L) {
              OrganicQueries = value;
            }
            break;
          }
          case 922: {
            long? value = _single_combinedClicks_codec.Read(input);
            if (combinedClicks_ == null || value != 0L) {
              CombinedClicks = value;
            }
            break;
          }
          case 930: {
            double? value = _single_combinedClicksPerQuery_codec.Read(input);
            if (combinedClicksPerQuery_ == null || value != 0D) {
              CombinedClicksPerQuery = value;
            }
            break;
          }
          case 938: {
            long? value = _single_combinedQueries_codec.Read(input);
            if (combinedQueries_ == null || value != 0L) {
              CombinedQueries = value;
            }
            break;
          }
          case 946: {
            double? value = _single_allConversionsFromClickToCall_codec.Read(input);
            if (allConversionsFromClickToCall_ == null || value != 0D) {
              AllConversionsFromClickToCall = value;
            }
            break;
          }
          case 954: {
            double? value = _single_allConversionsFromDirections_codec.Read(input);
            if (allConversionsFromDirections_ == null || value != 0D) {
              AllConversionsFromDirections = value;
            }
            break;
          }
          case 962: {
            double? value = _single_allConversionsFromMenu_codec.Read(input);
            if (allConversionsFromMenu_ == null || value != 0D) {
              AllConversionsFromMenu = value;
            }
            break;
          }
          case 970: {
            double? value = _single_allConversionsFromOrder_codec.Read(input);
            if (allConversionsFromOrder_ == null || value != 0D) {
              AllConversionsFromOrder = value;
            }
            break;
          }
          case 978: {
            double? value = _single_allConversionsFromOtherEngagement_codec.Read(input);
            if (allConversionsFromOtherEngagement_ == null || value != 0D) {
              AllConversionsFromOtherEngagement = value;
            }
            break;
          }
          case 986: {
            double? value = _single_allConversionsFromStoreVisit_codec.Read(input);
            if (allConversionsFromStoreVisit_ == null || value != 0D) {
              AllConversionsFromStoreVisit = value;
            }
            break;
          }
          case 994: {
            double? value = _single_allConversionsFromStoreWebsite_codec.Read(input);
            if (allConversionsFromStoreWebsite_ == null || value != 0D) {
              AllConversionsFromStoreWebsite = value;
            }
            break;
          }
          case 1002: {
            long? value = _single_impressionsFromStoreReach_codec.Read(input);
            if (impressionsFromStoreReach_ == null || value != 0L) {
              ImpressionsFromStoreReach = value;
            }
            break;
          }
          case 1010: {
            long? value = _single_messageChats_codec.Read(input);
            if (messageChats_ == null || value != 0L) {
              MessageChats = value;
            }
            break;
          }
          case 1018: {
            long? value = _single_messageImpressions_codec.Read(input);
            if (messageImpressions_ == null || value != 0L) {
              MessageImpressions = value;
            }
            break;
          }
          case 1026: {
            double? value = _single_messageChatRate_codec.Read(input);
            if (messageChatRate_ == null || value != 0D) {
              MessageChatRate = value;
            }
            break;
          }
          case 1034: {
            double? value = _single_hotelPriceDifferencePercentage_codec.Read(input);
            if (hotelPriceDifferencePercentage_ == null || value != 0D) {
              HotelPriceDifferencePercentage = value;
            }
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
