// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: google/ads/googleads/v4/resources/keyword_plan_ad_group_keyword.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Google.Ads.GoogleAds.V4.Resources {

  /// <summary>Holder for reflection information generated from google/ads/googleads/v4/resources/keyword_plan_ad_group_keyword.proto</summary>
  public static partial class KeywordPlanAdGroupKeywordReflection {

    #region Descriptor
    /// <summary>File descriptor for google/ads/googleads/v4/resources/keyword_plan_ad_group_keyword.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static KeywordPlanAdGroupKeywordReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CkVnb29nbGUvYWRzL2dvb2dsZWFkcy92NC9yZXNvdXJjZXMva2V5d29yZF9w",
            "bGFuX2FkX2dyb3VwX2tleXdvcmQucHJvdG8SIWdvb2dsZS5hZHMuZ29vZ2xl",
            "YWRzLnY0LnJlc291cmNlcxo2Z29vZ2xlL2Fkcy9nb29nbGVhZHMvdjQvZW51",
            "bXMva2V5d29yZF9tYXRjaF90eXBlLnByb3RvGh9nb29nbGUvYXBpL2ZpZWxk",
            "X2JlaGF2aW9yLnByb3RvGhlnb29nbGUvYXBpL3Jlc291cmNlLnByb3RvGh5n",
            "b29nbGUvcHJvdG9idWYvd3JhcHBlcnMucHJvdG8aHGdvb2dsZS9hcGkvYW5u",
            "b3RhdGlvbnMucHJvdG8ihQUKGUtleXdvcmRQbGFuQWRHcm91cEtleXdvcmQS",
            "UQoNcmVzb3VyY2VfbmFtZRgBIAEoCUI64EEF+kE0CjJnb29nbGVhZHMuZ29v",
            "Z2xlYXBpcy5jb20vS2V5d29yZFBsYW5BZEdyb3VwS2V5d29yZBJtChVrZXl3",
            "b3JkX3BsYW5fYWRfZ3JvdXAYAiABKAsyHC5nb29nbGUucHJvdG9idWYuU3Ry",
            "aW5nVmFsdWVCMPpBLQorZ29vZ2xlYWRzLmdvb2dsZWFwaXMuY29tL0tleXdv",
            "cmRQbGFuQWRHcm91cBIsCgJpZBgDIAEoCzIbLmdvb2dsZS5wcm90b2J1Zi5J",
            "bnQ2NFZhbHVlQgPgQQMSKgoEdGV4dBgEIAEoCzIcLmdvb2dsZS5wcm90b2J1",
            "Zi5TdHJpbmdWYWx1ZRJYCgptYXRjaF90eXBlGAUgASgOMkQuZ29vZ2xlLmFk",
            "cy5nb29nbGVhZHMudjQuZW51bXMuS2V5d29yZE1hdGNoVHlwZUVudW0uS2V5",
            "d29yZE1hdGNoVHlwZRIzCg5jcGNfYmlkX21pY3JvcxgGIAEoCzIbLmdvb2ds",
            "ZS5wcm90b2J1Zi5JbnQ2NFZhbHVlEjEKCG5lZ2F0aXZlGAcgASgLMhouZ29v",
            "Z2xlLnByb3RvYnVmLkJvb2xWYWx1ZUID4EEFOokB6kGFAQoyZ29vZ2xlYWRz",
            "Lmdvb2dsZWFwaXMuY29tL0tleXdvcmRQbGFuQWRHcm91cEtleXdvcmQST2N1",
            "c3RvbWVycy97Y3VzdG9tZXJ9L2tleXdvcmRQbGFuQWRHcm91cEtleXdvcmRz",
            "L3trZXl3b3JkX3BsYW5fYWRfZ3JvdXBfa2V5d29yZH1CiwIKJWNvbS5nb29n",
            "bGUuYWRzLmdvb2dsZWFkcy52NC5yZXNvdXJjZXNCHktleXdvcmRQbGFuQWRH",
            "cm91cEtleXdvcmRQcm90b1ABWkpnb29nbGUuZ29sYW5nLm9yZy9nZW5wcm90",
            "by9nb29nbGVhcGlzL2Fkcy9nb29nbGVhZHMvdjQvcmVzb3VyY2VzO3Jlc291",
            "cmNlc6ICA0dBQaoCIUdvb2dsZS5BZHMuR29vZ2xlQWRzLlY0LlJlc291cmNl",
            "c8oCIUdvb2dsZVxBZHNcR29vZ2xlQWRzXFY0XFJlc291cmNlc+oCJUdvb2ds",
            "ZTo6QWRzOjpHb29nbGVBZHM6OlY0OjpSZXNvdXJjZXNiBnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Google.Ads.GoogleAds.V4.Enums.KeywordMatchTypeReflection.Descriptor, global::Google.Api.FieldBehaviorReflection.Descriptor, global::Google.Api.ResourceReflection.Descriptor, global::Google.Protobuf.WellKnownTypes.WrappersReflection.Descriptor, global::Google.Api.AnnotationsReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Ads.GoogleAds.V4.Resources.KeywordPlanAdGroupKeyword), global::Google.Ads.GoogleAds.V4.Resources.KeywordPlanAdGroupKeyword.Parser, new[]{ "ResourceName", "KeywordPlanAdGroup", "Id", "Text", "MatchType", "CpcBidMicros", "Negative" }, null, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  /// <summary>
  /// A Keyword Plan ad group keyword.
  /// Max number of keyword plan keywords per plan: 10000.
  /// </summary>
  public sealed partial class KeywordPlanAdGroupKeyword : pb::IMessage<KeywordPlanAdGroupKeyword> {
    private static readonly pb::MessageParser<KeywordPlanAdGroupKeyword> _parser = new pb::MessageParser<KeywordPlanAdGroupKeyword>(() => new KeywordPlanAdGroupKeyword());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<KeywordPlanAdGroupKeyword> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Ads.GoogleAds.V4.Resources.KeywordPlanAdGroupKeywordReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public KeywordPlanAdGroupKeyword() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public KeywordPlanAdGroupKeyword(KeywordPlanAdGroupKeyword other) : this() {
      resourceName_ = other.resourceName_;
      KeywordPlanAdGroup = other.KeywordPlanAdGroup;
      Id = other.Id;
      Text = other.Text;
      matchType_ = other.matchType_;
      CpcBidMicros = other.CpcBidMicros;
      Negative = other.Negative;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public KeywordPlanAdGroupKeyword Clone() {
      return new KeywordPlanAdGroupKeyword(this);
    }

    /// <summary>Field number for the "resource_name" field.</summary>
    public const int ResourceNameFieldNumber = 1;
    private string resourceName_ = "";
    /// <summary>
    /// Immutable. The resource name of the Keyword Plan ad group keyword.
    /// KeywordPlanAdGroupKeyword resource names have the form:
    ///
    /// `customers/{customer_id}/keywordPlanAdGroupKeywords/{kp_ad_group_keyword_id}`
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ResourceName {
      get { return resourceName_; }
      set {
        resourceName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "keyword_plan_ad_group" field.</summary>
    public const int KeywordPlanAdGroupFieldNumber = 2;
    private static readonly pb::FieldCodec<string> _single_keywordPlanAdGroup_codec = pb::FieldCodec.ForClassWrapper<string>(18);
    private string keywordPlanAdGroup_;
    /// <summary>
    /// The Keyword Plan ad group to which this keyword belongs.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string KeywordPlanAdGroup {
      get { return keywordPlanAdGroup_; }
      set {
        keywordPlanAdGroup_ = value;
      }
    }


    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 3;
    private static readonly pb::FieldCodec<long?> _single_id_codec = pb::FieldCodec.ForStructWrapper<long>(26);
    private long? id_;
    /// <summary>
    /// Output only. The ID of the Keyword Plan keyword.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long? Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }


    /// <summary>Field number for the "text" field.</summary>
    public const int TextFieldNumber = 4;
    private static readonly pb::FieldCodec<string> _single_text_codec = pb::FieldCodec.ForClassWrapper<string>(34);
    private string text_;
    /// <summary>
    /// The keyword text.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Text {
      get { return text_; }
      set {
        text_ = value;
      }
    }


    /// <summary>Field number for the "match_type" field.</summary>
    public const int MatchTypeFieldNumber = 5;
    private global::Google.Ads.GoogleAds.V4.Enums.KeywordMatchTypeEnum.Types.KeywordMatchType matchType_ = global::Google.Ads.GoogleAds.V4.Enums.KeywordMatchTypeEnum.Types.KeywordMatchType.Unspecified;
    /// <summary>
    /// The keyword match type.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Ads.GoogleAds.V4.Enums.KeywordMatchTypeEnum.Types.KeywordMatchType MatchType {
      get { return matchType_; }
      set {
        matchType_ = value;
      }
    }

    /// <summary>Field number for the "cpc_bid_micros" field.</summary>
    public const int CpcBidMicrosFieldNumber = 6;
    private static readonly pb::FieldCodec<long?> _single_cpcBidMicros_codec = pb::FieldCodec.ForStructWrapper<long>(50);
    private long? cpcBidMicros_;
    /// <summary>
    /// A keyword level max cpc bid in micros (e.g. $1 = 1mm). The currency is the
    /// same as the account currency code. This will override any CPC bid set at
    /// the keyword plan ad group level.
    /// Not applicable for negative keywords. (negative = true)
    /// This field is Optional.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long? CpcBidMicros {
      get { return cpcBidMicros_; }
      set {
        cpcBidMicros_ = value;
      }
    }


    /// <summary>Field number for the "negative" field.</summary>
    public const int NegativeFieldNumber = 7;
    private static readonly pb::FieldCodec<bool?> _single_negative_codec = pb::FieldCodec.ForStructWrapper<bool>(58);
    private bool? negative_;
    /// <summary>
    /// Immutable. If true, the keyword is negative.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool? Negative {
      get { return negative_; }
      set {
        negative_ = value;
      }
    }


    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as KeywordPlanAdGroupKeyword);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(KeywordPlanAdGroupKeyword other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ResourceName != other.ResourceName) return false;
      if (KeywordPlanAdGroup != other.KeywordPlanAdGroup) return false;
      if (Id != other.Id) return false;
      if (Text != other.Text) return false;
      if (MatchType != other.MatchType) return false;
      if (CpcBidMicros != other.CpcBidMicros) return false;
      if (Negative != other.Negative) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ResourceName.Length != 0) hash ^= ResourceName.GetHashCode();
      if (keywordPlanAdGroup_ != null) hash ^= KeywordPlanAdGroup.GetHashCode();
      if (id_ != null) hash ^= Id.GetHashCode();
      if (text_ != null) hash ^= Text.GetHashCode();
      if (MatchType != global::Google.Ads.GoogleAds.V4.Enums.KeywordMatchTypeEnum.Types.KeywordMatchType.Unspecified) hash ^= MatchType.GetHashCode();
      if (cpcBidMicros_ != null) hash ^= CpcBidMicros.GetHashCode();
      if (negative_ != null) hash ^= Negative.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ResourceName.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(ResourceName);
      }
      if (keywordPlanAdGroup_ != null) {
        _single_keywordPlanAdGroup_codec.WriteTagAndValue(output, KeywordPlanAdGroup);
      }
      if (id_ != null) {
        _single_id_codec.WriteTagAndValue(output, Id);
      }
      if (text_ != null) {
        _single_text_codec.WriteTagAndValue(output, Text);
      }
      if (MatchType != global::Google.Ads.GoogleAds.V4.Enums.KeywordMatchTypeEnum.Types.KeywordMatchType.Unspecified) {
        output.WriteRawTag(40);
        output.WriteEnum((int) MatchType);
      }
      if (cpcBidMicros_ != null) {
        _single_cpcBidMicros_codec.WriteTagAndValue(output, CpcBidMicros);
      }
      if (negative_ != null) {
        _single_negative_codec.WriteTagAndValue(output, Negative);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ResourceName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ResourceName);
      }
      if (keywordPlanAdGroup_ != null) {
        size += _single_keywordPlanAdGroup_codec.CalculateSizeWithTag(KeywordPlanAdGroup);
      }
      if (id_ != null) {
        size += _single_id_codec.CalculateSizeWithTag(Id);
      }
      if (text_ != null) {
        size += _single_text_codec.CalculateSizeWithTag(Text);
      }
      if (MatchType != global::Google.Ads.GoogleAds.V4.Enums.KeywordMatchTypeEnum.Types.KeywordMatchType.Unspecified) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) MatchType);
      }
      if (cpcBidMicros_ != null) {
        size += _single_cpcBidMicros_codec.CalculateSizeWithTag(CpcBidMicros);
      }
      if (negative_ != null) {
        size += _single_negative_codec.CalculateSizeWithTag(Negative);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(KeywordPlanAdGroupKeyword other) {
      if (other == null) {
        return;
      }
      if (other.ResourceName.Length != 0) {
        ResourceName = other.ResourceName;
      }
      if (other.keywordPlanAdGroup_ != null) {
        if (keywordPlanAdGroup_ == null || other.KeywordPlanAdGroup != "") {
          KeywordPlanAdGroup = other.KeywordPlanAdGroup;
        }
      }
      if (other.id_ != null) {
        if (id_ == null || other.Id != 0L) {
          Id = other.Id;
        }
      }
      if (other.text_ != null) {
        if (text_ == null || other.Text != "") {
          Text = other.Text;
        }
      }
      if (other.MatchType != global::Google.Ads.GoogleAds.V4.Enums.KeywordMatchTypeEnum.Types.KeywordMatchType.Unspecified) {
        MatchType = other.MatchType;
      }
      if (other.cpcBidMicros_ != null) {
        if (cpcBidMicros_ == null || other.CpcBidMicros != 0L) {
          CpcBidMicros = other.CpcBidMicros;
        }
      }
      if (other.negative_ != null) {
        if (negative_ == null || other.Negative != false) {
          Negative = other.Negative;
        }
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            ResourceName = input.ReadString();
            break;
          }
          case 18: {
            string value = _single_keywordPlanAdGroup_codec.Read(input);
            if (keywordPlanAdGroup_ == null || value != "") {
              KeywordPlanAdGroup = value;
            }
            break;
          }
          case 26: {
            long? value = _single_id_codec.Read(input);
            if (id_ == null || value != 0L) {
              Id = value;
            }
            break;
          }
          case 34: {
            string value = _single_text_codec.Read(input);
            if (text_ == null || value != "") {
              Text = value;
            }
            break;
          }
          case 40: {
            MatchType = (global::Google.Ads.GoogleAds.V4.Enums.KeywordMatchTypeEnum.Types.KeywordMatchType) input.ReadEnum();
            break;
          }
          case 50: {
            long? value = _single_cpcBidMicros_codec.Read(input);
            if (cpcBidMicros_ == null || value != 0L) {
              CpcBidMicros = value;
            }
            break;
          }
          case 58: {
            bool? value = _single_negative_codec.Read(input);
            if (negative_ == null || value != false) {
              Negative = value;
            }
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
