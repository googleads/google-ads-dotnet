// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: google/ads/googleads/v6/common/criterion_category_availability.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Google.Ads.GoogleAds.V6.Common {

  /// <summary>Holder for reflection information generated from google/ads/googleads/v6/common/criterion_category_availability.proto</summary>
  public static partial class CriterionCategoryAvailabilityReflection {

    #region Descriptor
    /// <summary>File descriptor for google/ads/googleads/v6/common/criterion_category_availability.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static CriterionCategoryAvailabilityReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CkRnb29nbGUvYWRzL2dvb2dsZWFkcy92Ni9jb21tb24vY3JpdGVyaW9uX2Nh",
            "dGVnb3J5X2F2YWlsYWJpbGl0eS5wcm90bxIeZ29vZ2xlLmFkcy5nb29nbGVh",
            "ZHMudjYuY29tbW9uGkBnb29nbGUvYWRzL2dvb2dsZWFkcy92Ni9lbnVtcy9h",
            "ZHZlcnRpc2luZ19jaGFubmVsX3N1Yl90eXBlLnByb3RvGjxnb29nbGUvYWRz",
            "L2dvb2dsZWFkcy92Ni9lbnVtcy9hZHZlcnRpc2luZ19jaGFubmVsX3R5cGUu",
            "cHJvdG8aUGdvb2dsZS9hZHMvZ29vZ2xlYWRzL3Y2L2VudW1zL2NyaXRlcmlv",
            "bl9jYXRlZ29yeV9jaGFubmVsX2F2YWlsYWJpbGl0eV9tb2RlLnByb3RvGk9n",
            "b29nbGUvYWRzL2dvb2dsZWFkcy92Ni9lbnVtcy9jcml0ZXJpb25fY2F0ZWdv",
            "cnlfbG9jYWxlX2F2YWlsYWJpbGl0eV9tb2RlLnByb3RvGhxnb29nbGUvYXBp",
            "L2Fubm90YXRpb25zLnByb3RvIssBCh1Dcml0ZXJpb25DYXRlZ29yeUF2YWls",
            "YWJpbGl0eRJVCgdjaGFubmVsGAEgASgLMkQuZ29vZ2xlLmFkcy5nb29nbGVh",
            "ZHMudjYuY29tbW9uLkNyaXRlcmlvbkNhdGVnb3J5Q2hhbm5lbEF2YWlsYWJp",
            "bGl0eRJTCgZsb2NhbGUYAiADKAsyQy5nb29nbGUuYWRzLmdvb2dsZWFkcy52",
            "Ni5jb21tb24uQ3JpdGVyaW9uQ2F0ZWdvcnlMb2NhbGVBdmFpbGFiaWxpdHki",
            "/gMKJENyaXRlcmlvbkNhdGVnb3J5Q2hhbm5lbEF2YWlsYWJpbGl0eRKPAQoR",
            "YXZhaWxhYmlsaXR5X21vZGUYASABKA4ydC5nb29nbGUuYWRzLmdvb2dsZWFk",
            "cy52Ni5lbnVtcy5Dcml0ZXJpb25DYXRlZ29yeUNoYW5uZWxBdmFpbGFiaWxp",
            "dHlNb2RlRW51bS5Dcml0ZXJpb25DYXRlZ29yeUNoYW5uZWxBdmFpbGFiaWxp",
            "dHlNb2RlEnIKGGFkdmVydGlzaW5nX2NoYW5uZWxfdHlwZRgCIAEoDjJQLmdv",
            "b2dsZS5hZHMuZ29vZ2xlYWRzLnY2LmVudW1zLkFkdmVydGlzaW5nQ2hhbm5l",
            "bFR5cGVFbnVtLkFkdmVydGlzaW5nQ2hhbm5lbFR5cGUSfAocYWR2ZXJ0aXNp",
            "bmdfY2hhbm5lbF9zdWJfdHlwZRgDIAMoDjJWLmdvb2dsZS5hZHMuZ29vZ2xl",
            "YWRzLnY2LmVudW1zLkFkdmVydGlzaW5nQ2hhbm5lbFN1YlR5cGVFbnVtLkFk",
            "dmVydGlzaW5nQ2hhbm5lbFN1YlR5cGUSLQogaW5jbHVkZV9kZWZhdWx0X2No",
            "YW5uZWxfc3ViX3R5cGUYBSABKAhIAIgBAUIjCiFfaW5jbHVkZV9kZWZhdWx0",
            "X2NoYW5uZWxfc3ViX3R5cGUijwIKI0NyaXRlcmlvbkNhdGVnb3J5TG9jYWxl",
            "QXZhaWxhYmlsaXR5Eo0BChFhdmFpbGFiaWxpdHlfbW9kZRgBIAEoDjJyLmdv",
            "b2dsZS5hZHMuZ29vZ2xlYWRzLnY2LmVudW1zLkNyaXRlcmlvbkNhdGVnb3J5",
            "TG9jYWxlQXZhaWxhYmlsaXR5TW9kZUVudW0uQ3JpdGVyaW9uQ2F0ZWdvcnlM",
            "b2NhbGVBdmFpbGFiaWxpdHlNb2RlEhkKDGNvdW50cnlfY29kZRgEIAEoCUgA",
            "iAEBEhoKDWxhbmd1YWdlX2NvZGUYBSABKAlIAYgBAUIPCg1fY291bnRyeV9j",
            "b2RlQhAKDl9sYW5ndWFnZV9jb2RlQv0BCiJjb20uZ29vZ2xlLmFkcy5nb29n",
            "bGVhZHMudjYuY29tbW9uQiJDcml0ZXJpb25DYXRlZ29yeUF2YWlsYWJpbGl0",
            "eVByb3RvUAFaRGdvb2dsZS5nb2xhbmcub3JnL2dlbnByb3RvL2dvb2dsZWFw",
            "aXMvYWRzL2dvb2dsZWFkcy92Ni9jb21tb247Y29tbW9uogIDR0FBqgIeR29v",
            "Z2xlLkFkcy5Hb29nbGVBZHMuVjYuQ29tbW9uygIeR29vZ2xlXEFkc1xHb29n",
            "bGVBZHNcVjZcQ29tbW9u6gIiR29vZ2xlOjpBZHM6Okdvb2dsZUFkczo6VjY6",
            "OkNvbW1vbmIGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Google.Ads.GoogleAds.V6.Enums.AdvertisingChannelSubTypeReflection.Descriptor, global::Google.Ads.GoogleAds.V6.Enums.AdvertisingChannelTypeReflection.Descriptor, global::Google.Ads.GoogleAds.V6.Enums.CriterionCategoryChannelAvailabilityModeReflection.Descriptor, global::Google.Ads.GoogleAds.V6.Enums.CriterionCategoryLocaleAvailabilityModeReflection.Descriptor, global::Google.Api.AnnotationsReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Ads.GoogleAds.V6.Common.CriterionCategoryAvailability), global::Google.Ads.GoogleAds.V6.Common.CriterionCategoryAvailability.Parser, new[]{ "Channel", "Locale" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Ads.GoogleAds.V6.Common.CriterionCategoryChannelAvailability), global::Google.Ads.GoogleAds.V6.Common.CriterionCategoryChannelAvailability.Parser, new[]{ "AvailabilityMode", "AdvertisingChannelType", "AdvertisingChannelSubType", "IncludeDefaultChannelSubType" }, new[]{ "IncludeDefaultChannelSubType" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Ads.GoogleAds.V6.Common.CriterionCategoryLocaleAvailability), global::Google.Ads.GoogleAds.V6.Common.CriterionCategoryLocaleAvailability.Parser, new[]{ "AvailabilityMode", "CountryCode", "LanguageCode" }, new[]{ "CountryCode", "LanguageCode" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  /// <summary>
  /// Information of category availability, per advertising channel.
  /// </summary>
  public sealed partial class CriterionCategoryAvailability : pb::IMessage<CriterionCategoryAvailability>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CriterionCategoryAvailability> _parser = new pb::MessageParser<CriterionCategoryAvailability>(() => new CriterionCategoryAvailability());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CriterionCategoryAvailability> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Ads.GoogleAds.V6.Common.CriterionCategoryAvailabilityReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CriterionCategoryAvailability() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CriterionCategoryAvailability(CriterionCategoryAvailability other) : this() {
      channel_ = other.channel_ != null ? other.channel_.Clone() : null;
      locale_ = other.locale_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CriterionCategoryAvailability Clone() {
      return new CriterionCategoryAvailability(this);
    }

    /// <summary>Field number for the "channel" field.</summary>
    public const int ChannelFieldNumber = 1;
    private global::Google.Ads.GoogleAds.V6.Common.CriterionCategoryChannelAvailability channel_;
    /// <summary>
    /// Channel types and subtypes that are available to the category.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Ads.GoogleAds.V6.Common.CriterionCategoryChannelAvailability Channel {
      get { return channel_; }
      set {
        channel_ = value;
      }
    }

    /// <summary>Field number for the "locale" field.</summary>
    public const int LocaleFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Google.Ads.GoogleAds.V6.Common.CriterionCategoryLocaleAvailability> _repeated_locale_codec
        = pb::FieldCodec.ForMessage(18, global::Google.Ads.GoogleAds.V6.Common.CriterionCategoryLocaleAvailability.Parser);
    private readonly pbc::RepeatedField<global::Google.Ads.GoogleAds.V6.Common.CriterionCategoryLocaleAvailability> locale_ = new pbc::RepeatedField<global::Google.Ads.GoogleAds.V6.Common.CriterionCategoryLocaleAvailability>();
    /// <summary>
    /// Locales that are available to the category for the channel.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Google.Ads.GoogleAds.V6.Common.CriterionCategoryLocaleAvailability> Locale {
      get { return locale_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CriterionCategoryAvailability);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CriterionCategoryAvailability other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Channel, other.Channel)) return false;
      if(!locale_.Equals(other.locale_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (channel_ != null) hash ^= Channel.GetHashCode();
      hash ^= locale_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (channel_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Channel);
      }
      locale_.WriteTo(output, _repeated_locale_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (channel_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Channel);
      }
      locale_.WriteTo(ref output, _repeated_locale_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (channel_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Channel);
      }
      size += locale_.CalculateSize(_repeated_locale_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CriterionCategoryAvailability other) {
      if (other == null) {
        return;
      }
      if (other.channel_ != null) {
        if (channel_ == null) {
          Channel = new global::Google.Ads.GoogleAds.V6.Common.CriterionCategoryChannelAvailability();
        }
        Channel.MergeFrom(other.Channel);
      }
      locale_.Add(other.locale_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (channel_ == null) {
              Channel = new global::Google.Ads.GoogleAds.V6.Common.CriterionCategoryChannelAvailability();
            }
            input.ReadMessage(Channel);
            break;
          }
          case 18: {
            locale_.AddEntriesFrom(input, _repeated_locale_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            if (channel_ == null) {
              Channel = new global::Google.Ads.GoogleAds.V6.Common.CriterionCategoryChannelAvailability();
            }
            input.ReadMessage(Channel);
            break;
          }
          case 18: {
            locale_.AddEntriesFrom(ref input, _repeated_locale_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// Information of advertising channel type and subtypes a category is available
  /// in.
  /// </summary>
  public sealed partial class CriterionCategoryChannelAvailability : pb::IMessage<CriterionCategoryChannelAvailability>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CriterionCategoryChannelAvailability> _parser = new pb::MessageParser<CriterionCategoryChannelAvailability>(() => new CriterionCategoryChannelAvailability());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CriterionCategoryChannelAvailability> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Ads.GoogleAds.V6.Common.CriterionCategoryAvailabilityReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CriterionCategoryChannelAvailability() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CriterionCategoryChannelAvailability(CriterionCategoryChannelAvailability other) : this() {
      _hasBits0 = other._hasBits0;
      availabilityMode_ = other.availabilityMode_;
      advertisingChannelType_ = other.advertisingChannelType_;
      advertisingChannelSubType_ = other.advertisingChannelSubType_.Clone();
      includeDefaultChannelSubType_ = other.includeDefaultChannelSubType_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CriterionCategoryChannelAvailability Clone() {
      return new CriterionCategoryChannelAvailability(this);
    }

    /// <summary>Field number for the "availability_mode" field.</summary>
    public const int AvailabilityModeFieldNumber = 1;
    private global::Google.Ads.GoogleAds.V6.Enums.CriterionCategoryChannelAvailabilityModeEnum.Types.CriterionCategoryChannelAvailabilityMode availabilityMode_ = global::Google.Ads.GoogleAds.V6.Enums.CriterionCategoryChannelAvailabilityModeEnum.Types.CriterionCategoryChannelAvailabilityMode.Unspecified;
    /// <summary>
    /// Format of the channel availability. Can be ALL_CHANNELS (the rest of the
    /// fields will not be set), CHANNEL_TYPE (only advertising_channel_type type
    /// will be set, the category is available to all sub types under it) or
    /// CHANNEL_TYPE_AND_SUBTYPES (advertising_channel_type,
    /// advertising_channel_sub_type, and include_default_channel_sub_type will all
    /// be set).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Ads.GoogleAds.V6.Enums.CriterionCategoryChannelAvailabilityModeEnum.Types.CriterionCategoryChannelAvailabilityMode AvailabilityMode {
      get { return availabilityMode_; }
      set {
        availabilityMode_ = value;
      }
    }

    /// <summary>Field number for the "advertising_channel_type" field.</summary>
    public const int AdvertisingChannelTypeFieldNumber = 2;
    private global::Google.Ads.GoogleAds.V6.Enums.AdvertisingChannelTypeEnum.Types.AdvertisingChannelType advertisingChannelType_ = global::Google.Ads.GoogleAds.V6.Enums.AdvertisingChannelTypeEnum.Types.AdvertisingChannelType.Unspecified;
    /// <summary>
    /// Channel type the category is available to.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Ads.GoogleAds.V6.Enums.AdvertisingChannelTypeEnum.Types.AdvertisingChannelType AdvertisingChannelType {
      get { return advertisingChannelType_; }
      set {
        advertisingChannelType_ = value;
      }
    }

    /// <summary>Field number for the "advertising_channel_sub_type" field.</summary>
    public const int AdvertisingChannelSubTypeFieldNumber = 3;
    private static readonly pb::FieldCodec<global::Google.Ads.GoogleAds.V6.Enums.AdvertisingChannelSubTypeEnum.Types.AdvertisingChannelSubType> _repeated_advertisingChannelSubType_codec
        = pb::FieldCodec.ForEnum(26, x => (int) x, x => (global::Google.Ads.GoogleAds.V6.Enums.AdvertisingChannelSubTypeEnum.Types.AdvertisingChannelSubType) x);
    private readonly pbc::RepeatedField<global::Google.Ads.GoogleAds.V6.Enums.AdvertisingChannelSubTypeEnum.Types.AdvertisingChannelSubType> advertisingChannelSubType_ = new pbc::RepeatedField<global::Google.Ads.GoogleAds.V6.Enums.AdvertisingChannelSubTypeEnum.Types.AdvertisingChannelSubType>();
    /// <summary>
    /// Channel subtypes under the channel type the category is available to.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Google.Ads.GoogleAds.V6.Enums.AdvertisingChannelSubTypeEnum.Types.AdvertisingChannelSubType> AdvertisingChannelSubType {
      get { return advertisingChannelSubType_; }
    }

    /// <summary>Field number for the "include_default_channel_sub_type" field.</summary>
    public const int IncludeDefaultChannelSubTypeFieldNumber = 5;
    private bool includeDefaultChannelSubType_;
    /// <summary>
    /// Whether default channel sub type is included. For example,
    /// advertising_channel_type being DISPLAY and include_default_channel_sub_type
    /// being false means that the default display campaign where channel sub type
    /// is not set is not included in this availability configuration.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IncludeDefaultChannelSubType {
      get { if ((_hasBits0 & 1) != 0) { return includeDefaultChannelSubType_; } else { return false; } }
      set {
        _hasBits0 |= 1;
        includeDefaultChannelSubType_ = value;
      }
    }
    /// <summary>Gets whether the "include_default_channel_sub_type" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasIncludeDefaultChannelSubType {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "include_default_channel_sub_type" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearIncludeDefaultChannelSubType() {
      _hasBits0 &= ~1;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CriterionCategoryChannelAvailability);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CriterionCategoryChannelAvailability other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (AvailabilityMode != other.AvailabilityMode) return false;
      if (AdvertisingChannelType != other.AdvertisingChannelType) return false;
      if(!advertisingChannelSubType_.Equals(other.advertisingChannelSubType_)) return false;
      if (IncludeDefaultChannelSubType != other.IncludeDefaultChannelSubType) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (AvailabilityMode != global::Google.Ads.GoogleAds.V6.Enums.CriterionCategoryChannelAvailabilityModeEnum.Types.CriterionCategoryChannelAvailabilityMode.Unspecified) hash ^= AvailabilityMode.GetHashCode();
      if (AdvertisingChannelType != global::Google.Ads.GoogleAds.V6.Enums.AdvertisingChannelTypeEnum.Types.AdvertisingChannelType.Unspecified) hash ^= AdvertisingChannelType.GetHashCode();
      hash ^= advertisingChannelSubType_.GetHashCode();
      if (HasIncludeDefaultChannelSubType) hash ^= IncludeDefaultChannelSubType.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (AvailabilityMode != global::Google.Ads.GoogleAds.V6.Enums.CriterionCategoryChannelAvailabilityModeEnum.Types.CriterionCategoryChannelAvailabilityMode.Unspecified) {
        output.WriteRawTag(8);
        output.WriteEnum((int) AvailabilityMode);
      }
      if (AdvertisingChannelType != global::Google.Ads.GoogleAds.V6.Enums.AdvertisingChannelTypeEnum.Types.AdvertisingChannelType.Unspecified) {
        output.WriteRawTag(16);
        output.WriteEnum((int) AdvertisingChannelType);
      }
      advertisingChannelSubType_.WriteTo(output, _repeated_advertisingChannelSubType_codec);
      if (HasIncludeDefaultChannelSubType) {
        output.WriteRawTag(40);
        output.WriteBool(IncludeDefaultChannelSubType);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (AvailabilityMode != global::Google.Ads.GoogleAds.V6.Enums.CriterionCategoryChannelAvailabilityModeEnum.Types.CriterionCategoryChannelAvailabilityMode.Unspecified) {
        output.WriteRawTag(8);
        output.WriteEnum((int) AvailabilityMode);
      }
      if (AdvertisingChannelType != global::Google.Ads.GoogleAds.V6.Enums.AdvertisingChannelTypeEnum.Types.AdvertisingChannelType.Unspecified) {
        output.WriteRawTag(16);
        output.WriteEnum((int) AdvertisingChannelType);
      }
      advertisingChannelSubType_.WriteTo(ref output, _repeated_advertisingChannelSubType_codec);
      if (HasIncludeDefaultChannelSubType) {
        output.WriteRawTag(40);
        output.WriteBool(IncludeDefaultChannelSubType);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (AvailabilityMode != global::Google.Ads.GoogleAds.V6.Enums.CriterionCategoryChannelAvailabilityModeEnum.Types.CriterionCategoryChannelAvailabilityMode.Unspecified) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) AvailabilityMode);
      }
      if (AdvertisingChannelType != global::Google.Ads.GoogleAds.V6.Enums.AdvertisingChannelTypeEnum.Types.AdvertisingChannelType.Unspecified) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) AdvertisingChannelType);
      }
      size += advertisingChannelSubType_.CalculateSize(_repeated_advertisingChannelSubType_codec);
      if (HasIncludeDefaultChannelSubType) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CriterionCategoryChannelAvailability other) {
      if (other == null) {
        return;
      }
      if (other.AvailabilityMode != global::Google.Ads.GoogleAds.V6.Enums.CriterionCategoryChannelAvailabilityModeEnum.Types.CriterionCategoryChannelAvailabilityMode.Unspecified) {
        AvailabilityMode = other.AvailabilityMode;
      }
      if (other.AdvertisingChannelType != global::Google.Ads.GoogleAds.V6.Enums.AdvertisingChannelTypeEnum.Types.AdvertisingChannelType.Unspecified) {
        AdvertisingChannelType = other.AdvertisingChannelType;
      }
      advertisingChannelSubType_.Add(other.advertisingChannelSubType_);
      if (other.HasIncludeDefaultChannelSubType) {
        IncludeDefaultChannelSubType = other.IncludeDefaultChannelSubType;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            AvailabilityMode = (global::Google.Ads.GoogleAds.V6.Enums.CriterionCategoryChannelAvailabilityModeEnum.Types.CriterionCategoryChannelAvailabilityMode) input.ReadEnum();
            break;
          }
          case 16: {
            AdvertisingChannelType = (global::Google.Ads.GoogleAds.V6.Enums.AdvertisingChannelTypeEnum.Types.AdvertisingChannelType) input.ReadEnum();
            break;
          }
          case 26:
          case 24: {
            advertisingChannelSubType_.AddEntriesFrom(input, _repeated_advertisingChannelSubType_codec);
            break;
          }
          case 40: {
            IncludeDefaultChannelSubType = input.ReadBool();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            AvailabilityMode = (global::Google.Ads.GoogleAds.V6.Enums.CriterionCategoryChannelAvailabilityModeEnum.Types.CriterionCategoryChannelAvailabilityMode) input.ReadEnum();
            break;
          }
          case 16: {
            AdvertisingChannelType = (global::Google.Ads.GoogleAds.V6.Enums.AdvertisingChannelTypeEnum.Types.AdvertisingChannelType) input.ReadEnum();
            break;
          }
          case 26:
          case 24: {
            advertisingChannelSubType_.AddEntriesFrom(ref input, _repeated_advertisingChannelSubType_codec);
            break;
          }
          case 40: {
            IncludeDefaultChannelSubType = input.ReadBool();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// Information about which locales a category is available in.
  /// </summary>
  public sealed partial class CriterionCategoryLocaleAvailability : pb::IMessage<CriterionCategoryLocaleAvailability>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CriterionCategoryLocaleAvailability> _parser = new pb::MessageParser<CriterionCategoryLocaleAvailability>(() => new CriterionCategoryLocaleAvailability());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CriterionCategoryLocaleAvailability> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Ads.GoogleAds.V6.Common.CriterionCategoryAvailabilityReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CriterionCategoryLocaleAvailability() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CriterionCategoryLocaleAvailability(CriterionCategoryLocaleAvailability other) : this() {
      availabilityMode_ = other.availabilityMode_;
      countryCode_ = other.countryCode_;
      languageCode_ = other.languageCode_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CriterionCategoryLocaleAvailability Clone() {
      return new CriterionCategoryLocaleAvailability(this);
    }

    /// <summary>Field number for the "availability_mode" field.</summary>
    public const int AvailabilityModeFieldNumber = 1;
    private global::Google.Ads.GoogleAds.V6.Enums.CriterionCategoryLocaleAvailabilityModeEnum.Types.CriterionCategoryLocaleAvailabilityMode availabilityMode_ = global::Google.Ads.GoogleAds.V6.Enums.CriterionCategoryLocaleAvailabilityModeEnum.Types.CriterionCategoryLocaleAvailabilityMode.Unspecified;
    /// <summary>
    /// Format of the locale availability. Can be LAUNCHED_TO_ALL (both country and
    /// language will be empty), COUNTRY (only country will be set), LANGUAGE (only
    /// language wil be set), COUNTRY_AND_LANGUAGE (both country and language will
    /// be set).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Ads.GoogleAds.V6.Enums.CriterionCategoryLocaleAvailabilityModeEnum.Types.CriterionCategoryLocaleAvailabilityMode AvailabilityMode {
      get { return availabilityMode_; }
      set {
        availabilityMode_ = value;
      }
    }

    /// <summary>Field number for the "country_code" field.</summary>
    public const int CountryCodeFieldNumber = 4;
    private string countryCode_;
    /// <summary>
    /// Code of the country.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string CountryCode {
      get { return countryCode_ ?? ""; }
      set {
        countryCode_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "country_code" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasCountryCode {
      get { return countryCode_ != null; }
    }
    /// <summary>Clears the value of the "country_code" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearCountryCode() {
      countryCode_ = null;
    }

    /// <summary>Field number for the "language_code" field.</summary>
    public const int LanguageCodeFieldNumber = 5;
    private string languageCode_;
    /// <summary>
    /// Code of the language.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string LanguageCode {
      get { return languageCode_ ?? ""; }
      set {
        languageCode_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "language_code" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasLanguageCode {
      get { return languageCode_ != null; }
    }
    /// <summary>Clears the value of the "language_code" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearLanguageCode() {
      languageCode_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CriterionCategoryLocaleAvailability);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CriterionCategoryLocaleAvailability other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (AvailabilityMode != other.AvailabilityMode) return false;
      if (CountryCode != other.CountryCode) return false;
      if (LanguageCode != other.LanguageCode) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (AvailabilityMode != global::Google.Ads.GoogleAds.V6.Enums.CriterionCategoryLocaleAvailabilityModeEnum.Types.CriterionCategoryLocaleAvailabilityMode.Unspecified) hash ^= AvailabilityMode.GetHashCode();
      if (HasCountryCode) hash ^= CountryCode.GetHashCode();
      if (HasLanguageCode) hash ^= LanguageCode.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (AvailabilityMode != global::Google.Ads.GoogleAds.V6.Enums.CriterionCategoryLocaleAvailabilityModeEnum.Types.CriterionCategoryLocaleAvailabilityMode.Unspecified) {
        output.WriteRawTag(8);
        output.WriteEnum((int) AvailabilityMode);
      }
      if (HasCountryCode) {
        output.WriteRawTag(34);
        output.WriteString(CountryCode);
      }
      if (HasLanguageCode) {
        output.WriteRawTag(42);
        output.WriteString(LanguageCode);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (AvailabilityMode != global::Google.Ads.GoogleAds.V6.Enums.CriterionCategoryLocaleAvailabilityModeEnum.Types.CriterionCategoryLocaleAvailabilityMode.Unspecified) {
        output.WriteRawTag(8);
        output.WriteEnum((int) AvailabilityMode);
      }
      if (HasCountryCode) {
        output.WriteRawTag(34);
        output.WriteString(CountryCode);
      }
      if (HasLanguageCode) {
        output.WriteRawTag(42);
        output.WriteString(LanguageCode);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (AvailabilityMode != global::Google.Ads.GoogleAds.V6.Enums.CriterionCategoryLocaleAvailabilityModeEnum.Types.CriterionCategoryLocaleAvailabilityMode.Unspecified) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) AvailabilityMode);
      }
      if (HasCountryCode) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(CountryCode);
      }
      if (HasLanguageCode) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(LanguageCode);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CriterionCategoryLocaleAvailability other) {
      if (other == null) {
        return;
      }
      if (other.AvailabilityMode != global::Google.Ads.GoogleAds.V6.Enums.CriterionCategoryLocaleAvailabilityModeEnum.Types.CriterionCategoryLocaleAvailabilityMode.Unspecified) {
        AvailabilityMode = other.AvailabilityMode;
      }
      if (other.HasCountryCode) {
        CountryCode = other.CountryCode;
      }
      if (other.HasLanguageCode) {
        LanguageCode = other.LanguageCode;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            AvailabilityMode = (global::Google.Ads.GoogleAds.V6.Enums.CriterionCategoryLocaleAvailabilityModeEnum.Types.CriterionCategoryLocaleAvailabilityMode) input.ReadEnum();
            break;
          }
          case 34: {
            CountryCode = input.ReadString();
            break;
          }
          case 42: {
            LanguageCode = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            AvailabilityMode = (global::Google.Ads.GoogleAds.V6.Enums.CriterionCategoryLocaleAvailabilityModeEnum.Types.CriterionCategoryLocaleAvailabilityMode) input.ReadEnum();
            break;
          }
          case 34: {
            CountryCode = input.ReadString();
            break;
          }
          case 42: {
            LanguageCode = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  #endregion

}

#endregion Designer generated code
