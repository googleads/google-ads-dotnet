// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: google/ads/googleads/v6/common/keyword_plan_common.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Google.Ads.GoogleAds.V6.Common {

  /// <summary>Holder for reflection information generated from google/ads/googleads/v6/common/keyword_plan_common.proto</summary>
  public static partial class KeywordPlanCommonReflection {

    #region Descriptor
    /// <summary>File descriptor for google/ads/googleads/v6/common/keyword_plan_common.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static KeywordPlanCommonReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Cjhnb29nbGUvYWRzL2dvb2dsZWFkcy92Ni9jb21tb24va2V5d29yZF9wbGFu",
            "X2NvbW1vbi5wcm90bxIeZ29vZ2xlLmFkcy5nb29nbGVhZHMudjYuY29tbW9u",
            "GkJnb29nbGUvYWRzL2dvb2dsZWFkcy92Ni9lbnVtcy9rZXl3b3JkX3BsYW5f",
            "Y29tcGV0aXRpb25fbGV2ZWwucHJvdG8aMWdvb2dsZS9hZHMvZ29vZ2xlYWRz",
            "L3Y2L2VudW1zL21vbnRoX29mX3llYXIucHJvdG8aHGdvb2dsZS9hcGkvYW5u",
            "b3RhdGlvbnMucHJvdG8i6AMKHEtleXdvcmRQbGFuSGlzdG9yaWNhbE1ldHJp",
            "Y3MSIQoUYXZnX21vbnRobHlfc2VhcmNoZXMYByABKANIAIgBARJTChZtb250",
            "aGx5X3NlYXJjaF92b2x1bWVzGAYgAygLMjMuZ29vZ2xlLmFkcy5nb29nbGVh",
            "ZHMudjYuY29tbW9uLk1vbnRobHlTZWFyY2hWb2x1bWUSbwoLY29tcGV0aXRp",
            "b24YAiABKA4yWi5nb29nbGUuYWRzLmdvb2dsZWFkcy52Ni5lbnVtcy5LZXl3",
            "b3JkUGxhbkNvbXBldGl0aW9uTGV2ZWxFbnVtLktleXdvcmRQbGFuQ29tcGV0",
            "aXRpb25MZXZlbBIeChFjb21wZXRpdGlvbl9pbmRleBgIIAEoA0gBiAEBEicK",
            "Gmxvd190b3Bfb2ZfcGFnZV9iaWRfbWljcm9zGAkgASgDSAKIAQESKAobaGln",
            "aF90b3Bfb2ZfcGFnZV9iaWRfbWljcm9zGAogASgDSAOIAQFCFwoVX2F2Z19t",
            "b250aGx5X3NlYXJjaGVzQhQKEl9jb21wZXRpdGlvbl9pbmRleEIdChtfbG93",
            "X3RvcF9vZl9wYWdlX2JpZF9taWNyb3NCHgocX2hpZ2hfdG9wX29mX3BhZ2Vf",
            "YmlkX21pY3JvcyKwAQoTTW9udGhseVNlYXJjaFZvbHVtZRIRCgR5ZWFyGAQg",
            "ASgDSACIAQESSQoFbW9udGgYAiABKA4yOi5nb29nbGUuYWRzLmdvb2dsZWFk",
            "cy52Ni5lbnVtcy5Nb250aE9mWWVhckVudW0uTW9udGhPZlllYXISHQoQbW9u",
            "dGhseV9zZWFyY2hlcxgFIAEoA0gBiAEBQgcKBV95ZWFyQhMKEV9tb250aGx5",
            "X3NlYXJjaGVzQvEBCiJjb20uZ29vZ2xlLmFkcy5nb29nbGVhZHMudjYuY29t",
            "bW9uQhZLZXl3b3JkUGxhbkNvbW1vblByb3RvUAFaRGdvb2dsZS5nb2xhbmcu",
            "b3JnL2dlbnByb3RvL2dvb2dsZWFwaXMvYWRzL2dvb2dsZWFkcy92Ni9jb21t",
            "b247Y29tbW9uogIDR0FBqgIeR29vZ2xlLkFkcy5Hb29nbGVBZHMuVjYuQ29t",
            "bW9uygIeR29vZ2xlXEFkc1xHb29nbGVBZHNcVjZcQ29tbW9u6gIiR29vZ2xl",
            "OjpBZHM6Okdvb2dsZUFkczo6VjY6OkNvbW1vbmIGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Google.Ads.GoogleAds.V6.Enums.KeywordPlanCompetitionLevelReflection.Descriptor, global::Google.Ads.GoogleAds.V6.Enums.MonthOfYearReflection.Descriptor, global::Google.Api.AnnotationsReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Ads.GoogleAds.V6.Common.KeywordPlanHistoricalMetrics), global::Google.Ads.GoogleAds.V6.Common.KeywordPlanHistoricalMetrics.Parser, new[]{ "AvgMonthlySearches", "MonthlySearchVolumes", "Competition", "CompetitionIndex", "LowTopOfPageBidMicros", "HighTopOfPageBidMicros" }, new[]{ "AvgMonthlySearches", "CompetitionIndex", "LowTopOfPageBidMicros", "HighTopOfPageBidMicros" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Ads.GoogleAds.V6.Common.MonthlySearchVolume), global::Google.Ads.GoogleAds.V6.Common.MonthlySearchVolume.Parser, new[]{ "Year", "Month", "MonthlySearches" }, new[]{ "Year", "MonthlySearches" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  /// <summary>
  /// Historical metrics specific to the targeting options selected.
  /// Targeting options include geographies, network, etc.
  /// Refer to https://support.google.com/google-ads/answer/3022575 for more
  /// details.
  /// </summary>
  public sealed partial class KeywordPlanHistoricalMetrics : pb::IMessage<KeywordPlanHistoricalMetrics>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<KeywordPlanHistoricalMetrics> _parser = new pb::MessageParser<KeywordPlanHistoricalMetrics>(() => new KeywordPlanHistoricalMetrics());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<KeywordPlanHistoricalMetrics> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Ads.GoogleAds.V6.Common.KeywordPlanCommonReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public KeywordPlanHistoricalMetrics() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public KeywordPlanHistoricalMetrics(KeywordPlanHistoricalMetrics other) : this() {
      _hasBits0 = other._hasBits0;
      avgMonthlySearches_ = other.avgMonthlySearches_;
      monthlySearchVolumes_ = other.monthlySearchVolumes_.Clone();
      competition_ = other.competition_;
      competitionIndex_ = other.competitionIndex_;
      lowTopOfPageBidMicros_ = other.lowTopOfPageBidMicros_;
      highTopOfPageBidMicros_ = other.highTopOfPageBidMicros_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public KeywordPlanHistoricalMetrics Clone() {
      return new KeywordPlanHistoricalMetrics(this);
    }

    /// <summary>Field number for the "avg_monthly_searches" field.</summary>
    public const int AvgMonthlySearchesFieldNumber = 7;
    private long avgMonthlySearches_;
    /// <summary>
    /// Approximate number of monthly searches on this query averaged
    /// for the past 12 months.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long AvgMonthlySearches {
      get { if ((_hasBits0 & 1) != 0) { return avgMonthlySearches_; } else { return 0L; } }
      set {
        _hasBits0 |= 1;
        avgMonthlySearches_ = value;
      }
    }
    /// <summary>Gets whether the "avg_monthly_searches" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasAvgMonthlySearches {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "avg_monthly_searches" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearAvgMonthlySearches() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "monthly_search_volumes" field.</summary>
    public const int MonthlySearchVolumesFieldNumber = 6;
    private static readonly pb::FieldCodec<global::Google.Ads.GoogleAds.V6.Common.MonthlySearchVolume> _repeated_monthlySearchVolumes_codec
        = pb::FieldCodec.ForMessage(50, global::Google.Ads.GoogleAds.V6.Common.MonthlySearchVolume.Parser);
    private readonly pbc::RepeatedField<global::Google.Ads.GoogleAds.V6.Common.MonthlySearchVolume> monthlySearchVolumes_ = new pbc::RepeatedField<global::Google.Ads.GoogleAds.V6.Common.MonthlySearchVolume>();
    /// <summary>
    /// Approximate number of searches on this query for the past twelve months.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Google.Ads.GoogleAds.V6.Common.MonthlySearchVolume> MonthlySearchVolumes {
      get { return monthlySearchVolumes_; }
    }

    /// <summary>Field number for the "competition" field.</summary>
    public const int CompetitionFieldNumber = 2;
    private global::Google.Ads.GoogleAds.V6.Enums.KeywordPlanCompetitionLevelEnum.Types.KeywordPlanCompetitionLevel competition_ = global::Google.Ads.GoogleAds.V6.Enums.KeywordPlanCompetitionLevelEnum.Types.KeywordPlanCompetitionLevel.Unspecified;
    /// <summary>
    /// The competition level for the query.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Ads.GoogleAds.V6.Enums.KeywordPlanCompetitionLevelEnum.Types.KeywordPlanCompetitionLevel Competition {
      get { return competition_; }
      set {
        competition_ = value;
      }
    }

    /// <summary>Field number for the "competition_index" field.</summary>
    public const int CompetitionIndexFieldNumber = 8;
    private long competitionIndex_;
    /// <summary>
    /// The competition index for the query in the range [0, 100].
    /// Shows how competitive ad placement is for a keyword.
    /// The level of competition from 0-100 is determined by the number of ad slots
    /// filled divided by the total number of ad slots available. If not enough
    /// data is available, null is returned.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long CompetitionIndex {
      get { if ((_hasBits0 & 2) != 0) { return competitionIndex_; } else { return 0L; } }
      set {
        _hasBits0 |= 2;
        competitionIndex_ = value;
      }
    }
    /// <summary>Gets whether the "competition_index" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasCompetitionIndex {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "competition_index" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearCompetitionIndex() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "low_top_of_page_bid_micros" field.</summary>
    public const int LowTopOfPageBidMicrosFieldNumber = 9;
    private long lowTopOfPageBidMicros_;
    /// <summary>
    /// Top of page bid low range (20th percentile) in micros for the keyword.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long LowTopOfPageBidMicros {
      get { if ((_hasBits0 & 4) != 0) { return lowTopOfPageBidMicros_; } else { return 0L; } }
      set {
        _hasBits0 |= 4;
        lowTopOfPageBidMicros_ = value;
      }
    }
    /// <summary>Gets whether the "low_top_of_page_bid_micros" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasLowTopOfPageBidMicros {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "low_top_of_page_bid_micros" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearLowTopOfPageBidMicros() {
      _hasBits0 &= ~4;
    }

    /// <summary>Field number for the "high_top_of_page_bid_micros" field.</summary>
    public const int HighTopOfPageBidMicrosFieldNumber = 10;
    private long highTopOfPageBidMicros_;
    /// <summary>
    /// Top of page bid high range (80th percentile) in micros for the keyword.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long HighTopOfPageBidMicros {
      get { if ((_hasBits0 & 8) != 0) { return highTopOfPageBidMicros_; } else { return 0L; } }
      set {
        _hasBits0 |= 8;
        highTopOfPageBidMicros_ = value;
      }
    }
    /// <summary>Gets whether the "high_top_of_page_bid_micros" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasHighTopOfPageBidMicros {
      get { return (_hasBits0 & 8) != 0; }
    }
    /// <summary>Clears the value of the "high_top_of_page_bid_micros" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearHighTopOfPageBidMicros() {
      _hasBits0 &= ~8;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as KeywordPlanHistoricalMetrics);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(KeywordPlanHistoricalMetrics other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (AvgMonthlySearches != other.AvgMonthlySearches) return false;
      if(!monthlySearchVolumes_.Equals(other.monthlySearchVolumes_)) return false;
      if (Competition != other.Competition) return false;
      if (CompetitionIndex != other.CompetitionIndex) return false;
      if (LowTopOfPageBidMicros != other.LowTopOfPageBidMicros) return false;
      if (HighTopOfPageBidMicros != other.HighTopOfPageBidMicros) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasAvgMonthlySearches) hash ^= AvgMonthlySearches.GetHashCode();
      hash ^= monthlySearchVolumes_.GetHashCode();
      if (Competition != global::Google.Ads.GoogleAds.V6.Enums.KeywordPlanCompetitionLevelEnum.Types.KeywordPlanCompetitionLevel.Unspecified) hash ^= Competition.GetHashCode();
      if (HasCompetitionIndex) hash ^= CompetitionIndex.GetHashCode();
      if (HasLowTopOfPageBidMicros) hash ^= LowTopOfPageBidMicros.GetHashCode();
      if (HasHighTopOfPageBidMicros) hash ^= HighTopOfPageBidMicros.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Competition != global::Google.Ads.GoogleAds.V6.Enums.KeywordPlanCompetitionLevelEnum.Types.KeywordPlanCompetitionLevel.Unspecified) {
        output.WriteRawTag(16);
        output.WriteEnum((int) Competition);
      }
      monthlySearchVolumes_.WriteTo(output, _repeated_monthlySearchVolumes_codec);
      if (HasAvgMonthlySearches) {
        output.WriteRawTag(56);
        output.WriteInt64(AvgMonthlySearches);
      }
      if (HasCompetitionIndex) {
        output.WriteRawTag(64);
        output.WriteInt64(CompetitionIndex);
      }
      if (HasLowTopOfPageBidMicros) {
        output.WriteRawTag(72);
        output.WriteInt64(LowTopOfPageBidMicros);
      }
      if (HasHighTopOfPageBidMicros) {
        output.WriteRawTag(80);
        output.WriteInt64(HighTopOfPageBidMicros);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Competition != global::Google.Ads.GoogleAds.V6.Enums.KeywordPlanCompetitionLevelEnum.Types.KeywordPlanCompetitionLevel.Unspecified) {
        output.WriteRawTag(16);
        output.WriteEnum((int) Competition);
      }
      monthlySearchVolumes_.WriteTo(ref output, _repeated_monthlySearchVolumes_codec);
      if (HasAvgMonthlySearches) {
        output.WriteRawTag(56);
        output.WriteInt64(AvgMonthlySearches);
      }
      if (HasCompetitionIndex) {
        output.WriteRawTag(64);
        output.WriteInt64(CompetitionIndex);
      }
      if (HasLowTopOfPageBidMicros) {
        output.WriteRawTag(72);
        output.WriteInt64(LowTopOfPageBidMicros);
      }
      if (HasHighTopOfPageBidMicros) {
        output.WriteRawTag(80);
        output.WriteInt64(HighTopOfPageBidMicros);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasAvgMonthlySearches) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(AvgMonthlySearches);
      }
      size += monthlySearchVolumes_.CalculateSize(_repeated_monthlySearchVolumes_codec);
      if (Competition != global::Google.Ads.GoogleAds.V6.Enums.KeywordPlanCompetitionLevelEnum.Types.KeywordPlanCompetitionLevel.Unspecified) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Competition);
      }
      if (HasCompetitionIndex) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(CompetitionIndex);
      }
      if (HasLowTopOfPageBidMicros) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(LowTopOfPageBidMicros);
      }
      if (HasHighTopOfPageBidMicros) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(HighTopOfPageBidMicros);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(KeywordPlanHistoricalMetrics other) {
      if (other == null) {
        return;
      }
      if (other.HasAvgMonthlySearches) {
        AvgMonthlySearches = other.AvgMonthlySearches;
      }
      monthlySearchVolumes_.Add(other.monthlySearchVolumes_);
      if (other.Competition != global::Google.Ads.GoogleAds.V6.Enums.KeywordPlanCompetitionLevelEnum.Types.KeywordPlanCompetitionLevel.Unspecified) {
        Competition = other.Competition;
      }
      if (other.HasCompetitionIndex) {
        CompetitionIndex = other.CompetitionIndex;
      }
      if (other.HasLowTopOfPageBidMicros) {
        LowTopOfPageBidMicros = other.LowTopOfPageBidMicros;
      }
      if (other.HasHighTopOfPageBidMicros) {
        HighTopOfPageBidMicros = other.HighTopOfPageBidMicros;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 16: {
            Competition = (global::Google.Ads.GoogleAds.V6.Enums.KeywordPlanCompetitionLevelEnum.Types.KeywordPlanCompetitionLevel) input.ReadEnum();
            break;
          }
          case 50: {
            monthlySearchVolumes_.AddEntriesFrom(input, _repeated_monthlySearchVolumes_codec);
            break;
          }
          case 56: {
            AvgMonthlySearches = input.ReadInt64();
            break;
          }
          case 64: {
            CompetitionIndex = input.ReadInt64();
            break;
          }
          case 72: {
            LowTopOfPageBidMicros = input.ReadInt64();
            break;
          }
          case 80: {
            HighTopOfPageBidMicros = input.ReadInt64();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 16: {
            Competition = (global::Google.Ads.GoogleAds.V6.Enums.KeywordPlanCompetitionLevelEnum.Types.KeywordPlanCompetitionLevel) input.ReadEnum();
            break;
          }
          case 50: {
            monthlySearchVolumes_.AddEntriesFrom(ref input, _repeated_monthlySearchVolumes_codec);
            break;
          }
          case 56: {
            AvgMonthlySearches = input.ReadInt64();
            break;
          }
          case 64: {
            CompetitionIndex = input.ReadInt64();
            break;
          }
          case 72: {
            LowTopOfPageBidMicros = input.ReadInt64();
            break;
          }
          case 80: {
            HighTopOfPageBidMicros = input.ReadInt64();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// Monthly search volume.
  /// </summary>
  public sealed partial class MonthlySearchVolume : pb::IMessage<MonthlySearchVolume>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<MonthlySearchVolume> _parser = new pb::MessageParser<MonthlySearchVolume>(() => new MonthlySearchVolume());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MonthlySearchVolume> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Ads.GoogleAds.V6.Common.KeywordPlanCommonReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MonthlySearchVolume() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MonthlySearchVolume(MonthlySearchVolume other) : this() {
      _hasBits0 = other._hasBits0;
      year_ = other.year_;
      month_ = other.month_;
      monthlySearches_ = other.monthlySearches_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MonthlySearchVolume Clone() {
      return new MonthlySearchVolume(this);
    }

    /// <summary>Field number for the "year" field.</summary>
    public const int YearFieldNumber = 4;
    private long year_;
    /// <summary>
    /// The year of the search volume (e.g. 2020).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Year {
      get { if ((_hasBits0 & 1) != 0) { return year_; } else { return 0L; } }
      set {
        _hasBits0 |= 1;
        year_ = value;
      }
    }
    /// <summary>Gets whether the "year" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasYear {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "year" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearYear() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "month" field.</summary>
    public const int MonthFieldNumber = 2;
    private global::Google.Ads.GoogleAds.V6.Enums.MonthOfYearEnum.Types.MonthOfYear month_ = global::Google.Ads.GoogleAds.V6.Enums.MonthOfYearEnum.Types.MonthOfYear.Unspecified;
    /// <summary>
    /// The month of the search volume.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Ads.GoogleAds.V6.Enums.MonthOfYearEnum.Types.MonthOfYear Month {
      get { return month_; }
      set {
        month_ = value;
      }
    }

    /// <summary>Field number for the "monthly_searches" field.</summary>
    public const int MonthlySearchesFieldNumber = 5;
    private long monthlySearches_;
    /// <summary>
    /// Approximate number of searches for the month.
    /// A null value indicates the search volume is unavailable for
    /// that month.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long MonthlySearches {
      get { if ((_hasBits0 & 2) != 0) { return monthlySearches_; } else { return 0L; } }
      set {
        _hasBits0 |= 2;
        monthlySearches_ = value;
      }
    }
    /// <summary>Gets whether the "monthly_searches" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasMonthlySearches {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "monthly_searches" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearMonthlySearches() {
      _hasBits0 &= ~2;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MonthlySearchVolume);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MonthlySearchVolume other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Year != other.Year) return false;
      if (Month != other.Month) return false;
      if (MonthlySearches != other.MonthlySearches) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasYear) hash ^= Year.GetHashCode();
      if (Month != global::Google.Ads.GoogleAds.V6.Enums.MonthOfYearEnum.Types.MonthOfYear.Unspecified) hash ^= Month.GetHashCode();
      if (HasMonthlySearches) hash ^= MonthlySearches.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Month != global::Google.Ads.GoogleAds.V6.Enums.MonthOfYearEnum.Types.MonthOfYear.Unspecified) {
        output.WriteRawTag(16);
        output.WriteEnum((int) Month);
      }
      if (HasYear) {
        output.WriteRawTag(32);
        output.WriteInt64(Year);
      }
      if (HasMonthlySearches) {
        output.WriteRawTag(40);
        output.WriteInt64(MonthlySearches);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Month != global::Google.Ads.GoogleAds.V6.Enums.MonthOfYearEnum.Types.MonthOfYear.Unspecified) {
        output.WriteRawTag(16);
        output.WriteEnum((int) Month);
      }
      if (HasYear) {
        output.WriteRawTag(32);
        output.WriteInt64(Year);
      }
      if (HasMonthlySearches) {
        output.WriteRawTag(40);
        output.WriteInt64(MonthlySearches);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasYear) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Year);
      }
      if (Month != global::Google.Ads.GoogleAds.V6.Enums.MonthOfYearEnum.Types.MonthOfYear.Unspecified) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Month);
      }
      if (HasMonthlySearches) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(MonthlySearches);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MonthlySearchVolume other) {
      if (other == null) {
        return;
      }
      if (other.HasYear) {
        Year = other.Year;
      }
      if (other.Month != global::Google.Ads.GoogleAds.V6.Enums.MonthOfYearEnum.Types.MonthOfYear.Unspecified) {
        Month = other.Month;
      }
      if (other.HasMonthlySearches) {
        MonthlySearches = other.MonthlySearches;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 16: {
            Month = (global::Google.Ads.GoogleAds.V6.Enums.MonthOfYearEnum.Types.MonthOfYear) input.ReadEnum();
            break;
          }
          case 32: {
            Year = input.ReadInt64();
            break;
          }
          case 40: {
            MonthlySearches = input.ReadInt64();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 16: {
            Month = (global::Google.Ads.GoogleAds.V6.Enums.MonthOfYearEnum.Types.MonthOfYear) input.ReadEnum();
            break;
          }
          case 32: {
            Year = input.ReadInt64();
            break;
          }
          case 40: {
            MonthlySearches = input.ReadInt64();
            break;
          }
        }
      }
    }
    #endif

  }

  #endregion

}

#endregion Designer generated code
