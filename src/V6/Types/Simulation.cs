// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: google/ads/googleads/v6/common/simulation.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Google.Ads.GoogleAds.V6.Common {

  /// <summary>Holder for reflection information generated from google/ads/googleads/v6/common/simulation.proto</summary>
  public static partial class SimulationReflection {

    #region Descriptor
    /// <summary>File descriptor for google/ads/googleads/v6/common/simulation.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static SimulationReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Ci9nb29nbGUvYWRzL2dvb2dsZWFkcy92Ni9jb21tb24vc2ltdWxhdGlvbi5w",
            "cm90bxIeZ29vZ2xlLmFkcy5nb29nbGVhZHMudjYuY29tbW9uGhxnb29nbGUv",
            "YXBpL2Fubm90YXRpb25zLnByb3RvImwKHkJpZE1vZGlmaWVyU2ltdWxhdGlv",
            "blBvaW50TGlzdBJKCgZwb2ludHMYASADKAsyOi5nb29nbGUuYWRzLmdvb2ds",
            "ZWFkcy52Ni5jb21tb24uQmlkTW9kaWZpZXJTaW11bGF0aW9uUG9pbnQiYgoZ",
            "Q3BjQmlkU2ltdWxhdGlvblBvaW50TGlzdBJFCgZwb2ludHMYASADKAsyNS5n",
            "b29nbGUuYWRzLmdvb2dsZWFkcy52Ni5jb21tb24uQ3BjQmlkU2ltdWxhdGlv",
            "blBvaW50ImIKGUNwdkJpZFNpbXVsYXRpb25Qb2ludExpc3QSRQoGcG9pbnRz",
            "GAEgAygLMjUuZ29vZ2xlLmFkcy5nb29nbGVhZHMudjYuY29tbW9uLkNwdkJp",
            "ZFNpbXVsYXRpb25Qb2ludCJoChxUYXJnZXRDcGFTaW11bGF0aW9uUG9pbnRM",
            "aXN0EkgKBnBvaW50cxgBIAMoCzI4Lmdvb2dsZS5hZHMuZ29vZ2xlYWRzLnY2",
            "LmNvbW1vbi5UYXJnZXRDcGFTaW11bGF0aW9uUG9pbnQiagodVGFyZ2V0Um9h",
            "c1NpbXVsYXRpb25Qb2ludExpc3QSSQoGcG9pbnRzGAEgAygLMjkuZ29vZ2xl",
            "LmFkcy5nb29nbGVhZHMudjYuY29tbW9uLlRhcmdldFJvYXNTaW11bGF0aW9u",
            "UG9pbnQicAogUGVyY2VudENwY0JpZFNpbXVsYXRpb25Qb2ludExpc3QSTAoG",
            "cG9pbnRzGAEgAygLMjwuZ29vZ2xlLmFkcy5nb29nbGVhZHMudjYuY29tbW9u",
            "LlBlcmNlbnRDcGNCaWRTaW11bGF0aW9uUG9pbnQi0gYKGkJpZE1vZGlmaWVy",
            "U2ltdWxhdGlvblBvaW50EhkKDGJpZF9tb2RpZmllchgPIAEoAUgAiAEBEiEK",
            "FGJpZGRhYmxlX2NvbnZlcnNpb25zGBAgASgBSAGIAQESJwoaYmlkZGFibGVf",
            "Y29udmVyc2lvbnNfdmFsdWUYESABKAFIAogBARITCgZjbGlja3MYEiABKANI",
            "A4gBARIYCgtjb3N0X21pY3JvcxgTIAEoA0gEiAEBEhgKC2ltcHJlc3Npb25z",
            "GBQgASgDSAWIAQESIQoUdG9wX3Nsb3RfaW1wcmVzc2lvbnMYFSABKANIBogB",
            "ARIoChtwYXJlbnRfYmlkZGFibGVfY29udmVyc2lvbnMYFiABKAFIB4gBARIu",
            "CiFwYXJlbnRfYmlkZGFibGVfY29udmVyc2lvbnNfdmFsdWUYFyABKAFICIgB",
            "ARIaCg1wYXJlbnRfY2xpY2tzGBggASgDSAmIAQESHwoScGFyZW50X2Nvc3Rf",
            "bWljcm9zGBkgASgDSAqIAQESHwoScGFyZW50X2ltcHJlc3Npb25zGBogASgD",
            "SAuIAQESKAobcGFyZW50X3RvcF9zbG90X2ltcHJlc3Npb25zGBsgASgDSAyI",
            "AQESKgodcGFyZW50X3JlcXVpcmVkX2J1ZGdldF9taWNyb3MYHCABKANIDYgB",
            "AUIPCg1fYmlkX21vZGlmaWVyQhcKFV9iaWRkYWJsZV9jb252ZXJzaW9uc0Id",
            "ChtfYmlkZGFibGVfY29udmVyc2lvbnNfdmFsdWVCCQoHX2NsaWNrc0IOCgxf",
            "Y29zdF9taWNyb3NCDgoMX2ltcHJlc3Npb25zQhcKFV90b3Bfc2xvdF9pbXBy",
            "ZXNzaW9uc0IeChxfcGFyZW50X2JpZGRhYmxlX2NvbnZlcnNpb25zQiQKIl9w",
            "YXJlbnRfYmlkZGFibGVfY29udmVyc2lvbnNfdmFsdWVCEAoOX3BhcmVudF9j",
            "bGlja3NCFQoTX3BhcmVudF9jb3N0X21pY3Jvc0IVChNfcGFyZW50X2ltcHJl",
            "c3Npb25zQh4KHF9wYXJlbnRfdG9wX3Nsb3RfaW1wcmVzc2lvbnNCIAoeX3Bh",
            "cmVudF9yZXF1aXJlZF9idWRnZXRfbWljcm9zIvsCChVDcGNCaWRTaW11bGF0",
            "aW9uUG9pbnQSGwoOY3BjX2JpZF9taWNyb3MYCCABKANIAIgBARIhChRiaWRk",
            "YWJsZV9jb252ZXJzaW9ucxgJIAEoAUgBiAEBEicKGmJpZGRhYmxlX2NvbnZl",
            "cnNpb25zX3ZhbHVlGAogASgBSAKIAQESEwoGY2xpY2tzGAsgASgDSAOIAQES",
            "GAoLY29zdF9taWNyb3MYDCABKANIBIgBARIYCgtpbXByZXNzaW9ucxgNIAEo",
            "A0gFiAEBEiEKFHRvcF9zbG90X2ltcHJlc3Npb25zGA4gASgDSAaIAQFCEQoP",
            "X2NwY19iaWRfbWljcm9zQhcKFV9iaWRkYWJsZV9jb252ZXJzaW9uc0IdChtf",
            "YmlkZGFibGVfY29udmVyc2lvbnNfdmFsdWVCCQoHX2NsaWNrc0IOCgxfY29z",
            "dF9taWNyb3NCDgoMX2ltcHJlc3Npb25zQhcKFV90b3Bfc2xvdF9pbXByZXNz",
            "aW9ucyK5AQoVQ3B2QmlkU2ltdWxhdGlvblBvaW50EhsKDmNwdl9iaWRfbWlj",
            "cm9zGAUgASgDSACIAQESGAoLY29zdF9taWNyb3MYBiABKANIAYgBARIYCgtp",
            "bXByZXNzaW9ucxgHIAEoA0gCiAEBEhIKBXZpZXdzGAggASgDSAOIAQFCEQoP",
            "X2Nwdl9iaWRfbWljcm9zQg4KDF9jb3N0X21pY3Jvc0IOCgxfaW1wcmVzc2lv",
            "bnNCCAoGX3ZpZXdzIoQDChhUYXJnZXRDcGFTaW11bGF0aW9uUG9pbnQSHgoR",
            "dGFyZ2V0X2NwYV9taWNyb3MYCCABKANIAIgBARIhChRiaWRkYWJsZV9jb252",
            "ZXJzaW9ucxgJIAEoAUgBiAEBEicKGmJpZGRhYmxlX2NvbnZlcnNpb25zX3Zh",
            "bHVlGAogASgBSAKIAQESEwoGY2xpY2tzGAsgASgDSAOIAQESGAoLY29zdF9t",
            "aWNyb3MYDCABKANIBIgBARIYCgtpbXByZXNzaW9ucxgNIAEoA0gFiAEBEiEK",
            "FHRvcF9zbG90X2ltcHJlc3Npb25zGA4gASgDSAaIAQFCFAoSX3RhcmdldF9j",
            "cGFfbWljcm9zQhcKFV9iaWRkYWJsZV9jb252ZXJzaW9uc0IdChtfYmlkZGFi",
            "bGVfY29udmVyc2lvbnNfdmFsdWVCCQoHX2NsaWNrc0IOCgxfY29zdF9taWNy",
            "b3NCDgoMX2ltcHJlc3Npb25zQhcKFV90b3Bfc2xvdF9pbXByZXNzaW9ucyL5",
            "AgoZVGFyZ2V0Um9hc1NpbXVsYXRpb25Qb2ludBIYCgt0YXJnZXRfcm9hcxgI",
            "IAEoAUgAiAEBEiEKFGJpZGRhYmxlX2NvbnZlcnNpb25zGAkgASgBSAGIAQES",
            "JwoaYmlkZGFibGVfY29udmVyc2lvbnNfdmFsdWUYCiABKAFIAogBARITCgZj",
            "bGlja3MYCyABKANIA4gBARIYCgtjb3N0X21pY3JvcxgMIAEoA0gEiAEBEhgK",
            "C2ltcHJlc3Npb25zGA0gASgDSAWIAQESIQoUdG9wX3Nsb3RfaW1wcmVzc2lv",
            "bnMYDiABKANIBogBAUIOCgxfdGFyZ2V0X3JvYXNCFwoVX2JpZGRhYmxlX2Nv",
            "bnZlcnNpb25zQh0KG19iaWRkYWJsZV9jb252ZXJzaW9uc192YWx1ZUIJCgdf",
            "Y2xpY2tzQg4KDF9jb3N0X21pY3Jvc0IOCgxfaW1wcmVzc2lvbnNCFwoVX3Rv",
            "cF9zbG90X2ltcHJlc3Npb25zIpIDChxQZXJjZW50Q3BjQmlkU2ltdWxhdGlv",
            "blBvaW50EiMKFnBlcmNlbnRfY3BjX2JpZF9taWNyb3MYASABKANIAIgBARIh",
            "ChRiaWRkYWJsZV9jb252ZXJzaW9ucxgCIAEoAUgBiAEBEicKGmJpZGRhYmxl",
            "X2NvbnZlcnNpb25zX3ZhbHVlGAMgASgBSAKIAQESEwoGY2xpY2tzGAQgASgD",
            "SAOIAQESGAoLY29zdF9taWNyb3MYBSABKANIBIgBARIYCgtpbXByZXNzaW9u",
            "cxgGIAEoA0gFiAEBEiEKFHRvcF9zbG90X2ltcHJlc3Npb25zGAcgASgDSAaI",
            "AQFCGQoXX3BlcmNlbnRfY3BjX2JpZF9taWNyb3NCFwoVX2JpZGRhYmxlX2Nv",
            "bnZlcnNpb25zQh0KG19iaWRkYWJsZV9jb252ZXJzaW9uc192YWx1ZUIJCgdf",
            "Y2xpY2tzQg4KDF9jb3N0X21pY3Jvc0IOCgxfaW1wcmVzc2lvbnNCFwoVX3Rv",
            "cF9zbG90X2ltcHJlc3Npb25zQuoBCiJjb20uZ29vZ2xlLmFkcy5nb29nbGVh",
            "ZHMudjYuY29tbW9uQg9TaW11bGF0aW9uUHJvdG9QAVpEZ29vZ2xlLmdvbGFu",
            "Zy5vcmcvZ2VucHJvdG8vZ29vZ2xlYXBpcy9hZHMvZ29vZ2xlYWRzL3Y2L2Nv",
            "bW1vbjtjb21tb26iAgNHQUGqAh5Hb29nbGUuQWRzLkdvb2dsZUFkcy5WNi5D",
            "b21tb27KAh5Hb29nbGVcQWRzXEdvb2dsZUFkc1xWNlxDb21tb27qAiJHb29n",
            "bGU6OkFkczo6R29vZ2xlQWRzOjpWNjo6Q29tbW9uYgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Google.Api.AnnotationsReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Ads.GoogleAds.V6.Common.BidModifierSimulationPointList), global::Google.Ads.GoogleAds.V6.Common.BidModifierSimulationPointList.Parser, new[]{ "Points" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Ads.GoogleAds.V6.Common.CpcBidSimulationPointList), global::Google.Ads.GoogleAds.V6.Common.CpcBidSimulationPointList.Parser, new[]{ "Points" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Ads.GoogleAds.V6.Common.CpvBidSimulationPointList), global::Google.Ads.GoogleAds.V6.Common.CpvBidSimulationPointList.Parser, new[]{ "Points" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Ads.GoogleAds.V6.Common.TargetCpaSimulationPointList), global::Google.Ads.GoogleAds.V6.Common.TargetCpaSimulationPointList.Parser, new[]{ "Points" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Ads.GoogleAds.V6.Common.TargetRoasSimulationPointList), global::Google.Ads.GoogleAds.V6.Common.TargetRoasSimulationPointList.Parser, new[]{ "Points" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Ads.GoogleAds.V6.Common.PercentCpcBidSimulationPointList), global::Google.Ads.GoogleAds.V6.Common.PercentCpcBidSimulationPointList.Parser, new[]{ "Points" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Ads.GoogleAds.V6.Common.BidModifierSimulationPoint), global::Google.Ads.GoogleAds.V6.Common.BidModifierSimulationPoint.Parser, new[]{ "BidModifier", "BiddableConversions", "BiddableConversionsValue", "Clicks", "CostMicros", "Impressions", "TopSlotImpressions", "ParentBiddableConversions", "ParentBiddableConversionsValue", "ParentClicks", "ParentCostMicros", "ParentImpressions", "ParentTopSlotImpressions", "ParentRequiredBudgetMicros" }, new[]{ "BidModifier", "BiddableConversions", "BiddableConversionsValue", "Clicks", "CostMicros", "Impressions", "TopSlotImpressions", "ParentBiddableConversions", "ParentBiddableConversionsValue", "ParentClicks", "ParentCostMicros", "ParentImpressions", "ParentTopSlotImpressions", "ParentRequiredBudgetMicros" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Ads.GoogleAds.V6.Common.CpcBidSimulationPoint), global::Google.Ads.GoogleAds.V6.Common.CpcBidSimulationPoint.Parser, new[]{ "CpcBidMicros", "BiddableConversions", "BiddableConversionsValue", "Clicks", "CostMicros", "Impressions", "TopSlotImpressions" }, new[]{ "CpcBidMicros", "BiddableConversions", "BiddableConversionsValue", "Clicks", "CostMicros", "Impressions", "TopSlotImpressions" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Ads.GoogleAds.V6.Common.CpvBidSimulationPoint), global::Google.Ads.GoogleAds.V6.Common.CpvBidSimulationPoint.Parser, new[]{ "CpvBidMicros", "CostMicros", "Impressions", "Views" }, new[]{ "CpvBidMicros", "CostMicros", "Impressions", "Views" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Ads.GoogleAds.V6.Common.TargetCpaSimulationPoint), global::Google.Ads.GoogleAds.V6.Common.TargetCpaSimulationPoint.Parser, new[]{ "TargetCpaMicros", "BiddableConversions", "BiddableConversionsValue", "Clicks", "CostMicros", "Impressions", "TopSlotImpressions" }, new[]{ "TargetCpaMicros", "BiddableConversions", "BiddableConversionsValue", "Clicks", "CostMicros", "Impressions", "TopSlotImpressions" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Ads.GoogleAds.V6.Common.TargetRoasSimulationPoint), global::Google.Ads.GoogleAds.V6.Common.TargetRoasSimulationPoint.Parser, new[]{ "TargetRoas", "BiddableConversions", "BiddableConversionsValue", "Clicks", "CostMicros", "Impressions", "TopSlotImpressions" }, new[]{ "TargetRoas", "BiddableConversions", "BiddableConversionsValue", "Clicks", "CostMicros", "Impressions", "TopSlotImpressions" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Ads.GoogleAds.V6.Common.PercentCpcBidSimulationPoint), global::Google.Ads.GoogleAds.V6.Common.PercentCpcBidSimulationPoint.Parser, new[]{ "PercentCpcBidMicros", "BiddableConversions", "BiddableConversionsValue", "Clicks", "CostMicros", "Impressions", "TopSlotImpressions" }, new[]{ "PercentCpcBidMicros", "BiddableConversions", "BiddableConversionsValue", "Clicks", "CostMicros", "Impressions", "TopSlotImpressions" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  /// <summary>
  /// A container for simulation points for simulations of type BID_MODIFIER.
  /// </summary>
  public sealed partial class BidModifierSimulationPointList : pb::IMessage<BidModifierSimulationPointList>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<BidModifierSimulationPointList> _parser = new pb::MessageParser<BidModifierSimulationPointList>(() => new BidModifierSimulationPointList());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BidModifierSimulationPointList> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Ads.GoogleAds.V6.Common.SimulationReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BidModifierSimulationPointList() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BidModifierSimulationPointList(BidModifierSimulationPointList other) : this() {
      points_ = other.points_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BidModifierSimulationPointList Clone() {
      return new BidModifierSimulationPointList(this);
    }

    /// <summary>Field number for the "points" field.</summary>
    public const int PointsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Google.Ads.GoogleAds.V6.Common.BidModifierSimulationPoint> _repeated_points_codec
        = pb::FieldCodec.ForMessage(10, global::Google.Ads.GoogleAds.V6.Common.BidModifierSimulationPoint.Parser);
    private readonly pbc::RepeatedField<global::Google.Ads.GoogleAds.V6.Common.BidModifierSimulationPoint> points_ = new pbc::RepeatedField<global::Google.Ads.GoogleAds.V6.Common.BidModifierSimulationPoint>();
    /// <summary>
    /// Projected metrics for a series of bid modifier amounts.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Google.Ads.GoogleAds.V6.Common.BidModifierSimulationPoint> Points {
      get { return points_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as BidModifierSimulationPointList);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(BidModifierSimulationPointList other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!points_.Equals(other.points_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= points_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      points_.WriteTo(output, _repeated_points_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      points_.WriteTo(ref output, _repeated_points_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += points_.CalculateSize(_repeated_points_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(BidModifierSimulationPointList other) {
      if (other == null) {
        return;
      }
      points_.Add(other.points_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            points_.AddEntriesFrom(input, _repeated_points_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            points_.AddEntriesFrom(ref input, _repeated_points_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// A container for simulation points for simulations of type CPC_BID.
  /// </summary>
  public sealed partial class CpcBidSimulationPointList : pb::IMessage<CpcBidSimulationPointList>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CpcBidSimulationPointList> _parser = new pb::MessageParser<CpcBidSimulationPointList>(() => new CpcBidSimulationPointList());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CpcBidSimulationPointList> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Ads.GoogleAds.V6.Common.SimulationReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CpcBidSimulationPointList() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CpcBidSimulationPointList(CpcBidSimulationPointList other) : this() {
      points_ = other.points_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CpcBidSimulationPointList Clone() {
      return new CpcBidSimulationPointList(this);
    }

    /// <summary>Field number for the "points" field.</summary>
    public const int PointsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Google.Ads.GoogleAds.V6.Common.CpcBidSimulationPoint> _repeated_points_codec
        = pb::FieldCodec.ForMessage(10, global::Google.Ads.GoogleAds.V6.Common.CpcBidSimulationPoint.Parser);
    private readonly pbc::RepeatedField<global::Google.Ads.GoogleAds.V6.Common.CpcBidSimulationPoint> points_ = new pbc::RepeatedField<global::Google.Ads.GoogleAds.V6.Common.CpcBidSimulationPoint>();
    /// <summary>
    /// Projected metrics for a series of CPC bid amounts.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Google.Ads.GoogleAds.V6.Common.CpcBidSimulationPoint> Points {
      get { return points_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CpcBidSimulationPointList);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CpcBidSimulationPointList other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!points_.Equals(other.points_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= points_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      points_.WriteTo(output, _repeated_points_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      points_.WriteTo(ref output, _repeated_points_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += points_.CalculateSize(_repeated_points_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CpcBidSimulationPointList other) {
      if (other == null) {
        return;
      }
      points_.Add(other.points_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            points_.AddEntriesFrom(input, _repeated_points_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            points_.AddEntriesFrom(ref input, _repeated_points_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// A container for simulation points for simulations of type CPV_BID.
  /// </summary>
  public sealed partial class CpvBidSimulationPointList : pb::IMessage<CpvBidSimulationPointList>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CpvBidSimulationPointList> _parser = new pb::MessageParser<CpvBidSimulationPointList>(() => new CpvBidSimulationPointList());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CpvBidSimulationPointList> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Ads.GoogleAds.V6.Common.SimulationReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CpvBidSimulationPointList() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CpvBidSimulationPointList(CpvBidSimulationPointList other) : this() {
      points_ = other.points_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CpvBidSimulationPointList Clone() {
      return new CpvBidSimulationPointList(this);
    }

    /// <summary>Field number for the "points" field.</summary>
    public const int PointsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Google.Ads.GoogleAds.V6.Common.CpvBidSimulationPoint> _repeated_points_codec
        = pb::FieldCodec.ForMessage(10, global::Google.Ads.GoogleAds.V6.Common.CpvBidSimulationPoint.Parser);
    private readonly pbc::RepeatedField<global::Google.Ads.GoogleAds.V6.Common.CpvBidSimulationPoint> points_ = new pbc::RepeatedField<global::Google.Ads.GoogleAds.V6.Common.CpvBidSimulationPoint>();
    /// <summary>
    /// Projected metrics for a series of CPV bid amounts.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Google.Ads.GoogleAds.V6.Common.CpvBidSimulationPoint> Points {
      get { return points_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CpvBidSimulationPointList);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CpvBidSimulationPointList other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!points_.Equals(other.points_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= points_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      points_.WriteTo(output, _repeated_points_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      points_.WriteTo(ref output, _repeated_points_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += points_.CalculateSize(_repeated_points_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CpvBidSimulationPointList other) {
      if (other == null) {
        return;
      }
      points_.Add(other.points_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            points_.AddEntriesFrom(input, _repeated_points_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            points_.AddEntriesFrom(ref input, _repeated_points_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// A container for simulation points for simulations of type TARGET_CPA.
  /// </summary>
  public sealed partial class TargetCpaSimulationPointList : pb::IMessage<TargetCpaSimulationPointList>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<TargetCpaSimulationPointList> _parser = new pb::MessageParser<TargetCpaSimulationPointList>(() => new TargetCpaSimulationPointList());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TargetCpaSimulationPointList> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Ads.GoogleAds.V6.Common.SimulationReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TargetCpaSimulationPointList() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TargetCpaSimulationPointList(TargetCpaSimulationPointList other) : this() {
      points_ = other.points_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TargetCpaSimulationPointList Clone() {
      return new TargetCpaSimulationPointList(this);
    }

    /// <summary>Field number for the "points" field.</summary>
    public const int PointsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Google.Ads.GoogleAds.V6.Common.TargetCpaSimulationPoint> _repeated_points_codec
        = pb::FieldCodec.ForMessage(10, global::Google.Ads.GoogleAds.V6.Common.TargetCpaSimulationPoint.Parser);
    private readonly pbc::RepeatedField<global::Google.Ads.GoogleAds.V6.Common.TargetCpaSimulationPoint> points_ = new pbc::RepeatedField<global::Google.Ads.GoogleAds.V6.Common.TargetCpaSimulationPoint>();
    /// <summary>
    /// Projected metrics for a series of target CPA amounts.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Google.Ads.GoogleAds.V6.Common.TargetCpaSimulationPoint> Points {
      get { return points_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TargetCpaSimulationPointList);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TargetCpaSimulationPointList other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!points_.Equals(other.points_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= points_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      points_.WriteTo(output, _repeated_points_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      points_.WriteTo(ref output, _repeated_points_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += points_.CalculateSize(_repeated_points_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TargetCpaSimulationPointList other) {
      if (other == null) {
        return;
      }
      points_.Add(other.points_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            points_.AddEntriesFrom(input, _repeated_points_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            points_.AddEntriesFrom(ref input, _repeated_points_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// A container for simulation points for simulations of type TARGET_ROAS.
  /// </summary>
  public sealed partial class TargetRoasSimulationPointList : pb::IMessage<TargetRoasSimulationPointList>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<TargetRoasSimulationPointList> _parser = new pb::MessageParser<TargetRoasSimulationPointList>(() => new TargetRoasSimulationPointList());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TargetRoasSimulationPointList> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Ads.GoogleAds.V6.Common.SimulationReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TargetRoasSimulationPointList() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TargetRoasSimulationPointList(TargetRoasSimulationPointList other) : this() {
      points_ = other.points_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TargetRoasSimulationPointList Clone() {
      return new TargetRoasSimulationPointList(this);
    }

    /// <summary>Field number for the "points" field.</summary>
    public const int PointsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Google.Ads.GoogleAds.V6.Common.TargetRoasSimulationPoint> _repeated_points_codec
        = pb::FieldCodec.ForMessage(10, global::Google.Ads.GoogleAds.V6.Common.TargetRoasSimulationPoint.Parser);
    private readonly pbc::RepeatedField<global::Google.Ads.GoogleAds.V6.Common.TargetRoasSimulationPoint> points_ = new pbc::RepeatedField<global::Google.Ads.GoogleAds.V6.Common.TargetRoasSimulationPoint>();
    /// <summary>
    /// Projected metrics for a series of target ROAS amounts.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Google.Ads.GoogleAds.V6.Common.TargetRoasSimulationPoint> Points {
      get { return points_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TargetRoasSimulationPointList);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TargetRoasSimulationPointList other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!points_.Equals(other.points_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= points_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      points_.WriteTo(output, _repeated_points_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      points_.WriteTo(ref output, _repeated_points_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += points_.CalculateSize(_repeated_points_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TargetRoasSimulationPointList other) {
      if (other == null) {
        return;
      }
      points_.Add(other.points_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            points_.AddEntriesFrom(input, _repeated_points_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            points_.AddEntriesFrom(ref input, _repeated_points_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// A container for simulation points for simulations of type PERCENT_CPC_BID.
  /// </summary>
  public sealed partial class PercentCpcBidSimulationPointList : pb::IMessage<PercentCpcBidSimulationPointList>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<PercentCpcBidSimulationPointList> _parser = new pb::MessageParser<PercentCpcBidSimulationPointList>(() => new PercentCpcBidSimulationPointList());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PercentCpcBidSimulationPointList> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Ads.GoogleAds.V6.Common.SimulationReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PercentCpcBidSimulationPointList() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PercentCpcBidSimulationPointList(PercentCpcBidSimulationPointList other) : this() {
      points_ = other.points_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PercentCpcBidSimulationPointList Clone() {
      return new PercentCpcBidSimulationPointList(this);
    }

    /// <summary>Field number for the "points" field.</summary>
    public const int PointsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Google.Ads.GoogleAds.V6.Common.PercentCpcBidSimulationPoint> _repeated_points_codec
        = pb::FieldCodec.ForMessage(10, global::Google.Ads.GoogleAds.V6.Common.PercentCpcBidSimulationPoint.Parser);
    private readonly pbc::RepeatedField<global::Google.Ads.GoogleAds.V6.Common.PercentCpcBidSimulationPoint> points_ = new pbc::RepeatedField<global::Google.Ads.GoogleAds.V6.Common.PercentCpcBidSimulationPoint>();
    /// <summary>
    /// Projected metrics for a series of percent CPC bid amounts.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Google.Ads.GoogleAds.V6.Common.PercentCpcBidSimulationPoint> Points {
      get { return points_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PercentCpcBidSimulationPointList);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PercentCpcBidSimulationPointList other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!points_.Equals(other.points_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= points_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      points_.WriteTo(output, _repeated_points_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      points_.WriteTo(ref output, _repeated_points_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += points_.CalculateSize(_repeated_points_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PercentCpcBidSimulationPointList other) {
      if (other == null) {
        return;
      }
      points_.Add(other.points_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            points_.AddEntriesFrom(input, _repeated_points_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            points_.AddEntriesFrom(ref input, _repeated_points_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// Projected metrics for a specific bid modifier amount.
  /// </summary>
  public sealed partial class BidModifierSimulationPoint : pb::IMessage<BidModifierSimulationPoint>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<BidModifierSimulationPoint> _parser = new pb::MessageParser<BidModifierSimulationPoint>(() => new BidModifierSimulationPoint());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BidModifierSimulationPoint> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Ads.GoogleAds.V6.Common.SimulationReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BidModifierSimulationPoint() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BidModifierSimulationPoint(BidModifierSimulationPoint other) : this() {
      _hasBits0 = other._hasBits0;
      bidModifier_ = other.bidModifier_;
      biddableConversions_ = other.biddableConversions_;
      biddableConversionsValue_ = other.biddableConversionsValue_;
      clicks_ = other.clicks_;
      costMicros_ = other.costMicros_;
      impressions_ = other.impressions_;
      topSlotImpressions_ = other.topSlotImpressions_;
      parentBiddableConversions_ = other.parentBiddableConversions_;
      parentBiddableConversionsValue_ = other.parentBiddableConversionsValue_;
      parentClicks_ = other.parentClicks_;
      parentCostMicros_ = other.parentCostMicros_;
      parentImpressions_ = other.parentImpressions_;
      parentTopSlotImpressions_ = other.parentTopSlotImpressions_;
      parentRequiredBudgetMicros_ = other.parentRequiredBudgetMicros_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BidModifierSimulationPoint Clone() {
      return new BidModifierSimulationPoint(this);
    }

    /// <summary>Field number for the "bid_modifier" field.</summary>
    public const int BidModifierFieldNumber = 15;
    private double bidModifier_;
    /// <summary>
    /// The simulated bid modifier upon which projected metrics are based.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double BidModifier {
      get { if ((_hasBits0 & 1) != 0) { return bidModifier_; } else { return 0D; } }
      set {
        _hasBits0 |= 1;
        bidModifier_ = value;
      }
    }
    /// <summary>Gets whether the "bid_modifier" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasBidModifier {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "bid_modifier" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearBidModifier() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "biddable_conversions" field.</summary>
    public const int BiddableConversionsFieldNumber = 16;
    private double biddableConversions_;
    /// <summary>
    /// Projected number of biddable conversions.
    /// Only search advertising channel type supports this field.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double BiddableConversions {
      get { if ((_hasBits0 & 2) != 0) { return biddableConversions_; } else { return 0D; } }
      set {
        _hasBits0 |= 2;
        biddableConversions_ = value;
      }
    }
    /// <summary>Gets whether the "biddable_conversions" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasBiddableConversions {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "biddable_conversions" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearBiddableConversions() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "biddable_conversions_value" field.</summary>
    public const int BiddableConversionsValueFieldNumber = 17;
    private double biddableConversionsValue_;
    /// <summary>
    /// Projected total value of biddable conversions.
    /// Only search advertising channel type supports this field.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double BiddableConversionsValue {
      get { if ((_hasBits0 & 4) != 0) { return biddableConversionsValue_; } else { return 0D; } }
      set {
        _hasBits0 |= 4;
        biddableConversionsValue_ = value;
      }
    }
    /// <summary>Gets whether the "biddable_conversions_value" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasBiddableConversionsValue {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "biddable_conversions_value" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearBiddableConversionsValue() {
      _hasBits0 &= ~4;
    }

    /// <summary>Field number for the "clicks" field.</summary>
    public const int ClicksFieldNumber = 18;
    private long clicks_;
    /// <summary>
    /// Projected number of clicks.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Clicks {
      get { if ((_hasBits0 & 8) != 0) { return clicks_; } else { return 0L; } }
      set {
        _hasBits0 |= 8;
        clicks_ = value;
      }
    }
    /// <summary>Gets whether the "clicks" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasClicks {
      get { return (_hasBits0 & 8) != 0; }
    }
    /// <summary>Clears the value of the "clicks" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearClicks() {
      _hasBits0 &= ~8;
    }

    /// <summary>Field number for the "cost_micros" field.</summary>
    public const int CostMicrosFieldNumber = 19;
    private long costMicros_;
    /// <summary>
    /// Projected cost in micros.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long CostMicros {
      get { if ((_hasBits0 & 16) != 0) { return costMicros_; } else { return 0L; } }
      set {
        _hasBits0 |= 16;
        costMicros_ = value;
      }
    }
    /// <summary>Gets whether the "cost_micros" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasCostMicros {
      get { return (_hasBits0 & 16) != 0; }
    }
    /// <summary>Clears the value of the "cost_micros" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearCostMicros() {
      _hasBits0 &= ~16;
    }

    /// <summary>Field number for the "impressions" field.</summary>
    public const int ImpressionsFieldNumber = 20;
    private long impressions_;
    /// <summary>
    /// Projected number of impressions.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Impressions {
      get { if ((_hasBits0 & 32) != 0) { return impressions_; } else { return 0L; } }
      set {
        _hasBits0 |= 32;
        impressions_ = value;
      }
    }
    /// <summary>Gets whether the "impressions" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasImpressions {
      get { return (_hasBits0 & 32) != 0; }
    }
    /// <summary>Clears the value of the "impressions" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearImpressions() {
      _hasBits0 &= ~32;
    }

    /// <summary>Field number for the "top_slot_impressions" field.</summary>
    public const int TopSlotImpressionsFieldNumber = 21;
    private long topSlotImpressions_;
    /// <summary>
    /// Projected number of top slot impressions.
    /// Only search advertising channel type supports this field.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long TopSlotImpressions {
      get { if ((_hasBits0 & 64) != 0) { return topSlotImpressions_; } else { return 0L; } }
      set {
        _hasBits0 |= 64;
        topSlotImpressions_ = value;
      }
    }
    /// <summary>Gets whether the "top_slot_impressions" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasTopSlotImpressions {
      get { return (_hasBits0 & 64) != 0; }
    }
    /// <summary>Clears the value of the "top_slot_impressions" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearTopSlotImpressions() {
      _hasBits0 &= ~64;
    }

    /// <summary>Field number for the "parent_biddable_conversions" field.</summary>
    public const int ParentBiddableConversionsFieldNumber = 22;
    private double parentBiddableConversions_;
    /// <summary>
    /// Projected number of biddable conversions for the parent resource.
    /// Only search advertising channel type supports this field.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double ParentBiddableConversions {
      get { if ((_hasBits0 & 128) != 0) { return parentBiddableConversions_; } else { return 0D; } }
      set {
        _hasBits0 |= 128;
        parentBiddableConversions_ = value;
      }
    }
    /// <summary>Gets whether the "parent_biddable_conversions" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasParentBiddableConversions {
      get { return (_hasBits0 & 128) != 0; }
    }
    /// <summary>Clears the value of the "parent_biddable_conversions" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearParentBiddableConversions() {
      _hasBits0 &= ~128;
    }

    /// <summary>Field number for the "parent_biddable_conversions_value" field.</summary>
    public const int ParentBiddableConversionsValueFieldNumber = 23;
    private double parentBiddableConversionsValue_;
    /// <summary>
    /// Projected total value of biddable conversions for the parent resource.
    /// Only search advertising channel type supports this field.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double ParentBiddableConversionsValue {
      get { if ((_hasBits0 & 256) != 0) { return parentBiddableConversionsValue_; } else { return 0D; } }
      set {
        _hasBits0 |= 256;
        parentBiddableConversionsValue_ = value;
      }
    }
    /// <summary>Gets whether the "parent_biddable_conversions_value" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasParentBiddableConversionsValue {
      get { return (_hasBits0 & 256) != 0; }
    }
    /// <summary>Clears the value of the "parent_biddable_conversions_value" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearParentBiddableConversionsValue() {
      _hasBits0 &= ~256;
    }

    /// <summary>Field number for the "parent_clicks" field.</summary>
    public const int ParentClicksFieldNumber = 24;
    private long parentClicks_;
    /// <summary>
    /// Projected number of clicks for the parent resource.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long ParentClicks {
      get { if ((_hasBits0 & 512) != 0) { return parentClicks_; } else { return 0L; } }
      set {
        _hasBits0 |= 512;
        parentClicks_ = value;
      }
    }
    /// <summary>Gets whether the "parent_clicks" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasParentClicks {
      get { return (_hasBits0 & 512) != 0; }
    }
    /// <summary>Clears the value of the "parent_clicks" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearParentClicks() {
      _hasBits0 &= ~512;
    }

    /// <summary>Field number for the "parent_cost_micros" field.</summary>
    public const int ParentCostMicrosFieldNumber = 25;
    private long parentCostMicros_;
    /// <summary>
    /// Projected cost in micros for the parent resource.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long ParentCostMicros {
      get { if ((_hasBits0 & 1024) != 0) { return parentCostMicros_; } else { return 0L; } }
      set {
        _hasBits0 |= 1024;
        parentCostMicros_ = value;
      }
    }
    /// <summary>Gets whether the "parent_cost_micros" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasParentCostMicros {
      get { return (_hasBits0 & 1024) != 0; }
    }
    /// <summary>Clears the value of the "parent_cost_micros" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearParentCostMicros() {
      _hasBits0 &= ~1024;
    }

    /// <summary>Field number for the "parent_impressions" field.</summary>
    public const int ParentImpressionsFieldNumber = 26;
    private long parentImpressions_;
    /// <summary>
    /// Projected number of impressions for the parent resource.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long ParentImpressions {
      get { if ((_hasBits0 & 2048) != 0) { return parentImpressions_; } else { return 0L; } }
      set {
        _hasBits0 |= 2048;
        parentImpressions_ = value;
      }
    }
    /// <summary>Gets whether the "parent_impressions" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasParentImpressions {
      get { return (_hasBits0 & 2048) != 0; }
    }
    /// <summary>Clears the value of the "parent_impressions" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearParentImpressions() {
      _hasBits0 &= ~2048;
    }

    /// <summary>Field number for the "parent_top_slot_impressions" field.</summary>
    public const int ParentTopSlotImpressionsFieldNumber = 27;
    private long parentTopSlotImpressions_;
    /// <summary>
    /// Projected number of top slot impressions for the parent resource.
    /// Only search advertising channel type supports this field.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long ParentTopSlotImpressions {
      get { if ((_hasBits0 & 4096) != 0) { return parentTopSlotImpressions_; } else { return 0L; } }
      set {
        _hasBits0 |= 4096;
        parentTopSlotImpressions_ = value;
      }
    }
    /// <summary>Gets whether the "parent_top_slot_impressions" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasParentTopSlotImpressions {
      get { return (_hasBits0 & 4096) != 0; }
    }
    /// <summary>Clears the value of the "parent_top_slot_impressions" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearParentTopSlotImpressions() {
      _hasBits0 &= ~4096;
    }

    /// <summary>Field number for the "parent_required_budget_micros" field.</summary>
    public const int ParentRequiredBudgetMicrosFieldNumber = 28;
    private long parentRequiredBudgetMicros_;
    /// <summary>
    /// Projected minimum daily budget that must be available to the parent
    /// resource to realize this simulation.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long ParentRequiredBudgetMicros {
      get { if ((_hasBits0 & 8192) != 0) { return parentRequiredBudgetMicros_; } else { return 0L; } }
      set {
        _hasBits0 |= 8192;
        parentRequiredBudgetMicros_ = value;
      }
    }
    /// <summary>Gets whether the "parent_required_budget_micros" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasParentRequiredBudgetMicros {
      get { return (_hasBits0 & 8192) != 0; }
    }
    /// <summary>Clears the value of the "parent_required_budget_micros" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearParentRequiredBudgetMicros() {
      _hasBits0 &= ~8192;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as BidModifierSimulationPoint);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(BidModifierSimulationPoint other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(BidModifier, other.BidModifier)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(BiddableConversions, other.BiddableConversions)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(BiddableConversionsValue, other.BiddableConversionsValue)) return false;
      if (Clicks != other.Clicks) return false;
      if (CostMicros != other.CostMicros) return false;
      if (Impressions != other.Impressions) return false;
      if (TopSlotImpressions != other.TopSlotImpressions) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(ParentBiddableConversions, other.ParentBiddableConversions)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(ParentBiddableConversionsValue, other.ParentBiddableConversionsValue)) return false;
      if (ParentClicks != other.ParentClicks) return false;
      if (ParentCostMicros != other.ParentCostMicros) return false;
      if (ParentImpressions != other.ParentImpressions) return false;
      if (ParentTopSlotImpressions != other.ParentTopSlotImpressions) return false;
      if (ParentRequiredBudgetMicros != other.ParentRequiredBudgetMicros) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasBidModifier) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(BidModifier);
      if (HasBiddableConversions) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(BiddableConversions);
      if (HasBiddableConversionsValue) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(BiddableConversionsValue);
      if (HasClicks) hash ^= Clicks.GetHashCode();
      if (HasCostMicros) hash ^= CostMicros.GetHashCode();
      if (HasImpressions) hash ^= Impressions.GetHashCode();
      if (HasTopSlotImpressions) hash ^= TopSlotImpressions.GetHashCode();
      if (HasParentBiddableConversions) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(ParentBiddableConversions);
      if (HasParentBiddableConversionsValue) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(ParentBiddableConversionsValue);
      if (HasParentClicks) hash ^= ParentClicks.GetHashCode();
      if (HasParentCostMicros) hash ^= ParentCostMicros.GetHashCode();
      if (HasParentImpressions) hash ^= ParentImpressions.GetHashCode();
      if (HasParentTopSlotImpressions) hash ^= ParentTopSlotImpressions.GetHashCode();
      if (HasParentRequiredBudgetMicros) hash ^= ParentRequiredBudgetMicros.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasBidModifier) {
        output.WriteRawTag(121);
        output.WriteDouble(BidModifier);
      }
      if (HasBiddableConversions) {
        output.WriteRawTag(129, 1);
        output.WriteDouble(BiddableConversions);
      }
      if (HasBiddableConversionsValue) {
        output.WriteRawTag(137, 1);
        output.WriteDouble(BiddableConversionsValue);
      }
      if (HasClicks) {
        output.WriteRawTag(144, 1);
        output.WriteInt64(Clicks);
      }
      if (HasCostMicros) {
        output.WriteRawTag(152, 1);
        output.WriteInt64(CostMicros);
      }
      if (HasImpressions) {
        output.WriteRawTag(160, 1);
        output.WriteInt64(Impressions);
      }
      if (HasTopSlotImpressions) {
        output.WriteRawTag(168, 1);
        output.WriteInt64(TopSlotImpressions);
      }
      if (HasParentBiddableConversions) {
        output.WriteRawTag(177, 1);
        output.WriteDouble(ParentBiddableConversions);
      }
      if (HasParentBiddableConversionsValue) {
        output.WriteRawTag(185, 1);
        output.WriteDouble(ParentBiddableConversionsValue);
      }
      if (HasParentClicks) {
        output.WriteRawTag(192, 1);
        output.WriteInt64(ParentClicks);
      }
      if (HasParentCostMicros) {
        output.WriteRawTag(200, 1);
        output.WriteInt64(ParentCostMicros);
      }
      if (HasParentImpressions) {
        output.WriteRawTag(208, 1);
        output.WriteInt64(ParentImpressions);
      }
      if (HasParentTopSlotImpressions) {
        output.WriteRawTag(216, 1);
        output.WriteInt64(ParentTopSlotImpressions);
      }
      if (HasParentRequiredBudgetMicros) {
        output.WriteRawTag(224, 1);
        output.WriteInt64(ParentRequiredBudgetMicros);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasBidModifier) {
        output.WriteRawTag(121);
        output.WriteDouble(BidModifier);
      }
      if (HasBiddableConversions) {
        output.WriteRawTag(129, 1);
        output.WriteDouble(BiddableConversions);
      }
      if (HasBiddableConversionsValue) {
        output.WriteRawTag(137, 1);
        output.WriteDouble(BiddableConversionsValue);
      }
      if (HasClicks) {
        output.WriteRawTag(144, 1);
        output.WriteInt64(Clicks);
      }
      if (HasCostMicros) {
        output.WriteRawTag(152, 1);
        output.WriteInt64(CostMicros);
      }
      if (HasImpressions) {
        output.WriteRawTag(160, 1);
        output.WriteInt64(Impressions);
      }
      if (HasTopSlotImpressions) {
        output.WriteRawTag(168, 1);
        output.WriteInt64(TopSlotImpressions);
      }
      if (HasParentBiddableConversions) {
        output.WriteRawTag(177, 1);
        output.WriteDouble(ParentBiddableConversions);
      }
      if (HasParentBiddableConversionsValue) {
        output.WriteRawTag(185, 1);
        output.WriteDouble(ParentBiddableConversionsValue);
      }
      if (HasParentClicks) {
        output.WriteRawTag(192, 1);
        output.WriteInt64(ParentClicks);
      }
      if (HasParentCostMicros) {
        output.WriteRawTag(200, 1);
        output.WriteInt64(ParentCostMicros);
      }
      if (HasParentImpressions) {
        output.WriteRawTag(208, 1);
        output.WriteInt64(ParentImpressions);
      }
      if (HasParentTopSlotImpressions) {
        output.WriteRawTag(216, 1);
        output.WriteInt64(ParentTopSlotImpressions);
      }
      if (HasParentRequiredBudgetMicros) {
        output.WriteRawTag(224, 1);
        output.WriteInt64(ParentRequiredBudgetMicros);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasBidModifier) {
        size += 1 + 8;
      }
      if (HasBiddableConversions) {
        size += 2 + 8;
      }
      if (HasBiddableConversionsValue) {
        size += 2 + 8;
      }
      if (HasClicks) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(Clicks);
      }
      if (HasCostMicros) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(CostMicros);
      }
      if (HasImpressions) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(Impressions);
      }
      if (HasTopSlotImpressions) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(TopSlotImpressions);
      }
      if (HasParentBiddableConversions) {
        size += 2 + 8;
      }
      if (HasParentBiddableConversionsValue) {
        size += 2 + 8;
      }
      if (HasParentClicks) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(ParentClicks);
      }
      if (HasParentCostMicros) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(ParentCostMicros);
      }
      if (HasParentImpressions) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(ParentImpressions);
      }
      if (HasParentTopSlotImpressions) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(ParentTopSlotImpressions);
      }
      if (HasParentRequiredBudgetMicros) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(ParentRequiredBudgetMicros);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(BidModifierSimulationPoint other) {
      if (other == null) {
        return;
      }
      if (other.HasBidModifier) {
        BidModifier = other.BidModifier;
      }
      if (other.HasBiddableConversions) {
        BiddableConversions = other.BiddableConversions;
      }
      if (other.HasBiddableConversionsValue) {
        BiddableConversionsValue = other.BiddableConversionsValue;
      }
      if (other.HasClicks) {
        Clicks = other.Clicks;
      }
      if (other.HasCostMicros) {
        CostMicros = other.CostMicros;
      }
      if (other.HasImpressions) {
        Impressions = other.Impressions;
      }
      if (other.HasTopSlotImpressions) {
        TopSlotImpressions = other.TopSlotImpressions;
      }
      if (other.HasParentBiddableConversions) {
        ParentBiddableConversions = other.ParentBiddableConversions;
      }
      if (other.HasParentBiddableConversionsValue) {
        ParentBiddableConversionsValue = other.ParentBiddableConversionsValue;
      }
      if (other.HasParentClicks) {
        ParentClicks = other.ParentClicks;
      }
      if (other.HasParentCostMicros) {
        ParentCostMicros = other.ParentCostMicros;
      }
      if (other.HasParentImpressions) {
        ParentImpressions = other.ParentImpressions;
      }
      if (other.HasParentTopSlotImpressions) {
        ParentTopSlotImpressions = other.ParentTopSlotImpressions;
      }
      if (other.HasParentRequiredBudgetMicros) {
        ParentRequiredBudgetMicros = other.ParentRequiredBudgetMicros;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 121: {
            BidModifier = input.ReadDouble();
            break;
          }
          case 129: {
            BiddableConversions = input.ReadDouble();
            break;
          }
          case 137: {
            BiddableConversionsValue = input.ReadDouble();
            break;
          }
          case 144: {
            Clicks = input.ReadInt64();
            break;
          }
          case 152: {
            CostMicros = input.ReadInt64();
            break;
          }
          case 160: {
            Impressions = input.ReadInt64();
            break;
          }
          case 168: {
            TopSlotImpressions = input.ReadInt64();
            break;
          }
          case 177: {
            ParentBiddableConversions = input.ReadDouble();
            break;
          }
          case 185: {
            ParentBiddableConversionsValue = input.ReadDouble();
            break;
          }
          case 192: {
            ParentClicks = input.ReadInt64();
            break;
          }
          case 200: {
            ParentCostMicros = input.ReadInt64();
            break;
          }
          case 208: {
            ParentImpressions = input.ReadInt64();
            break;
          }
          case 216: {
            ParentTopSlotImpressions = input.ReadInt64();
            break;
          }
          case 224: {
            ParentRequiredBudgetMicros = input.ReadInt64();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 121: {
            BidModifier = input.ReadDouble();
            break;
          }
          case 129: {
            BiddableConversions = input.ReadDouble();
            break;
          }
          case 137: {
            BiddableConversionsValue = input.ReadDouble();
            break;
          }
          case 144: {
            Clicks = input.ReadInt64();
            break;
          }
          case 152: {
            CostMicros = input.ReadInt64();
            break;
          }
          case 160: {
            Impressions = input.ReadInt64();
            break;
          }
          case 168: {
            TopSlotImpressions = input.ReadInt64();
            break;
          }
          case 177: {
            ParentBiddableConversions = input.ReadDouble();
            break;
          }
          case 185: {
            ParentBiddableConversionsValue = input.ReadDouble();
            break;
          }
          case 192: {
            ParentClicks = input.ReadInt64();
            break;
          }
          case 200: {
            ParentCostMicros = input.ReadInt64();
            break;
          }
          case 208: {
            ParentImpressions = input.ReadInt64();
            break;
          }
          case 216: {
            ParentTopSlotImpressions = input.ReadInt64();
            break;
          }
          case 224: {
            ParentRequiredBudgetMicros = input.ReadInt64();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// Projected metrics for a specific CPC bid amount.
  /// </summary>
  public sealed partial class CpcBidSimulationPoint : pb::IMessage<CpcBidSimulationPoint>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CpcBidSimulationPoint> _parser = new pb::MessageParser<CpcBidSimulationPoint>(() => new CpcBidSimulationPoint());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CpcBidSimulationPoint> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Ads.GoogleAds.V6.Common.SimulationReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CpcBidSimulationPoint() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CpcBidSimulationPoint(CpcBidSimulationPoint other) : this() {
      _hasBits0 = other._hasBits0;
      cpcBidMicros_ = other.cpcBidMicros_;
      biddableConversions_ = other.biddableConversions_;
      biddableConversionsValue_ = other.biddableConversionsValue_;
      clicks_ = other.clicks_;
      costMicros_ = other.costMicros_;
      impressions_ = other.impressions_;
      topSlotImpressions_ = other.topSlotImpressions_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CpcBidSimulationPoint Clone() {
      return new CpcBidSimulationPoint(this);
    }

    /// <summary>Field number for the "cpc_bid_micros" field.</summary>
    public const int CpcBidMicrosFieldNumber = 8;
    private long cpcBidMicros_;
    /// <summary>
    /// The simulated CPC bid upon which projected metrics are based.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long CpcBidMicros {
      get { if ((_hasBits0 & 1) != 0) { return cpcBidMicros_; } else { return 0L; } }
      set {
        _hasBits0 |= 1;
        cpcBidMicros_ = value;
      }
    }
    /// <summary>Gets whether the "cpc_bid_micros" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasCpcBidMicros {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "cpc_bid_micros" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearCpcBidMicros() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "biddable_conversions" field.</summary>
    public const int BiddableConversionsFieldNumber = 9;
    private double biddableConversions_;
    /// <summary>
    /// Projected number of biddable conversions.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double BiddableConversions {
      get { if ((_hasBits0 & 2) != 0) { return biddableConversions_; } else { return 0D; } }
      set {
        _hasBits0 |= 2;
        biddableConversions_ = value;
      }
    }
    /// <summary>Gets whether the "biddable_conversions" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasBiddableConversions {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "biddable_conversions" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearBiddableConversions() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "biddable_conversions_value" field.</summary>
    public const int BiddableConversionsValueFieldNumber = 10;
    private double biddableConversionsValue_;
    /// <summary>
    /// Projected total value of biddable conversions.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double BiddableConversionsValue {
      get { if ((_hasBits0 & 4) != 0) { return biddableConversionsValue_; } else { return 0D; } }
      set {
        _hasBits0 |= 4;
        biddableConversionsValue_ = value;
      }
    }
    /// <summary>Gets whether the "biddable_conversions_value" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasBiddableConversionsValue {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "biddable_conversions_value" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearBiddableConversionsValue() {
      _hasBits0 &= ~4;
    }

    /// <summary>Field number for the "clicks" field.</summary>
    public const int ClicksFieldNumber = 11;
    private long clicks_;
    /// <summary>
    /// Projected number of clicks.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Clicks {
      get { if ((_hasBits0 & 8) != 0) { return clicks_; } else { return 0L; } }
      set {
        _hasBits0 |= 8;
        clicks_ = value;
      }
    }
    /// <summary>Gets whether the "clicks" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasClicks {
      get { return (_hasBits0 & 8) != 0; }
    }
    /// <summary>Clears the value of the "clicks" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearClicks() {
      _hasBits0 &= ~8;
    }

    /// <summary>Field number for the "cost_micros" field.</summary>
    public const int CostMicrosFieldNumber = 12;
    private long costMicros_;
    /// <summary>
    /// Projected cost in micros.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long CostMicros {
      get { if ((_hasBits0 & 16) != 0) { return costMicros_; } else { return 0L; } }
      set {
        _hasBits0 |= 16;
        costMicros_ = value;
      }
    }
    /// <summary>Gets whether the "cost_micros" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasCostMicros {
      get { return (_hasBits0 & 16) != 0; }
    }
    /// <summary>Clears the value of the "cost_micros" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearCostMicros() {
      _hasBits0 &= ~16;
    }

    /// <summary>Field number for the "impressions" field.</summary>
    public const int ImpressionsFieldNumber = 13;
    private long impressions_;
    /// <summary>
    /// Projected number of impressions.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Impressions {
      get { if ((_hasBits0 & 32) != 0) { return impressions_; } else { return 0L; } }
      set {
        _hasBits0 |= 32;
        impressions_ = value;
      }
    }
    /// <summary>Gets whether the "impressions" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasImpressions {
      get { return (_hasBits0 & 32) != 0; }
    }
    /// <summary>Clears the value of the "impressions" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearImpressions() {
      _hasBits0 &= ~32;
    }

    /// <summary>Field number for the "top_slot_impressions" field.</summary>
    public const int TopSlotImpressionsFieldNumber = 14;
    private long topSlotImpressions_;
    /// <summary>
    /// Projected number of top slot impressions.
    /// Only search advertising channel type supports this field.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long TopSlotImpressions {
      get { if ((_hasBits0 & 64) != 0) { return topSlotImpressions_; } else { return 0L; } }
      set {
        _hasBits0 |= 64;
        topSlotImpressions_ = value;
      }
    }
    /// <summary>Gets whether the "top_slot_impressions" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasTopSlotImpressions {
      get { return (_hasBits0 & 64) != 0; }
    }
    /// <summary>Clears the value of the "top_slot_impressions" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearTopSlotImpressions() {
      _hasBits0 &= ~64;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CpcBidSimulationPoint);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CpcBidSimulationPoint other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (CpcBidMicros != other.CpcBidMicros) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(BiddableConversions, other.BiddableConversions)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(BiddableConversionsValue, other.BiddableConversionsValue)) return false;
      if (Clicks != other.Clicks) return false;
      if (CostMicros != other.CostMicros) return false;
      if (Impressions != other.Impressions) return false;
      if (TopSlotImpressions != other.TopSlotImpressions) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasCpcBidMicros) hash ^= CpcBidMicros.GetHashCode();
      if (HasBiddableConversions) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(BiddableConversions);
      if (HasBiddableConversionsValue) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(BiddableConversionsValue);
      if (HasClicks) hash ^= Clicks.GetHashCode();
      if (HasCostMicros) hash ^= CostMicros.GetHashCode();
      if (HasImpressions) hash ^= Impressions.GetHashCode();
      if (HasTopSlotImpressions) hash ^= TopSlotImpressions.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasCpcBidMicros) {
        output.WriteRawTag(64);
        output.WriteInt64(CpcBidMicros);
      }
      if (HasBiddableConversions) {
        output.WriteRawTag(73);
        output.WriteDouble(BiddableConversions);
      }
      if (HasBiddableConversionsValue) {
        output.WriteRawTag(81);
        output.WriteDouble(BiddableConversionsValue);
      }
      if (HasClicks) {
        output.WriteRawTag(88);
        output.WriteInt64(Clicks);
      }
      if (HasCostMicros) {
        output.WriteRawTag(96);
        output.WriteInt64(CostMicros);
      }
      if (HasImpressions) {
        output.WriteRawTag(104);
        output.WriteInt64(Impressions);
      }
      if (HasTopSlotImpressions) {
        output.WriteRawTag(112);
        output.WriteInt64(TopSlotImpressions);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasCpcBidMicros) {
        output.WriteRawTag(64);
        output.WriteInt64(CpcBidMicros);
      }
      if (HasBiddableConversions) {
        output.WriteRawTag(73);
        output.WriteDouble(BiddableConversions);
      }
      if (HasBiddableConversionsValue) {
        output.WriteRawTag(81);
        output.WriteDouble(BiddableConversionsValue);
      }
      if (HasClicks) {
        output.WriteRawTag(88);
        output.WriteInt64(Clicks);
      }
      if (HasCostMicros) {
        output.WriteRawTag(96);
        output.WriteInt64(CostMicros);
      }
      if (HasImpressions) {
        output.WriteRawTag(104);
        output.WriteInt64(Impressions);
      }
      if (HasTopSlotImpressions) {
        output.WriteRawTag(112);
        output.WriteInt64(TopSlotImpressions);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasCpcBidMicros) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(CpcBidMicros);
      }
      if (HasBiddableConversions) {
        size += 1 + 8;
      }
      if (HasBiddableConversionsValue) {
        size += 1 + 8;
      }
      if (HasClicks) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Clicks);
      }
      if (HasCostMicros) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(CostMicros);
      }
      if (HasImpressions) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Impressions);
      }
      if (HasTopSlotImpressions) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(TopSlotImpressions);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CpcBidSimulationPoint other) {
      if (other == null) {
        return;
      }
      if (other.HasCpcBidMicros) {
        CpcBidMicros = other.CpcBidMicros;
      }
      if (other.HasBiddableConversions) {
        BiddableConversions = other.BiddableConversions;
      }
      if (other.HasBiddableConversionsValue) {
        BiddableConversionsValue = other.BiddableConversionsValue;
      }
      if (other.HasClicks) {
        Clicks = other.Clicks;
      }
      if (other.HasCostMicros) {
        CostMicros = other.CostMicros;
      }
      if (other.HasImpressions) {
        Impressions = other.Impressions;
      }
      if (other.HasTopSlotImpressions) {
        TopSlotImpressions = other.TopSlotImpressions;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 64: {
            CpcBidMicros = input.ReadInt64();
            break;
          }
          case 73: {
            BiddableConversions = input.ReadDouble();
            break;
          }
          case 81: {
            BiddableConversionsValue = input.ReadDouble();
            break;
          }
          case 88: {
            Clicks = input.ReadInt64();
            break;
          }
          case 96: {
            CostMicros = input.ReadInt64();
            break;
          }
          case 104: {
            Impressions = input.ReadInt64();
            break;
          }
          case 112: {
            TopSlotImpressions = input.ReadInt64();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 64: {
            CpcBidMicros = input.ReadInt64();
            break;
          }
          case 73: {
            BiddableConversions = input.ReadDouble();
            break;
          }
          case 81: {
            BiddableConversionsValue = input.ReadDouble();
            break;
          }
          case 88: {
            Clicks = input.ReadInt64();
            break;
          }
          case 96: {
            CostMicros = input.ReadInt64();
            break;
          }
          case 104: {
            Impressions = input.ReadInt64();
            break;
          }
          case 112: {
            TopSlotImpressions = input.ReadInt64();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// Projected metrics for a specific CPV bid amount.
  /// </summary>
  public sealed partial class CpvBidSimulationPoint : pb::IMessage<CpvBidSimulationPoint>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CpvBidSimulationPoint> _parser = new pb::MessageParser<CpvBidSimulationPoint>(() => new CpvBidSimulationPoint());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CpvBidSimulationPoint> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Ads.GoogleAds.V6.Common.SimulationReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CpvBidSimulationPoint() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CpvBidSimulationPoint(CpvBidSimulationPoint other) : this() {
      _hasBits0 = other._hasBits0;
      cpvBidMicros_ = other.cpvBidMicros_;
      costMicros_ = other.costMicros_;
      impressions_ = other.impressions_;
      views_ = other.views_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CpvBidSimulationPoint Clone() {
      return new CpvBidSimulationPoint(this);
    }

    /// <summary>Field number for the "cpv_bid_micros" field.</summary>
    public const int CpvBidMicrosFieldNumber = 5;
    private long cpvBidMicros_;
    /// <summary>
    /// The simulated CPV bid upon which projected metrics are based.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long CpvBidMicros {
      get { if ((_hasBits0 & 1) != 0) { return cpvBidMicros_; } else { return 0L; } }
      set {
        _hasBits0 |= 1;
        cpvBidMicros_ = value;
      }
    }
    /// <summary>Gets whether the "cpv_bid_micros" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasCpvBidMicros {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "cpv_bid_micros" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearCpvBidMicros() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "cost_micros" field.</summary>
    public const int CostMicrosFieldNumber = 6;
    private long costMicros_;
    /// <summary>
    /// Projected cost in micros.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long CostMicros {
      get { if ((_hasBits0 & 2) != 0) { return costMicros_; } else { return 0L; } }
      set {
        _hasBits0 |= 2;
        costMicros_ = value;
      }
    }
    /// <summary>Gets whether the "cost_micros" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasCostMicros {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "cost_micros" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearCostMicros() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "impressions" field.</summary>
    public const int ImpressionsFieldNumber = 7;
    private long impressions_;
    /// <summary>
    /// Projected number of impressions.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Impressions {
      get { if ((_hasBits0 & 4) != 0) { return impressions_; } else { return 0L; } }
      set {
        _hasBits0 |= 4;
        impressions_ = value;
      }
    }
    /// <summary>Gets whether the "impressions" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasImpressions {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "impressions" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearImpressions() {
      _hasBits0 &= ~4;
    }

    /// <summary>Field number for the "views" field.</summary>
    public const int ViewsFieldNumber = 8;
    private long views_;
    /// <summary>
    /// Projected number of views.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Views {
      get { if ((_hasBits0 & 8) != 0) { return views_; } else { return 0L; } }
      set {
        _hasBits0 |= 8;
        views_ = value;
      }
    }
    /// <summary>Gets whether the "views" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasViews {
      get { return (_hasBits0 & 8) != 0; }
    }
    /// <summary>Clears the value of the "views" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearViews() {
      _hasBits0 &= ~8;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CpvBidSimulationPoint);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CpvBidSimulationPoint other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (CpvBidMicros != other.CpvBidMicros) return false;
      if (CostMicros != other.CostMicros) return false;
      if (Impressions != other.Impressions) return false;
      if (Views != other.Views) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasCpvBidMicros) hash ^= CpvBidMicros.GetHashCode();
      if (HasCostMicros) hash ^= CostMicros.GetHashCode();
      if (HasImpressions) hash ^= Impressions.GetHashCode();
      if (HasViews) hash ^= Views.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasCpvBidMicros) {
        output.WriteRawTag(40);
        output.WriteInt64(CpvBidMicros);
      }
      if (HasCostMicros) {
        output.WriteRawTag(48);
        output.WriteInt64(CostMicros);
      }
      if (HasImpressions) {
        output.WriteRawTag(56);
        output.WriteInt64(Impressions);
      }
      if (HasViews) {
        output.WriteRawTag(64);
        output.WriteInt64(Views);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasCpvBidMicros) {
        output.WriteRawTag(40);
        output.WriteInt64(CpvBidMicros);
      }
      if (HasCostMicros) {
        output.WriteRawTag(48);
        output.WriteInt64(CostMicros);
      }
      if (HasImpressions) {
        output.WriteRawTag(56);
        output.WriteInt64(Impressions);
      }
      if (HasViews) {
        output.WriteRawTag(64);
        output.WriteInt64(Views);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasCpvBidMicros) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(CpvBidMicros);
      }
      if (HasCostMicros) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(CostMicros);
      }
      if (HasImpressions) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Impressions);
      }
      if (HasViews) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Views);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CpvBidSimulationPoint other) {
      if (other == null) {
        return;
      }
      if (other.HasCpvBidMicros) {
        CpvBidMicros = other.CpvBidMicros;
      }
      if (other.HasCostMicros) {
        CostMicros = other.CostMicros;
      }
      if (other.HasImpressions) {
        Impressions = other.Impressions;
      }
      if (other.HasViews) {
        Views = other.Views;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 40: {
            CpvBidMicros = input.ReadInt64();
            break;
          }
          case 48: {
            CostMicros = input.ReadInt64();
            break;
          }
          case 56: {
            Impressions = input.ReadInt64();
            break;
          }
          case 64: {
            Views = input.ReadInt64();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 40: {
            CpvBidMicros = input.ReadInt64();
            break;
          }
          case 48: {
            CostMicros = input.ReadInt64();
            break;
          }
          case 56: {
            Impressions = input.ReadInt64();
            break;
          }
          case 64: {
            Views = input.ReadInt64();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// Projected metrics for a specific target CPA amount.
  /// </summary>
  public sealed partial class TargetCpaSimulationPoint : pb::IMessage<TargetCpaSimulationPoint>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<TargetCpaSimulationPoint> _parser = new pb::MessageParser<TargetCpaSimulationPoint>(() => new TargetCpaSimulationPoint());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TargetCpaSimulationPoint> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Ads.GoogleAds.V6.Common.SimulationReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TargetCpaSimulationPoint() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TargetCpaSimulationPoint(TargetCpaSimulationPoint other) : this() {
      _hasBits0 = other._hasBits0;
      targetCpaMicros_ = other.targetCpaMicros_;
      biddableConversions_ = other.biddableConversions_;
      biddableConversionsValue_ = other.biddableConversionsValue_;
      clicks_ = other.clicks_;
      costMicros_ = other.costMicros_;
      impressions_ = other.impressions_;
      topSlotImpressions_ = other.topSlotImpressions_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TargetCpaSimulationPoint Clone() {
      return new TargetCpaSimulationPoint(this);
    }

    /// <summary>Field number for the "target_cpa_micros" field.</summary>
    public const int TargetCpaMicrosFieldNumber = 8;
    private long targetCpaMicros_;
    /// <summary>
    /// The simulated target CPA upon which projected metrics are based.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long TargetCpaMicros {
      get { if ((_hasBits0 & 1) != 0) { return targetCpaMicros_; } else { return 0L; } }
      set {
        _hasBits0 |= 1;
        targetCpaMicros_ = value;
      }
    }
    /// <summary>Gets whether the "target_cpa_micros" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasTargetCpaMicros {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "target_cpa_micros" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearTargetCpaMicros() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "biddable_conversions" field.</summary>
    public const int BiddableConversionsFieldNumber = 9;
    private double biddableConversions_;
    /// <summary>
    /// Projected number of biddable conversions.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double BiddableConversions {
      get { if ((_hasBits0 & 2) != 0) { return biddableConversions_; } else { return 0D; } }
      set {
        _hasBits0 |= 2;
        biddableConversions_ = value;
      }
    }
    /// <summary>Gets whether the "biddable_conversions" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasBiddableConversions {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "biddable_conversions" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearBiddableConversions() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "biddable_conversions_value" field.</summary>
    public const int BiddableConversionsValueFieldNumber = 10;
    private double biddableConversionsValue_;
    /// <summary>
    /// Projected total value of biddable conversions.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double BiddableConversionsValue {
      get { if ((_hasBits0 & 4) != 0) { return biddableConversionsValue_; } else { return 0D; } }
      set {
        _hasBits0 |= 4;
        biddableConversionsValue_ = value;
      }
    }
    /// <summary>Gets whether the "biddable_conversions_value" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasBiddableConversionsValue {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "biddable_conversions_value" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearBiddableConversionsValue() {
      _hasBits0 &= ~4;
    }

    /// <summary>Field number for the "clicks" field.</summary>
    public const int ClicksFieldNumber = 11;
    private long clicks_;
    /// <summary>
    /// Projected number of clicks.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Clicks {
      get { if ((_hasBits0 & 8) != 0) { return clicks_; } else { return 0L; } }
      set {
        _hasBits0 |= 8;
        clicks_ = value;
      }
    }
    /// <summary>Gets whether the "clicks" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasClicks {
      get { return (_hasBits0 & 8) != 0; }
    }
    /// <summary>Clears the value of the "clicks" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearClicks() {
      _hasBits0 &= ~8;
    }

    /// <summary>Field number for the "cost_micros" field.</summary>
    public const int CostMicrosFieldNumber = 12;
    private long costMicros_;
    /// <summary>
    /// Projected cost in micros.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long CostMicros {
      get { if ((_hasBits0 & 16) != 0) { return costMicros_; } else { return 0L; } }
      set {
        _hasBits0 |= 16;
        costMicros_ = value;
      }
    }
    /// <summary>Gets whether the "cost_micros" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasCostMicros {
      get { return (_hasBits0 & 16) != 0; }
    }
    /// <summary>Clears the value of the "cost_micros" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearCostMicros() {
      _hasBits0 &= ~16;
    }

    /// <summary>Field number for the "impressions" field.</summary>
    public const int ImpressionsFieldNumber = 13;
    private long impressions_;
    /// <summary>
    /// Projected number of impressions.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Impressions {
      get { if ((_hasBits0 & 32) != 0) { return impressions_; } else { return 0L; } }
      set {
        _hasBits0 |= 32;
        impressions_ = value;
      }
    }
    /// <summary>Gets whether the "impressions" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasImpressions {
      get { return (_hasBits0 & 32) != 0; }
    }
    /// <summary>Clears the value of the "impressions" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearImpressions() {
      _hasBits0 &= ~32;
    }

    /// <summary>Field number for the "top_slot_impressions" field.</summary>
    public const int TopSlotImpressionsFieldNumber = 14;
    private long topSlotImpressions_;
    /// <summary>
    /// Projected number of top slot impressions.
    /// Only search advertising channel type supports this field.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long TopSlotImpressions {
      get { if ((_hasBits0 & 64) != 0) { return topSlotImpressions_; } else { return 0L; } }
      set {
        _hasBits0 |= 64;
        topSlotImpressions_ = value;
      }
    }
    /// <summary>Gets whether the "top_slot_impressions" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasTopSlotImpressions {
      get { return (_hasBits0 & 64) != 0; }
    }
    /// <summary>Clears the value of the "top_slot_impressions" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearTopSlotImpressions() {
      _hasBits0 &= ~64;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TargetCpaSimulationPoint);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TargetCpaSimulationPoint other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (TargetCpaMicros != other.TargetCpaMicros) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(BiddableConversions, other.BiddableConversions)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(BiddableConversionsValue, other.BiddableConversionsValue)) return false;
      if (Clicks != other.Clicks) return false;
      if (CostMicros != other.CostMicros) return false;
      if (Impressions != other.Impressions) return false;
      if (TopSlotImpressions != other.TopSlotImpressions) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasTargetCpaMicros) hash ^= TargetCpaMicros.GetHashCode();
      if (HasBiddableConversions) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(BiddableConversions);
      if (HasBiddableConversionsValue) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(BiddableConversionsValue);
      if (HasClicks) hash ^= Clicks.GetHashCode();
      if (HasCostMicros) hash ^= CostMicros.GetHashCode();
      if (HasImpressions) hash ^= Impressions.GetHashCode();
      if (HasTopSlotImpressions) hash ^= TopSlotImpressions.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasTargetCpaMicros) {
        output.WriteRawTag(64);
        output.WriteInt64(TargetCpaMicros);
      }
      if (HasBiddableConversions) {
        output.WriteRawTag(73);
        output.WriteDouble(BiddableConversions);
      }
      if (HasBiddableConversionsValue) {
        output.WriteRawTag(81);
        output.WriteDouble(BiddableConversionsValue);
      }
      if (HasClicks) {
        output.WriteRawTag(88);
        output.WriteInt64(Clicks);
      }
      if (HasCostMicros) {
        output.WriteRawTag(96);
        output.WriteInt64(CostMicros);
      }
      if (HasImpressions) {
        output.WriteRawTag(104);
        output.WriteInt64(Impressions);
      }
      if (HasTopSlotImpressions) {
        output.WriteRawTag(112);
        output.WriteInt64(TopSlotImpressions);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasTargetCpaMicros) {
        output.WriteRawTag(64);
        output.WriteInt64(TargetCpaMicros);
      }
      if (HasBiddableConversions) {
        output.WriteRawTag(73);
        output.WriteDouble(BiddableConversions);
      }
      if (HasBiddableConversionsValue) {
        output.WriteRawTag(81);
        output.WriteDouble(BiddableConversionsValue);
      }
      if (HasClicks) {
        output.WriteRawTag(88);
        output.WriteInt64(Clicks);
      }
      if (HasCostMicros) {
        output.WriteRawTag(96);
        output.WriteInt64(CostMicros);
      }
      if (HasImpressions) {
        output.WriteRawTag(104);
        output.WriteInt64(Impressions);
      }
      if (HasTopSlotImpressions) {
        output.WriteRawTag(112);
        output.WriteInt64(TopSlotImpressions);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasTargetCpaMicros) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(TargetCpaMicros);
      }
      if (HasBiddableConversions) {
        size += 1 + 8;
      }
      if (HasBiddableConversionsValue) {
        size += 1 + 8;
      }
      if (HasClicks) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Clicks);
      }
      if (HasCostMicros) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(CostMicros);
      }
      if (HasImpressions) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Impressions);
      }
      if (HasTopSlotImpressions) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(TopSlotImpressions);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TargetCpaSimulationPoint other) {
      if (other == null) {
        return;
      }
      if (other.HasTargetCpaMicros) {
        TargetCpaMicros = other.TargetCpaMicros;
      }
      if (other.HasBiddableConversions) {
        BiddableConversions = other.BiddableConversions;
      }
      if (other.HasBiddableConversionsValue) {
        BiddableConversionsValue = other.BiddableConversionsValue;
      }
      if (other.HasClicks) {
        Clicks = other.Clicks;
      }
      if (other.HasCostMicros) {
        CostMicros = other.CostMicros;
      }
      if (other.HasImpressions) {
        Impressions = other.Impressions;
      }
      if (other.HasTopSlotImpressions) {
        TopSlotImpressions = other.TopSlotImpressions;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 64: {
            TargetCpaMicros = input.ReadInt64();
            break;
          }
          case 73: {
            BiddableConversions = input.ReadDouble();
            break;
          }
          case 81: {
            BiddableConversionsValue = input.ReadDouble();
            break;
          }
          case 88: {
            Clicks = input.ReadInt64();
            break;
          }
          case 96: {
            CostMicros = input.ReadInt64();
            break;
          }
          case 104: {
            Impressions = input.ReadInt64();
            break;
          }
          case 112: {
            TopSlotImpressions = input.ReadInt64();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 64: {
            TargetCpaMicros = input.ReadInt64();
            break;
          }
          case 73: {
            BiddableConversions = input.ReadDouble();
            break;
          }
          case 81: {
            BiddableConversionsValue = input.ReadDouble();
            break;
          }
          case 88: {
            Clicks = input.ReadInt64();
            break;
          }
          case 96: {
            CostMicros = input.ReadInt64();
            break;
          }
          case 104: {
            Impressions = input.ReadInt64();
            break;
          }
          case 112: {
            TopSlotImpressions = input.ReadInt64();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// Projected metrics for a specific target ROAS amount.
  /// </summary>
  public sealed partial class TargetRoasSimulationPoint : pb::IMessage<TargetRoasSimulationPoint>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<TargetRoasSimulationPoint> _parser = new pb::MessageParser<TargetRoasSimulationPoint>(() => new TargetRoasSimulationPoint());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TargetRoasSimulationPoint> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Ads.GoogleAds.V6.Common.SimulationReflection.Descriptor.MessageTypes[10]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TargetRoasSimulationPoint() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TargetRoasSimulationPoint(TargetRoasSimulationPoint other) : this() {
      _hasBits0 = other._hasBits0;
      targetRoas_ = other.targetRoas_;
      biddableConversions_ = other.biddableConversions_;
      biddableConversionsValue_ = other.biddableConversionsValue_;
      clicks_ = other.clicks_;
      costMicros_ = other.costMicros_;
      impressions_ = other.impressions_;
      topSlotImpressions_ = other.topSlotImpressions_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TargetRoasSimulationPoint Clone() {
      return new TargetRoasSimulationPoint(this);
    }

    /// <summary>Field number for the "target_roas" field.</summary>
    public const int TargetRoasFieldNumber = 8;
    private double targetRoas_;
    /// <summary>
    /// The simulated target ROAS upon which projected metrics are based.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double TargetRoas {
      get { if ((_hasBits0 & 1) != 0) { return targetRoas_; } else { return 0D; } }
      set {
        _hasBits0 |= 1;
        targetRoas_ = value;
      }
    }
    /// <summary>Gets whether the "target_roas" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasTargetRoas {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "target_roas" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearTargetRoas() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "biddable_conversions" field.</summary>
    public const int BiddableConversionsFieldNumber = 9;
    private double biddableConversions_;
    /// <summary>
    /// Projected number of biddable conversions.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double BiddableConversions {
      get { if ((_hasBits0 & 2) != 0) { return biddableConversions_; } else { return 0D; } }
      set {
        _hasBits0 |= 2;
        biddableConversions_ = value;
      }
    }
    /// <summary>Gets whether the "biddable_conversions" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasBiddableConversions {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "biddable_conversions" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearBiddableConversions() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "biddable_conversions_value" field.</summary>
    public const int BiddableConversionsValueFieldNumber = 10;
    private double biddableConversionsValue_;
    /// <summary>
    /// Projected total value of biddable conversions.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double BiddableConversionsValue {
      get { if ((_hasBits0 & 4) != 0) { return biddableConversionsValue_; } else { return 0D; } }
      set {
        _hasBits0 |= 4;
        biddableConversionsValue_ = value;
      }
    }
    /// <summary>Gets whether the "biddable_conversions_value" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasBiddableConversionsValue {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "biddable_conversions_value" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearBiddableConversionsValue() {
      _hasBits0 &= ~4;
    }

    /// <summary>Field number for the "clicks" field.</summary>
    public const int ClicksFieldNumber = 11;
    private long clicks_;
    /// <summary>
    /// Projected number of clicks.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Clicks {
      get { if ((_hasBits0 & 8) != 0) { return clicks_; } else { return 0L; } }
      set {
        _hasBits0 |= 8;
        clicks_ = value;
      }
    }
    /// <summary>Gets whether the "clicks" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasClicks {
      get { return (_hasBits0 & 8) != 0; }
    }
    /// <summary>Clears the value of the "clicks" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearClicks() {
      _hasBits0 &= ~8;
    }

    /// <summary>Field number for the "cost_micros" field.</summary>
    public const int CostMicrosFieldNumber = 12;
    private long costMicros_;
    /// <summary>
    /// Projected cost in micros.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long CostMicros {
      get { if ((_hasBits0 & 16) != 0) { return costMicros_; } else { return 0L; } }
      set {
        _hasBits0 |= 16;
        costMicros_ = value;
      }
    }
    /// <summary>Gets whether the "cost_micros" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasCostMicros {
      get { return (_hasBits0 & 16) != 0; }
    }
    /// <summary>Clears the value of the "cost_micros" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearCostMicros() {
      _hasBits0 &= ~16;
    }

    /// <summary>Field number for the "impressions" field.</summary>
    public const int ImpressionsFieldNumber = 13;
    private long impressions_;
    /// <summary>
    /// Projected number of impressions.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Impressions {
      get { if ((_hasBits0 & 32) != 0) { return impressions_; } else { return 0L; } }
      set {
        _hasBits0 |= 32;
        impressions_ = value;
      }
    }
    /// <summary>Gets whether the "impressions" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasImpressions {
      get { return (_hasBits0 & 32) != 0; }
    }
    /// <summary>Clears the value of the "impressions" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearImpressions() {
      _hasBits0 &= ~32;
    }

    /// <summary>Field number for the "top_slot_impressions" field.</summary>
    public const int TopSlotImpressionsFieldNumber = 14;
    private long topSlotImpressions_;
    /// <summary>
    /// Projected number of top slot impressions.
    /// Only Search advertising channel type supports this field.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long TopSlotImpressions {
      get { if ((_hasBits0 & 64) != 0) { return topSlotImpressions_; } else { return 0L; } }
      set {
        _hasBits0 |= 64;
        topSlotImpressions_ = value;
      }
    }
    /// <summary>Gets whether the "top_slot_impressions" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasTopSlotImpressions {
      get { return (_hasBits0 & 64) != 0; }
    }
    /// <summary>Clears the value of the "top_slot_impressions" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearTopSlotImpressions() {
      _hasBits0 &= ~64;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TargetRoasSimulationPoint);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TargetRoasSimulationPoint other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(TargetRoas, other.TargetRoas)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(BiddableConversions, other.BiddableConversions)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(BiddableConversionsValue, other.BiddableConversionsValue)) return false;
      if (Clicks != other.Clicks) return false;
      if (CostMicros != other.CostMicros) return false;
      if (Impressions != other.Impressions) return false;
      if (TopSlotImpressions != other.TopSlotImpressions) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasTargetRoas) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(TargetRoas);
      if (HasBiddableConversions) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(BiddableConversions);
      if (HasBiddableConversionsValue) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(BiddableConversionsValue);
      if (HasClicks) hash ^= Clicks.GetHashCode();
      if (HasCostMicros) hash ^= CostMicros.GetHashCode();
      if (HasImpressions) hash ^= Impressions.GetHashCode();
      if (HasTopSlotImpressions) hash ^= TopSlotImpressions.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasTargetRoas) {
        output.WriteRawTag(65);
        output.WriteDouble(TargetRoas);
      }
      if (HasBiddableConversions) {
        output.WriteRawTag(73);
        output.WriteDouble(BiddableConversions);
      }
      if (HasBiddableConversionsValue) {
        output.WriteRawTag(81);
        output.WriteDouble(BiddableConversionsValue);
      }
      if (HasClicks) {
        output.WriteRawTag(88);
        output.WriteInt64(Clicks);
      }
      if (HasCostMicros) {
        output.WriteRawTag(96);
        output.WriteInt64(CostMicros);
      }
      if (HasImpressions) {
        output.WriteRawTag(104);
        output.WriteInt64(Impressions);
      }
      if (HasTopSlotImpressions) {
        output.WriteRawTag(112);
        output.WriteInt64(TopSlotImpressions);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasTargetRoas) {
        output.WriteRawTag(65);
        output.WriteDouble(TargetRoas);
      }
      if (HasBiddableConversions) {
        output.WriteRawTag(73);
        output.WriteDouble(BiddableConversions);
      }
      if (HasBiddableConversionsValue) {
        output.WriteRawTag(81);
        output.WriteDouble(BiddableConversionsValue);
      }
      if (HasClicks) {
        output.WriteRawTag(88);
        output.WriteInt64(Clicks);
      }
      if (HasCostMicros) {
        output.WriteRawTag(96);
        output.WriteInt64(CostMicros);
      }
      if (HasImpressions) {
        output.WriteRawTag(104);
        output.WriteInt64(Impressions);
      }
      if (HasTopSlotImpressions) {
        output.WriteRawTag(112);
        output.WriteInt64(TopSlotImpressions);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasTargetRoas) {
        size += 1 + 8;
      }
      if (HasBiddableConversions) {
        size += 1 + 8;
      }
      if (HasBiddableConversionsValue) {
        size += 1 + 8;
      }
      if (HasClicks) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Clicks);
      }
      if (HasCostMicros) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(CostMicros);
      }
      if (HasImpressions) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Impressions);
      }
      if (HasTopSlotImpressions) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(TopSlotImpressions);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TargetRoasSimulationPoint other) {
      if (other == null) {
        return;
      }
      if (other.HasTargetRoas) {
        TargetRoas = other.TargetRoas;
      }
      if (other.HasBiddableConversions) {
        BiddableConversions = other.BiddableConversions;
      }
      if (other.HasBiddableConversionsValue) {
        BiddableConversionsValue = other.BiddableConversionsValue;
      }
      if (other.HasClicks) {
        Clicks = other.Clicks;
      }
      if (other.HasCostMicros) {
        CostMicros = other.CostMicros;
      }
      if (other.HasImpressions) {
        Impressions = other.Impressions;
      }
      if (other.HasTopSlotImpressions) {
        TopSlotImpressions = other.TopSlotImpressions;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 65: {
            TargetRoas = input.ReadDouble();
            break;
          }
          case 73: {
            BiddableConversions = input.ReadDouble();
            break;
          }
          case 81: {
            BiddableConversionsValue = input.ReadDouble();
            break;
          }
          case 88: {
            Clicks = input.ReadInt64();
            break;
          }
          case 96: {
            CostMicros = input.ReadInt64();
            break;
          }
          case 104: {
            Impressions = input.ReadInt64();
            break;
          }
          case 112: {
            TopSlotImpressions = input.ReadInt64();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 65: {
            TargetRoas = input.ReadDouble();
            break;
          }
          case 73: {
            BiddableConversions = input.ReadDouble();
            break;
          }
          case 81: {
            BiddableConversionsValue = input.ReadDouble();
            break;
          }
          case 88: {
            Clicks = input.ReadInt64();
            break;
          }
          case 96: {
            CostMicros = input.ReadInt64();
            break;
          }
          case 104: {
            Impressions = input.ReadInt64();
            break;
          }
          case 112: {
            TopSlotImpressions = input.ReadInt64();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// Projected metrics for a specific percent CPC amount. Only Hotel advertising
  /// channel type supports this field.
  /// </summary>
  public sealed partial class PercentCpcBidSimulationPoint : pb::IMessage<PercentCpcBidSimulationPoint>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<PercentCpcBidSimulationPoint> _parser = new pb::MessageParser<PercentCpcBidSimulationPoint>(() => new PercentCpcBidSimulationPoint());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PercentCpcBidSimulationPoint> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Ads.GoogleAds.V6.Common.SimulationReflection.Descriptor.MessageTypes[11]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PercentCpcBidSimulationPoint() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PercentCpcBidSimulationPoint(PercentCpcBidSimulationPoint other) : this() {
      _hasBits0 = other._hasBits0;
      percentCpcBidMicros_ = other.percentCpcBidMicros_;
      biddableConversions_ = other.biddableConversions_;
      biddableConversionsValue_ = other.biddableConversionsValue_;
      clicks_ = other.clicks_;
      costMicros_ = other.costMicros_;
      impressions_ = other.impressions_;
      topSlotImpressions_ = other.topSlotImpressions_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PercentCpcBidSimulationPoint Clone() {
      return new PercentCpcBidSimulationPoint(this);
    }

    /// <summary>Field number for the "percent_cpc_bid_micros" field.</summary>
    public const int PercentCpcBidMicrosFieldNumber = 1;
    private long percentCpcBidMicros_;
    /// <summary>
    /// The simulated percent CPC upon which projected metrics are based. Percent
    /// CPC expressed as fraction of the advertised price for some good or service.
    /// The value stored here is 1,000,000 * [fraction].
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long PercentCpcBidMicros {
      get { if ((_hasBits0 & 1) != 0) { return percentCpcBidMicros_; } else { return 0L; } }
      set {
        _hasBits0 |= 1;
        percentCpcBidMicros_ = value;
      }
    }
    /// <summary>Gets whether the "percent_cpc_bid_micros" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasPercentCpcBidMicros {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "percent_cpc_bid_micros" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearPercentCpcBidMicros() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "biddable_conversions" field.</summary>
    public const int BiddableConversionsFieldNumber = 2;
    private double biddableConversions_;
    /// <summary>
    /// Projected number of biddable conversions.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double BiddableConversions {
      get { if ((_hasBits0 & 2) != 0) { return biddableConversions_; } else { return 0D; } }
      set {
        _hasBits0 |= 2;
        biddableConversions_ = value;
      }
    }
    /// <summary>Gets whether the "biddable_conversions" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasBiddableConversions {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "biddable_conversions" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearBiddableConversions() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "biddable_conversions_value" field.</summary>
    public const int BiddableConversionsValueFieldNumber = 3;
    private double biddableConversionsValue_;
    /// <summary>
    /// Projected total value of biddable conversions in local currency.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double BiddableConversionsValue {
      get { if ((_hasBits0 & 4) != 0) { return biddableConversionsValue_; } else { return 0D; } }
      set {
        _hasBits0 |= 4;
        biddableConversionsValue_ = value;
      }
    }
    /// <summary>Gets whether the "biddable_conversions_value" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasBiddableConversionsValue {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "biddable_conversions_value" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearBiddableConversionsValue() {
      _hasBits0 &= ~4;
    }

    /// <summary>Field number for the "clicks" field.</summary>
    public const int ClicksFieldNumber = 4;
    private long clicks_;
    /// <summary>
    /// Projected number of clicks.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Clicks {
      get { if ((_hasBits0 & 8) != 0) { return clicks_; } else { return 0L; } }
      set {
        _hasBits0 |= 8;
        clicks_ = value;
      }
    }
    /// <summary>Gets whether the "clicks" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasClicks {
      get { return (_hasBits0 & 8) != 0; }
    }
    /// <summary>Clears the value of the "clicks" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearClicks() {
      _hasBits0 &= ~8;
    }

    /// <summary>Field number for the "cost_micros" field.</summary>
    public const int CostMicrosFieldNumber = 5;
    private long costMicros_;
    /// <summary>
    /// Projected cost in micros.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long CostMicros {
      get { if ((_hasBits0 & 16) != 0) { return costMicros_; } else { return 0L; } }
      set {
        _hasBits0 |= 16;
        costMicros_ = value;
      }
    }
    /// <summary>Gets whether the "cost_micros" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasCostMicros {
      get { return (_hasBits0 & 16) != 0; }
    }
    /// <summary>Clears the value of the "cost_micros" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearCostMicros() {
      _hasBits0 &= ~16;
    }

    /// <summary>Field number for the "impressions" field.</summary>
    public const int ImpressionsFieldNumber = 6;
    private long impressions_;
    /// <summary>
    /// Projected number of impressions.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Impressions {
      get { if ((_hasBits0 & 32) != 0) { return impressions_; } else { return 0L; } }
      set {
        _hasBits0 |= 32;
        impressions_ = value;
      }
    }
    /// <summary>Gets whether the "impressions" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasImpressions {
      get { return (_hasBits0 & 32) != 0; }
    }
    /// <summary>Clears the value of the "impressions" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearImpressions() {
      _hasBits0 &= ~32;
    }

    /// <summary>Field number for the "top_slot_impressions" field.</summary>
    public const int TopSlotImpressionsFieldNumber = 7;
    private long topSlotImpressions_;
    /// <summary>
    /// Projected number of top slot impressions.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long TopSlotImpressions {
      get { if ((_hasBits0 & 64) != 0) { return topSlotImpressions_; } else { return 0L; } }
      set {
        _hasBits0 |= 64;
        topSlotImpressions_ = value;
      }
    }
    /// <summary>Gets whether the "top_slot_impressions" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasTopSlotImpressions {
      get { return (_hasBits0 & 64) != 0; }
    }
    /// <summary>Clears the value of the "top_slot_impressions" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearTopSlotImpressions() {
      _hasBits0 &= ~64;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PercentCpcBidSimulationPoint);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PercentCpcBidSimulationPoint other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (PercentCpcBidMicros != other.PercentCpcBidMicros) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(BiddableConversions, other.BiddableConversions)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(BiddableConversionsValue, other.BiddableConversionsValue)) return false;
      if (Clicks != other.Clicks) return false;
      if (CostMicros != other.CostMicros) return false;
      if (Impressions != other.Impressions) return false;
      if (TopSlotImpressions != other.TopSlotImpressions) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasPercentCpcBidMicros) hash ^= PercentCpcBidMicros.GetHashCode();
      if (HasBiddableConversions) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(BiddableConversions);
      if (HasBiddableConversionsValue) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(BiddableConversionsValue);
      if (HasClicks) hash ^= Clicks.GetHashCode();
      if (HasCostMicros) hash ^= CostMicros.GetHashCode();
      if (HasImpressions) hash ^= Impressions.GetHashCode();
      if (HasTopSlotImpressions) hash ^= TopSlotImpressions.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasPercentCpcBidMicros) {
        output.WriteRawTag(8);
        output.WriteInt64(PercentCpcBidMicros);
      }
      if (HasBiddableConversions) {
        output.WriteRawTag(17);
        output.WriteDouble(BiddableConversions);
      }
      if (HasBiddableConversionsValue) {
        output.WriteRawTag(25);
        output.WriteDouble(BiddableConversionsValue);
      }
      if (HasClicks) {
        output.WriteRawTag(32);
        output.WriteInt64(Clicks);
      }
      if (HasCostMicros) {
        output.WriteRawTag(40);
        output.WriteInt64(CostMicros);
      }
      if (HasImpressions) {
        output.WriteRawTag(48);
        output.WriteInt64(Impressions);
      }
      if (HasTopSlotImpressions) {
        output.WriteRawTag(56);
        output.WriteInt64(TopSlotImpressions);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasPercentCpcBidMicros) {
        output.WriteRawTag(8);
        output.WriteInt64(PercentCpcBidMicros);
      }
      if (HasBiddableConversions) {
        output.WriteRawTag(17);
        output.WriteDouble(BiddableConversions);
      }
      if (HasBiddableConversionsValue) {
        output.WriteRawTag(25);
        output.WriteDouble(BiddableConversionsValue);
      }
      if (HasClicks) {
        output.WriteRawTag(32);
        output.WriteInt64(Clicks);
      }
      if (HasCostMicros) {
        output.WriteRawTag(40);
        output.WriteInt64(CostMicros);
      }
      if (HasImpressions) {
        output.WriteRawTag(48);
        output.WriteInt64(Impressions);
      }
      if (HasTopSlotImpressions) {
        output.WriteRawTag(56);
        output.WriteInt64(TopSlotImpressions);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasPercentCpcBidMicros) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(PercentCpcBidMicros);
      }
      if (HasBiddableConversions) {
        size += 1 + 8;
      }
      if (HasBiddableConversionsValue) {
        size += 1 + 8;
      }
      if (HasClicks) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Clicks);
      }
      if (HasCostMicros) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(CostMicros);
      }
      if (HasImpressions) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Impressions);
      }
      if (HasTopSlotImpressions) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(TopSlotImpressions);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PercentCpcBidSimulationPoint other) {
      if (other == null) {
        return;
      }
      if (other.HasPercentCpcBidMicros) {
        PercentCpcBidMicros = other.PercentCpcBidMicros;
      }
      if (other.HasBiddableConversions) {
        BiddableConversions = other.BiddableConversions;
      }
      if (other.HasBiddableConversionsValue) {
        BiddableConversionsValue = other.BiddableConversionsValue;
      }
      if (other.HasClicks) {
        Clicks = other.Clicks;
      }
      if (other.HasCostMicros) {
        CostMicros = other.CostMicros;
      }
      if (other.HasImpressions) {
        Impressions = other.Impressions;
      }
      if (other.HasTopSlotImpressions) {
        TopSlotImpressions = other.TopSlotImpressions;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            PercentCpcBidMicros = input.ReadInt64();
            break;
          }
          case 17: {
            BiddableConversions = input.ReadDouble();
            break;
          }
          case 25: {
            BiddableConversionsValue = input.ReadDouble();
            break;
          }
          case 32: {
            Clicks = input.ReadInt64();
            break;
          }
          case 40: {
            CostMicros = input.ReadInt64();
            break;
          }
          case 48: {
            Impressions = input.ReadInt64();
            break;
          }
          case 56: {
            TopSlotImpressions = input.ReadInt64();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            PercentCpcBidMicros = input.ReadInt64();
            break;
          }
          case 17: {
            BiddableConversions = input.ReadDouble();
            break;
          }
          case 25: {
            BiddableConversionsValue = input.ReadDouble();
            break;
          }
          case 32: {
            Clicks = input.ReadInt64();
            break;
          }
          case 40: {
            CostMicros = input.ReadInt64();
            break;
          }
          case 48: {
            Impressions = input.ReadInt64();
            break;
          }
          case 56: {
            TopSlotImpressions = input.ReadInt64();
            break;
          }
        }
      }
    }
    #endif

  }

  #endregion

}

#endregion Designer generated code
