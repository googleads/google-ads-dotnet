// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: google/ads/googleads/v7/resources/bidding_strategy.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Google.Ads.GoogleAds.V7.Resources {

  /// <summary>Holder for reflection information generated from google/ads/googleads/v7/resources/bidding_strategy.proto</summary>
  public static partial class BiddingStrategyReflection {

    #region Descriptor
    /// <summary>File descriptor for google/ads/googleads/v7/resources/bidding_strategy.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static BiddingStrategyReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Cjhnb29nbGUvYWRzL2dvb2dsZWFkcy92Ny9yZXNvdXJjZXMvYmlkZGluZ19z",
            "dHJhdGVneS5wcm90bxIhZ29vZ2xlLmFkcy5nb29nbGVhZHMudjcucmVzb3Vy",
            "Y2VzGixnb29nbGUvYWRzL2dvb2dsZWFkcy92Ny9jb21tb24vYmlkZGluZy5w",
            "cm90bxo7Z29vZ2xlL2Fkcy9nb29nbGVhZHMvdjcvZW51bXMvYmlkZGluZ19z",
            "dHJhdGVneV9zdGF0dXMucHJvdG8aOWdvb2dsZS9hZHMvZ29vZ2xlYWRzL3Y3",
            "L2VudW1zL2JpZGRpbmdfc3RyYXRlZ3lfdHlwZS5wcm90bxofZ29vZ2xlL2Fw",
            "aS9maWVsZF9iZWhhdmlvci5wcm90bxoZZ29vZ2xlL2FwaS9yZXNvdXJjZS5w",
            "cm90bxocZ29vZ2xlL2FwaS9hbm5vdGF0aW9ucy5wcm90byK1CQoPQmlkZGlu",
            "Z1N0cmF0ZWd5EkcKDXJlc291cmNlX25hbWUYASABKAlCMOBBBfpBKgooZ29v",
            "Z2xlYWRzLmdvb2dsZWFwaXMuY29tL0JpZGRpbmdTdHJhdGVneRIUCgJpZBgQ",
            "IAEoA0ID4EEDSAGIAQESEQoEbmFtZRgRIAEoCUgCiAEBEmMKBnN0YXR1cxgP",
            "IAEoDjJOLmdvb2dsZS5hZHMuZ29vZ2xlYWRzLnY3LmVudW1zLkJpZGRpbmdT",
            "dHJhdGVneVN0YXR1c0VudW0uQmlkZGluZ1N0cmF0ZWd5U3RhdHVzQgPgQQMS",
            "XQoEdHlwZRgFIAEoDjJKLmdvb2dsZS5hZHMuZ29vZ2xlYWRzLnY3LmVudW1z",
            "LkJpZGRpbmdTdHJhdGVneVR5cGVFbnVtLkJpZGRpbmdTdHJhdGVneVR5cGVC",
            "A+BBAxIpChdlZmZlY3RpdmVfY3VycmVuY3lfY29kZRgUIAEoCUID4EEDSAOI",
            "AQESIAoOY2FtcGFpZ25fY291bnQYEiABKANCA+BBA0gEiAEBEiwKGm5vbl9y",
            "ZW1vdmVkX2NhbXBhaWduX2NvdW50GBMgASgDQgPgQQNIBYgBARJDCgxlbmhh",
            "bmNlZF9jcGMYByABKAsyKy5nb29nbGUuYWRzLmdvb2dsZWFkcy52Ny5jb21t",
            "b24uRW5oYW5jZWRDcGNIABJcChltYXhpbWl6ZV9jb252ZXJzaW9uX3ZhbHVl",
            "GBUgASgLMjcuZ29vZ2xlLmFkcy5nb29nbGVhZHMudjcuY29tbW9uLk1heGlt",
            "aXplQ29udmVyc2lvblZhbHVlSAASUwoUbWF4aW1pemVfY29udmVyc2lvbnMY",
            "FiABKAsyMy5nb29nbGUuYWRzLmdvb2dsZWFkcy52Ny5jb21tb24uTWF4aW1p",
            "emVDb252ZXJzaW9uc0gAEj8KCnRhcmdldF9jcGEYCSABKAsyKS5nb29nbGUu",
            "YWRzLmdvb2dsZWFkcy52Ny5jb21tb24uVGFyZ2V0Q3BhSAASWAoXdGFyZ2V0",
            "X2ltcHJlc3Npb25fc2hhcmUYMCABKAsyNS5nb29nbGUuYWRzLmdvb2dsZWFk",
            "cy52Ny5jb21tb24uVGFyZ2V0SW1wcmVzc2lvblNoYXJlSAASQQoLdGFyZ2V0",
            "X3JvYXMYCyABKAsyKi5nb29nbGUuYWRzLmdvb2dsZWFkcy52Ny5jb21tb24u",
            "VGFyZ2V0Um9hc0gAEkMKDHRhcmdldF9zcGVuZBgMIAEoCzIrLmdvb2dsZS5h",
            "ZHMuZ29vZ2xlYWRzLnY3LmNvbW1vbi5UYXJnZXRTcGVuZEgAOm7qQWsKKGdv",
            "b2dsZWFkcy5nb29nbGVhcGlzLmNvbS9CaWRkaW5nU3RyYXRlZ3kSP2N1c3Rv",
            "bWVycy97Y3VzdG9tZXJfaWR9L2JpZGRpbmdTdHJhdGVnaWVzL3tiaWRkaW5n",
            "X3N0cmF0ZWd5X2lkfUIICgZzY2hlbWVCBQoDX2lkQgcKBV9uYW1lQhoKGF9l",
            "ZmZlY3RpdmVfY3VycmVuY3lfY29kZUIRCg9fY2FtcGFpZ25fY291bnRCHQob",
            "X25vbl9yZW1vdmVkX2NhbXBhaWduX2NvdW50QoECCiVjb20uZ29vZ2xlLmFk",
            "cy5nb29nbGVhZHMudjcucmVzb3VyY2VzQhRCaWRkaW5nU3RyYXRlZ3lQcm90",
            "b1ABWkpnb29nbGUuZ29sYW5nLm9yZy9nZW5wcm90by9nb29nbGVhcGlzL2Fk",
            "cy9nb29nbGVhZHMvdjcvcmVzb3VyY2VzO3Jlc291cmNlc6ICA0dBQaoCIUdv",
            "b2dsZS5BZHMuR29vZ2xlQWRzLlY3LlJlc291cmNlc8oCIUdvb2dsZVxBZHNc",
            "R29vZ2xlQWRzXFY3XFJlc291cmNlc+oCJUdvb2dsZTo6QWRzOjpHb29nbGVB",
            "ZHM6OlY3OjpSZXNvdXJjZXNiBnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Google.Ads.GoogleAds.V7.Common.BiddingReflection.Descriptor, global::Google.Ads.GoogleAds.V7.Enums.BiddingStrategyStatusReflection.Descriptor, global::Google.Ads.GoogleAds.V7.Enums.BiddingStrategyTypeReflection.Descriptor, global::Google.Api.FieldBehaviorReflection.Descriptor, global::Google.Api.ResourceReflection.Descriptor, global::Google.Api.AnnotationsReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Ads.GoogleAds.V7.Resources.BiddingStrategy), global::Google.Ads.GoogleAds.V7.Resources.BiddingStrategy.Parser, new[]{ "ResourceName", "Id", "Name", "Status", "Type", "EffectiveCurrencyCode", "CampaignCount", "NonRemovedCampaignCount", "EnhancedCpc", "MaximizeConversionValue", "MaximizeConversions", "TargetCpa", "TargetImpressionShare", "TargetRoas", "TargetSpend" }, new[]{ "Scheme", "Id", "Name", "EffectiveCurrencyCode", "CampaignCount", "NonRemovedCampaignCount" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  /// <summary>
  /// A bidding strategy.
  /// </summary>
  public sealed partial class BiddingStrategy : pb::IMessage<BiddingStrategy>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<BiddingStrategy> _parser = new pb::MessageParser<BiddingStrategy>(() => new BiddingStrategy());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BiddingStrategy> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Ads.GoogleAds.V7.Resources.BiddingStrategyReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BiddingStrategy() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BiddingStrategy(BiddingStrategy other) : this() {
      _hasBits0 = other._hasBits0;
      resourceName_ = other.resourceName_;
      id_ = other.id_;
      name_ = other.name_;
      status_ = other.status_;
      type_ = other.type_;
      effectiveCurrencyCode_ = other.effectiveCurrencyCode_;
      campaignCount_ = other.campaignCount_;
      nonRemovedCampaignCount_ = other.nonRemovedCampaignCount_;
      switch (other.SchemeCase) {
        case SchemeOneofCase.EnhancedCpc:
          EnhancedCpc = other.EnhancedCpc.Clone();
          break;
        case SchemeOneofCase.MaximizeConversionValue:
          MaximizeConversionValue = other.MaximizeConversionValue.Clone();
          break;
        case SchemeOneofCase.MaximizeConversions:
          MaximizeConversions = other.MaximizeConversions.Clone();
          break;
        case SchemeOneofCase.TargetCpa:
          TargetCpa = other.TargetCpa.Clone();
          break;
        case SchemeOneofCase.TargetImpressionShare:
          TargetImpressionShare = other.TargetImpressionShare.Clone();
          break;
        case SchemeOneofCase.TargetRoas:
          TargetRoas = other.TargetRoas.Clone();
          break;
        case SchemeOneofCase.TargetSpend:
          TargetSpend = other.TargetSpend.Clone();
          break;
      }

      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BiddingStrategy Clone() {
      return new BiddingStrategy(this);
    }

    /// <summary>Field number for the "resource_name" field.</summary>
    public const int ResourceNameFieldNumber = 1;
    private string resourceName_ = "";
    /// <summary>
    /// Immutable. The resource name of the bidding strategy.
    /// Bidding strategy resource names have the form:
    ///
    /// `customers/{customer_id}/biddingStrategies/{bidding_strategy_id}`
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ResourceName {
      get { return resourceName_; }
      set {
        resourceName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 16;
    private long id_;
    /// <summary>
    /// Output only. The ID of the bidding strategy.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Id {
      get { if ((_hasBits0 & 1) != 0) { return id_; } else { return 0L; } }
      set {
        _hasBits0 |= 1;
        id_ = value;
      }
    }
    /// <summary>Gets whether the "id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasId {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearId() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 17;
    private string name_;
    /// <summary>
    /// The name of the bidding strategy.
    /// All bidding strategies within an account must be named distinctly.
    ///
    /// The length of this string should be between 1 and 255, inclusive,
    /// in UTF-8 bytes, (trimmed).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_ ?? ""; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "name" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasName {
      get { return name_ != null; }
    }
    /// <summary>Clears the value of the "name" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearName() {
      name_ = null;
    }

    /// <summary>Field number for the "status" field.</summary>
    public const int StatusFieldNumber = 15;
    private global::Google.Ads.GoogleAds.V7.Enums.BiddingStrategyStatusEnum.Types.BiddingStrategyStatus status_ = global::Google.Ads.GoogleAds.V7.Enums.BiddingStrategyStatusEnum.Types.BiddingStrategyStatus.Unspecified;
    /// <summary>
    /// Output only. The status of the bidding strategy.
    ///
    /// This field is read-only.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Ads.GoogleAds.V7.Enums.BiddingStrategyStatusEnum.Types.BiddingStrategyStatus Status {
      get { return status_; }
      set {
        status_ = value;
      }
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 5;
    private global::Google.Ads.GoogleAds.V7.Enums.BiddingStrategyTypeEnum.Types.BiddingStrategyType type_ = global::Google.Ads.GoogleAds.V7.Enums.BiddingStrategyTypeEnum.Types.BiddingStrategyType.Unspecified;
    /// <summary>
    /// Output only. The type of the bidding strategy.
    /// Create a bidding strategy by setting the bidding scheme.
    ///
    /// This field is read-only.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Ads.GoogleAds.V7.Enums.BiddingStrategyTypeEnum.Types.BiddingStrategyType Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    /// <summary>Field number for the "effective_currency_code" field.</summary>
    public const int EffectiveCurrencyCodeFieldNumber = 20;
    private string effectiveCurrencyCode_;
    /// <summary>
    /// Output only. The currency used by the bidding strategy (ISO 4217 three-letter code).
    ///
    /// For bidding strategies in manager customers, this is the currency set by
    /// the advertiser when creating the strategy. For serving customers, this is
    /// the customer's currency_code.
    ///
    /// Bidding strategy metrics are reported in this currency.
    ///
    /// This field is read-only.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string EffectiveCurrencyCode {
      get { return effectiveCurrencyCode_ ?? ""; }
      set {
        effectiveCurrencyCode_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "effective_currency_code" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasEffectiveCurrencyCode {
      get { return effectiveCurrencyCode_ != null; }
    }
    /// <summary>Clears the value of the "effective_currency_code" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearEffectiveCurrencyCode() {
      effectiveCurrencyCode_ = null;
    }

    /// <summary>Field number for the "campaign_count" field.</summary>
    public const int CampaignCountFieldNumber = 18;
    private long campaignCount_;
    /// <summary>
    /// Output only. The number of campaigns attached to this bidding strategy.
    ///
    /// This field is read-only.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long CampaignCount {
      get { if ((_hasBits0 & 2) != 0) { return campaignCount_; } else { return 0L; } }
      set {
        _hasBits0 |= 2;
        campaignCount_ = value;
      }
    }
    /// <summary>Gets whether the "campaign_count" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasCampaignCount {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "campaign_count" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearCampaignCount() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "non_removed_campaign_count" field.</summary>
    public const int NonRemovedCampaignCountFieldNumber = 19;
    private long nonRemovedCampaignCount_;
    /// <summary>
    /// Output only. The number of non-removed campaigns attached to this bidding strategy.
    ///
    /// This field is read-only.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long NonRemovedCampaignCount {
      get { if ((_hasBits0 & 4) != 0) { return nonRemovedCampaignCount_; } else { return 0L; } }
      set {
        _hasBits0 |= 4;
        nonRemovedCampaignCount_ = value;
      }
    }
    /// <summary>Gets whether the "non_removed_campaign_count" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasNonRemovedCampaignCount {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "non_removed_campaign_count" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearNonRemovedCampaignCount() {
      _hasBits0 &= ~4;
    }

    /// <summary>Field number for the "enhanced_cpc" field.</summary>
    public const int EnhancedCpcFieldNumber = 7;
    /// <summary>
    /// A bidding strategy that raises bids for clicks that seem more likely to
    /// lead to a conversion and lowers them for clicks where they seem less
    /// likely.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Ads.GoogleAds.V7.Common.EnhancedCpc EnhancedCpc {
      get { return schemeCase_ == SchemeOneofCase.EnhancedCpc ? (global::Google.Ads.GoogleAds.V7.Common.EnhancedCpc) scheme_ : null; }
      set {
        scheme_ = value;
        schemeCase_ = value == null ? SchemeOneofCase.None : SchemeOneofCase.EnhancedCpc;
      }
    }

    /// <summary>Field number for the "maximize_conversion_value" field.</summary>
    public const int MaximizeConversionValueFieldNumber = 21;
    /// <summary>
    /// An automated bidding strategy to help get the most conversion value for
    /// your campaigns while spending your budget.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Ads.GoogleAds.V7.Common.MaximizeConversionValue MaximizeConversionValue {
      get { return schemeCase_ == SchemeOneofCase.MaximizeConversionValue ? (global::Google.Ads.GoogleAds.V7.Common.MaximizeConversionValue) scheme_ : null; }
      set {
        scheme_ = value;
        schemeCase_ = value == null ? SchemeOneofCase.None : SchemeOneofCase.MaximizeConversionValue;
      }
    }

    /// <summary>Field number for the "maximize_conversions" field.</summary>
    public const int MaximizeConversionsFieldNumber = 22;
    /// <summary>
    /// An automated bidding strategy to help get the most conversions for your
    /// campaigns while spending your budget.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Ads.GoogleAds.V7.Common.MaximizeConversions MaximizeConversions {
      get { return schemeCase_ == SchemeOneofCase.MaximizeConversions ? (global::Google.Ads.GoogleAds.V7.Common.MaximizeConversions) scheme_ : null; }
      set {
        scheme_ = value;
        schemeCase_ = value == null ? SchemeOneofCase.None : SchemeOneofCase.MaximizeConversions;
      }
    }

    /// <summary>Field number for the "target_cpa" field.</summary>
    public const int TargetCpaFieldNumber = 9;
    /// <summary>
    /// A bidding strategy that sets bids to help get as many conversions as
    /// possible at the target cost-per-acquisition (CPA) you set.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Ads.GoogleAds.V7.Common.TargetCpa TargetCpa {
      get { return schemeCase_ == SchemeOneofCase.TargetCpa ? (global::Google.Ads.GoogleAds.V7.Common.TargetCpa) scheme_ : null; }
      set {
        scheme_ = value;
        schemeCase_ = value == null ? SchemeOneofCase.None : SchemeOneofCase.TargetCpa;
      }
    }

    /// <summary>Field number for the "target_impression_share" field.</summary>
    public const int TargetImpressionShareFieldNumber = 48;
    /// <summary>
    /// A bidding strategy that automatically optimizes towards a desired
    /// percentage of impressions.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Ads.GoogleAds.V7.Common.TargetImpressionShare TargetImpressionShare {
      get { return schemeCase_ == SchemeOneofCase.TargetImpressionShare ? (global::Google.Ads.GoogleAds.V7.Common.TargetImpressionShare) scheme_ : null; }
      set {
        scheme_ = value;
        schemeCase_ = value == null ? SchemeOneofCase.None : SchemeOneofCase.TargetImpressionShare;
      }
    }

    /// <summary>Field number for the "target_roas" field.</summary>
    public const int TargetRoasFieldNumber = 11;
    /// <summary>
    /// A bidding strategy that helps you maximize revenue while averaging a
    /// specific target Return On Ad Spend (ROAS).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Ads.GoogleAds.V7.Common.TargetRoas TargetRoas {
      get { return schemeCase_ == SchemeOneofCase.TargetRoas ? (global::Google.Ads.GoogleAds.V7.Common.TargetRoas) scheme_ : null; }
      set {
        scheme_ = value;
        schemeCase_ = value == null ? SchemeOneofCase.None : SchemeOneofCase.TargetRoas;
      }
    }

    /// <summary>Field number for the "target_spend" field.</summary>
    public const int TargetSpendFieldNumber = 12;
    /// <summary>
    /// A bid strategy that sets your bids to help get as many clicks as
    /// possible within your budget.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Ads.GoogleAds.V7.Common.TargetSpend TargetSpend {
      get { return schemeCase_ == SchemeOneofCase.TargetSpend ? (global::Google.Ads.GoogleAds.V7.Common.TargetSpend) scheme_ : null; }
      set {
        scheme_ = value;
        schemeCase_ = value == null ? SchemeOneofCase.None : SchemeOneofCase.TargetSpend;
      }
    }

    private object scheme_;
    /// <summary>Enum of possible cases for the "scheme" oneof.</summary>
    public enum SchemeOneofCase {
      None = 0,
      EnhancedCpc = 7,
      MaximizeConversionValue = 21,
      MaximizeConversions = 22,
      TargetCpa = 9,
      TargetImpressionShare = 48,
      TargetRoas = 11,
      TargetSpend = 12,
    }
    private SchemeOneofCase schemeCase_ = SchemeOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SchemeOneofCase SchemeCase {
      get { return schemeCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearScheme() {
      schemeCase_ = SchemeOneofCase.None;
      scheme_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as BiddingStrategy);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(BiddingStrategy other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ResourceName != other.ResourceName) return false;
      if (Id != other.Id) return false;
      if (Name != other.Name) return false;
      if (Status != other.Status) return false;
      if (Type != other.Type) return false;
      if (EffectiveCurrencyCode != other.EffectiveCurrencyCode) return false;
      if (CampaignCount != other.CampaignCount) return false;
      if (NonRemovedCampaignCount != other.NonRemovedCampaignCount) return false;
      if (!object.Equals(EnhancedCpc, other.EnhancedCpc)) return false;
      if (!object.Equals(MaximizeConversionValue, other.MaximizeConversionValue)) return false;
      if (!object.Equals(MaximizeConversions, other.MaximizeConversions)) return false;
      if (!object.Equals(TargetCpa, other.TargetCpa)) return false;
      if (!object.Equals(TargetImpressionShare, other.TargetImpressionShare)) return false;
      if (!object.Equals(TargetRoas, other.TargetRoas)) return false;
      if (!object.Equals(TargetSpend, other.TargetSpend)) return false;
      if (SchemeCase != other.SchemeCase) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ResourceName.Length != 0) hash ^= ResourceName.GetHashCode();
      if (HasId) hash ^= Id.GetHashCode();
      if (HasName) hash ^= Name.GetHashCode();
      if (Status != global::Google.Ads.GoogleAds.V7.Enums.BiddingStrategyStatusEnum.Types.BiddingStrategyStatus.Unspecified) hash ^= Status.GetHashCode();
      if (Type != global::Google.Ads.GoogleAds.V7.Enums.BiddingStrategyTypeEnum.Types.BiddingStrategyType.Unspecified) hash ^= Type.GetHashCode();
      if (HasEffectiveCurrencyCode) hash ^= EffectiveCurrencyCode.GetHashCode();
      if (HasCampaignCount) hash ^= CampaignCount.GetHashCode();
      if (HasNonRemovedCampaignCount) hash ^= NonRemovedCampaignCount.GetHashCode();
      if (schemeCase_ == SchemeOneofCase.EnhancedCpc) hash ^= EnhancedCpc.GetHashCode();
      if (schemeCase_ == SchemeOneofCase.MaximizeConversionValue) hash ^= MaximizeConversionValue.GetHashCode();
      if (schemeCase_ == SchemeOneofCase.MaximizeConversions) hash ^= MaximizeConversions.GetHashCode();
      if (schemeCase_ == SchemeOneofCase.TargetCpa) hash ^= TargetCpa.GetHashCode();
      if (schemeCase_ == SchemeOneofCase.TargetImpressionShare) hash ^= TargetImpressionShare.GetHashCode();
      if (schemeCase_ == SchemeOneofCase.TargetRoas) hash ^= TargetRoas.GetHashCode();
      if (schemeCase_ == SchemeOneofCase.TargetSpend) hash ^= TargetSpend.GetHashCode();
      hash ^= (int) schemeCase_;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (ResourceName.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(ResourceName);
      }
      if (Type != global::Google.Ads.GoogleAds.V7.Enums.BiddingStrategyTypeEnum.Types.BiddingStrategyType.Unspecified) {
        output.WriteRawTag(40);
        output.WriteEnum((int) Type);
      }
      if (schemeCase_ == SchemeOneofCase.EnhancedCpc) {
        output.WriteRawTag(58);
        output.WriteMessage(EnhancedCpc);
      }
      if (schemeCase_ == SchemeOneofCase.TargetCpa) {
        output.WriteRawTag(74);
        output.WriteMessage(TargetCpa);
      }
      if (schemeCase_ == SchemeOneofCase.TargetRoas) {
        output.WriteRawTag(90);
        output.WriteMessage(TargetRoas);
      }
      if (schemeCase_ == SchemeOneofCase.TargetSpend) {
        output.WriteRawTag(98);
        output.WriteMessage(TargetSpend);
      }
      if (Status != global::Google.Ads.GoogleAds.V7.Enums.BiddingStrategyStatusEnum.Types.BiddingStrategyStatus.Unspecified) {
        output.WriteRawTag(120);
        output.WriteEnum((int) Status);
      }
      if (HasId) {
        output.WriteRawTag(128, 1);
        output.WriteInt64(Id);
      }
      if (HasName) {
        output.WriteRawTag(138, 1);
        output.WriteString(Name);
      }
      if (HasCampaignCount) {
        output.WriteRawTag(144, 1);
        output.WriteInt64(CampaignCount);
      }
      if (HasNonRemovedCampaignCount) {
        output.WriteRawTag(152, 1);
        output.WriteInt64(NonRemovedCampaignCount);
      }
      if (HasEffectiveCurrencyCode) {
        output.WriteRawTag(162, 1);
        output.WriteString(EffectiveCurrencyCode);
      }
      if (schemeCase_ == SchemeOneofCase.MaximizeConversionValue) {
        output.WriteRawTag(170, 1);
        output.WriteMessage(MaximizeConversionValue);
      }
      if (schemeCase_ == SchemeOneofCase.MaximizeConversions) {
        output.WriteRawTag(178, 1);
        output.WriteMessage(MaximizeConversions);
      }
      if (schemeCase_ == SchemeOneofCase.TargetImpressionShare) {
        output.WriteRawTag(130, 3);
        output.WriteMessage(TargetImpressionShare);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (ResourceName.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(ResourceName);
      }
      if (Type != global::Google.Ads.GoogleAds.V7.Enums.BiddingStrategyTypeEnum.Types.BiddingStrategyType.Unspecified) {
        output.WriteRawTag(40);
        output.WriteEnum((int) Type);
      }
      if (schemeCase_ == SchemeOneofCase.EnhancedCpc) {
        output.WriteRawTag(58);
        output.WriteMessage(EnhancedCpc);
      }
      if (schemeCase_ == SchemeOneofCase.TargetCpa) {
        output.WriteRawTag(74);
        output.WriteMessage(TargetCpa);
      }
      if (schemeCase_ == SchemeOneofCase.TargetRoas) {
        output.WriteRawTag(90);
        output.WriteMessage(TargetRoas);
      }
      if (schemeCase_ == SchemeOneofCase.TargetSpend) {
        output.WriteRawTag(98);
        output.WriteMessage(TargetSpend);
      }
      if (Status != global::Google.Ads.GoogleAds.V7.Enums.BiddingStrategyStatusEnum.Types.BiddingStrategyStatus.Unspecified) {
        output.WriteRawTag(120);
        output.WriteEnum((int) Status);
      }
      if (HasId) {
        output.WriteRawTag(128, 1);
        output.WriteInt64(Id);
      }
      if (HasName) {
        output.WriteRawTag(138, 1);
        output.WriteString(Name);
      }
      if (HasCampaignCount) {
        output.WriteRawTag(144, 1);
        output.WriteInt64(CampaignCount);
      }
      if (HasNonRemovedCampaignCount) {
        output.WriteRawTag(152, 1);
        output.WriteInt64(NonRemovedCampaignCount);
      }
      if (HasEffectiveCurrencyCode) {
        output.WriteRawTag(162, 1);
        output.WriteString(EffectiveCurrencyCode);
      }
      if (schemeCase_ == SchemeOneofCase.MaximizeConversionValue) {
        output.WriteRawTag(170, 1);
        output.WriteMessage(MaximizeConversionValue);
      }
      if (schemeCase_ == SchemeOneofCase.MaximizeConversions) {
        output.WriteRawTag(178, 1);
        output.WriteMessage(MaximizeConversions);
      }
      if (schemeCase_ == SchemeOneofCase.TargetImpressionShare) {
        output.WriteRawTag(130, 3);
        output.WriteMessage(TargetImpressionShare);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ResourceName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ResourceName);
      }
      if (HasId) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(Id);
      }
      if (HasName) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (Status != global::Google.Ads.GoogleAds.V7.Enums.BiddingStrategyStatusEnum.Types.BiddingStrategyStatus.Unspecified) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Status);
      }
      if (Type != global::Google.Ads.GoogleAds.V7.Enums.BiddingStrategyTypeEnum.Types.BiddingStrategyType.Unspecified) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Type);
      }
      if (HasEffectiveCurrencyCode) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(EffectiveCurrencyCode);
      }
      if (HasCampaignCount) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(CampaignCount);
      }
      if (HasNonRemovedCampaignCount) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(NonRemovedCampaignCount);
      }
      if (schemeCase_ == SchemeOneofCase.EnhancedCpc) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(EnhancedCpc);
      }
      if (schemeCase_ == SchemeOneofCase.MaximizeConversionValue) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(MaximizeConversionValue);
      }
      if (schemeCase_ == SchemeOneofCase.MaximizeConversions) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(MaximizeConversions);
      }
      if (schemeCase_ == SchemeOneofCase.TargetCpa) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(TargetCpa);
      }
      if (schemeCase_ == SchemeOneofCase.TargetImpressionShare) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(TargetImpressionShare);
      }
      if (schemeCase_ == SchemeOneofCase.TargetRoas) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(TargetRoas);
      }
      if (schemeCase_ == SchemeOneofCase.TargetSpend) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(TargetSpend);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(BiddingStrategy other) {
      if (other == null) {
        return;
      }
      if (other.ResourceName.Length != 0) {
        ResourceName = other.ResourceName;
      }
      if (other.HasId) {
        Id = other.Id;
      }
      if (other.HasName) {
        Name = other.Name;
      }
      if (other.Status != global::Google.Ads.GoogleAds.V7.Enums.BiddingStrategyStatusEnum.Types.BiddingStrategyStatus.Unspecified) {
        Status = other.Status;
      }
      if (other.Type != global::Google.Ads.GoogleAds.V7.Enums.BiddingStrategyTypeEnum.Types.BiddingStrategyType.Unspecified) {
        Type = other.Type;
      }
      if (other.HasEffectiveCurrencyCode) {
        EffectiveCurrencyCode = other.EffectiveCurrencyCode;
      }
      if (other.HasCampaignCount) {
        CampaignCount = other.CampaignCount;
      }
      if (other.HasNonRemovedCampaignCount) {
        NonRemovedCampaignCount = other.NonRemovedCampaignCount;
      }
      switch (other.SchemeCase) {
        case SchemeOneofCase.EnhancedCpc:
          if (EnhancedCpc == null) {
            EnhancedCpc = new global::Google.Ads.GoogleAds.V7.Common.EnhancedCpc();
          }
          EnhancedCpc.MergeFrom(other.EnhancedCpc);
          break;
        case SchemeOneofCase.MaximizeConversionValue:
          if (MaximizeConversionValue == null) {
            MaximizeConversionValue = new global::Google.Ads.GoogleAds.V7.Common.MaximizeConversionValue();
          }
          MaximizeConversionValue.MergeFrom(other.MaximizeConversionValue);
          break;
        case SchemeOneofCase.MaximizeConversions:
          if (MaximizeConversions == null) {
            MaximizeConversions = new global::Google.Ads.GoogleAds.V7.Common.MaximizeConversions();
          }
          MaximizeConversions.MergeFrom(other.MaximizeConversions);
          break;
        case SchemeOneofCase.TargetCpa:
          if (TargetCpa == null) {
            TargetCpa = new global::Google.Ads.GoogleAds.V7.Common.TargetCpa();
          }
          TargetCpa.MergeFrom(other.TargetCpa);
          break;
        case SchemeOneofCase.TargetImpressionShare:
          if (TargetImpressionShare == null) {
            TargetImpressionShare = new global::Google.Ads.GoogleAds.V7.Common.TargetImpressionShare();
          }
          TargetImpressionShare.MergeFrom(other.TargetImpressionShare);
          break;
        case SchemeOneofCase.TargetRoas:
          if (TargetRoas == null) {
            TargetRoas = new global::Google.Ads.GoogleAds.V7.Common.TargetRoas();
          }
          TargetRoas.MergeFrom(other.TargetRoas);
          break;
        case SchemeOneofCase.TargetSpend:
          if (TargetSpend == null) {
            TargetSpend = new global::Google.Ads.GoogleAds.V7.Common.TargetSpend();
          }
          TargetSpend.MergeFrom(other.TargetSpend);
          break;
      }

      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            ResourceName = input.ReadString();
            break;
          }
          case 40: {
            Type = (global::Google.Ads.GoogleAds.V7.Enums.BiddingStrategyTypeEnum.Types.BiddingStrategyType) input.ReadEnum();
            break;
          }
          case 58: {
            global::Google.Ads.GoogleAds.V7.Common.EnhancedCpc subBuilder = new global::Google.Ads.GoogleAds.V7.Common.EnhancedCpc();
            if (schemeCase_ == SchemeOneofCase.EnhancedCpc) {
              subBuilder.MergeFrom(EnhancedCpc);
            }
            input.ReadMessage(subBuilder);
            EnhancedCpc = subBuilder;
            break;
          }
          case 74: {
            global::Google.Ads.GoogleAds.V7.Common.TargetCpa subBuilder = new global::Google.Ads.GoogleAds.V7.Common.TargetCpa();
            if (schemeCase_ == SchemeOneofCase.TargetCpa) {
              subBuilder.MergeFrom(TargetCpa);
            }
            input.ReadMessage(subBuilder);
            TargetCpa = subBuilder;
            break;
          }
          case 90: {
            global::Google.Ads.GoogleAds.V7.Common.TargetRoas subBuilder = new global::Google.Ads.GoogleAds.V7.Common.TargetRoas();
            if (schemeCase_ == SchemeOneofCase.TargetRoas) {
              subBuilder.MergeFrom(TargetRoas);
            }
            input.ReadMessage(subBuilder);
            TargetRoas = subBuilder;
            break;
          }
          case 98: {
            global::Google.Ads.GoogleAds.V7.Common.TargetSpend subBuilder = new global::Google.Ads.GoogleAds.V7.Common.TargetSpend();
            if (schemeCase_ == SchemeOneofCase.TargetSpend) {
              subBuilder.MergeFrom(TargetSpend);
            }
            input.ReadMessage(subBuilder);
            TargetSpend = subBuilder;
            break;
          }
          case 120: {
            Status = (global::Google.Ads.GoogleAds.V7.Enums.BiddingStrategyStatusEnum.Types.BiddingStrategyStatus) input.ReadEnum();
            break;
          }
          case 128: {
            Id = input.ReadInt64();
            break;
          }
          case 138: {
            Name = input.ReadString();
            break;
          }
          case 144: {
            CampaignCount = input.ReadInt64();
            break;
          }
          case 152: {
            NonRemovedCampaignCount = input.ReadInt64();
            break;
          }
          case 162: {
            EffectiveCurrencyCode = input.ReadString();
            break;
          }
          case 170: {
            global::Google.Ads.GoogleAds.V7.Common.MaximizeConversionValue subBuilder = new global::Google.Ads.GoogleAds.V7.Common.MaximizeConversionValue();
            if (schemeCase_ == SchemeOneofCase.MaximizeConversionValue) {
              subBuilder.MergeFrom(MaximizeConversionValue);
            }
            input.ReadMessage(subBuilder);
            MaximizeConversionValue = subBuilder;
            break;
          }
          case 178: {
            global::Google.Ads.GoogleAds.V7.Common.MaximizeConversions subBuilder = new global::Google.Ads.GoogleAds.V7.Common.MaximizeConversions();
            if (schemeCase_ == SchemeOneofCase.MaximizeConversions) {
              subBuilder.MergeFrom(MaximizeConversions);
            }
            input.ReadMessage(subBuilder);
            MaximizeConversions = subBuilder;
            break;
          }
          case 386: {
            global::Google.Ads.GoogleAds.V7.Common.TargetImpressionShare subBuilder = new global::Google.Ads.GoogleAds.V7.Common.TargetImpressionShare();
            if (schemeCase_ == SchemeOneofCase.TargetImpressionShare) {
              subBuilder.MergeFrom(TargetImpressionShare);
            }
            input.ReadMessage(subBuilder);
            TargetImpressionShare = subBuilder;
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            ResourceName = input.ReadString();
            break;
          }
          case 40: {
            Type = (global::Google.Ads.GoogleAds.V7.Enums.BiddingStrategyTypeEnum.Types.BiddingStrategyType) input.ReadEnum();
            break;
          }
          case 58: {
            global::Google.Ads.GoogleAds.V7.Common.EnhancedCpc subBuilder = new global::Google.Ads.GoogleAds.V7.Common.EnhancedCpc();
            if (schemeCase_ == SchemeOneofCase.EnhancedCpc) {
              subBuilder.MergeFrom(EnhancedCpc);
            }
            input.ReadMessage(subBuilder);
            EnhancedCpc = subBuilder;
            break;
          }
          case 74: {
            global::Google.Ads.GoogleAds.V7.Common.TargetCpa subBuilder = new global::Google.Ads.GoogleAds.V7.Common.TargetCpa();
            if (schemeCase_ == SchemeOneofCase.TargetCpa) {
              subBuilder.MergeFrom(TargetCpa);
            }
            input.ReadMessage(subBuilder);
            TargetCpa = subBuilder;
            break;
          }
          case 90: {
            global::Google.Ads.GoogleAds.V7.Common.TargetRoas subBuilder = new global::Google.Ads.GoogleAds.V7.Common.TargetRoas();
            if (schemeCase_ == SchemeOneofCase.TargetRoas) {
              subBuilder.MergeFrom(TargetRoas);
            }
            input.ReadMessage(subBuilder);
            TargetRoas = subBuilder;
            break;
          }
          case 98: {
            global::Google.Ads.GoogleAds.V7.Common.TargetSpend subBuilder = new global::Google.Ads.GoogleAds.V7.Common.TargetSpend();
            if (schemeCase_ == SchemeOneofCase.TargetSpend) {
              subBuilder.MergeFrom(TargetSpend);
            }
            input.ReadMessage(subBuilder);
            TargetSpend = subBuilder;
            break;
          }
          case 120: {
            Status = (global::Google.Ads.GoogleAds.V7.Enums.BiddingStrategyStatusEnum.Types.BiddingStrategyStatus) input.ReadEnum();
            break;
          }
          case 128: {
            Id = input.ReadInt64();
            break;
          }
          case 138: {
            Name = input.ReadString();
            break;
          }
          case 144: {
            CampaignCount = input.ReadInt64();
            break;
          }
          case 152: {
            NonRemovedCampaignCount = input.ReadInt64();
            break;
          }
          case 162: {
            EffectiveCurrencyCode = input.ReadString();
            break;
          }
          case 170: {
            global::Google.Ads.GoogleAds.V7.Common.MaximizeConversionValue subBuilder = new global::Google.Ads.GoogleAds.V7.Common.MaximizeConversionValue();
            if (schemeCase_ == SchemeOneofCase.MaximizeConversionValue) {
              subBuilder.MergeFrom(MaximizeConversionValue);
            }
            input.ReadMessage(subBuilder);
            MaximizeConversionValue = subBuilder;
            break;
          }
          case 178: {
            global::Google.Ads.GoogleAds.V7.Common.MaximizeConversions subBuilder = new global::Google.Ads.GoogleAds.V7.Common.MaximizeConversions();
            if (schemeCase_ == SchemeOneofCase.MaximizeConversions) {
              subBuilder.MergeFrom(MaximizeConversions);
            }
            input.ReadMessage(subBuilder);
            MaximizeConversions = subBuilder;
            break;
          }
          case 386: {
            global::Google.Ads.GoogleAds.V7.Common.TargetImpressionShare subBuilder = new global::Google.Ads.GoogleAds.V7.Common.TargetImpressionShare();
            if (schemeCase_ == SchemeOneofCase.TargetImpressionShare) {
              subBuilder.MergeFrom(TargetImpressionShare);
            }
            input.ReadMessage(subBuilder);
            TargetImpressionShare = subBuilder;
            break;
          }
        }
      }
    }
    #endif

  }

  #endregion

}

#endregion Designer generated code
