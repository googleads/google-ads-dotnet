// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: google/ads/googleads/v7/resources/invoice.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Google.Ads.GoogleAds.V7.Resources {

  /// <summary>Holder for reflection information generated from google/ads/googleads/v7/resources/invoice.proto</summary>
  public static partial class InvoiceReflection {

    #region Descriptor
    /// <summary>File descriptor for google/ads/googleads/v7/resources/invoice.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static InvoiceReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Ci9nb29nbGUvYWRzL2dvb2dsZWFkcy92Ny9yZXNvdXJjZXMvaW52b2ljZS5w",
            "cm90bxIhZ29vZ2xlLmFkcy5nb29nbGVhZHMudjcucmVzb3VyY2VzGipnb29n",
            "bGUvYWRzL2dvb2dsZWFkcy92Ny9jb21tb24vZGF0ZXMucHJvdG8aMGdvb2ds",
            "ZS9hZHMvZ29vZ2xlYWRzL3Y3L2VudW1zL2ludm9pY2VfdHlwZS5wcm90bxof",
            "Z29vZ2xlL2FwaS9maWVsZF9iZWhhdmlvci5wcm90bxoZZ29vZ2xlL2FwaS9y",
            "ZXNvdXJjZS5wcm90bxocZ29vZ2xlL2FwaS9hbm5vdGF0aW9ucy5wcm90byK5",
            "DwoHSW52b2ljZRI/Cg1yZXNvdXJjZV9uYW1lGAEgASgJQijgQQP6QSIKIGdv",
            "b2dsZWFkcy5nb29nbGVhcGlzLmNvbS9JbnZvaWNlEhQKAmlkGBkgASgJQgPg",
            "QQNIAIgBARJNCgR0eXBlGAMgASgOMjouZ29vZ2xlLmFkcy5nb29nbGVhZHMu",
            "djcuZW51bXMuSW52b2ljZVR5cGVFbnVtLkludm9pY2VUeXBlQgPgQQMSHwoN",
            "YmlsbGluZ19zZXR1cBgaIAEoCUID4EEDSAGIAQESJQoTcGF5bWVudHNfYWNj",
            "b3VudF9pZBgbIAEoCUID4EEDSAKIAQESJQoTcGF5bWVudHNfcHJvZmlsZV9p",
            "ZBgcIAEoCUID4EEDSAOIAQESHAoKaXNzdWVfZGF0ZRgdIAEoCUID4EEDSASI",
            "AQESGgoIZHVlX2RhdGUYHiABKAlCA+BBA0gFiAEBEkoKEnNlcnZpY2VfZGF0",
            "ZV9yYW5nZRgJIAEoCzIpLmdvb2dsZS5hZHMuZ29vZ2xlYWRzLnY3LmNvbW1v",
            "bi5EYXRlUmFuZ2VCA+BBAxIfCg1jdXJyZW5jeV9jb2RlGB8gASgJQgPgQQNI",
            "BogBARIvCiJhZGp1c3RtZW50c19zdWJ0b3RhbF9hbW91bnRfbWljcm9zGBMg",
            "ASgDQgPgQQMSKgodYWRqdXN0bWVudHNfdGF4X2Ftb3VudF9taWNyb3MYFCAB",
            "KANCA+BBAxIsCh9hZGp1c3RtZW50c190b3RhbF9hbW91bnRfbWljcm9zGBUg",
            "ASgDQgPgQQMSNAoncmVndWxhdG9yeV9jb3N0c19zdWJ0b3RhbF9hbW91bnRf",
            "bWljcm9zGBYgASgDQgPgQQMSLwoicmVndWxhdG9yeV9jb3N0c190YXhfYW1v",
            "dW50X21pY3JvcxgXIAEoA0ID4EEDEjEKJHJlZ3VsYXRvcnlfY29zdHNfdG90",
            "YWxfYW1vdW50X21pY3JvcxgYIAEoA0ID4EEDEigKFnN1YnRvdGFsX2Ftb3Vu",
            "dF9taWNyb3MYISABKANCA+BBA0gHiAEBEiMKEXRheF9hbW91bnRfbWljcm9z",
            "GCIgASgDQgPgQQNICIgBARIlChN0b3RhbF9hbW91bnRfbWljcm9zGCMgASgD",
            "QgPgQQNICYgBARIjChFjb3JyZWN0ZWRfaW52b2ljZRgkIAEoCUID4EEDSAqI",
            "AQESHgoRcmVwbGFjZWRfaW52b2ljZXMYJSADKAlCA+BBAxIZCgdwZGZfdXJs",
            "GCYgASgJQgPgQQNIC4gBARJmChhhY2NvdW50X2J1ZGdldF9zdW1tYXJpZXMY",
            "EiADKAsyPy5nb29nbGUuYWRzLmdvb2dsZWFkcy52Ny5yZXNvdXJjZXMuSW52",
            "b2ljZS5BY2NvdW50QnVkZ2V0U3VtbWFyeUID4EEDGtYEChRBY2NvdW50QnVk",
            "Z2V0U3VtbWFyeRIaCghjdXN0b21lchgKIAEoCUID4EEDSACIAQESKwoZY3Vz",
            "dG9tZXJfZGVzY3JpcHRpdmVfbmFtZRgLIAEoCUID4EEDSAGIAQESIAoOYWNj",
            "b3VudF9idWRnZXQYDCABKAlCA+BBA0gCiAEBEiUKE2FjY291bnRfYnVkZ2V0",
            "X25hbWUYDSABKAlCA+BBA0gDiAEBEicKFXB1cmNoYXNlX29yZGVyX251bWJl",
            "chgOIAEoCUID4EEDSASIAQESKAoWc3VidG90YWxfYW1vdW50X21pY3JvcxgP",
            "IAEoA0ID4EEDSAWIAQESIwoRdGF4X2Ftb3VudF9taWNyb3MYECABKANCA+BB",
            "A0gGiAEBEiUKE3RvdGFsX2Ftb3VudF9taWNyb3MYESABKANCA+BBA0gHiAEB",
            "ElQKHGJpbGxhYmxlX2FjdGl2aXR5X2RhdGVfcmFuZ2UYCSABKAsyKS5nb29n",
            "bGUuYWRzLmdvb2dsZWFkcy52Ny5jb21tb24uRGF0ZVJhbmdlQgPgQQNCCwoJ",
            "X2N1c3RvbWVyQhwKGl9jdXN0b21lcl9kZXNjcmlwdGl2ZV9uYW1lQhEKD19h",
            "Y2NvdW50X2J1ZGdldEIWChRfYWNjb3VudF9idWRnZXRfbmFtZUIYChZfcHVy",
            "Y2hhc2Vfb3JkZXJfbnVtYmVyQhkKF19zdWJ0b3RhbF9hbW91bnRfbWljcm9z",
            "QhQKEl90YXhfYW1vdW50X21pY3Jvc0IWChRfdG90YWxfYW1vdW50X21pY3Jv",
            "czpU6kFRCiBnb29nbGVhZHMuZ29vZ2xlYXBpcy5jb20vSW52b2ljZRItY3Vz",
            "dG9tZXJzL3tjdXN0b21lcl9pZH0vaW52b2ljZXMve2ludm9pY2VfaWR9QgUK",
            "A19pZEIQCg5fYmlsbGluZ19zZXR1cEIWChRfcGF5bWVudHNfYWNjb3VudF9p",
            "ZEIWChRfcGF5bWVudHNfcHJvZmlsZV9pZEINCgtfaXNzdWVfZGF0ZUILCglf",
            "ZHVlX2RhdGVCEAoOX2N1cnJlbmN5X2NvZGVCGQoXX3N1YnRvdGFsX2Ftb3Vu",
            "dF9taWNyb3NCFAoSX3RheF9hbW91bnRfbWljcm9zQhYKFF90b3RhbF9hbW91",
            "bnRfbWljcm9zQhQKEl9jb3JyZWN0ZWRfaW52b2ljZUIKCghfcGRmX3VybEL5",
            "AQolY29tLmdvb2dsZS5hZHMuZ29vZ2xlYWRzLnY3LnJlc291cmNlc0IMSW52",
            "b2ljZVByb3RvUAFaSmdvb2dsZS5nb2xhbmcub3JnL2dlbnByb3RvL2dvb2ds",
            "ZWFwaXMvYWRzL2dvb2dsZWFkcy92Ny9yZXNvdXJjZXM7cmVzb3VyY2VzogID",
            "R0FBqgIhR29vZ2xlLkFkcy5Hb29nbGVBZHMuVjcuUmVzb3VyY2VzygIhR29v",
            "Z2xlXEFkc1xHb29nbGVBZHNcVjdcUmVzb3VyY2Vz6gIlR29vZ2xlOjpBZHM6",
            "Okdvb2dsZUFkczo6Vjc6OlJlc291cmNlc2IGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Google.Ads.GoogleAds.V7.Common.DatesReflection.Descriptor, global::Google.Ads.GoogleAds.V7.Enums.InvoiceTypeReflection.Descriptor, global::Google.Api.FieldBehaviorReflection.Descriptor, global::Google.Api.ResourceReflection.Descriptor, global::Google.Api.AnnotationsReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Ads.GoogleAds.V7.Resources.Invoice), global::Google.Ads.GoogleAds.V7.Resources.Invoice.Parser, new[]{ "ResourceName", "Id", "Type", "BillingSetup", "PaymentsAccountId", "PaymentsProfileId", "IssueDate", "DueDate", "ServiceDateRange", "CurrencyCode", "AdjustmentsSubtotalAmountMicros", "AdjustmentsTaxAmountMicros", "AdjustmentsTotalAmountMicros", "RegulatoryCostsSubtotalAmountMicros", "RegulatoryCostsTaxAmountMicros", "RegulatoryCostsTotalAmountMicros", "SubtotalAmountMicros", "TaxAmountMicros", "TotalAmountMicros", "CorrectedInvoice", "ReplacedInvoices", "PdfUrl", "AccountBudgetSummaries" }, new[]{ "Id", "BillingSetup", "PaymentsAccountId", "PaymentsProfileId", "IssueDate", "DueDate", "CurrencyCode", "SubtotalAmountMicros", "TaxAmountMicros", "TotalAmountMicros", "CorrectedInvoice", "PdfUrl" }, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Google.Ads.GoogleAds.V7.Resources.Invoice.Types.AccountBudgetSummary), global::Google.Ads.GoogleAds.V7.Resources.Invoice.Types.AccountBudgetSummary.Parser, new[]{ "Customer", "CustomerDescriptiveName", "AccountBudget", "AccountBudgetName", "PurchaseOrderNumber", "SubtotalAmountMicros", "TaxAmountMicros", "TotalAmountMicros", "BillableActivityDateRange" }, new[]{ "Customer", "CustomerDescriptiveName", "AccountBudget", "AccountBudgetName", "PurchaseOrderNumber", "SubtotalAmountMicros", "TaxAmountMicros", "TotalAmountMicros" }, null, null, null)})
          }));
    }
    #endregion

  }
  #region Messages
  /// <summary>
  /// An invoice. All invoice information is snapshotted to match the PDF invoice.
  /// For invoices older than the launch of InvoiceService, the snapshotted
  /// information may not match the PDF invoice.
  /// </summary>
  public sealed partial class Invoice : pb::IMessage<Invoice>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<Invoice> _parser = new pb::MessageParser<Invoice>(() => new Invoice());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Invoice> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Ads.GoogleAds.V7.Resources.InvoiceReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Invoice() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Invoice(Invoice other) : this() {
      _hasBits0 = other._hasBits0;
      resourceName_ = other.resourceName_;
      id_ = other.id_;
      type_ = other.type_;
      billingSetup_ = other.billingSetup_;
      paymentsAccountId_ = other.paymentsAccountId_;
      paymentsProfileId_ = other.paymentsProfileId_;
      issueDate_ = other.issueDate_;
      dueDate_ = other.dueDate_;
      serviceDateRange_ = other.serviceDateRange_ != null ? other.serviceDateRange_.Clone() : null;
      currencyCode_ = other.currencyCode_;
      adjustmentsSubtotalAmountMicros_ = other.adjustmentsSubtotalAmountMicros_;
      adjustmentsTaxAmountMicros_ = other.adjustmentsTaxAmountMicros_;
      adjustmentsTotalAmountMicros_ = other.adjustmentsTotalAmountMicros_;
      regulatoryCostsSubtotalAmountMicros_ = other.regulatoryCostsSubtotalAmountMicros_;
      regulatoryCostsTaxAmountMicros_ = other.regulatoryCostsTaxAmountMicros_;
      regulatoryCostsTotalAmountMicros_ = other.regulatoryCostsTotalAmountMicros_;
      subtotalAmountMicros_ = other.subtotalAmountMicros_;
      taxAmountMicros_ = other.taxAmountMicros_;
      totalAmountMicros_ = other.totalAmountMicros_;
      correctedInvoice_ = other.correctedInvoice_;
      replacedInvoices_ = other.replacedInvoices_.Clone();
      pdfUrl_ = other.pdfUrl_;
      accountBudgetSummaries_ = other.accountBudgetSummaries_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Invoice Clone() {
      return new Invoice(this);
    }

    /// <summary>Field number for the "resource_name" field.</summary>
    public const int ResourceNameFieldNumber = 1;
    private string resourceName_ = "";
    /// <summary>
    /// Output only. The resource name of the invoice. Multiple customers can share a given
    /// invoice, so multiple resource names may point to the same invoice.
    /// Invoice resource names have the form:
    ///
    /// `customers/{customer_id}/invoices/{invoice_id}`
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ResourceName {
      get { return resourceName_; }
      set {
        resourceName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 25;
    private string id_;
    /// <summary>
    /// Output only. The ID of the invoice. It appears on the invoice PDF as "Invoice number".
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Id {
      get { return id_ ?? ""; }
      set {
        id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasId {
      get { return id_ != null; }
    }
    /// <summary>Clears the value of the "id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearId() {
      id_ = null;
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 3;
    private global::Google.Ads.GoogleAds.V7.Enums.InvoiceTypeEnum.Types.InvoiceType type_ = global::Google.Ads.GoogleAds.V7.Enums.InvoiceTypeEnum.Types.InvoiceType.Unspecified;
    /// <summary>
    /// Output only. The type of invoice.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Ads.GoogleAds.V7.Enums.InvoiceTypeEnum.Types.InvoiceType Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    /// <summary>Field number for the "billing_setup" field.</summary>
    public const int BillingSetupFieldNumber = 26;
    private string billingSetup_;
    /// <summary>
    /// Output only. The resource name of this invoice’s billing setup.
    ///
    /// `customers/{customer_id}/billingSetups/{billing_setup_id}`
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string BillingSetup {
      get { return billingSetup_ ?? ""; }
      set {
        billingSetup_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "billing_setup" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasBillingSetup {
      get { return billingSetup_ != null; }
    }
    /// <summary>Clears the value of the "billing_setup" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearBillingSetup() {
      billingSetup_ = null;
    }

    /// <summary>Field number for the "payments_account_id" field.</summary>
    public const int PaymentsAccountIdFieldNumber = 27;
    private string paymentsAccountId_;
    /// <summary>
    /// Output only. A 16 digit ID used to identify the payments account associated with the
    /// billing setup, e.g. "1234-5678-9012-3456". It appears on the invoice PDF as
    /// "Billing Account Number".
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PaymentsAccountId {
      get { return paymentsAccountId_ ?? ""; }
      set {
        paymentsAccountId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "payments_account_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasPaymentsAccountId {
      get { return paymentsAccountId_ != null; }
    }
    /// <summary>Clears the value of the "payments_account_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearPaymentsAccountId() {
      paymentsAccountId_ = null;
    }

    /// <summary>Field number for the "payments_profile_id" field.</summary>
    public const int PaymentsProfileIdFieldNumber = 28;
    private string paymentsProfileId_;
    /// <summary>
    /// Output only. A 12 digit ID used to identify the payments profile associated with the
    /// billing setup, e.g. "1234-5678-9012". It appears on the invoice PDF as
    /// "Billing ID".
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PaymentsProfileId {
      get { return paymentsProfileId_ ?? ""; }
      set {
        paymentsProfileId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "payments_profile_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasPaymentsProfileId {
      get { return paymentsProfileId_ != null; }
    }
    /// <summary>Clears the value of the "payments_profile_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearPaymentsProfileId() {
      paymentsProfileId_ = null;
    }

    /// <summary>Field number for the "issue_date" field.</summary>
    public const int IssueDateFieldNumber = 29;
    private string issueDate_;
    /// <summary>
    /// Output only. The issue date in yyyy-mm-dd format. It appears on the invoice PDF as
    /// either "Issue date" or "Invoice date".
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string IssueDate {
      get { return issueDate_ ?? ""; }
      set {
        issueDate_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "issue_date" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasIssueDate {
      get { return issueDate_ != null; }
    }
    /// <summary>Clears the value of the "issue_date" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearIssueDate() {
      issueDate_ = null;
    }

    /// <summary>Field number for the "due_date" field.</summary>
    public const int DueDateFieldNumber = 30;
    private string dueDate_;
    /// <summary>
    /// Output only. The due date in yyyy-mm-dd format.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string DueDate {
      get { return dueDate_ ?? ""; }
      set {
        dueDate_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "due_date" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasDueDate {
      get { return dueDate_ != null; }
    }
    /// <summary>Clears the value of the "due_date" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearDueDate() {
      dueDate_ = null;
    }

    /// <summary>Field number for the "service_date_range" field.</summary>
    public const int ServiceDateRangeFieldNumber = 9;
    private global::Google.Ads.GoogleAds.V7.Common.DateRange serviceDateRange_;
    /// <summary>
    /// Output only. The service period date range of this invoice. The end date is inclusive.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Ads.GoogleAds.V7.Common.DateRange ServiceDateRange {
      get { return serviceDateRange_; }
      set {
        serviceDateRange_ = value;
      }
    }

    /// <summary>Field number for the "currency_code" field.</summary>
    public const int CurrencyCodeFieldNumber = 31;
    private string currencyCode_;
    /// <summary>
    /// Output only. The currency code. All costs are returned in this currency. A subset of the
    /// currency codes derived from the ISO 4217 standard is supported.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string CurrencyCode {
      get { return currencyCode_ ?? ""; }
      set {
        currencyCode_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "currency_code" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasCurrencyCode {
      get { return currencyCode_ != null; }
    }
    /// <summary>Clears the value of the "currency_code" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearCurrencyCode() {
      currencyCode_ = null;
    }

    /// <summary>Field number for the "adjustments_subtotal_amount_micros" field.</summary>
    public const int AdjustmentsSubtotalAmountMicrosFieldNumber = 19;
    private long adjustmentsSubtotalAmountMicros_;
    /// <summary>
    /// Output only. The pretax subtotal amount of invoice level adjustments, in micros.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long AdjustmentsSubtotalAmountMicros {
      get { return adjustmentsSubtotalAmountMicros_; }
      set {
        adjustmentsSubtotalAmountMicros_ = value;
      }
    }

    /// <summary>Field number for the "adjustments_tax_amount_micros" field.</summary>
    public const int AdjustmentsTaxAmountMicrosFieldNumber = 20;
    private long adjustmentsTaxAmountMicros_;
    /// <summary>
    /// Output only. The sum of taxes on the invoice level adjustments, in micros.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long AdjustmentsTaxAmountMicros {
      get { return adjustmentsTaxAmountMicros_; }
      set {
        adjustmentsTaxAmountMicros_ = value;
      }
    }

    /// <summary>Field number for the "adjustments_total_amount_micros" field.</summary>
    public const int AdjustmentsTotalAmountMicrosFieldNumber = 21;
    private long adjustmentsTotalAmountMicros_;
    /// <summary>
    /// Output only. The total amount of invoice level adjustments, in micros.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long AdjustmentsTotalAmountMicros {
      get { return adjustmentsTotalAmountMicros_; }
      set {
        adjustmentsTotalAmountMicros_ = value;
      }
    }

    /// <summary>Field number for the "regulatory_costs_subtotal_amount_micros" field.</summary>
    public const int RegulatoryCostsSubtotalAmountMicrosFieldNumber = 22;
    private long regulatoryCostsSubtotalAmountMicros_;
    /// <summary>
    /// Output only. The pretax subtotal amount of invoice level regulatory costs, in micros.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long RegulatoryCostsSubtotalAmountMicros {
      get { return regulatoryCostsSubtotalAmountMicros_; }
      set {
        regulatoryCostsSubtotalAmountMicros_ = value;
      }
    }

    /// <summary>Field number for the "regulatory_costs_tax_amount_micros" field.</summary>
    public const int RegulatoryCostsTaxAmountMicrosFieldNumber = 23;
    private long regulatoryCostsTaxAmountMicros_;
    /// <summary>
    /// Output only. The sum of taxes on the invoice level regulatory costs, in micros.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long RegulatoryCostsTaxAmountMicros {
      get { return regulatoryCostsTaxAmountMicros_; }
      set {
        regulatoryCostsTaxAmountMicros_ = value;
      }
    }

    /// <summary>Field number for the "regulatory_costs_total_amount_micros" field.</summary>
    public const int RegulatoryCostsTotalAmountMicrosFieldNumber = 24;
    private long regulatoryCostsTotalAmountMicros_;
    /// <summary>
    /// Output only. The total amount of invoice level regulatory costs, in micros.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long RegulatoryCostsTotalAmountMicros {
      get { return regulatoryCostsTotalAmountMicros_; }
      set {
        regulatoryCostsTotalAmountMicros_ = value;
      }
    }

    /// <summary>Field number for the "subtotal_amount_micros" field.</summary>
    public const int SubtotalAmountMicrosFieldNumber = 33;
    private long subtotalAmountMicros_;
    /// <summary>
    /// Output only. The pretax subtotal amount, in micros. This equals the
    /// sum of the AccountBudgetSummary subtotal amounts,
    /// Invoice.adjustments_subtotal_amount_micros, and
    /// Invoice.regulatory_costs_subtotal_amount_micros.
    /// Starting with v6, the Invoice.regulatory_costs_subtotal_amount_micros is no
    /// longer included.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long SubtotalAmountMicros {
      get { if ((_hasBits0 & 1) != 0) { return subtotalAmountMicros_; } else { return 0L; } }
      set {
        _hasBits0 |= 1;
        subtotalAmountMicros_ = value;
      }
    }
    /// <summary>Gets whether the "subtotal_amount_micros" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasSubtotalAmountMicros {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "subtotal_amount_micros" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearSubtotalAmountMicros() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "tax_amount_micros" field.</summary>
    public const int TaxAmountMicrosFieldNumber = 34;
    private long taxAmountMicros_;
    /// <summary>
    /// Output only. The sum of all taxes on the invoice, in micros. This equals the sum of the
    /// AccountBudgetSummary tax amounts, plus taxes not associated with a specific
    /// account budget.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long TaxAmountMicros {
      get { if ((_hasBits0 & 2) != 0) { return taxAmountMicros_; } else { return 0L; } }
      set {
        _hasBits0 |= 2;
        taxAmountMicros_ = value;
      }
    }
    /// <summary>Gets whether the "tax_amount_micros" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasTaxAmountMicros {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "tax_amount_micros" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearTaxAmountMicros() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "total_amount_micros" field.</summary>
    public const int TotalAmountMicrosFieldNumber = 35;
    private long totalAmountMicros_;
    /// <summary>
    /// Output only. The total amount, in micros. This equals the sum of
    /// Invoice.subtotal_amount_micros and Invoice.tax_amount_micros.
    /// Starting with v6, Invoice.regulatory_costs_subtotal_amount_micros is
    /// also added as it is no longer already included in
    /// Invoice.tax_amount_micros.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long TotalAmountMicros {
      get { if ((_hasBits0 & 4) != 0) { return totalAmountMicros_; } else { return 0L; } }
      set {
        _hasBits0 |= 4;
        totalAmountMicros_ = value;
      }
    }
    /// <summary>Gets whether the "total_amount_micros" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasTotalAmountMicros {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "total_amount_micros" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearTotalAmountMicros() {
      _hasBits0 &= ~4;
    }

    /// <summary>Field number for the "corrected_invoice" field.</summary>
    public const int CorrectedInvoiceFieldNumber = 36;
    private string correctedInvoice_;
    /// <summary>
    /// Output only. The resource name of the original invoice corrected, wrote off, or canceled
    /// by this invoice, if applicable. If `corrected_invoice` is set,
    /// `replaced_invoices` will not be set.
    /// Invoice resource names have the form:
    ///
    /// `customers/{customer_id}/invoices/{invoice_id}`
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string CorrectedInvoice {
      get { return correctedInvoice_ ?? ""; }
      set {
        correctedInvoice_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "corrected_invoice" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasCorrectedInvoice {
      get { return correctedInvoice_ != null; }
    }
    /// <summary>Clears the value of the "corrected_invoice" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearCorrectedInvoice() {
      correctedInvoice_ = null;
    }

    /// <summary>Field number for the "replaced_invoices" field.</summary>
    public const int ReplacedInvoicesFieldNumber = 37;
    private static readonly pb::FieldCodec<string> _repeated_replacedInvoices_codec
        = pb::FieldCodec.ForString(298);
    private readonly pbc::RepeatedField<string> replacedInvoices_ = new pbc::RepeatedField<string>();
    /// <summary>
    /// Output only. The resource name of the original invoice(s) being rebilled or replaced by
    /// this invoice, if applicable. There might be multiple replaced invoices due
    /// to invoice consolidation. The replaced invoices may not belong to the same
    /// payments account. If `replaced_invoices` is set, `corrected_invoice` will
    /// not be set.
    /// Invoice resource names have the form:
    ///
    /// `customers/{customer_id}/invoices/{invoice_id}`
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> ReplacedInvoices {
      get { return replacedInvoices_; }
    }

    /// <summary>Field number for the "pdf_url" field.</summary>
    public const int PdfUrlFieldNumber = 38;
    private string pdfUrl_;
    /// <summary>
    /// Output only. The URL to a PDF copy of the invoice. Users need to pass in their OAuth
    /// token to request the PDF with this URL.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PdfUrl {
      get { return pdfUrl_ ?? ""; }
      set {
        pdfUrl_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "pdf_url" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasPdfUrl {
      get { return pdfUrl_ != null; }
    }
    /// <summary>Clears the value of the "pdf_url" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearPdfUrl() {
      pdfUrl_ = null;
    }

    /// <summary>Field number for the "account_budget_summaries" field.</summary>
    public const int AccountBudgetSummariesFieldNumber = 18;
    private static readonly pb::FieldCodec<global::Google.Ads.GoogleAds.V7.Resources.Invoice.Types.AccountBudgetSummary> _repeated_accountBudgetSummaries_codec
        = pb::FieldCodec.ForMessage(146, global::Google.Ads.GoogleAds.V7.Resources.Invoice.Types.AccountBudgetSummary.Parser);
    private readonly pbc::RepeatedField<global::Google.Ads.GoogleAds.V7.Resources.Invoice.Types.AccountBudgetSummary> accountBudgetSummaries_ = new pbc::RepeatedField<global::Google.Ads.GoogleAds.V7.Resources.Invoice.Types.AccountBudgetSummary>();
    /// <summary>
    /// Output only. The list of summarized account budget information associated with this
    /// invoice.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Google.Ads.GoogleAds.V7.Resources.Invoice.Types.AccountBudgetSummary> AccountBudgetSummaries {
      get { return accountBudgetSummaries_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Invoice);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Invoice other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ResourceName != other.ResourceName) return false;
      if (Id != other.Id) return false;
      if (Type != other.Type) return false;
      if (BillingSetup != other.BillingSetup) return false;
      if (PaymentsAccountId != other.PaymentsAccountId) return false;
      if (PaymentsProfileId != other.PaymentsProfileId) return false;
      if (IssueDate != other.IssueDate) return false;
      if (DueDate != other.DueDate) return false;
      if (!object.Equals(ServiceDateRange, other.ServiceDateRange)) return false;
      if (CurrencyCode != other.CurrencyCode) return false;
      if (AdjustmentsSubtotalAmountMicros != other.AdjustmentsSubtotalAmountMicros) return false;
      if (AdjustmentsTaxAmountMicros != other.AdjustmentsTaxAmountMicros) return false;
      if (AdjustmentsTotalAmountMicros != other.AdjustmentsTotalAmountMicros) return false;
      if (RegulatoryCostsSubtotalAmountMicros != other.RegulatoryCostsSubtotalAmountMicros) return false;
      if (RegulatoryCostsTaxAmountMicros != other.RegulatoryCostsTaxAmountMicros) return false;
      if (RegulatoryCostsTotalAmountMicros != other.RegulatoryCostsTotalAmountMicros) return false;
      if (SubtotalAmountMicros != other.SubtotalAmountMicros) return false;
      if (TaxAmountMicros != other.TaxAmountMicros) return false;
      if (TotalAmountMicros != other.TotalAmountMicros) return false;
      if (CorrectedInvoice != other.CorrectedInvoice) return false;
      if(!replacedInvoices_.Equals(other.replacedInvoices_)) return false;
      if (PdfUrl != other.PdfUrl) return false;
      if(!accountBudgetSummaries_.Equals(other.accountBudgetSummaries_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ResourceName.Length != 0) hash ^= ResourceName.GetHashCode();
      if (HasId) hash ^= Id.GetHashCode();
      if (Type != global::Google.Ads.GoogleAds.V7.Enums.InvoiceTypeEnum.Types.InvoiceType.Unspecified) hash ^= Type.GetHashCode();
      if (HasBillingSetup) hash ^= BillingSetup.GetHashCode();
      if (HasPaymentsAccountId) hash ^= PaymentsAccountId.GetHashCode();
      if (HasPaymentsProfileId) hash ^= PaymentsProfileId.GetHashCode();
      if (HasIssueDate) hash ^= IssueDate.GetHashCode();
      if (HasDueDate) hash ^= DueDate.GetHashCode();
      if (serviceDateRange_ != null) hash ^= ServiceDateRange.GetHashCode();
      if (HasCurrencyCode) hash ^= CurrencyCode.GetHashCode();
      if (AdjustmentsSubtotalAmountMicros != 0L) hash ^= AdjustmentsSubtotalAmountMicros.GetHashCode();
      if (AdjustmentsTaxAmountMicros != 0L) hash ^= AdjustmentsTaxAmountMicros.GetHashCode();
      if (AdjustmentsTotalAmountMicros != 0L) hash ^= AdjustmentsTotalAmountMicros.GetHashCode();
      if (RegulatoryCostsSubtotalAmountMicros != 0L) hash ^= RegulatoryCostsSubtotalAmountMicros.GetHashCode();
      if (RegulatoryCostsTaxAmountMicros != 0L) hash ^= RegulatoryCostsTaxAmountMicros.GetHashCode();
      if (RegulatoryCostsTotalAmountMicros != 0L) hash ^= RegulatoryCostsTotalAmountMicros.GetHashCode();
      if (HasSubtotalAmountMicros) hash ^= SubtotalAmountMicros.GetHashCode();
      if (HasTaxAmountMicros) hash ^= TaxAmountMicros.GetHashCode();
      if (HasTotalAmountMicros) hash ^= TotalAmountMicros.GetHashCode();
      if (HasCorrectedInvoice) hash ^= CorrectedInvoice.GetHashCode();
      hash ^= replacedInvoices_.GetHashCode();
      if (HasPdfUrl) hash ^= PdfUrl.GetHashCode();
      hash ^= accountBudgetSummaries_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (ResourceName.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(ResourceName);
      }
      if (Type != global::Google.Ads.GoogleAds.V7.Enums.InvoiceTypeEnum.Types.InvoiceType.Unspecified) {
        output.WriteRawTag(24);
        output.WriteEnum((int) Type);
      }
      if (serviceDateRange_ != null) {
        output.WriteRawTag(74);
        output.WriteMessage(ServiceDateRange);
      }
      accountBudgetSummaries_.WriteTo(output, _repeated_accountBudgetSummaries_codec);
      if (AdjustmentsSubtotalAmountMicros != 0L) {
        output.WriteRawTag(152, 1);
        output.WriteInt64(AdjustmentsSubtotalAmountMicros);
      }
      if (AdjustmentsTaxAmountMicros != 0L) {
        output.WriteRawTag(160, 1);
        output.WriteInt64(AdjustmentsTaxAmountMicros);
      }
      if (AdjustmentsTotalAmountMicros != 0L) {
        output.WriteRawTag(168, 1);
        output.WriteInt64(AdjustmentsTotalAmountMicros);
      }
      if (RegulatoryCostsSubtotalAmountMicros != 0L) {
        output.WriteRawTag(176, 1);
        output.WriteInt64(RegulatoryCostsSubtotalAmountMicros);
      }
      if (RegulatoryCostsTaxAmountMicros != 0L) {
        output.WriteRawTag(184, 1);
        output.WriteInt64(RegulatoryCostsTaxAmountMicros);
      }
      if (RegulatoryCostsTotalAmountMicros != 0L) {
        output.WriteRawTag(192, 1);
        output.WriteInt64(RegulatoryCostsTotalAmountMicros);
      }
      if (HasId) {
        output.WriteRawTag(202, 1);
        output.WriteString(Id);
      }
      if (HasBillingSetup) {
        output.WriteRawTag(210, 1);
        output.WriteString(BillingSetup);
      }
      if (HasPaymentsAccountId) {
        output.WriteRawTag(218, 1);
        output.WriteString(PaymentsAccountId);
      }
      if (HasPaymentsProfileId) {
        output.WriteRawTag(226, 1);
        output.WriteString(PaymentsProfileId);
      }
      if (HasIssueDate) {
        output.WriteRawTag(234, 1);
        output.WriteString(IssueDate);
      }
      if (HasDueDate) {
        output.WriteRawTag(242, 1);
        output.WriteString(DueDate);
      }
      if (HasCurrencyCode) {
        output.WriteRawTag(250, 1);
        output.WriteString(CurrencyCode);
      }
      if (HasSubtotalAmountMicros) {
        output.WriteRawTag(136, 2);
        output.WriteInt64(SubtotalAmountMicros);
      }
      if (HasTaxAmountMicros) {
        output.WriteRawTag(144, 2);
        output.WriteInt64(TaxAmountMicros);
      }
      if (HasTotalAmountMicros) {
        output.WriteRawTag(152, 2);
        output.WriteInt64(TotalAmountMicros);
      }
      if (HasCorrectedInvoice) {
        output.WriteRawTag(162, 2);
        output.WriteString(CorrectedInvoice);
      }
      replacedInvoices_.WriteTo(output, _repeated_replacedInvoices_codec);
      if (HasPdfUrl) {
        output.WriteRawTag(178, 2);
        output.WriteString(PdfUrl);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (ResourceName.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(ResourceName);
      }
      if (Type != global::Google.Ads.GoogleAds.V7.Enums.InvoiceTypeEnum.Types.InvoiceType.Unspecified) {
        output.WriteRawTag(24);
        output.WriteEnum((int) Type);
      }
      if (serviceDateRange_ != null) {
        output.WriteRawTag(74);
        output.WriteMessage(ServiceDateRange);
      }
      accountBudgetSummaries_.WriteTo(ref output, _repeated_accountBudgetSummaries_codec);
      if (AdjustmentsSubtotalAmountMicros != 0L) {
        output.WriteRawTag(152, 1);
        output.WriteInt64(AdjustmentsSubtotalAmountMicros);
      }
      if (AdjustmentsTaxAmountMicros != 0L) {
        output.WriteRawTag(160, 1);
        output.WriteInt64(AdjustmentsTaxAmountMicros);
      }
      if (AdjustmentsTotalAmountMicros != 0L) {
        output.WriteRawTag(168, 1);
        output.WriteInt64(AdjustmentsTotalAmountMicros);
      }
      if (RegulatoryCostsSubtotalAmountMicros != 0L) {
        output.WriteRawTag(176, 1);
        output.WriteInt64(RegulatoryCostsSubtotalAmountMicros);
      }
      if (RegulatoryCostsTaxAmountMicros != 0L) {
        output.WriteRawTag(184, 1);
        output.WriteInt64(RegulatoryCostsTaxAmountMicros);
      }
      if (RegulatoryCostsTotalAmountMicros != 0L) {
        output.WriteRawTag(192, 1);
        output.WriteInt64(RegulatoryCostsTotalAmountMicros);
      }
      if (HasId) {
        output.WriteRawTag(202, 1);
        output.WriteString(Id);
      }
      if (HasBillingSetup) {
        output.WriteRawTag(210, 1);
        output.WriteString(BillingSetup);
      }
      if (HasPaymentsAccountId) {
        output.WriteRawTag(218, 1);
        output.WriteString(PaymentsAccountId);
      }
      if (HasPaymentsProfileId) {
        output.WriteRawTag(226, 1);
        output.WriteString(PaymentsProfileId);
      }
      if (HasIssueDate) {
        output.WriteRawTag(234, 1);
        output.WriteString(IssueDate);
      }
      if (HasDueDate) {
        output.WriteRawTag(242, 1);
        output.WriteString(DueDate);
      }
      if (HasCurrencyCode) {
        output.WriteRawTag(250, 1);
        output.WriteString(CurrencyCode);
      }
      if (HasSubtotalAmountMicros) {
        output.WriteRawTag(136, 2);
        output.WriteInt64(SubtotalAmountMicros);
      }
      if (HasTaxAmountMicros) {
        output.WriteRawTag(144, 2);
        output.WriteInt64(TaxAmountMicros);
      }
      if (HasTotalAmountMicros) {
        output.WriteRawTag(152, 2);
        output.WriteInt64(TotalAmountMicros);
      }
      if (HasCorrectedInvoice) {
        output.WriteRawTag(162, 2);
        output.WriteString(CorrectedInvoice);
      }
      replacedInvoices_.WriteTo(ref output, _repeated_replacedInvoices_codec);
      if (HasPdfUrl) {
        output.WriteRawTag(178, 2);
        output.WriteString(PdfUrl);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ResourceName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ResourceName);
      }
      if (HasId) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Id);
      }
      if (Type != global::Google.Ads.GoogleAds.V7.Enums.InvoiceTypeEnum.Types.InvoiceType.Unspecified) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Type);
      }
      if (HasBillingSetup) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(BillingSetup);
      }
      if (HasPaymentsAccountId) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(PaymentsAccountId);
      }
      if (HasPaymentsProfileId) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(PaymentsProfileId);
      }
      if (HasIssueDate) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(IssueDate);
      }
      if (HasDueDate) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(DueDate);
      }
      if (serviceDateRange_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ServiceDateRange);
      }
      if (HasCurrencyCode) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(CurrencyCode);
      }
      if (AdjustmentsSubtotalAmountMicros != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(AdjustmentsSubtotalAmountMicros);
      }
      if (AdjustmentsTaxAmountMicros != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(AdjustmentsTaxAmountMicros);
      }
      if (AdjustmentsTotalAmountMicros != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(AdjustmentsTotalAmountMicros);
      }
      if (RegulatoryCostsSubtotalAmountMicros != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(RegulatoryCostsSubtotalAmountMicros);
      }
      if (RegulatoryCostsTaxAmountMicros != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(RegulatoryCostsTaxAmountMicros);
      }
      if (RegulatoryCostsTotalAmountMicros != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(RegulatoryCostsTotalAmountMicros);
      }
      if (HasSubtotalAmountMicros) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(SubtotalAmountMicros);
      }
      if (HasTaxAmountMicros) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(TaxAmountMicros);
      }
      if (HasTotalAmountMicros) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(TotalAmountMicros);
      }
      if (HasCorrectedInvoice) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(CorrectedInvoice);
      }
      size += replacedInvoices_.CalculateSize(_repeated_replacedInvoices_codec);
      if (HasPdfUrl) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(PdfUrl);
      }
      size += accountBudgetSummaries_.CalculateSize(_repeated_accountBudgetSummaries_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Invoice other) {
      if (other == null) {
        return;
      }
      if (other.ResourceName.Length != 0) {
        ResourceName = other.ResourceName;
      }
      if (other.HasId) {
        Id = other.Id;
      }
      if (other.Type != global::Google.Ads.GoogleAds.V7.Enums.InvoiceTypeEnum.Types.InvoiceType.Unspecified) {
        Type = other.Type;
      }
      if (other.HasBillingSetup) {
        BillingSetup = other.BillingSetup;
      }
      if (other.HasPaymentsAccountId) {
        PaymentsAccountId = other.PaymentsAccountId;
      }
      if (other.HasPaymentsProfileId) {
        PaymentsProfileId = other.PaymentsProfileId;
      }
      if (other.HasIssueDate) {
        IssueDate = other.IssueDate;
      }
      if (other.HasDueDate) {
        DueDate = other.DueDate;
      }
      if (other.serviceDateRange_ != null) {
        if (serviceDateRange_ == null) {
          ServiceDateRange = new global::Google.Ads.GoogleAds.V7.Common.DateRange();
        }
        ServiceDateRange.MergeFrom(other.ServiceDateRange);
      }
      if (other.HasCurrencyCode) {
        CurrencyCode = other.CurrencyCode;
      }
      if (other.AdjustmentsSubtotalAmountMicros != 0L) {
        AdjustmentsSubtotalAmountMicros = other.AdjustmentsSubtotalAmountMicros;
      }
      if (other.AdjustmentsTaxAmountMicros != 0L) {
        AdjustmentsTaxAmountMicros = other.AdjustmentsTaxAmountMicros;
      }
      if (other.AdjustmentsTotalAmountMicros != 0L) {
        AdjustmentsTotalAmountMicros = other.AdjustmentsTotalAmountMicros;
      }
      if (other.RegulatoryCostsSubtotalAmountMicros != 0L) {
        RegulatoryCostsSubtotalAmountMicros = other.RegulatoryCostsSubtotalAmountMicros;
      }
      if (other.RegulatoryCostsTaxAmountMicros != 0L) {
        RegulatoryCostsTaxAmountMicros = other.RegulatoryCostsTaxAmountMicros;
      }
      if (other.RegulatoryCostsTotalAmountMicros != 0L) {
        RegulatoryCostsTotalAmountMicros = other.RegulatoryCostsTotalAmountMicros;
      }
      if (other.HasSubtotalAmountMicros) {
        SubtotalAmountMicros = other.SubtotalAmountMicros;
      }
      if (other.HasTaxAmountMicros) {
        TaxAmountMicros = other.TaxAmountMicros;
      }
      if (other.HasTotalAmountMicros) {
        TotalAmountMicros = other.TotalAmountMicros;
      }
      if (other.HasCorrectedInvoice) {
        CorrectedInvoice = other.CorrectedInvoice;
      }
      replacedInvoices_.Add(other.replacedInvoices_);
      if (other.HasPdfUrl) {
        PdfUrl = other.PdfUrl;
      }
      accountBudgetSummaries_.Add(other.accountBudgetSummaries_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            ResourceName = input.ReadString();
            break;
          }
          case 24: {
            Type = (global::Google.Ads.GoogleAds.V7.Enums.InvoiceTypeEnum.Types.InvoiceType) input.ReadEnum();
            break;
          }
          case 74: {
            if (serviceDateRange_ == null) {
              ServiceDateRange = new global::Google.Ads.GoogleAds.V7.Common.DateRange();
            }
            input.ReadMessage(ServiceDateRange);
            break;
          }
          case 146: {
            accountBudgetSummaries_.AddEntriesFrom(input, _repeated_accountBudgetSummaries_codec);
            break;
          }
          case 152: {
            AdjustmentsSubtotalAmountMicros = input.ReadInt64();
            break;
          }
          case 160: {
            AdjustmentsTaxAmountMicros = input.ReadInt64();
            break;
          }
          case 168: {
            AdjustmentsTotalAmountMicros = input.ReadInt64();
            break;
          }
          case 176: {
            RegulatoryCostsSubtotalAmountMicros = input.ReadInt64();
            break;
          }
          case 184: {
            RegulatoryCostsTaxAmountMicros = input.ReadInt64();
            break;
          }
          case 192: {
            RegulatoryCostsTotalAmountMicros = input.ReadInt64();
            break;
          }
          case 202: {
            Id = input.ReadString();
            break;
          }
          case 210: {
            BillingSetup = input.ReadString();
            break;
          }
          case 218: {
            PaymentsAccountId = input.ReadString();
            break;
          }
          case 226: {
            PaymentsProfileId = input.ReadString();
            break;
          }
          case 234: {
            IssueDate = input.ReadString();
            break;
          }
          case 242: {
            DueDate = input.ReadString();
            break;
          }
          case 250: {
            CurrencyCode = input.ReadString();
            break;
          }
          case 264: {
            SubtotalAmountMicros = input.ReadInt64();
            break;
          }
          case 272: {
            TaxAmountMicros = input.ReadInt64();
            break;
          }
          case 280: {
            TotalAmountMicros = input.ReadInt64();
            break;
          }
          case 290: {
            CorrectedInvoice = input.ReadString();
            break;
          }
          case 298: {
            replacedInvoices_.AddEntriesFrom(input, _repeated_replacedInvoices_codec);
            break;
          }
          case 306: {
            PdfUrl = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            ResourceName = input.ReadString();
            break;
          }
          case 24: {
            Type = (global::Google.Ads.GoogleAds.V7.Enums.InvoiceTypeEnum.Types.InvoiceType) input.ReadEnum();
            break;
          }
          case 74: {
            if (serviceDateRange_ == null) {
              ServiceDateRange = new global::Google.Ads.GoogleAds.V7.Common.DateRange();
            }
            input.ReadMessage(ServiceDateRange);
            break;
          }
          case 146: {
            accountBudgetSummaries_.AddEntriesFrom(ref input, _repeated_accountBudgetSummaries_codec);
            break;
          }
          case 152: {
            AdjustmentsSubtotalAmountMicros = input.ReadInt64();
            break;
          }
          case 160: {
            AdjustmentsTaxAmountMicros = input.ReadInt64();
            break;
          }
          case 168: {
            AdjustmentsTotalAmountMicros = input.ReadInt64();
            break;
          }
          case 176: {
            RegulatoryCostsSubtotalAmountMicros = input.ReadInt64();
            break;
          }
          case 184: {
            RegulatoryCostsTaxAmountMicros = input.ReadInt64();
            break;
          }
          case 192: {
            RegulatoryCostsTotalAmountMicros = input.ReadInt64();
            break;
          }
          case 202: {
            Id = input.ReadString();
            break;
          }
          case 210: {
            BillingSetup = input.ReadString();
            break;
          }
          case 218: {
            PaymentsAccountId = input.ReadString();
            break;
          }
          case 226: {
            PaymentsProfileId = input.ReadString();
            break;
          }
          case 234: {
            IssueDate = input.ReadString();
            break;
          }
          case 242: {
            DueDate = input.ReadString();
            break;
          }
          case 250: {
            CurrencyCode = input.ReadString();
            break;
          }
          case 264: {
            SubtotalAmountMicros = input.ReadInt64();
            break;
          }
          case 272: {
            TaxAmountMicros = input.ReadInt64();
            break;
          }
          case 280: {
            TotalAmountMicros = input.ReadInt64();
            break;
          }
          case 290: {
            CorrectedInvoice = input.ReadString();
            break;
          }
          case 298: {
            replacedInvoices_.AddEntriesFrom(ref input, _repeated_replacedInvoices_codec);
            break;
          }
          case 306: {
            PdfUrl = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

    #region Nested types
    /// <summary>Container for nested types declared in the Invoice message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      /// <summary>
      /// Represents a summarized account budget billable cost.
      /// </summary>
      public sealed partial class AccountBudgetSummary : pb::IMessage<AccountBudgetSummary>
      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          , pb::IBufferMessage
      #endif
      {
        private static readonly pb::MessageParser<AccountBudgetSummary> _parser = new pb::MessageParser<AccountBudgetSummary>(() => new AccountBudgetSummary());
        private pb::UnknownFieldSet _unknownFields;
        private int _hasBits0;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<AccountBudgetSummary> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Google.Ads.GoogleAds.V7.Resources.Invoice.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public AccountBudgetSummary() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public AccountBudgetSummary(AccountBudgetSummary other) : this() {
          _hasBits0 = other._hasBits0;
          customer_ = other.customer_;
          customerDescriptiveName_ = other.customerDescriptiveName_;
          accountBudget_ = other.accountBudget_;
          accountBudgetName_ = other.accountBudgetName_;
          purchaseOrderNumber_ = other.purchaseOrderNumber_;
          subtotalAmountMicros_ = other.subtotalAmountMicros_;
          taxAmountMicros_ = other.taxAmountMicros_;
          totalAmountMicros_ = other.totalAmountMicros_;
          billableActivityDateRange_ = other.billableActivityDateRange_ != null ? other.billableActivityDateRange_.Clone() : null;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public AccountBudgetSummary Clone() {
          return new AccountBudgetSummary(this);
        }

        /// <summary>Field number for the "customer" field.</summary>
        public const int CustomerFieldNumber = 10;
        private string customer_;
        /// <summary>
        /// Output only. The resource name of the customer associated with this account budget.
        /// This contains the customer ID, which appears on the invoice PDF as
        /// "Account ID".
        /// Customer resource names have the form:
        ///
        /// `customers/{customer_id}`
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Customer {
          get { return customer_ ?? ""; }
          set {
            customer_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }
        /// <summary>Gets whether the "customer" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasCustomer {
          get { return customer_ != null; }
        }
        /// <summary>Clears the value of the "customer" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearCustomer() {
          customer_ = null;
        }

        /// <summary>Field number for the "customer_descriptive_name" field.</summary>
        public const int CustomerDescriptiveNameFieldNumber = 11;
        private string customerDescriptiveName_;
        /// <summary>
        /// Output only. The descriptive name of the account budget’s customer. It appears on the
        /// invoice PDF as "Account".
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string CustomerDescriptiveName {
          get { return customerDescriptiveName_ ?? ""; }
          set {
            customerDescriptiveName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }
        /// <summary>Gets whether the "customer_descriptive_name" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasCustomerDescriptiveName {
          get { return customerDescriptiveName_ != null; }
        }
        /// <summary>Clears the value of the "customer_descriptive_name" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearCustomerDescriptiveName() {
          customerDescriptiveName_ = null;
        }

        /// <summary>Field number for the "account_budget" field.</summary>
        public const int AccountBudgetFieldNumber = 12;
        private string accountBudget_;
        /// <summary>
        /// Output only. The resource name of the account budget associated with this summarized
        /// billable cost.
        /// AccountBudget resource names have the form:
        ///
        /// `customers/{customer_id}/accountBudgets/{account_budget_id}`
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string AccountBudget {
          get { return accountBudget_ ?? ""; }
          set {
            accountBudget_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }
        /// <summary>Gets whether the "account_budget" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasAccountBudget {
          get { return accountBudget_ != null; }
        }
        /// <summary>Clears the value of the "account_budget" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearAccountBudget() {
          accountBudget_ = null;
        }

        /// <summary>Field number for the "account_budget_name" field.</summary>
        public const int AccountBudgetNameFieldNumber = 13;
        private string accountBudgetName_;
        /// <summary>
        /// Output only. The name of the account budget. It appears on the invoice PDF as "Account
        /// budget".
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string AccountBudgetName {
          get { return accountBudgetName_ ?? ""; }
          set {
            accountBudgetName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }
        /// <summary>Gets whether the "account_budget_name" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasAccountBudgetName {
          get { return accountBudgetName_ != null; }
        }
        /// <summary>Clears the value of the "account_budget_name" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearAccountBudgetName() {
          accountBudgetName_ = null;
        }

        /// <summary>Field number for the "purchase_order_number" field.</summary>
        public const int PurchaseOrderNumberFieldNumber = 14;
        private string purchaseOrderNumber_;
        /// <summary>
        /// Output only. The purchase order number of the account budget. It appears on the
        /// invoice PDF as "Purchase order".
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string PurchaseOrderNumber {
          get { return purchaseOrderNumber_ ?? ""; }
          set {
            purchaseOrderNumber_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }
        /// <summary>Gets whether the "purchase_order_number" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasPurchaseOrderNumber {
          get { return purchaseOrderNumber_ != null; }
        }
        /// <summary>Clears the value of the "purchase_order_number" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearPurchaseOrderNumber() {
          purchaseOrderNumber_ = null;
        }

        /// <summary>Field number for the "subtotal_amount_micros" field.</summary>
        public const int SubtotalAmountMicrosFieldNumber = 15;
        private long subtotalAmountMicros_;
        /// <summary>
        /// Output only. The pretax subtotal amount attributable to this budget during the service
        /// period, in micros.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public long SubtotalAmountMicros {
          get { if ((_hasBits0 & 1) != 0) { return subtotalAmountMicros_; } else { return 0L; } }
          set {
            _hasBits0 |= 1;
            subtotalAmountMicros_ = value;
          }
        }
        /// <summary>Gets whether the "subtotal_amount_micros" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasSubtotalAmountMicros {
          get { return (_hasBits0 & 1) != 0; }
        }
        /// <summary>Clears the value of the "subtotal_amount_micros" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearSubtotalAmountMicros() {
          _hasBits0 &= ~1;
        }

        /// <summary>Field number for the "tax_amount_micros" field.</summary>
        public const int TaxAmountMicrosFieldNumber = 16;
        private long taxAmountMicros_;
        /// <summary>
        /// Output only. The tax amount attributable to this budget during the service period, in
        /// micros.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public long TaxAmountMicros {
          get { if ((_hasBits0 & 2) != 0) { return taxAmountMicros_; } else { return 0L; } }
          set {
            _hasBits0 |= 2;
            taxAmountMicros_ = value;
          }
        }
        /// <summary>Gets whether the "tax_amount_micros" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasTaxAmountMicros {
          get { return (_hasBits0 & 2) != 0; }
        }
        /// <summary>Clears the value of the "tax_amount_micros" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearTaxAmountMicros() {
          _hasBits0 &= ~2;
        }

        /// <summary>Field number for the "total_amount_micros" field.</summary>
        public const int TotalAmountMicrosFieldNumber = 17;
        private long totalAmountMicros_;
        /// <summary>
        /// Output only. The total amount attributable to this budget during the service period,
        /// in micros. This equals the sum of the account budget subtotal amount and
        /// the account budget tax amount.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public long TotalAmountMicros {
          get { if ((_hasBits0 & 4) != 0) { return totalAmountMicros_; } else { return 0L; } }
          set {
            _hasBits0 |= 4;
            totalAmountMicros_ = value;
          }
        }
        /// <summary>Gets whether the "total_amount_micros" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasTotalAmountMicros {
          get { return (_hasBits0 & 4) != 0; }
        }
        /// <summary>Clears the value of the "total_amount_micros" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearTotalAmountMicros() {
          _hasBits0 &= ~4;
        }

        /// <summary>Field number for the "billable_activity_date_range" field.</summary>
        public const int BillableActivityDateRangeFieldNumber = 9;
        private global::Google.Ads.GoogleAds.V7.Common.DateRange billableActivityDateRange_;
        /// <summary>
        /// Output only. The billable activity date range of the account budget, within the
        /// service date range of this invoice. The end date is inclusive. This can
        /// be different from the account budget's start and end time.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Google.Ads.GoogleAds.V7.Common.DateRange BillableActivityDateRange {
          get { return billableActivityDateRange_; }
          set {
            billableActivityDateRange_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as AccountBudgetSummary);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(AccountBudgetSummary other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Customer != other.Customer) return false;
          if (CustomerDescriptiveName != other.CustomerDescriptiveName) return false;
          if (AccountBudget != other.AccountBudget) return false;
          if (AccountBudgetName != other.AccountBudgetName) return false;
          if (PurchaseOrderNumber != other.PurchaseOrderNumber) return false;
          if (SubtotalAmountMicros != other.SubtotalAmountMicros) return false;
          if (TaxAmountMicros != other.TaxAmountMicros) return false;
          if (TotalAmountMicros != other.TotalAmountMicros) return false;
          if (!object.Equals(BillableActivityDateRange, other.BillableActivityDateRange)) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (HasCustomer) hash ^= Customer.GetHashCode();
          if (HasCustomerDescriptiveName) hash ^= CustomerDescriptiveName.GetHashCode();
          if (HasAccountBudget) hash ^= AccountBudget.GetHashCode();
          if (HasAccountBudgetName) hash ^= AccountBudgetName.GetHashCode();
          if (HasPurchaseOrderNumber) hash ^= PurchaseOrderNumber.GetHashCode();
          if (HasSubtotalAmountMicros) hash ^= SubtotalAmountMicros.GetHashCode();
          if (HasTaxAmountMicros) hash ^= TaxAmountMicros.GetHashCode();
          if (HasTotalAmountMicros) hash ^= TotalAmountMicros.GetHashCode();
          if (billableActivityDateRange_ != null) hash ^= BillableActivityDateRange.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          output.WriteRawMessage(this);
        #else
          if (billableActivityDateRange_ != null) {
            output.WriteRawTag(74);
            output.WriteMessage(BillableActivityDateRange);
          }
          if (HasCustomer) {
            output.WriteRawTag(82);
            output.WriteString(Customer);
          }
          if (HasCustomerDescriptiveName) {
            output.WriteRawTag(90);
            output.WriteString(CustomerDescriptiveName);
          }
          if (HasAccountBudget) {
            output.WriteRawTag(98);
            output.WriteString(AccountBudget);
          }
          if (HasAccountBudgetName) {
            output.WriteRawTag(106);
            output.WriteString(AccountBudgetName);
          }
          if (HasPurchaseOrderNumber) {
            output.WriteRawTag(114);
            output.WriteString(PurchaseOrderNumber);
          }
          if (HasSubtotalAmountMicros) {
            output.WriteRawTag(120);
            output.WriteInt64(SubtotalAmountMicros);
          }
          if (HasTaxAmountMicros) {
            output.WriteRawTag(128, 1);
            output.WriteInt64(TaxAmountMicros);
          }
          if (HasTotalAmountMicros) {
            output.WriteRawTag(136, 1);
            output.WriteInt64(TotalAmountMicros);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
          if (billableActivityDateRange_ != null) {
            output.WriteRawTag(74);
            output.WriteMessage(BillableActivityDateRange);
          }
          if (HasCustomer) {
            output.WriteRawTag(82);
            output.WriteString(Customer);
          }
          if (HasCustomerDescriptiveName) {
            output.WriteRawTag(90);
            output.WriteString(CustomerDescriptiveName);
          }
          if (HasAccountBudget) {
            output.WriteRawTag(98);
            output.WriteString(AccountBudget);
          }
          if (HasAccountBudgetName) {
            output.WriteRawTag(106);
            output.WriteString(AccountBudgetName);
          }
          if (HasPurchaseOrderNumber) {
            output.WriteRawTag(114);
            output.WriteString(PurchaseOrderNumber);
          }
          if (HasSubtotalAmountMicros) {
            output.WriteRawTag(120);
            output.WriteInt64(SubtotalAmountMicros);
          }
          if (HasTaxAmountMicros) {
            output.WriteRawTag(128, 1);
            output.WriteInt64(TaxAmountMicros);
          }
          if (HasTotalAmountMicros) {
            output.WriteRawTag(136, 1);
            output.WriteInt64(TotalAmountMicros);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(ref output);
          }
        }
        #endif

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (HasCustomer) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(Customer);
          }
          if (HasCustomerDescriptiveName) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(CustomerDescriptiveName);
          }
          if (HasAccountBudget) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(AccountBudget);
          }
          if (HasAccountBudgetName) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(AccountBudgetName);
          }
          if (HasPurchaseOrderNumber) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(PurchaseOrderNumber);
          }
          if (HasSubtotalAmountMicros) {
            size += 1 + pb::CodedOutputStream.ComputeInt64Size(SubtotalAmountMicros);
          }
          if (HasTaxAmountMicros) {
            size += 2 + pb::CodedOutputStream.ComputeInt64Size(TaxAmountMicros);
          }
          if (HasTotalAmountMicros) {
            size += 2 + pb::CodedOutputStream.ComputeInt64Size(TotalAmountMicros);
          }
          if (billableActivityDateRange_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(BillableActivityDateRange);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(AccountBudgetSummary other) {
          if (other == null) {
            return;
          }
          if (other.HasCustomer) {
            Customer = other.Customer;
          }
          if (other.HasCustomerDescriptiveName) {
            CustomerDescriptiveName = other.CustomerDescriptiveName;
          }
          if (other.HasAccountBudget) {
            AccountBudget = other.AccountBudget;
          }
          if (other.HasAccountBudgetName) {
            AccountBudgetName = other.AccountBudgetName;
          }
          if (other.HasPurchaseOrderNumber) {
            PurchaseOrderNumber = other.PurchaseOrderNumber;
          }
          if (other.HasSubtotalAmountMicros) {
            SubtotalAmountMicros = other.SubtotalAmountMicros;
          }
          if (other.HasTaxAmountMicros) {
            TaxAmountMicros = other.TaxAmountMicros;
          }
          if (other.HasTotalAmountMicros) {
            TotalAmountMicros = other.TotalAmountMicros;
          }
          if (other.billableActivityDateRange_ != null) {
            if (billableActivityDateRange_ == null) {
              BillableActivityDateRange = new global::Google.Ads.GoogleAds.V7.Common.DateRange();
            }
            BillableActivityDateRange.MergeFrom(other.BillableActivityDateRange);
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          input.ReadRawMessage(this);
        #else
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 74: {
                if (billableActivityDateRange_ == null) {
                  BillableActivityDateRange = new global::Google.Ads.GoogleAds.V7.Common.DateRange();
                }
                input.ReadMessage(BillableActivityDateRange);
                break;
              }
              case 82: {
                Customer = input.ReadString();
                break;
              }
              case 90: {
                CustomerDescriptiveName = input.ReadString();
                break;
              }
              case 98: {
                AccountBudget = input.ReadString();
                break;
              }
              case 106: {
                AccountBudgetName = input.ReadString();
                break;
              }
              case 114: {
                PurchaseOrderNumber = input.ReadString();
                break;
              }
              case 120: {
                SubtotalAmountMicros = input.ReadInt64();
                break;
              }
              case 128: {
                TaxAmountMicros = input.ReadInt64();
                break;
              }
              case 136: {
                TotalAmountMicros = input.ReadInt64();
                break;
              }
            }
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
                break;
              case 74: {
                if (billableActivityDateRange_ == null) {
                  BillableActivityDateRange = new global::Google.Ads.GoogleAds.V7.Common.DateRange();
                }
                input.ReadMessage(BillableActivityDateRange);
                break;
              }
              case 82: {
                Customer = input.ReadString();
                break;
              }
              case 90: {
                CustomerDescriptiveName = input.ReadString();
                break;
              }
              case 98: {
                AccountBudget = input.ReadString();
                break;
              }
              case 106: {
                AccountBudgetName = input.ReadString();
                break;
              }
              case 114: {
                PurchaseOrderNumber = input.ReadString();
                break;
              }
              case 120: {
                SubtotalAmountMicros = input.ReadInt64();
                break;
              }
              case 128: {
                TaxAmountMicros = input.ReadInt64();
                break;
              }
              case 136: {
                TotalAmountMicros = input.ReadInt64();
                break;
              }
            }
          }
        }
        #endif

      }

    }
    #endregion

  }

  #endregion

}

#endregion Designer generated code
