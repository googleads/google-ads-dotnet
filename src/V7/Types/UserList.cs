// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: google/ads/googleads/v7/resources/user_list.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Google.Ads.GoogleAds.V7.Resources {

  /// <summary>Holder for reflection information generated from google/ads/googleads/v7/resources/user_list.proto</summary>
  public static partial class UserListReflection {

    #region Descriptor
    /// <summary>File descriptor for google/ads/googleads/v7/resources/user_list.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static UserListReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CjFnb29nbGUvYWRzL2dvb2dsZWFkcy92Ny9yZXNvdXJjZXMvdXNlcl9saXN0",
            "LnByb3RvEiFnb29nbGUuYWRzLmdvb2dsZWFkcy52Ny5yZXNvdXJjZXMaL2dv",
            "b2dsZS9hZHMvZ29vZ2xlYWRzL3Y3L2NvbW1vbi91c2VyX2xpc3RzLnByb3Rv",
            "GjFnb29nbGUvYWRzL2dvb2dsZWFkcy92Ny9lbnVtcy9hY2Nlc3NfcmVhc29u",
            "LnByb3RvGjtnb29nbGUvYWRzL2dvb2dsZWFkcy92Ny9lbnVtcy91c2VyX2xp",
            "c3RfYWNjZXNzX3N0YXR1cy5wcm90bxo8Z29vZ2xlL2Fkcy9nb29nbGVhZHMv",
            "djcvZW51bXMvdXNlcl9saXN0X2Nsb3NpbmdfcmVhc29uLnByb3RvGj9nb29n",
            "bGUvYWRzL2dvb2dsZWFkcy92Ny9lbnVtcy91c2VyX2xpc3RfbWVtYmVyc2hp",
            "cF9zdGF0dXMucHJvdG8aOGdvb2dsZS9hZHMvZ29vZ2xlYWRzL3Y3L2VudW1z",
            "L3VzZXJfbGlzdF9zaXplX3JhbmdlLnByb3RvGjJnb29nbGUvYWRzL2dvb2ds",
            "ZWFkcy92Ny9lbnVtcy91c2VyX2xpc3RfdHlwZS5wcm90bxofZ29vZ2xlL2Fw",
            "aS9maWVsZF9iZWhhdmlvci5wcm90bxoZZ29vZ2xlL2FwaS9yZXNvdXJjZS5w",
            "cm90bxocZ29vZ2xlL2FwaS9hbm5vdGF0aW9ucy5wcm90byLPDgoIVXNlckxp",
            "c3QSQAoNcmVzb3VyY2VfbmFtZRgBIAEoCUIp4EEF+kEjCiFnb29nbGVhZHMu",
            "Z29vZ2xlYXBpcy5jb20vVXNlckxpc3QSFAoCaWQYGSABKANCA+BBA0gBiAEB",
            "EhsKCXJlYWRfb25seRgaIAEoCEID4EEDSAKIAQESEQoEbmFtZRgbIAEoCUgD",
            "iAEBEhgKC2Rlc2NyaXB0aW9uGBwgASgJSASIAQESbwoRbWVtYmVyc2hpcF9z",
            "dGF0dXMYBiABKA4yVC5nb29nbGUuYWRzLmdvb2dsZWFkcy52Ny5lbnVtcy5V",
            "c2VyTGlzdE1lbWJlcnNoaXBTdGF0dXNFbnVtLlVzZXJMaXN0TWVtYmVyc2hp",
            "cFN0YXR1cxIdChBpbnRlZ3JhdGlvbl9jb2RlGB0gASgJSAWIAQESIQoUbWVt",
            "YmVyc2hpcF9saWZlX3NwYW4YHiABKANIBogBARIiChBzaXplX2Zvcl9kaXNw",
            "bGF5GB8gASgDQgPgQQNIB4gBARJrChZzaXplX3JhbmdlX2Zvcl9kaXNwbGF5",
            "GAogASgOMkYuZ29vZ2xlLmFkcy5nb29nbGVhZHMudjcuZW51bXMuVXNlckxp",
            "c3RTaXplUmFuZ2VFbnVtLlVzZXJMaXN0U2l6ZVJhbmdlQgPgQQMSIQoPc2l6",
            "ZV9mb3Jfc2VhcmNoGCAgASgDQgPgQQNICIgBARJqChVzaXplX3JhbmdlX2Zv",
            "cl9zZWFyY2gYDCABKA4yRi5nb29nbGUuYWRzLmdvb2dsZWFkcy52Ny5lbnVt",
            "cy5Vc2VyTGlzdFNpemVSYW5nZUVudW0uVXNlckxpc3RTaXplUmFuZ2VCA+BB",
            "AxJPCgR0eXBlGA0gASgOMjwuZ29vZ2xlLmFkcy5nb29nbGVhZHMudjcuZW51",
            "bXMuVXNlckxpc3RUeXBlRW51bS5Vc2VyTGlzdFR5cGVCA+BBAxJmCg5jbG9z",
            "aW5nX3JlYXNvbhgOIAEoDjJOLmdvb2dsZS5hZHMuZ29vZ2xlYWRzLnY3LmVu",
            "dW1zLlVzZXJMaXN0Q2xvc2luZ1JlYXNvbkVudW0uVXNlckxpc3RDbG9zaW5n",
            "UmVhc29uElgKDWFjY2Vzc19yZWFzb24YDyABKA4yPC5nb29nbGUuYWRzLmdv",
            "b2dsZWFkcy52Ny5lbnVtcy5BY2Nlc3NSZWFzb25FbnVtLkFjY2Vzc1JlYXNv",
            "bkID4EEDEm4KGGFjY291bnRfdXNlcl9saXN0X3N0YXR1cxgQIAEoDjJMLmdv",
            "b2dsZS5hZHMuZ29vZ2xlYWRzLnY3LmVudW1zLlVzZXJMaXN0QWNjZXNzU3Rh",
            "dHVzRW51bS5Vc2VyTGlzdEFjY2Vzc1N0YXR1cxIgChNlbGlnaWJsZV9mb3Jf",
            "c2VhcmNoGCEgASgISAmIAQESJgoUZWxpZ2libGVfZm9yX2Rpc3BsYXkYIiAB",
            "KAhCA+BBA0gKiAEBEicKFW1hdGNoX3JhdGVfcGVyY2VudGFnZRgYIAEoBUID",
            "4EEDSAuIAQESUwoTY3JtX2Jhc2VkX3VzZXJfbGlzdBgTIAEoCzI0Lmdvb2ds",
            "ZS5hZHMuZ29vZ2xlYWRzLnY3LmNvbW1vbi5Dcm1CYXNlZFVzZXJMaXN0SW5m",
            "b0gAElUKEXNpbWlsYXJfdXNlcl9saXN0GBQgASgLMjMuZ29vZ2xlLmFkcy5n",
            "b29nbGVhZHMudjcuY29tbW9uLlNpbWlsYXJVc2VyTGlzdEluZm9CA+BBA0gA",
            "ElUKFHJ1bGVfYmFzZWRfdXNlcl9saXN0GBUgASgLMjUuZ29vZ2xlLmFkcy5n",
            "b29nbGVhZHMudjcuY29tbW9uLlJ1bGVCYXNlZFVzZXJMaXN0SW5mb0gAElAK",
            "EWxvZ2ljYWxfdXNlcl9saXN0GBYgASgLMjMuZ29vZ2xlLmFkcy5nb29nbGVh",
            "ZHMudjcuY29tbW9uLkxvZ2ljYWxVc2VyTGlzdEluZm9IABJMCg9iYXNpY191",
            "c2VyX2xpc3QYFyABKAsyMS5nb29nbGUuYWRzLmdvb2dsZWFkcy52Ny5jb21t",
            "b24uQmFzaWNVc2VyTGlzdEluZm9IADpY6kFVCiFnb29nbGVhZHMuZ29vZ2xl",
            "YXBpcy5jb20vVXNlckxpc3QSMGN1c3RvbWVycy97Y3VzdG9tZXJfaWR9L3Vz",
            "ZXJMaXN0cy97dXNlcl9saXN0X2lkfUILCgl1c2VyX2xpc3RCBQoDX2lkQgwK",
            "Cl9yZWFkX29ubHlCBwoFX25hbWVCDgoMX2Rlc2NyaXB0aW9uQhMKEV9pbnRl",
            "Z3JhdGlvbl9jb2RlQhcKFV9tZW1iZXJzaGlwX2xpZmVfc3BhbkITChFfc2l6",
            "ZV9mb3JfZGlzcGxheUISChBfc2l6ZV9mb3Jfc2VhcmNoQhYKFF9lbGlnaWJs",
            "ZV9mb3Jfc2VhcmNoQhcKFV9lbGlnaWJsZV9mb3JfZGlzcGxheUIYChZfbWF0",
            "Y2hfcmF0ZV9wZXJjZW50YWdlQvoBCiVjb20uZ29vZ2xlLmFkcy5nb29nbGVh",
            "ZHMudjcucmVzb3VyY2VzQg1Vc2VyTGlzdFByb3RvUAFaSmdvb2dsZS5nb2xh",
            "bmcub3JnL2dlbnByb3RvL2dvb2dsZWFwaXMvYWRzL2dvb2dsZWFkcy92Ny9y",
            "ZXNvdXJjZXM7cmVzb3VyY2VzogIDR0FBqgIhR29vZ2xlLkFkcy5Hb29nbGVB",
            "ZHMuVjcuUmVzb3VyY2VzygIhR29vZ2xlXEFkc1xHb29nbGVBZHNcVjdcUmVz",
            "b3VyY2Vz6gIlR29vZ2xlOjpBZHM6Okdvb2dsZUFkczo6Vjc6OlJlc291cmNl",
            "c2IGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Google.Ads.GoogleAds.V7.Common.UserListsReflection.Descriptor, global::Google.Ads.GoogleAds.V7.Enums.AccessReasonReflection.Descriptor, global::Google.Ads.GoogleAds.V7.Enums.UserListAccessStatusReflection.Descriptor, global::Google.Ads.GoogleAds.V7.Enums.UserListClosingReasonReflection.Descriptor, global::Google.Ads.GoogleAds.V7.Enums.UserListMembershipStatusReflection.Descriptor, global::Google.Ads.GoogleAds.V7.Enums.UserListSizeRangeReflection.Descriptor, global::Google.Ads.GoogleAds.V7.Enums.UserListTypeReflection.Descriptor, global::Google.Api.FieldBehaviorReflection.Descriptor, global::Google.Api.ResourceReflection.Descriptor, global::Google.Api.AnnotationsReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Ads.GoogleAds.V7.Resources.UserList), global::Google.Ads.GoogleAds.V7.Resources.UserList.Parser, new[]{ "ResourceName", "Id", "ReadOnly", "Name", "Description", "MembershipStatus", "IntegrationCode", "MembershipLifeSpan", "SizeForDisplay", "SizeRangeForDisplay", "SizeForSearch", "SizeRangeForSearch", "Type", "ClosingReason", "AccessReason", "AccountUserListStatus", "EligibleForSearch", "EligibleForDisplay", "MatchRatePercentage", "CrmBasedUserList", "SimilarUserList", "RuleBasedUserList", "LogicalUserList", "BasicUserList" }, new[]{ "UserList", "Id", "ReadOnly", "Name", "Description", "IntegrationCode", "MembershipLifeSpan", "SizeForDisplay", "SizeForSearch", "EligibleForSearch", "EligibleForDisplay", "MatchRatePercentage" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  /// <summary>
  /// A user list. This is a list of users a customer may target.
  /// </summary>
  public sealed partial class UserList : pb::IMessage<UserList>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<UserList> _parser = new pb::MessageParser<UserList>(() => new UserList());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<UserList> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Ads.GoogleAds.V7.Resources.UserListReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UserList() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UserList(UserList other) : this() {
      _hasBits0 = other._hasBits0;
      resourceName_ = other.resourceName_;
      id_ = other.id_;
      readOnly_ = other.readOnly_;
      name_ = other.name_;
      description_ = other.description_;
      membershipStatus_ = other.membershipStatus_;
      integrationCode_ = other.integrationCode_;
      membershipLifeSpan_ = other.membershipLifeSpan_;
      sizeForDisplay_ = other.sizeForDisplay_;
      sizeRangeForDisplay_ = other.sizeRangeForDisplay_;
      sizeForSearch_ = other.sizeForSearch_;
      sizeRangeForSearch_ = other.sizeRangeForSearch_;
      type_ = other.type_;
      closingReason_ = other.closingReason_;
      accessReason_ = other.accessReason_;
      accountUserListStatus_ = other.accountUserListStatus_;
      eligibleForSearch_ = other.eligibleForSearch_;
      eligibleForDisplay_ = other.eligibleForDisplay_;
      matchRatePercentage_ = other.matchRatePercentage_;
      switch (other.UserListCase) {
        case UserListOneofCase.CrmBasedUserList:
          CrmBasedUserList = other.CrmBasedUserList.Clone();
          break;
        case UserListOneofCase.SimilarUserList:
          SimilarUserList = other.SimilarUserList.Clone();
          break;
        case UserListOneofCase.RuleBasedUserList:
          RuleBasedUserList = other.RuleBasedUserList.Clone();
          break;
        case UserListOneofCase.LogicalUserList:
          LogicalUserList = other.LogicalUserList.Clone();
          break;
        case UserListOneofCase.BasicUserList:
          BasicUserList = other.BasicUserList.Clone();
          break;
      }

      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UserList Clone() {
      return new UserList(this);
    }

    /// <summary>Field number for the "resource_name" field.</summary>
    public const int ResourceNameFieldNumber = 1;
    private string resourceName_ = "";
    /// <summary>
    /// Immutable. The resource name of the user list.
    /// User list resource names have the form:
    ///
    /// `customers/{customer_id}/userLists/{user_list_id}`
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ResourceName {
      get { return resourceName_; }
      set {
        resourceName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 25;
    private long id_;
    /// <summary>
    /// Output only. Id of the user list.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Id {
      get { if ((_hasBits0 & 2) != 0) { return id_; } else { return 0L; } }
      set {
        _hasBits0 |= 2;
        id_ = value;
      }
    }
    /// <summary>Gets whether the "id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasId {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearId() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "read_only" field.</summary>
    public const int ReadOnlyFieldNumber = 26;
    private bool readOnly_;
    /// <summary>
    /// Output only. A flag that indicates if a user may edit a list. Depends on the list
    /// ownership and list type. For example, external remarketing user lists are
    /// not editable.
    ///
    /// This field is read-only.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool ReadOnly {
      get { if ((_hasBits0 & 4) != 0) { return readOnly_; } else { return false; } }
      set {
        _hasBits0 |= 4;
        readOnly_ = value;
      }
    }
    /// <summary>Gets whether the "read_only" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasReadOnly {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "read_only" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearReadOnly() {
      _hasBits0 &= ~4;
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 27;
    private string name_;
    /// <summary>
    /// Name of this user list. Depending on its access_reason, the user list name
    /// may not be unique (e.g. if access_reason=SHARED)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_ ?? ""; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "name" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasName {
      get { return name_ != null; }
    }
    /// <summary>Clears the value of the "name" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearName() {
      name_ = null;
    }

    /// <summary>Field number for the "description" field.</summary>
    public const int DescriptionFieldNumber = 28;
    private string description_;
    /// <summary>
    /// Description of this user list.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Description {
      get { return description_ ?? ""; }
      set {
        description_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "description" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasDescription {
      get { return description_ != null; }
    }
    /// <summary>Clears the value of the "description" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearDescription() {
      description_ = null;
    }

    /// <summary>Field number for the "membership_status" field.</summary>
    public const int MembershipStatusFieldNumber = 6;
    private global::Google.Ads.GoogleAds.V7.Enums.UserListMembershipStatusEnum.Types.UserListMembershipStatus membershipStatus_ = global::Google.Ads.GoogleAds.V7.Enums.UserListMembershipStatusEnum.Types.UserListMembershipStatus.Unspecified;
    /// <summary>
    /// Membership status of this user list. Indicates whether a user list is open
    /// or active. Only open user lists can accumulate more users and can be
    /// targeted to.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Ads.GoogleAds.V7.Enums.UserListMembershipStatusEnum.Types.UserListMembershipStatus MembershipStatus {
      get { return membershipStatus_; }
      set {
        membershipStatus_ = value;
      }
    }

    /// <summary>Field number for the "integration_code" field.</summary>
    public const int IntegrationCodeFieldNumber = 29;
    private string integrationCode_;
    /// <summary>
    /// An ID from external system. It is used by user list sellers to correlate
    /// IDs on their systems.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string IntegrationCode {
      get { return integrationCode_ ?? ""; }
      set {
        integrationCode_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "integration_code" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasIntegrationCode {
      get { return integrationCode_ != null; }
    }
    /// <summary>Clears the value of the "integration_code" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearIntegrationCode() {
      integrationCode_ = null;
    }

    /// <summary>Field number for the "membership_life_span" field.</summary>
    public const int MembershipLifeSpanFieldNumber = 30;
    private long membershipLifeSpan_;
    /// <summary>
    /// Number of days a user's cookie stays on your list since its most recent
    /// addition to the list. This field must be between 0 and 540 inclusive.
    /// However, for CRM based userlists, this field can be set to 10000 which
    /// means no expiration.
    ///
    /// It'll be ignored for logical_user_list.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long MembershipLifeSpan {
      get { if ((_hasBits0 & 8) != 0) { return membershipLifeSpan_; } else { return 0L; } }
      set {
        _hasBits0 |= 8;
        membershipLifeSpan_ = value;
      }
    }
    /// <summary>Gets whether the "membership_life_span" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasMembershipLifeSpan {
      get { return (_hasBits0 & 8) != 0; }
    }
    /// <summary>Clears the value of the "membership_life_span" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearMembershipLifeSpan() {
      _hasBits0 &= ~8;
    }

    /// <summary>Field number for the "size_for_display" field.</summary>
    public const int SizeForDisplayFieldNumber = 31;
    private long sizeForDisplay_;
    /// <summary>
    /// Output only. Estimated number of users in this user list, on the Google Display Network.
    /// This value is null if the number of users has not yet been determined.
    ///
    /// This field is read-only.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long SizeForDisplay {
      get { if ((_hasBits0 & 16) != 0) { return sizeForDisplay_; } else { return 0L; } }
      set {
        _hasBits0 |= 16;
        sizeForDisplay_ = value;
      }
    }
    /// <summary>Gets whether the "size_for_display" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasSizeForDisplay {
      get { return (_hasBits0 & 16) != 0; }
    }
    /// <summary>Clears the value of the "size_for_display" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearSizeForDisplay() {
      _hasBits0 &= ~16;
    }

    /// <summary>Field number for the "size_range_for_display" field.</summary>
    public const int SizeRangeForDisplayFieldNumber = 10;
    private global::Google.Ads.GoogleAds.V7.Enums.UserListSizeRangeEnum.Types.UserListSizeRange sizeRangeForDisplay_ = global::Google.Ads.GoogleAds.V7.Enums.UserListSizeRangeEnum.Types.UserListSizeRange.Unspecified;
    /// <summary>
    /// Output only. Size range in terms of number of users of the UserList, on the Google
    /// Display Network.
    ///
    /// This field is read-only.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Ads.GoogleAds.V7.Enums.UserListSizeRangeEnum.Types.UserListSizeRange SizeRangeForDisplay {
      get { return sizeRangeForDisplay_; }
      set {
        sizeRangeForDisplay_ = value;
      }
    }

    /// <summary>Field number for the "size_for_search" field.</summary>
    public const int SizeForSearchFieldNumber = 32;
    private long sizeForSearch_;
    /// <summary>
    /// Output only. Estimated number of users in this user list in the google.com domain.
    /// These are the users available for targeting in Search campaigns.
    /// This value is null if the number of users has not yet been determined.
    ///
    /// This field is read-only.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long SizeForSearch {
      get { if ((_hasBits0 & 32) != 0) { return sizeForSearch_; } else { return 0L; } }
      set {
        _hasBits0 |= 32;
        sizeForSearch_ = value;
      }
    }
    /// <summary>Gets whether the "size_for_search" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasSizeForSearch {
      get { return (_hasBits0 & 32) != 0; }
    }
    /// <summary>Clears the value of the "size_for_search" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearSizeForSearch() {
      _hasBits0 &= ~32;
    }

    /// <summary>Field number for the "size_range_for_search" field.</summary>
    public const int SizeRangeForSearchFieldNumber = 12;
    private global::Google.Ads.GoogleAds.V7.Enums.UserListSizeRangeEnum.Types.UserListSizeRange sizeRangeForSearch_ = global::Google.Ads.GoogleAds.V7.Enums.UserListSizeRangeEnum.Types.UserListSizeRange.Unspecified;
    /// <summary>
    /// Output only. Size range in terms of number of users of the UserList, for Search ads.
    ///
    /// This field is read-only.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Ads.GoogleAds.V7.Enums.UserListSizeRangeEnum.Types.UserListSizeRange SizeRangeForSearch {
      get { return sizeRangeForSearch_; }
      set {
        sizeRangeForSearch_ = value;
      }
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 13;
    private global::Google.Ads.GoogleAds.V7.Enums.UserListTypeEnum.Types.UserListType type_ = global::Google.Ads.GoogleAds.V7.Enums.UserListTypeEnum.Types.UserListType.Unspecified;
    /// <summary>
    /// Output only. Type of this list.
    ///
    /// This field is read-only.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Ads.GoogleAds.V7.Enums.UserListTypeEnum.Types.UserListType Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    /// <summary>Field number for the "closing_reason" field.</summary>
    public const int ClosingReasonFieldNumber = 14;
    private global::Google.Ads.GoogleAds.V7.Enums.UserListClosingReasonEnum.Types.UserListClosingReason closingReason_ = global::Google.Ads.GoogleAds.V7.Enums.UserListClosingReasonEnum.Types.UserListClosingReason.Unspecified;
    /// <summary>
    /// Indicating the reason why this user list membership status is closed. It is
    /// only populated on lists that were automatically closed due to inactivity,
    /// and will be cleared once the list membership status becomes open.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Ads.GoogleAds.V7.Enums.UserListClosingReasonEnum.Types.UserListClosingReason ClosingReason {
      get { return closingReason_; }
      set {
        closingReason_ = value;
      }
    }

    /// <summary>Field number for the "access_reason" field.</summary>
    public const int AccessReasonFieldNumber = 15;
    private global::Google.Ads.GoogleAds.V7.Enums.AccessReasonEnum.Types.AccessReason accessReason_ = global::Google.Ads.GoogleAds.V7.Enums.AccessReasonEnum.Types.AccessReason.Unspecified;
    /// <summary>
    /// Output only. Indicates the reason this account has been granted access to the list.
    /// The reason can be SHARED, OWNED, LICENSED or SUBSCRIBED.
    ///
    /// This field is read-only.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Ads.GoogleAds.V7.Enums.AccessReasonEnum.Types.AccessReason AccessReason {
      get { return accessReason_; }
      set {
        accessReason_ = value;
      }
    }

    /// <summary>Field number for the "account_user_list_status" field.</summary>
    public const int AccountUserListStatusFieldNumber = 16;
    private global::Google.Ads.GoogleAds.V7.Enums.UserListAccessStatusEnum.Types.UserListAccessStatus accountUserListStatus_ = global::Google.Ads.GoogleAds.V7.Enums.UserListAccessStatusEnum.Types.UserListAccessStatus.Unspecified;
    /// <summary>
    /// Indicates if this share is still enabled. When a UserList is shared with
    /// the user this field is set to ENABLED. Later the userList owner can decide
    /// to revoke the share and make it DISABLED.
    /// The default value of this field is set to ENABLED.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Ads.GoogleAds.V7.Enums.UserListAccessStatusEnum.Types.UserListAccessStatus AccountUserListStatus {
      get { return accountUserListStatus_; }
      set {
        accountUserListStatus_ = value;
      }
    }

    /// <summary>Field number for the "eligible_for_search" field.</summary>
    public const int EligibleForSearchFieldNumber = 33;
    private bool eligibleForSearch_;
    /// <summary>
    /// Indicates if this user list is eligible for Google Search Network.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool EligibleForSearch {
      get { if ((_hasBits0 & 64) != 0) { return eligibleForSearch_; } else { return false; } }
      set {
        _hasBits0 |= 64;
        eligibleForSearch_ = value;
      }
    }
    /// <summary>Gets whether the "eligible_for_search" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasEligibleForSearch {
      get { return (_hasBits0 & 64) != 0; }
    }
    /// <summary>Clears the value of the "eligible_for_search" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearEligibleForSearch() {
      _hasBits0 &= ~64;
    }

    /// <summary>Field number for the "eligible_for_display" field.</summary>
    public const int EligibleForDisplayFieldNumber = 34;
    private bool eligibleForDisplay_;
    /// <summary>
    /// Output only. Indicates this user list is eligible for Google Display Network.
    ///
    /// This field is read-only.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool EligibleForDisplay {
      get { if ((_hasBits0 & 128) != 0) { return eligibleForDisplay_; } else { return false; } }
      set {
        _hasBits0 |= 128;
        eligibleForDisplay_ = value;
      }
    }
    /// <summary>Gets whether the "eligible_for_display" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasEligibleForDisplay {
      get { return (_hasBits0 & 128) != 0; }
    }
    /// <summary>Clears the value of the "eligible_for_display" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearEligibleForDisplay() {
      _hasBits0 &= ~128;
    }

    /// <summary>Field number for the "match_rate_percentage" field.</summary>
    public const int MatchRatePercentageFieldNumber = 24;
    private int matchRatePercentage_;
    /// <summary>
    /// Output only. Indicates match rate for Customer Match lists. The range of this field is
    /// [0-100]. This will be null for other list types or when it's not possible
    /// to calculate the match rate.
    ///
    /// This field is read-only.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MatchRatePercentage {
      get { if ((_hasBits0 & 1) != 0) { return matchRatePercentage_; } else { return 0; } }
      set {
        _hasBits0 |= 1;
        matchRatePercentage_ = value;
      }
    }
    /// <summary>Gets whether the "match_rate_percentage" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasMatchRatePercentage {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "match_rate_percentage" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearMatchRatePercentage() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "crm_based_user_list" field.</summary>
    public const int CrmBasedUserListFieldNumber = 19;
    /// <summary>
    /// User list of CRM users provided by the advertiser.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Ads.GoogleAds.V7.Common.CrmBasedUserListInfo CrmBasedUserList {
      get { return userListCase_ == UserListOneofCase.CrmBasedUserList ? (global::Google.Ads.GoogleAds.V7.Common.CrmBasedUserListInfo) userList_ : null; }
      set {
        userList_ = value;
        userListCase_ = value == null ? UserListOneofCase.None : UserListOneofCase.CrmBasedUserList;
      }
    }

    /// <summary>Field number for the "similar_user_list" field.</summary>
    public const int SimilarUserListFieldNumber = 20;
    /// <summary>
    /// Output only. User list which are similar to users from another UserList.
    /// These lists are readonly and automatically created by google.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Ads.GoogleAds.V7.Common.SimilarUserListInfo SimilarUserList {
      get { return userListCase_ == UserListOneofCase.SimilarUserList ? (global::Google.Ads.GoogleAds.V7.Common.SimilarUserListInfo) userList_ : null; }
      set {
        userList_ = value;
        userListCase_ = value == null ? UserListOneofCase.None : UserListOneofCase.SimilarUserList;
      }
    }

    /// <summary>Field number for the "rule_based_user_list" field.</summary>
    public const int RuleBasedUserListFieldNumber = 21;
    /// <summary>
    /// User list generated by a rule.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Ads.GoogleAds.V7.Common.RuleBasedUserListInfo RuleBasedUserList {
      get { return userListCase_ == UserListOneofCase.RuleBasedUserList ? (global::Google.Ads.GoogleAds.V7.Common.RuleBasedUserListInfo) userList_ : null; }
      set {
        userList_ = value;
        userListCase_ = value == null ? UserListOneofCase.None : UserListOneofCase.RuleBasedUserList;
      }
    }

    /// <summary>Field number for the "logical_user_list" field.</summary>
    public const int LogicalUserListFieldNumber = 22;
    /// <summary>
    /// User list that is a custom combination of user lists and user interests.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Ads.GoogleAds.V7.Common.LogicalUserListInfo LogicalUserList {
      get { return userListCase_ == UserListOneofCase.LogicalUserList ? (global::Google.Ads.GoogleAds.V7.Common.LogicalUserListInfo) userList_ : null; }
      set {
        userList_ = value;
        userListCase_ = value == null ? UserListOneofCase.None : UserListOneofCase.LogicalUserList;
      }
    }

    /// <summary>Field number for the "basic_user_list" field.</summary>
    public const int BasicUserListFieldNumber = 23;
    /// <summary>
    /// User list targeting as a collection of conversion or remarketing actions.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Ads.GoogleAds.V7.Common.BasicUserListInfo BasicUserList {
      get { return userListCase_ == UserListOneofCase.BasicUserList ? (global::Google.Ads.GoogleAds.V7.Common.BasicUserListInfo) userList_ : null; }
      set {
        userList_ = value;
        userListCase_ = value == null ? UserListOneofCase.None : UserListOneofCase.BasicUserList;
      }
    }

    private object userList_;
    /// <summary>Enum of possible cases for the "user_list" oneof.</summary>
    public enum UserListOneofCase {
      None = 0,
      CrmBasedUserList = 19,
      SimilarUserList = 20,
      RuleBasedUserList = 21,
      LogicalUserList = 22,
      BasicUserList = 23,
    }
    private UserListOneofCase userListCase_ = UserListOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UserListOneofCase UserListCase {
      get { return userListCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearUserList() {
      userListCase_ = UserListOneofCase.None;
      userList_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as UserList);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(UserList other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ResourceName != other.ResourceName) return false;
      if (Id != other.Id) return false;
      if (ReadOnly != other.ReadOnly) return false;
      if (Name != other.Name) return false;
      if (Description != other.Description) return false;
      if (MembershipStatus != other.MembershipStatus) return false;
      if (IntegrationCode != other.IntegrationCode) return false;
      if (MembershipLifeSpan != other.MembershipLifeSpan) return false;
      if (SizeForDisplay != other.SizeForDisplay) return false;
      if (SizeRangeForDisplay != other.SizeRangeForDisplay) return false;
      if (SizeForSearch != other.SizeForSearch) return false;
      if (SizeRangeForSearch != other.SizeRangeForSearch) return false;
      if (Type != other.Type) return false;
      if (ClosingReason != other.ClosingReason) return false;
      if (AccessReason != other.AccessReason) return false;
      if (AccountUserListStatus != other.AccountUserListStatus) return false;
      if (EligibleForSearch != other.EligibleForSearch) return false;
      if (EligibleForDisplay != other.EligibleForDisplay) return false;
      if (MatchRatePercentage != other.MatchRatePercentage) return false;
      if (!object.Equals(CrmBasedUserList, other.CrmBasedUserList)) return false;
      if (!object.Equals(SimilarUserList, other.SimilarUserList)) return false;
      if (!object.Equals(RuleBasedUserList, other.RuleBasedUserList)) return false;
      if (!object.Equals(LogicalUserList, other.LogicalUserList)) return false;
      if (!object.Equals(BasicUserList, other.BasicUserList)) return false;
      if (UserListCase != other.UserListCase) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ResourceName.Length != 0) hash ^= ResourceName.GetHashCode();
      if (HasId) hash ^= Id.GetHashCode();
      if (HasReadOnly) hash ^= ReadOnly.GetHashCode();
      if (HasName) hash ^= Name.GetHashCode();
      if (HasDescription) hash ^= Description.GetHashCode();
      if (MembershipStatus != global::Google.Ads.GoogleAds.V7.Enums.UserListMembershipStatusEnum.Types.UserListMembershipStatus.Unspecified) hash ^= MembershipStatus.GetHashCode();
      if (HasIntegrationCode) hash ^= IntegrationCode.GetHashCode();
      if (HasMembershipLifeSpan) hash ^= MembershipLifeSpan.GetHashCode();
      if (HasSizeForDisplay) hash ^= SizeForDisplay.GetHashCode();
      if (SizeRangeForDisplay != global::Google.Ads.GoogleAds.V7.Enums.UserListSizeRangeEnum.Types.UserListSizeRange.Unspecified) hash ^= SizeRangeForDisplay.GetHashCode();
      if (HasSizeForSearch) hash ^= SizeForSearch.GetHashCode();
      if (SizeRangeForSearch != global::Google.Ads.GoogleAds.V7.Enums.UserListSizeRangeEnum.Types.UserListSizeRange.Unspecified) hash ^= SizeRangeForSearch.GetHashCode();
      if (Type != global::Google.Ads.GoogleAds.V7.Enums.UserListTypeEnum.Types.UserListType.Unspecified) hash ^= Type.GetHashCode();
      if (ClosingReason != global::Google.Ads.GoogleAds.V7.Enums.UserListClosingReasonEnum.Types.UserListClosingReason.Unspecified) hash ^= ClosingReason.GetHashCode();
      if (AccessReason != global::Google.Ads.GoogleAds.V7.Enums.AccessReasonEnum.Types.AccessReason.Unspecified) hash ^= AccessReason.GetHashCode();
      if (AccountUserListStatus != global::Google.Ads.GoogleAds.V7.Enums.UserListAccessStatusEnum.Types.UserListAccessStatus.Unspecified) hash ^= AccountUserListStatus.GetHashCode();
      if (HasEligibleForSearch) hash ^= EligibleForSearch.GetHashCode();
      if (HasEligibleForDisplay) hash ^= EligibleForDisplay.GetHashCode();
      if (HasMatchRatePercentage) hash ^= MatchRatePercentage.GetHashCode();
      if (userListCase_ == UserListOneofCase.CrmBasedUserList) hash ^= CrmBasedUserList.GetHashCode();
      if (userListCase_ == UserListOneofCase.SimilarUserList) hash ^= SimilarUserList.GetHashCode();
      if (userListCase_ == UserListOneofCase.RuleBasedUserList) hash ^= RuleBasedUserList.GetHashCode();
      if (userListCase_ == UserListOneofCase.LogicalUserList) hash ^= LogicalUserList.GetHashCode();
      if (userListCase_ == UserListOneofCase.BasicUserList) hash ^= BasicUserList.GetHashCode();
      hash ^= (int) userListCase_;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (ResourceName.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(ResourceName);
      }
      if (MembershipStatus != global::Google.Ads.GoogleAds.V7.Enums.UserListMembershipStatusEnum.Types.UserListMembershipStatus.Unspecified) {
        output.WriteRawTag(48);
        output.WriteEnum((int) MembershipStatus);
      }
      if (SizeRangeForDisplay != global::Google.Ads.GoogleAds.V7.Enums.UserListSizeRangeEnum.Types.UserListSizeRange.Unspecified) {
        output.WriteRawTag(80);
        output.WriteEnum((int) SizeRangeForDisplay);
      }
      if (SizeRangeForSearch != global::Google.Ads.GoogleAds.V7.Enums.UserListSizeRangeEnum.Types.UserListSizeRange.Unspecified) {
        output.WriteRawTag(96);
        output.WriteEnum((int) SizeRangeForSearch);
      }
      if (Type != global::Google.Ads.GoogleAds.V7.Enums.UserListTypeEnum.Types.UserListType.Unspecified) {
        output.WriteRawTag(104);
        output.WriteEnum((int) Type);
      }
      if (ClosingReason != global::Google.Ads.GoogleAds.V7.Enums.UserListClosingReasonEnum.Types.UserListClosingReason.Unspecified) {
        output.WriteRawTag(112);
        output.WriteEnum((int) ClosingReason);
      }
      if (AccessReason != global::Google.Ads.GoogleAds.V7.Enums.AccessReasonEnum.Types.AccessReason.Unspecified) {
        output.WriteRawTag(120);
        output.WriteEnum((int) AccessReason);
      }
      if (AccountUserListStatus != global::Google.Ads.GoogleAds.V7.Enums.UserListAccessStatusEnum.Types.UserListAccessStatus.Unspecified) {
        output.WriteRawTag(128, 1);
        output.WriteEnum((int) AccountUserListStatus);
      }
      if (userListCase_ == UserListOneofCase.CrmBasedUserList) {
        output.WriteRawTag(154, 1);
        output.WriteMessage(CrmBasedUserList);
      }
      if (userListCase_ == UserListOneofCase.SimilarUserList) {
        output.WriteRawTag(162, 1);
        output.WriteMessage(SimilarUserList);
      }
      if (userListCase_ == UserListOneofCase.RuleBasedUserList) {
        output.WriteRawTag(170, 1);
        output.WriteMessage(RuleBasedUserList);
      }
      if (userListCase_ == UserListOneofCase.LogicalUserList) {
        output.WriteRawTag(178, 1);
        output.WriteMessage(LogicalUserList);
      }
      if (userListCase_ == UserListOneofCase.BasicUserList) {
        output.WriteRawTag(186, 1);
        output.WriteMessage(BasicUserList);
      }
      if (HasMatchRatePercentage) {
        output.WriteRawTag(192, 1);
        output.WriteInt32(MatchRatePercentage);
      }
      if (HasId) {
        output.WriteRawTag(200, 1);
        output.WriteInt64(Id);
      }
      if (HasReadOnly) {
        output.WriteRawTag(208, 1);
        output.WriteBool(ReadOnly);
      }
      if (HasName) {
        output.WriteRawTag(218, 1);
        output.WriteString(Name);
      }
      if (HasDescription) {
        output.WriteRawTag(226, 1);
        output.WriteString(Description);
      }
      if (HasIntegrationCode) {
        output.WriteRawTag(234, 1);
        output.WriteString(IntegrationCode);
      }
      if (HasMembershipLifeSpan) {
        output.WriteRawTag(240, 1);
        output.WriteInt64(MembershipLifeSpan);
      }
      if (HasSizeForDisplay) {
        output.WriteRawTag(248, 1);
        output.WriteInt64(SizeForDisplay);
      }
      if (HasSizeForSearch) {
        output.WriteRawTag(128, 2);
        output.WriteInt64(SizeForSearch);
      }
      if (HasEligibleForSearch) {
        output.WriteRawTag(136, 2);
        output.WriteBool(EligibleForSearch);
      }
      if (HasEligibleForDisplay) {
        output.WriteRawTag(144, 2);
        output.WriteBool(EligibleForDisplay);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (ResourceName.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(ResourceName);
      }
      if (MembershipStatus != global::Google.Ads.GoogleAds.V7.Enums.UserListMembershipStatusEnum.Types.UserListMembershipStatus.Unspecified) {
        output.WriteRawTag(48);
        output.WriteEnum((int) MembershipStatus);
      }
      if (SizeRangeForDisplay != global::Google.Ads.GoogleAds.V7.Enums.UserListSizeRangeEnum.Types.UserListSizeRange.Unspecified) {
        output.WriteRawTag(80);
        output.WriteEnum((int) SizeRangeForDisplay);
      }
      if (SizeRangeForSearch != global::Google.Ads.GoogleAds.V7.Enums.UserListSizeRangeEnum.Types.UserListSizeRange.Unspecified) {
        output.WriteRawTag(96);
        output.WriteEnum((int) SizeRangeForSearch);
      }
      if (Type != global::Google.Ads.GoogleAds.V7.Enums.UserListTypeEnum.Types.UserListType.Unspecified) {
        output.WriteRawTag(104);
        output.WriteEnum((int) Type);
      }
      if (ClosingReason != global::Google.Ads.GoogleAds.V7.Enums.UserListClosingReasonEnum.Types.UserListClosingReason.Unspecified) {
        output.WriteRawTag(112);
        output.WriteEnum((int) ClosingReason);
      }
      if (AccessReason != global::Google.Ads.GoogleAds.V7.Enums.AccessReasonEnum.Types.AccessReason.Unspecified) {
        output.WriteRawTag(120);
        output.WriteEnum((int) AccessReason);
      }
      if (AccountUserListStatus != global::Google.Ads.GoogleAds.V7.Enums.UserListAccessStatusEnum.Types.UserListAccessStatus.Unspecified) {
        output.WriteRawTag(128, 1);
        output.WriteEnum((int) AccountUserListStatus);
      }
      if (userListCase_ == UserListOneofCase.CrmBasedUserList) {
        output.WriteRawTag(154, 1);
        output.WriteMessage(CrmBasedUserList);
      }
      if (userListCase_ == UserListOneofCase.SimilarUserList) {
        output.WriteRawTag(162, 1);
        output.WriteMessage(SimilarUserList);
      }
      if (userListCase_ == UserListOneofCase.RuleBasedUserList) {
        output.WriteRawTag(170, 1);
        output.WriteMessage(RuleBasedUserList);
      }
      if (userListCase_ == UserListOneofCase.LogicalUserList) {
        output.WriteRawTag(178, 1);
        output.WriteMessage(LogicalUserList);
      }
      if (userListCase_ == UserListOneofCase.BasicUserList) {
        output.WriteRawTag(186, 1);
        output.WriteMessage(BasicUserList);
      }
      if (HasMatchRatePercentage) {
        output.WriteRawTag(192, 1);
        output.WriteInt32(MatchRatePercentage);
      }
      if (HasId) {
        output.WriteRawTag(200, 1);
        output.WriteInt64(Id);
      }
      if (HasReadOnly) {
        output.WriteRawTag(208, 1);
        output.WriteBool(ReadOnly);
      }
      if (HasName) {
        output.WriteRawTag(218, 1);
        output.WriteString(Name);
      }
      if (HasDescription) {
        output.WriteRawTag(226, 1);
        output.WriteString(Description);
      }
      if (HasIntegrationCode) {
        output.WriteRawTag(234, 1);
        output.WriteString(IntegrationCode);
      }
      if (HasMembershipLifeSpan) {
        output.WriteRawTag(240, 1);
        output.WriteInt64(MembershipLifeSpan);
      }
      if (HasSizeForDisplay) {
        output.WriteRawTag(248, 1);
        output.WriteInt64(SizeForDisplay);
      }
      if (HasSizeForSearch) {
        output.WriteRawTag(128, 2);
        output.WriteInt64(SizeForSearch);
      }
      if (HasEligibleForSearch) {
        output.WriteRawTag(136, 2);
        output.WriteBool(EligibleForSearch);
      }
      if (HasEligibleForDisplay) {
        output.WriteRawTag(144, 2);
        output.WriteBool(EligibleForDisplay);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ResourceName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ResourceName);
      }
      if (HasId) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(Id);
      }
      if (HasReadOnly) {
        size += 2 + 1;
      }
      if (HasName) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (HasDescription) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Description);
      }
      if (MembershipStatus != global::Google.Ads.GoogleAds.V7.Enums.UserListMembershipStatusEnum.Types.UserListMembershipStatus.Unspecified) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) MembershipStatus);
      }
      if (HasIntegrationCode) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(IntegrationCode);
      }
      if (HasMembershipLifeSpan) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(MembershipLifeSpan);
      }
      if (HasSizeForDisplay) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(SizeForDisplay);
      }
      if (SizeRangeForDisplay != global::Google.Ads.GoogleAds.V7.Enums.UserListSizeRangeEnum.Types.UserListSizeRange.Unspecified) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) SizeRangeForDisplay);
      }
      if (HasSizeForSearch) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(SizeForSearch);
      }
      if (SizeRangeForSearch != global::Google.Ads.GoogleAds.V7.Enums.UserListSizeRangeEnum.Types.UserListSizeRange.Unspecified) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) SizeRangeForSearch);
      }
      if (Type != global::Google.Ads.GoogleAds.V7.Enums.UserListTypeEnum.Types.UserListType.Unspecified) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Type);
      }
      if (ClosingReason != global::Google.Ads.GoogleAds.V7.Enums.UserListClosingReasonEnum.Types.UserListClosingReason.Unspecified) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) ClosingReason);
      }
      if (AccessReason != global::Google.Ads.GoogleAds.V7.Enums.AccessReasonEnum.Types.AccessReason.Unspecified) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) AccessReason);
      }
      if (AccountUserListStatus != global::Google.Ads.GoogleAds.V7.Enums.UserListAccessStatusEnum.Types.UserListAccessStatus.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) AccountUserListStatus);
      }
      if (HasEligibleForSearch) {
        size += 2 + 1;
      }
      if (HasEligibleForDisplay) {
        size += 2 + 1;
      }
      if (HasMatchRatePercentage) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(MatchRatePercentage);
      }
      if (userListCase_ == UserListOneofCase.CrmBasedUserList) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(CrmBasedUserList);
      }
      if (userListCase_ == UserListOneofCase.SimilarUserList) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(SimilarUserList);
      }
      if (userListCase_ == UserListOneofCase.RuleBasedUserList) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(RuleBasedUserList);
      }
      if (userListCase_ == UserListOneofCase.LogicalUserList) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(LogicalUserList);
      }
      if (userListCase_ == UserListOneofCase.BasicUserList) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(BasicUserList);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(UserList other) {
      if (other == null) {
        return;
      }
      if (other.ResourceName.Length != 0) {
        ResourceName = other.ResourceName;
      }
      if (other.HasId) {
        Id = other.Id;
      }
      if (other.HasReadOnly) {
        ReadOnly = other.ReadOnly;
      }
      if (other.HasName) {
        Name = other.Name;
      }
      if (other.HasDescription) {
        Description = other.Description;
      }
      if (other.MembershipStatus != global::Google.Ads.GoogleAds.V7.Enums.UserListMembershipStatusEnum.Types.UserListMembershipStatus.Unspecified) {
        MembershipStatus = other.MembershipStatus;
      }
      if (other.HasIntegrationCode) {
        IntegrationCode = other.IntegrationCode;
      }
      if (other.HasMembershipLifeSpan) {
        MembershipLifeSpan = other.MembershipLifeSpan;
      }
      if (other.HasSizeForDisplay) {
        SizeForDisplay = other.SizeForDisplay;
      }
      if (other.SizeRangeForDisplay != global::Google.Ads.GoogleAds.V7.Enums.UserListSizeRangeEnum.Types.UserListSizeRange.Unspecified) {
        SizeRangeForDisplay = other.SizeRangeForDisplay;
      }
      if (other.HasSizeForSearch) {
        SizeForSearch = other.SizeForSearch;
      }
      if (other.SizeRangeForSearch != global::Google.Ads.GoogleAds.V7.Enums.UserListSizeRangeEnum.Types.UserListSizeRange.Unspecified) {
        SizeRangeForSearch = other.SizeRangeForSearch;
      }
      if (other.Type != global::Google.Ads.GoogleAds.V7.Enums.UserListTypeEnum.Types.UserListType.Unspecified) {
        Type = other.Type;
      }
      if (other.ClosingReason != global::Google.Ads.GoogleAds.V7.Enums.UserListClosingReasonEnum.Types.UserListClosingReason.Unspecified) {
        ClosingReason = other.ClosingReason;
      }
      if (other.AccessReason != global::Google.Ads.GoogleAds.V7.Enums.AccessReasonEnum.Types.AccessReason.Unspecified) {
        AccessReason = other.AccessReason;
      }
      if (other.AccountUserListStatus != global::Google.Ads.GoogleAds.V7.Enums.UserListAccessStatusEnum.Types.UserListAccessStatus.Unspecified) {
        AccountUserListStatus = other.AccountUserListStatus;
      }
      if (other.HasEligibleForSearch) {
        EligibleForSearch = other.EligibleForSearch;
      }
      if (other.HasEligibleForDisplay) {
        EligibleForDisplay = other.EligibleForDisplay;
      }
      if (other.HasMatchRatePercentage) {
        MatchRatePercentage = other.MatchRatePercentage;
      }
      switch (other.UserListCase) {
        case UserListOneofCase.CrmBasedUserList:
          if (CrmBasedUserList == null) {
            CrmBasedUserList = new global::Google.Ads.GoogleAds.V7.Common.CrmBasedUserListInfo();
          }
          CrmBasedUserList.MergeFrom(other.CrmBasedUserList);
          break;
        case UserListOneofCase.SimilarUserList:
          if (SimilarUserList == null) {
            SimilarUserList = new global::Google.Ads.GoogleAds.V7.Common.SimilarUserListInfo();
          }
          SimilarUserList.MergeFrom(other.SimilarUserList);
          break;
        case UserListOneofCase.RuleBasedUserList:
          if (RuleBasedUserList == null) {
            RuleBasedUserList = new global::Google.Ads.GoogleAds.V7.Common.RuleBasedUserListInfo();
          }
          RuleBasedUserList.MergeFrom(other.RuleBasedUserList);
          break;
        case UserListOneofCase.LogicalUserList:
          if (LogicalUserList == null) {
            LogicalUserList = new global::Google.Ads.GoogleAds.V7.Common.LogicalUserListInfo();
          }
          LogicalUserList.MergeFrom(other.LogicalUserList);
          break;
        case UserListOneofCase.BasicUserList:
          if (BasicUserList == null) {
            BasicUserList = new global::Google.Ads.GoogleAds.V7.Common.BasicUserListInfo();
          }
          BasicUserList.MergeFrom(other.BasicUserList);
          break;
      }

      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            ResourceName = input.ReadString();
            break;
          }
          case 48: {
            MembershipStatus = (global::Google.Ads.GoogleAds.V7.Enums.UserListMembershipStatusEnum.Types.UserListMembershipStatus) input.ReadEnum();
            break;
          }
          case 80: {
            SizeRangeForDisplay = (global::Google.Ads.GoogleAds.V7.Enums.UserListSizeRangeEnum.Types.UserListSizeRange) input.ReadEnum();
            break;
          }
          case 96: {
            SizeRangeForSearch = (global::Google.Ads.GoogleAds.V7.Enums.UserListSizeRangeEnum.Types.UserListSizeRange) input.ReadEnum();
            break;
          }
          case 104: {
            Type = (global::Google.Ads.GoogleAds.V7.Enums.UserListTypeEnum.Types.UserListType) input.ReadEnum();
            break;
          }
          case 112: {
            ClosingReason = (global::Google.Ads.GoogleAds.V7.Enums.UserListClosingReasonEnum.Types.UserListClosingReason) input.ReadEnum();
            break;
          }
          case 120: {
            AccessReason = (global::Google.Ads.GoogleAds.V7.Enums.AccessReasonEnum.Types.AccessReason) input.ReadEnum();
            break;
          }
          case 128: {
            AccountUserListStatus = (global::Google.Ads.GoogleAds.V7.Enums.UserListAccessStatusEnum.Types.UserListAccessStatus) input.ReadEnum();
            break;
          }
          case 154: {
            global::Google.Ads.GoogleAds.V7.Common.CrmBasedUserListInfo subBuilder = new global::Google.Ads.GoogleAds.V7.Common.CrmBasedUserListInfo();
            if (userListCase_ == UserListOneofCase.CrmBasedUserList) {
              subBuilder.MergeFrom(CrmBasedUserList);
            }
            input.ReadMessage(subBuilder);
            CrmBasedUserList = subBuilder;
            break;
          }
          case 162: {
            global::Google.Ads.GoogleAds.V7.Common.SimilarUserListInfo subBuilder = new global::Google.Ads.GoogleAds.V7.Common.SimilarUserListInfo();
            if (userListCase_ == UserListOneofCase.SimilarUserList) {
              subBuilder.MergeFrom(SimilarUserList);
            }
            input.ReadMessage(subBuilder);
            SimilarUserList = subBuilder;
            break;
          }
          case 170: {
            global::Google.Ads.GoogleAds.V7.Common.RuleBasedUserListInfo subBuilder = new global::Google.Ads.GoogleAds.V7.Common.RuleBasedUserListInfo();
            if (userListCase_ == UserListOneofCase.RuleBasedUserList) {
              subBuilder.MergeFrom(RuleBasedUserList);
            }
            input.ReadMessage(subBuilder);
            RuleBasedUserList = subBuilder;
            break;
          }
          case 178: {
            global::Google.Ads.GoogleAds.V7.Common.LogicalUserListInfo subBuilder = new global::Google.Ads.GoogleAds.V7.Common.LogicalUserListInfo();
            if (userListCase_ == UserListOneofCase.LogicalUserList) {
              subBuilder.MergeFrom(LogicalUserList);
            }
            input.ReadMessage(subBuilder);
            LogicalUserList = subBuilder;
            break;
          }
          case 186: {
            global::Google.Ads.GoogleAds.V7.Common.BasicUserListInfo subBuilder = new global::Google.Ads.GoogleAds.V7.Common.BasicUserListInfo();
            if (userListCase_ == UserListOneofCase.BasicUserList) {
              subBuilder.MergeFrom(BasicUserList);
            }
            input.ReadMessage(subBuilder);
            BasicUserList = subBuilder;
            break;
          }
          case 192: {
            MatchRatePercentage = input.ReadInt32();
            break;
          }
          case 200: {
            Id = input.ReadInt64();
            break;
          }
          case 208: {
            ReadOnly = input.ReadBool();
            break;
          }
          case 218: {
            Name = input.ReadString();
            break;
          }
          case 226: {
            Description = input.ReadString();
            break;
          }
          case 234: {
            IntegrationCode = input.ReadString();
            break;
          }
          case 240: {
            MembershipLifeSpan = input.ReadInt64();
            break;
          }
          case 248: {
            SizeForDisplay = input.ReadInt64();
            break;
          }
          case 256: {
            SizeForSearch = input.ReadInt64();
            break;
          }
          case 264: {
            EligibleForSearch = input.ReadBool();
            break;
          }
          case 272: {
            EligibleForDisplay = input.ReadBool();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            ResourceName = input.ReadString();
            break;
          }
          case 48: {
            MembershipStatus = (global::Google.Ads.GoogleAds.V7.Enums.UserListMembershipStatusEnum.Types.UserListMembershipStatus) input.ReadEnum();
            break;
          }
          case 80: {
            SizeRangeForDisplay = (global::Google.Ads.GoogleAds.V7.Enums.UserListSizeRangeEnum.Types.UserListSizeRange) input.ReadEnum();
            break;
          }
          case 96: {
            SizeRangeForSearch = (global::Google.Ads.GoogleAds.V7.Enums.UserListSizeRangeEnum.Types.UserListSizeRange) input.ReadEnum();
            break;
          }
          case 104: {
            Type = (global::Google.Ads.GoogleAds.V7.Enums.UserListTypeEnum.Types.UserListType) input.ReadEnum();
            break;
          }
          case 112: {
            ClosingReason = (global::Google.Ads.GoogleAds.V7.Enums.UserListClosingReasonEnum.Types.UserListClosingReason) input.ReadEnum();
            break;
          }
          case 120: {
            AccessReason = (global::Google.Ads.GoogleAds.V7.Enums.AccessReasonEnum.Types.AccessReason) input.ReadEnum();
            break;
          }
          case 128: {
            AccountUserListStatus = (global::Google.Ads.GoogleAds.V7.Enums.UserListAccessStatusEnum.Types.UserListAccessStatus) input.ReadEnum();
            break;
          }
          case 154: {
            global::Google.Ads.GoogleAds.V7.Common.CrmBasedUserListInfo subBuilder = new global::Google.Ads.GoogleAds.V7.Common.CrmBasedUserListInfo();
            if (userListCase_ == UserListOneofCase.CrmBasedUserList) {
              subBuilder.MergeFrom(CrmBasedUserList);
            }
            input.ReadMessage(subBuilder);
            CrmBasedUserList = subBuilder;
            break;
          }
          case 162: {
            global::Google.Ads.GoogleAds.V7.Common.SimilarUserListInfo subBuilder = new global::Google.Ads.GoogleAds.V7.Common.SimilarUserListInfo();
            if (userListCase_ == UserListOneofCase.SimilarUserList) {
              subBuilder.MergeFrom(SimilarUserList);
            }
            input.ReadMessage(subBuilder);
            SimilarUserList = subBuilder;
            break;
          }
          case 170: {
            global::Google.Ads.GoogleAds.V7.Common.RuleBasedUserListInfo subBuilder = new global::Google.Ads.GoogleAds.V7.Common.RuleBasedUserListInfo();
            if (userListCase_ == UserListOneofCase.RuleBasedUserList) {
              subBuilder.MergeFrom(RuleBasedUserList);
            }
            input.ReadMessage(subBuilder);
            RuleBasedUserList = subBuilder;
            break;
          }
          case 178: {
            global::Google.Ads.GoogleAds.V7.Common.LogicalUserListInfo subBuilder = new global::Google.Ads.GoogleAds.V7.Common.LogicalUserListInfo();
            if (userListCase_ == UserListOneofCase.LogicalUserList) {
              subBuilder.MergeFrom(LogicalUserList);
            }
            input.ReadMessage(subBuilder);
            LogicalUserList = subBuilder;
            break;
          }
          case 186: {
            global::Google.Ads.GoogleAds.V7.Common.BasicUserListInfo subBuilder = new global::Google.Ads.GoogleAds.V7.Common.BasicUserListInfo();
            if (userListCase_ == UserListOneofCase.BasicUserList) {
              subBuilder.MergeFrom(BasicUserList);
            }
            input.ReadMessage(subBuilder);
            BasicUserList = subBuilder;
            break;
          }
          case 192: {
            MatchRatePercentage = input.ReadInt32();
            break;
          }
          case 200: {
            Id = input.ReadInt64();
            break;
          }
          case 208: {
            ReadOnly = input.ReadBool();
            break;
          }
          case 218: {
            Name = input.ReadString();
            break;
          }
          case 226: {
            Description = input.ReadString();
            break;
          }
          case 234: {
            IntegrationCode = input.ReadString();
            break;
          }
          case 240: {
            MembershipLifeSpan = input.ReadInt64();
            break;
          }
          case 248: {
            SizeForDisplay = input.ReadInt64();
            break;
          }
          case 256: {
            SizeForSearch = input.ReadInt64();
            break;
          }
          case 264: {
            EligibleForSearch = input.ReadBool();
            break;
          }
          case 272: {
            EligibleForDisplay = input.ReadBool();
            break;
          }
        }
      }
    }
    #endif

  }

  #endregion

}

#endregion Designer generated code
