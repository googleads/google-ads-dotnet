// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: google/ads/googleads/v8/common/policy.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Google.Ads.GoogleAds.V8.Common {

  /// <summary>Holder for reflection information generated from google/ads/googleads/v8/common/policy.proto</summary>
  public static partial class PolicyReflection {

    #region Descriptor
    /// <summary>File descriptor for google/ads/googleads/v8/common/policy.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static PolicyReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Citnb29nbGUvYWRzL2dvb2dsZWFkcy92OC9jb21tb24vcG9saWN5LnByb3Rv",
            "Eh5nb29nbGUuYWRzLmdvb2dsZWFkcy52OC5jb21tb24aO2dvb2dsZS9hZHMv",
            "Z29vZ2xlYWRzL3Y4L2VudW1zL3BvbGljeV90b3BpY19lbnRyeV90eXBlLnBy",
            "b3RvGldnb29nbGUvYWRzL2dvb2dsZWFkcy92OC9lbnVtcy9wb2xpY3lfdG9w",
            "aWNfZXZpZGVuY2VfZGVzdGluYXRpb25fbWlzbWF0Y2hfdXJsX3R5cGUucHJv",
            "dG8aWGdvb2dsZS9hZHMvZ29vZ2xlYWRzL3Y4L2VudW1zL3BvbGljeV90b3Bp",
            "Y19ldmlkZW5jZV9kZXN0aW5hdGlvbl9ub3Rfd29ya2luZ19kZXZpY2UucHJv",
            "dG8aYGdvb2dsZS9hZHMvZ29vZ2xlYWRzL3Y4L2VudW1zL3BvbGljeV90b3Bp",
            "Y19ldmlkZW5jZV9kZXN0aW5hdGlvbl9ub3Rfd29ya2luZ19kbnNfZXJyb3Jf",
            "dHlwZS5wcm90bxocZ29vZ2xlL2FwaS9hbm5vdGF0aW9ucy5wcm90byJuChJQ",
            "b2xpY3lWaW9sYXRpb25LZXkSGAoLcG9saWN5X25hbWUYAyABKAlIAIgBARIb",
            "Cg52aW9sYXRpbmdfdGV4dBgEIAEoCUgBiAEBQg4KDF9wb2xpY3lfbmFtZUIR",
            "Cg9fdmlvbGF0aW5nX3RleHQilgEKGVBvbGljeVZhbGlkYXRpb25QYXJhbWV0",
            "ZXISHwoXaWdub3JhYmxlX3BvbGljeV90b3BpY3MYAyADKAkSWAocZXhlbXB0",
            "X3BvbGljeV92aW9sYXRpb25fa2V5cxgCIAMoCzIyLmdvb2dsZS5hZHMuZ29v",
            "Z2xlYWRzLnY4LmNvbW1vbi5Qb2xpY3lWaW9sYXRpb25LZXkioAIKEFBvbGlj",
            "eVRvcGljRW50cnkSEgoFdG9waWMYBSABKAlIAIgBARJaCgR0eXBlGAIgASgO",
            "MkwuZ29vZ2xlLmFkcy5nb29nbGVhZHMudjguZW51bXMuUG9saWN5VG9waWNF",
            "bnRyeVR5cGVFbnVtLlBvbGljeVRvcGljRW50cnlUeXBlEkYKCWV2aWRlbmNl",
            "cxgDIAMoCzIzLmdvb2dsZS5hZHMuZ29vZ2xlYWRzLnY4LmNvbW1vbi5Qb2xp",
            "Y3lUb3BpY0V2aWRlbmNlEkoKC2NvbnN0cmFpbnRzGAQgAygLMjUuZ29vZ2xl",
            "LmFkcy5nb29nbGVhZHMudjguY29tbW9uLlBvbGljeVRvcGljQ29uc3RyYWlu",
            "dEIICgZfdG9waWMipwoKE1BvbGljeVRvcGljRXZpZGVuY2USVwoMd2Vic2l0",
            "ZV9saXN0GAMgASgLMj8uZ29vZ2xlLmFkcy5nb29nbGVhZHMudjguY29tbW9u",
            "LlBvbGljeVRvcGljRXZpZGVuY2UuV2Vic2l0ZUxpc3RIABJRCgl0ZXh0X2xp",
            "c3QYBCABKAsyPC5nb29nbGUuYWRzLmdvb2dsZWFkcy52OC5jb21tb24uUG9s",
            "aWN5VG9waWNFdmlkZW5jZS5UZXh0TGlzdEgAEhcKDWxhbmd1YWdlX2NvZGUY",
            "CSABKAlIABJoChVkZXN0aW5hdGlvbl90ZXh0X2xpc3QYBiABKAsyRy5nb29n",
            "bGUuYWRzLmdvb2dsZWFkcy52OC5jb21tb24uUG9saWN5VG9waWNFdmlkZW5j",
            "ZS5EZXN0aW5hdGlvblRleHRMaXN0SAASZwoUZGVzdGluYXRpb25fbWlzbWF0",
            "Y2gYByABKAsyRy5nb29nbGUuYWRzLmdvb2dsZWFkcy52OC5jb21tb24uUG9s",
            "aWN5VG9waWNFdmlkZW5jZS5EZXN0aW5hdGlvbk1pc21hdGNoSAASbAoXZGVz",
            "dGluYXRpb25fbm90X3dvcmtpbmcYCCABKAsySS5nb29nbGUuYWRzLmdvb2ds",
            "ZWFkcy52OC5jb21tb24uUG9saWN5VG9waWNFdmlkZW5jZS5EZXN0aW5hdGlv",
            "bk5vdFdvcmtpbmdIABoZCghUZXh0TGlzdBINCgV0ZXh0cxgCIAMoCRofCgtX",
            "ZWJzaXRlTGlzdBIQCgh3ZWJzaXRlcxgCIAMoCRowChNEZXN0aW5hdGlvblRl",
            "eHRMaXN0EhkKEWRlc3RpbmF0aW9uX3RleHRzGAIgAygJGqkBChNEZXN0aW5h",
            "dGlvbk1pc21hdGNoEpEBCgl1cmxfdHlwZXMYASADKA4yfi5nb29nbGUuYWRz",
            "Lmdvb2dsZWFkcy52OC5lbnVtcy5Qb2xpY3lUb3BpY0V2aWRlbmNlRGVzdGlu",
            "YXRpb25NaXNtYXRjaFVybFR5cGVFbnVtLlBvbGljeVRvcGljRXZpZGVuY2VE",
            "ZXN0aW5hdGlvbk1pc21hdGNoVXJsVHlwZRrmAwoVRGVzdGluYXRpb25Ob3RX",
            "b3JraW5nEhkKDGV4cGFuZGVkX3VybBgHIAEoCUgBiAEBEpEBCgZkZXZpY2UY",
            "BCABKA4ygAEuZ29vZ2xlLmFkcy5nb29nbGVhZHMudjguZW51bXMuUG9saWN5",
            "VG9waWNFdmlkZW5jZURlc3RpbmF0aW9uTm90V29ya2luZ0RldmljZUVudW0u",
            "UG9saWN5VG9waWNFdmlkZW5jZURlc3RpbmF0aW9uTm90V29ya2luZ0Rldmlj",
            "ZRIjChZsYXN0X2NoZWNrZWRfZGF0ZV90aW1lGAggASgJSAKIAQESpwEKDmRu",
            "c19lcnJvcl90eXBlGAEgASgOMowBLmdvb2dsZS5hZHMuZ29vZ2xlYWRzLnY4",
            "LmVudW1zLlBvbGljeVRvcGljRXZpZGVuY2VEZXN0aW5hdGlvbk5vdFdvcmtp",
            "bmdEbnNFcnJvclR5cGVFbnVtLlBvbGljeVRvcGljRXZpZGVuY2VEZXN0aW5h",
            "dGlvbk5vdFdvcmtpbmdEbnNFcnJvclR5cGVIABIZCg9odHRwX2Vycm9yX2Nv",
            "ZGUYBiABKANIAEIICgZyZWFzb25CDwoNX2V4cGFuZGVkX3VybEIZChdfbGFz",
            "dF9jaGVja2VkX2RhdGVfdGltZUIHCgV2YWx1ZSKVBgoVUG9saWN5VG9waWND",
            "b25zdHJhaW50Em4KF2NvdW50cnlfY29uc3RyYWludF9saXN0GAEgASgLMksu",
            "Z29vZ2xlLmFkcy5nb29nbGVhZHMudjguY29tbW9uLlBvbGljeVRvcGljQ29u",
            "c3RyYWludC5Db3VudHJ5Q29uc3RyYWludExpc3RIABJnChNyZXNlbGxlcl9j",
            "b25zdHJhaW50GAIgASgLMkguZ29vZ2xlLmFkcy5nb29nbGVhZHMudjguY29t",
            "bW9uLlBvbGljeVRvcGljQ29uc3RyYWludC5SZXNlbGxlckNvbnN0cmFpbnRI",
            "ABJ6CiNjZXJ0aWZpY2F0ZV9taXNzaW5nX2luX2NvdW50cnlfbGlzdBgDIAEo",
            "CzJLLmdvb2dsZS5hZHMuZ29vZ2xlYWRzLnY4LmNvbW1vbi5Qb2xpY3lUb3Bp",
            "Y0NvbnN0cmFpbnQuQ291bnRyeUNvbnN0cmFpbnRMaXN0SAASggEKK2NlcnRp",
            "ZmljYXRlX2RvbWFpbl9taXNtYXRjaF9pbl9jb3VudHJ5X2xpc3QYBCABKAsy",
            "Sy5nb29nbGUuYWRzLmdvb2dsZWFkcy52OC5jb21tb24uUG9saWN5VG9waWND",
            "b25zdHJhaW50LkNvdW50cnlDb25zdHJhaW50TGlzdEgAGrcBChVDb3VudHJ5",
            "Q29uc3RyYWludExpc3QSJQoYdG90YWxfdGFyZ2V0ZWRfY291bnRyaWVzGAMg",
            "ASgFSACIAQESWgoJY291bnRyaWVzGAIgAygLMkcuZ29vZ2xlLmFkcy5nb29n",
            "bGVhZHMudjguY29tbW9uLlBvbGljeVRvcGljQ29uc3RyYWludC5Db3VudHJ5",
            "Q29uc3RyYWludEIbChlfdG90YWxfdGFyZ2V0ZWRfY291bnRyaWVzGhQKElJl",
            "c2VsbGVyQ29uc3RyYWludBpJChFDb3VudHJ5Q29uc3RyYWludBIeChFjb3Vu",
            "dHJ5X2NyaXRlcmlvbhgCIAEoCUgAiAEBQhQKEl9jb3VudHJ5X2NyaXRlcmlv",
            "bkIHCgV2YWx1ZULmAQoiY29tLmdvb2dsZS5hZHMuZ29vZ2xlYWRzLnY4LmNv",
            "bW1vbkILUG9saWN5UHJvdG9QAVpEZ29vZ2xlLmdvbGFuZy5vcmcvZ2VucHJv",
            "dG8vZ29vZ2xlYXBpcy9hZHMvZ29vZ2xlYWRzL3Y4L2NvbW1vbjtjb21tb26i",
            "AgNHQUGqAh5Hb29nbGUuQWRzLkdvb2dsZUFkcy5WOC5Db21tb27KAh5Hb29n",
            "bGVcQWRzXEdvb2dsZUFkc1xWOFxDb21tb27qAiJHb29nbGU6OkFkczo6R29v",
            "Z2xlQWRzOjpWODo6Q29tbW9uYgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Google.Ads.GoogleAds.V8.Enums.PolicyTopicEntryTypeReflection.Descriptor, global::Google.Ads.GoogleAds.V8.Enums.PolicyTopicEvidenceDestinationMismatchUrlTypeReflection.Descriptor, global::Google.Ads.GoogleAds.V8.Enums.PolicyTopicEvidenceDestinationNotWorkingDeviceReflection.Descriptor, global::Google.Ads.GoogleAds.V8.Enums.PolicyTopicEvidenceDestinationNotWorkingDnsErrorTypeReflection.Descriptor, global::Google.Api.AnnotationsReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Ads.GoogleAds.V8.Common.PolicyViolationKey), global::Google.Ads.GoogleAds.V8.Common.PolicyViolationKey.Parser, new[]{ "PolicyName", "ViolatingText" }, new[]{ "PolicyName", "ViolatingText" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Ads.GoogleAds.V8.Common.PolicyValidationParameter), global::Google.Ads.GoogleAds.V8.Common.PolicyValidationParameter.Parser, new[]{ "IgnorablePolicyTopics", "ExemptPolicyViolationKeys" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Ads.GoogleAds.V8.Common.PolicyTopicEntry), global::Google.Ads.GoogleAds.V8.Common.PolicyTopicEntry.Parser, new[]{ "Topic", "Type", "Evidences", "Constraints" }, new[]{ "Topic" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Ads.GoogleAds.V8.Common.PolicyTopicEvidence), global::Google.Ads.GoogleAds.V8.Common.PolicyTopicEvidence.Parser, new[]{ "WebsiteList", "TextList", "LanguageCode", "DestinationTextList", "DestinationMismatch", "DestinationNotWorking" }, new[]{ "Value" }, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Google.Ads.GoogleAds.V8.Common.PolicyTopicEvidence.Types.TextList), global::Google.Ads.GoogleAds.V8.Common.PolicyTopicEvidence.Types.TextList.Parser, new[]{ "Texts" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Ads.GoogleAds.V8.Common.PolicyTopicEvidence.Types.WebsiteList), global::Google.Ads.GoogleAds.V8.Common.PolicyTopicEvidence.Types.WebsiteList.Parser, new[]{ "Websites" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Ads.GoogleAds.V8.Common.PolicyTopicEvidence.Types.DestinationTextList), global::Google.Ads.GoogleAds.V8.Common.PolicyTopicEvidence.Types.DestinationTextList.Parser, new[]{ "DestinationTexts" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Ads.GoogleAds.V8.Common.PolicyTopicEvidence.Types.DestinationMismatch), global::Google.Ads.GoogleAds.V8.Common.PolicyTopicEvidence.Types.DestinationMismatch.Parser, new[]{ "UrlTypes" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Ads.GoogleAds.V8.Common.PolicyTopicEvidence.Types.DestinationNotWorking), global::Google.Ads.GoogleAds.V8.Common.PolicyTopicEvidence.Types.DestinationNotWorking.Parser, new[]{ "ExpandedUrl", "Device", "LastCheckedDateTime", "DnsErrorType", "HttpErrorCode" }, new[]{ "Reason", "ExpandedUrl", "LastCheckedDateTime" }, null, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Ads.GoogleAds.V8.Common.PolicyTopicConstraint), global::Google.Ads.GoogleAds.V8.Common.PolicyTopicConstraint.Parser, new[]{ "CountryConstraintList", "ResellerConstraint", "CertificateMissingInCountryList", "CertificateDomainMismatchInCountryList" }, new[]{ "Value" }, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Google.Ads.GoogleAds.V8.Common.PolicyTopicConstraint.Types.CountryConstraintList), global::Google.Ads.GoogleAds.V8.Common.PolicyTopicConstraint.Types.CountryConstraintList.Parser, new[]{ "TotalTargetedCountries", "Countries" }, new[]{ "TotalTargetedCountries" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Ads.GoogleAds.V8.Common.PolicyTopicConstraint.Types.ResellerConstraint), global::Google.Ads.GoogleAds.V8.Common.PolicyTopicConstraint.Types.ResellerConstraint.Parser, null, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Ads.GoogleAds.V8.Common.PolicyTopicConstraint.Types.CountryConstraint), global::Google.Ads.GoogleAds.V8.Common.PolicyTopicConstraint.Types.CountryConstraint.Parser, new[]{ "CountryCriterion" }, new[]{ "CountryCriterion" }, null, null, null)})
          }));
    }
    #endregion

  }
  #region Messages
  /// <summary>
  /// Key of the violation. The key is used for referring to a violation
  /// when filing an exemption request.
  /// </summary>
  public sealed partial class PolicyViolationKey : pb::IMessage<PolicyViolationKey>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<PolicyViolationKey> _parser = new pb::MessageParser<PolicyViolationKey>(() => new PolicyViolationKey());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PolicyViolationKey> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Ads.GoogleAds.V8.Common.PolicyReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PolicyViolationKey() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PolicyViolationKey(PolicyViolationKey other) : this() {
      policyName_ = other.policyName_;
      violatingText_ = other.violatingText_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PolicyViolationKey Clone() {
      return new PolicyViolationKey(this);
    }

    /// <summary>Field number for the "policy_name" field.</summary>
    public const int PolicyNameFieldNumber = 3;
    private string policyName_;
    /// <summary>
    /// Unique ID of the violated policy.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PolicyName {
      get { return policyName_ ?? ""; }
      set {
        policyName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "policy_name" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasPolicyName {
      get { return policyName_ != null; }
    }
    /// <summary>Clears the value of the "policy_name" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearPolicyName() {
      policyName_ = null;
    }

    /// <summary>Field number for the "violating_text" field.</summary>
    public const int ViolatingTextFieldNumber = 4;
    private string violatingText_;
    /// <summary>
    /// The text that violates the policy if specified.
    /// Otherwise, refers to the policy in general
    /// (e.g., when requesting to be exempt from the whole policy).
    /// If not specified for criterion exemptions, the whole policy is implied.
    /// Must be specified for ad exemptions.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ViolatingText {
      get { return violatingText_ ?? ""; }
      set {
        violatingText_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "violating_text" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasViolatingText {
      get { return violatingText_ != null; }
    }
    /// <summary>Clears the value of the "violating_text" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearViolatingText() {
      violatingText_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PolicyViolationKey);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PolicyViolationKey other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (PolicyName != other.PolicyName) return false;
      if (ViolatingText != other.ViolatingText) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasPolicyName) hash ^= PolicyName.GetHashCode();
      if (HasViolatingText) hash ^= ViolatingText.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasPolicyName) {
        output.WriteRawTag(26);
        output.WriteString(PolicyName);
      }
      if (HasViolatingText) {
        output.WriteRawTag(34);
        output.WriteString(ViolatingText);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasPolicyName) {
        output.WriteRawTag(26);
        output.WriteString(PolicyName);
      }
      if (HasViolatingText) {
        output.WriteRawTag(34);
        output.WriteString(ViolatingText);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasPolicyName) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PolicyName);
      }
      if (HasViolatingText) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ViolatingText);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PolicyViolationKey other) {
      if (other == null) {
        return;
      }
      if (other.HasPolicyName) {
        PolicyName = other.PolicyName;
      }
      if (other.HasViolatingText) {
        ViolatingText = other.ViolatingText;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 26: {
            PolicyName = input.ReadString();
            break;
          }
          case 34: {
            ViolatingText = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 26: {
            PolicyName = input.ReadString();
            break;
          }
          case 34: {
            ViolatingText = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// Parameter for controlling how policy exemption is done.
  /// </summary>
  public sealed partial class PolicyValidationParameter : pb::IMessage<PolicyValidationParameter>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<PolicyValidationParameter> _parser = new pb::MessageParser<PolicyValidationParameter>(() => new PolicyValidationParameter());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PolicyValidationParameter> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Ads.GoogleAds.V8.Common.PolicyReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PolicyValidationParameter() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PolicyValidationParameter(PolicyValidationParameter other) : this() {
      ignorablePolicyTopics_ = other.ignorablePolicyTopics_.Clone();
      exemptPolicyViolationKeys_ = other.exemptPolicyViolationKeys_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PolicyValidationParameter Clone() {
      return new PolicyValidationParameter(this);
    }

    /// <summary>Field number for the "ignorable_policy_topics" field.</summary>
    public const int IgnorablePolicyTopicsFieldNumber = 3;
    private static readonly pb::FieldCodec<string> _repeated_ignorablePolicyTopics_codec
        = pb::FieldCodec.ForString(26);
    private readonly pbc::RepeatedField<string> ignorablePolicyTopics_ = new pbc::RepeatedField<string>();
    /// <summary>
    /// The list of policy topics that should not cause a PolicyFindingError to
    /// be reported. This field is currently only compatible with Enhanced Text Ad.
    /// It corresponds to the PolicyTopicEntry.topic field.
    ///
    /// Resources violating these policies will be saved, but will not be eligible
    /// to serve. They may begin serving at a later time due to a change in
    /// policies, re-review of the resource, or a change in advertiser
    /// certificates.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> IgnorablePolicyTopics {
      get { return ignorablePolicyTopics_; }
    }

    /// <summary>Field number for the "exempt_policy_violation_keys" field.</summary>
    public const int ExemptPolicyViolationKeysFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Google.Ads.GoogleAds.V8.Common.PolicyViolationKey> _repeated_exemptPolicyViolationKeys_codec
        = pb::FieldCodec.ForMessage(18, global::Google.Ads.GoogleAds.V8.Common.PolicyViolationKey.Parser);
    private readonly pbc::RepeatedField<global::Google.Ads.GoogleAds.V8.Common.PolicyViolationKey> exemptPolicyViolationKeys_ = new pbc::RepeatedField<global::Google.Ads.GoogleAds.V8.Common.PolicyViolationKey>();
    /// <summary>
    /// The list of policy violation keys that should not cause a
    /// PolicyViolationError to be reported. Not all policy violations are
    /// exemptable, please refer to the is_exemptible field in the returned
    /// PolicyViolationError.
    ///
    /// Resources violating these polices will be saved, but will not be eligible
    /// to serve. They may begin serving at a later time due to a change in
    /// policies, re-review of the resource, or a change in advertiser
    /// certificates.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Google.Ads.GoogleAds.V8.Common.PolicyViolationKey> ExemptPolicyViolationKeys {
      get { return exemptPolicyViolationKeys_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PolicyValidationParameter);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PolicyValidationParameter other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!ignorablePolicyTopics_.Equals(other.ignorablePolicyTopics_)) return false;
      if(!exemptPolicyViolationKeys_.Equals(other.exemptPolicyViolationKeys_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= ignorablePolicyTopics_.GetHashCode();
      hash ^= exemptPolicyViolationKeys_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      exemptPolicyViolationKeys_.WriteTo(output, _repeated_exemptPolicyViolationKeys_codec);
      ignorablePolicyTopics_.WriteTo(output, _repeated_ignorablePolicyTopics_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      exemptPolicyViolationKeys_.WriteTo(ref output, _repeated_exemptPolicyViolationKeys_codec);
      ignorablePolicyTopics_.WriteTo(ref output, _repeated_ignorablePolicyTopics_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += ignorablePolicyTopics_.CalculateSize(_repeated_ignorablePolicyTopics_codec);
      size += exemptPolicyViolationKeys_.CalculateSize(_repeated_exemptPolicyViolationKeys_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PolicyValidationParameter other) {
      if (other == null) {
        return;
      }
      ignorablePolicyTopics_.Add(other.ignorablePolicyTopics_);
      exemptPolicyViolationKeys_.Add(other.exemptPolicyViolationKeys_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 18: {
            exemptPolicyViolationKeys_.AddEntriesFrom(input, _repeated_exemptPolicyViolationKeys_codec);
            break;
          }
          case 26: {
            ignorablePolicyTopics_.AddEntriesFrom(input, _repeated_ignorablePolicyTopics_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 18: {
            exemptPolicyViolationKeys_.AddEntriesFrom(ref input, _repeated_exemptPolicyViolationKeys_codec);
            break;
          }
          case 26: {
            ignorablePolicyTopics_.AddEntriesFrom(ref input, _repeated_ignorablePolicyTopics_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// Policy finding attached to a resource (e.g. alcohol policy associated with
  /// a site that sells alcohol).
  ///
  /// Each PolicyTopicEntry has a topic that indicates the specific ads policy
  /// the entry is about and a type to indicate the effect that the entry will have
  /// on serving. It may optionally have one or more evidences that indicate the
  /// reason for the finding. It may also optionally have one or more constraints
  /// that provide details about how serving may be restricted.
  /// </summary>
  public sealed partial class PolicyTopicEntry : pb::IMessage<PolicyTopicEntry>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<PolicyTopicEntry> _parser = new pb::MessageParser<PolicyTopicEntry>(() => new PolicyTopicEntry());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PolicyTopicEntry> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Ads.GoogleAds.V8.Common.PolicyReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PolicyTopicEntry() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PolicyTopicEntry(PolicyTopicEntry other) : this() {
      topic_ = other.topic_;
      type_ = other.type_;
      evidences_ = other.evidences_.Clone();
      constraints_ = other.constraints_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PolicyTopicEntry Clone() {
      return new PolicyTopicEntry(this);
    }

    /// <summary>Field number for the "topic" field.</summary>
    public const int TopicFieldNumber = 5;
    private string topic_;
    /// <summary>
    /// Policy topic this finding refers to. For example, "ALCOHOL",
    /// "TRADEMARKS_IN_AD_TEXT", or "DESTINATION_NOT_WORKING". The set of possible
    /// policy topics is not fixed for a particular API version and may change
    /// at any time.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Topic {
      get { return topic_ ?? ""; }
      set {
        topic_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "topic" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasTopic {
      get { return topic_ != null; }
    }
    /// <summary>Clears the value of the "topic" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearTopic() {
      topic_ = null;
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 2;
    private global::Google.Ads.GoogleAds.V8.Enums.PolicyTopicEntryTypeEnum.Types.PolicyTopicEntryType type_ = global::Google.Ads.GoogleAds.V8.Enums.PolicyTopicEntryTypeEnum.Types.PolicyTopicEntryType.Unspecified;
    /// <summary>
    /// Describes the negative or positive effect this policy will have on serving.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Ads.GoogleAds.V8.Enums.PolicyTopicEntryTypeEnum.Types.PolicyTopicEntryType Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    /// <summary>Field number for the "evidences" field.</summary>
    public const int EvidencesFieldNumber = 3;
    private static readonly pb::FieldCodec<global::Google.Ads.GoogleAds.V8.Common.PolicyTopicEvidence> _repeated_evidences_codec
        = pb::FieldCodec.ForMessage(26, global::Google.Ads.GoogleAds.V8.Common.PolicyTopicEvidence.Parser);
    private readonly pbc::RepeatedField<global::Google.Ads.GoogleAds.V8.Common.PolicyTopicEvidence> evidences_ = new pbc::RepeatedField<global::Google.Ads.GoogleAds.V8.Common.PolicyTopicEvidence>();
    /// <summary>
    /// Additional information that explains policy finding
    /// (e.g. the brand name for a trademark finding).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Google.Ads.GoogleAds.V8.Common.PolicyTopicEvidence> Evidences {
      get { return evidences_; }
    }

    /// <summary>Field number for the "constraints" field.</summary>
    public const int ConstraintsFieldNumber = 4;
    private static readonly pb::FieldCodec<global::Google.Ads.GoogleAds.V8.Common.PolicyTopicConstraint> _repeated_constraints_codec
        = pb::FieldCodec.ForMessage(34, global::Google.Ads.GoogleAds.V8.Common.PolicyTopicConstraint.Parser);
    private readonly pbc::RepeatedField<global::Google.Ads.GoogleAds.V8.Common.PolicyTopicConstraint> constraints_ = new pbc::RepeatedField<global::Google.Ads.GoogleAds.V8.Common.PolicyTopicConstraint>();
    /// <summary>
    /// Indicates how serving of this resource may be affected (e.g. not serving
    /// in a country).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Google.Ads.GoogleAds.V8.Common.PolicyTopicConstraint> Constraints {
      get { return constraints_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PolicyTopicEntry);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PolicyTopicEntry other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Topic != other.Topic) return false;
      if (Type != other.Type) return false;
      if(!evidences_.Equals(other.evidences_)) return false;
      if(!constraints_.Equals(other.constraints_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasTopic) hash ^= Topic.GetHashCode();
      if (Type != global::Google.Ads.GoogleAds.V8.Enums.PolicyTopicEntryTypeEnum.Types.PolicyTopicEntryType.Unspecified) hash ^= Type.GetHashCode();
      hash ^= evidences_.GetHashCode();
      hash ^= constraints_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Type != global::Google.Ads.GoogleAds.V8.Enums.PolicyTopicEntryTypeEnum.Types.PolicyTopicEntryType.Unspecified) {
        output.WriteRawTag(16);
        output.WriteEnum((int) Type);
      }
      evidences_.WriteTo(output, _repeated_evidences_codec);
      constraints_.WriteTo(output, _repeated_constraints_codec);
      if (HasTopic) {
        output.WriteRawTag(42);
        output.WriteString(Topic);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Type != global::Google.Ads.GoogleAds.V8.Enums.PolicyTopicEntryTypeEnum.Types.PolicyTopicEntryType.Unspecified) {
        output.WriteRawTag(16);
        output.WriteEnum((int) Type);
      }
      evidences_.WriteTo(ref output, _repeated_evidences_codec);
      constraints_.WriteTo(ref output, _repeated_constraints_codec);
      if (HasTopic) {
        output.WriteRawTag(42);
        output.WriteString(Topic);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasTopic) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Topic);
      }
      if (Type != global::Google.Ads.GoogleAds.V8.Enums.PolicyTopicEntryTypeEnum.Types.PolicyTopicEntryType.Unspecified) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Type);
      }
      size += evidences_.CalculateSize(_repeated_evidences_codec);
      size += constraints_.CalculateSize(_repeated_constraints_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PolicyTopicEntry other) {
      if (other == null) {
        return;
      }
      if (other.HasTopic) {
        Topic = other.Topic;
      }
      if (other.Type != global::Google.Ads.GoogleAds.V8.Enums.PolicyTopicEntryTypeEnum.Types.PolicyTopicEntryType.Unspecified) {
        Type = other.Type;
      }
      evidences_.Add(other.evidences_);
      constraints_.Add(other.constraints_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 16: {
            Type = (global::Google.Ads.GoogleAds.V8.Enums.PolicyTopicEntryTypeEnum.Types.PolicyTopicEntryType) input.ReadEnum();
            break;
          }
          case 26: {
            evidences_.AddEntriesFrom(input, _repeated_evidences_codec);
            break;
          }
          case 34: {
            constraints_.AddEntriesFrom(input, _repeated_constraints_codec);
            break;
          }
          case 42: {
            Topic = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 16: {
            Type = (global::Google.Ads.GoogleAds.V8.Enums.PolicyTopicEntryTypeEnum.Types.PolicyTopicEntryType) input.ReadEnum();
            break;
          }
          case 26: {
            evidences_.AddEntriesFrom(ref input, _repeated_evidences_codec);
            break;
          }
          case 34: {
            constraints_.AddEntriesFrom(ref input, _repeated_constraints_codec);
            break;
          }
          case 42: {
            Topic = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// Additional information that explains a policy finding.
  /// </summary>
  public sealed partial class PolicyTopicEvidence : pb::IMessage<PolicyTopicEvidence>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<PolicyTopicEvidence> _parser = new pb::MessageParser<PolicyTopicEvidence>(() => new PolicyTopicEvidence());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PolicyTopicEvidence> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Ads.GoogleAds.V8.Common.PolicyReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PolicyTopicEvidence() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PolicyTopicEvidence(PolicyTopicEvidence other) : this() {
      switch (other.ValueCase) {
        case ValueOneofCase.WebsiteList:
          WebsiteList = other.WebsiteList.Clone();
          break;
        case ValueOneofCase.TextList:
          TextList = other.TextList.Clone();
          break;
        case ValueOneofCase.LanguageCode:
          LanguageCode = other.LanguageCode;
          break;
        case ValueOneofCase.DestinationTextList:
          DestinationTextList = other.DestinationTextList.Clone();
          break;
        case ValueOneofCase.DestinationMismatch:
          DestinationMismatch = other.DestinationMismatch.Clone();
          break;
        case ValueOneofCase.DestinationNotWorking:
          DestinationNotWorking = other.DestinationNotWorking.Clone();
          break;
      }

      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PolicyTopicEvidence Clone() {
      return new PolicyTopicEvidence(this);
    }

    /// <summary>Field number for the "website_list" field.</summary>
    public const int WebsiteListFieldNumber = 3;
    /// <summary>
    /// List of websites linked with this resource.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Ads.GoogleAds.V8.Common.PolicyTopicEvidence.Types.WebsiteList WebsiteList {
      get { return valueCase_ == ValueOneofCase.WebsiteList ? (global::Google.Ads.GoogleAds.V8.Common.PolicyTopicEvidence.Types.WebsiteList) value_ : null; }
      set {
        value_ = value;
        valueCase_ = value == null ? ValueOneofCase.None : ValueOneofCase.WebsiteList;
      }
    }

    /// <summary>Field number for the "text_list" field.</summary>
    public const int TextListFieldNumber = 4;
    /// <summary>
    /// List of evidence found in the text of a resource.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Ads.GoogleAds.V8.Common.PolicyTopicEvidence.Types.TextList TextList {
      get { return valueCase_ == ValueOneofCase.TextList ? (global::Google.Ads.GoogleAds.V8.Common.PolicyTopicEvidence.Types.TextList) value_ : null; }
      set {
        value_ = value;
        valueCase_ = value == null ? ValueOneofCase.None : ValueOneofCase.TextList;
      }
    }

    /// <summary>Field number for the "language_code" field.</summary>
    public const int LanguageCodeFieldNumber = 9;
    /// <summary>
    /// The language the resource was detected to be written in.
    /// This is an IETF language tag such as "en-US".
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string LanguageCode {
      get { return valueCase_ == ValueOneofCase.LanguageCode ? (string) value_ : ""; }
      set {
        value_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
        valueCase_ = ValueOneofCase.LanguageCode;
      }
    }

    /// <summary>Field number for the "destination_text_list" field.</summary>
    public const int DestinationTextListFieldNumber = 6;
    /// <summary>
    /// The text in the destination of the resource that is causing a policy
    /// finding.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Ads.GoogleAds.V8.Common.PolicyTopicEvidence.Types.DestinationTextList DestinationTextList {
      get { return valueCase_ == ValueOneofCase.DestinationTextList ? (global::Google.Ads.GoogleAds.V8.Common.PolicyTopicEvidence.Types.DestinationTextList) value_ : null; }
      set {
        value_ = value;
        valueCase_ = value == null ? ValueOneofCase.None : ValueOneofCase.DestinationTextList;
      }
    }

    /// <summary>Field number for the "destination_mismatch" field.</summary>
    public const int DestinationMismatchFieldNumber = 7;
    /// <summary>
    /// Mismatch between the destinations of a resource's URLs.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Ads.GoogleAds.V8.Common.PolicyTopicEvidence.Types.DestinationMismatch DestinationMismatch {
      get { return valueCase_ == ValueOneofCase.DestinationMismatch ? (global::Google.Ads.GoogleAds.V8.Common.PolicyTopicEvidence.Types.DestinationMismatch) value_ : null; }
      set {
        value_ = value;
        valueCase_ = value == null ? ValueOneofCase.None : ValueOneofCase.DestinationMismatch;
      }
    }

    /// <summary>Field number for the "destination_not_working" field.</summary>
    public const int DestinationNotWorkingFieldNumber = 8;
    /// <summary>
    /// Details when the destination is returning an HTTP error code or isn't
    /// functional in all locations for commonly used devices.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Ads.GoogleAds.V8.Common.PolicyTopicEvidence.Types.DestinationNotWorking DestinationNotWorking {
      get { return valueCase_ == ValueOneofCase.DestinationNotWorking ? (global::Google.Ads.GoogleAds.V8.Common.PolicyTopicEvidence.Types.DestinationNotWorking) value_ : null; }
      set {
        value_ = value;
        valueCase_ = value == null ? ValueOneofCase.None : ValueOneofCase.DestinationNotWorking;
      }
    }

    private object value_;
    /// <summary>Enum of possible cases for the "value" oneof.</summary>
    public enum ValueOneofCase {
      None = 0,
      WebsiteList = 3,
      TextList = 4,
      LanguageCode = 9,
      DestinationTextList = 6,
      DestinationMismatch = 7,
      DestinationNotWorking = 8,
    }
    private ValueOneofCase valueCase_ = ValueOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ValueOneofCase ValueCase {
      get { return valueCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearValue() {
      valueCase_ = ValueOneofCase.None;
      value_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PolicyTopicEvidence);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PolicyTopicEvidence other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(WebsiteList, other.WebsiteList)) return false;
      if (!object.Equals(TextList, other.TextList)) return false;
      if (LanguageCode != other.LanguageCode) return false;
      if (!object.Equals(DestinationTextList, other.DestinationTextList)) return false;
      if (!object.Equals(DestinationMismatch, other.DestinationMismatch)) return false;
      if (!object.Equals(DestinationNotWorking, other.DestinationNotWorking)) return false;
      if (ValueCase != other.ValueCase) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (valueCase_ == ValueOneofCase.WebsiteList) hash ^= WebsiteList.GetHashCode();
      if (valueCase_ == ValueOneofCase.TextList) hash ^= TextList.GetHashCode();
      if (valueCase_ == ValueOneofCase.LanguageCode) hash ^= LanguageCode.GetHashCode();
      if (valueCase_ == ValueOneofCase.DestinationTextList) hash ^= DestinationTextList.GetHashCode();
      if (valueCase_ == ValueOneofCase.DestinationMismatch) hash ^= DestinationMismatch.GetHashCode();
      if (valueCase_ == ValueOneofCase.DestinationNotWorking) hash ^= DestinationNotWorking.GetHashCode();
      hash ^= (int) valueCase_;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (valueCase_ == ValueOneofCase.WebsiteList) {
        output.WriteRawTag(26);
        output.WriteMessage(WebsiteList);
      }
      if (valueCase_ == ValueOneofCase.TextList) {
        output.WriteRawTag(34);
        output.WriteMessage(TextList);
      }
      if (valueCase_ == ValueOneofCase.DestinationTextList) {
        output.WriteRawTag(50);
        output.WriteMessage(DestinationTextList);
      }
      if (valueCase_ == ValueOneofCase.DestinationMismatch) {
        output.WriteRawTag(58);
        output.WriteMessage(DestinationMismatch);
      }
      if (valueCase_ == ValueOneofCase.DestinationNotWorking) {
        output.WriteRawTag(66);
        output.WriteMessage(DestinationNotWorking);
      }
      if (valueCase_ == ValueOneofCase.LanguageCode) {
        output.WriteRawTag(74);
        output.WriteString(LanguageCode);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (valueCase_ == ValueOneofCase.WebsiteList) {
        output.WriteRawTag(26);
        output.WriteMessage(WebsiteList);
      }
      if (valueCase_ == ValueOneofCase.TextList) {
        output.WriteRawTag(34);
        output.WriteMessage(TextList);
      }
      if (valueCase_ == ValueOneofCase.DestinationTextList) {
        output.WriteRawTag(50);
        output.WriteMessage(DestinationTextList);
      }
      if (valueCase_ == ValueOneofCase.DestinationMismatch) {
        output.WriteRawTag(58);
        output.WriteMessage(DestinationMismatch);
      }
      if (valueCase_ == ValueOneofCase.DestinationNotWorking) {
        output.WriteRawTag(66);
        output.WriteMessage(DestinationNotWorking);
      }
      if (valueCase_ == ValueOneofCase.LanguageCode) {
        output.WriteRawTag(74);
        output.WriteString(LanguageCode);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (valueCase_ == ValueOneofCase.WebsiteList) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(WebsiteList);
      }
      if (valueCase_ == ValueOneofCase.TextList) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(TextList);
      }
      if (valueCase_ == ValueOneofCase.LanguageCode) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(LanguageCode);
      }
      if (valueCase_ == ValueOneofCase.DestinationTextList) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(DestinationTextList);
      }
      if (valueCase_ == ValueOneofCase.DestinationMismatch) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(DestinationMismatch);
      }
      if (valueCase_ == ValueOneofCase.DestinationNotWorking) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(DestinationNotWorking);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PolicyTopicEvidence other) {
      if (other == null) {
        return;
      }
      switch (other.ValueCase) {
        case ValueOneofCase.WebsiteList:
          if (WebsiteList == null) {
            WebsiteList = new global::Google.Ads.GoogleAds.V8.Common.PolicyTopicEvidence.Types.WebsiteList();
          }
          WebsiteList.MergeFrom(other.WebsiteList);
          break;
        case ValueOneofCase.TextList:
          if (TextList == null) {
            TextList = new global::Google.Ads.GoogleAds.V8.Common.PolicyTopicEvidence.Types.TextList();
          }
          TextList.MergeFrom(other.TextList);
          break;
        case ValueOneofCase.LanguageCode:
          LanguageCode = other.LanguageCode;
          break;
        case ValueOneofCase.DestinationTextList:
          if (DestinationTextList == null) {
            DestinationTextList = new global::Google.Ads.GoogleAds.V8.Common.PolicyTopicEvidence.Types.DestinationTextList();
          }
          DestinationTextList.MergeFrom(other.DestinationTextList);
          break;
        case ValueOneofCase.DestinationMismatch:
          if (DestinationMismatch == null) {
            DestinationMismatch = new global::Google.Ads.GoogleAds.V8.Common.PolicyTopicEvidence.Types.DestinationMismatch();
          }
          DestinationMismatch.MergeFrom(other.DestinationMismatch);
          break;
        case ValueOneofCase.DestinationNotWorking:
          if (DestinationNotWorking == null) {
            DestinationNotWorking = new global::Google.Ads.GoogleAds.V8.Common.PolicyTopicEvidence.Types.DestinationNotWorking();
          }
          DestinationNotWorking.MergeFrom(other.DestinationNotWorking);
          break;
      }

      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 26: {
            global::Google.Ads.GoogleAds.V8.Common.PolicyTopicEvidence.Types.WebsiteList subBuilder = new global::Google.Ads.GoogleAds.V8.Common.PolicyTopicEvidence.Types.WebsiteList();
            if (valueCase_ == ValueOneofCase.WebsiteList) {
              subBuilder.MergeFrom(WebsiteList);
            }
            input.ReadMessage(subBuilder);
            WebsiteList = subBuilder;
            break;
          }
          case 34: {
            global::Google.Ads.GoogleAds.V8.Common.PolicyTopicEvidence.Types.TextList subBuilder = new global::Google.Ads.GoogleAds.V8.Common.PolicyTopicEvidence.Types.TextList();
            if (valueCase_ == ValueOneofCase.TextList) {
              subBuilder.MergeFrom(TextList);
            }
            input.ReadMessage(subBuilder);
            TextList = subBuilder;
            break;
          }
          case 50: {
            global::Google.Ads.GoogleAds.V8.Common.PolicyTopicEvidence.Types.DestinationTextList subBuilder = new global::Google.Ads.GoogleAds.V8.Common.PolicyTopicEvidence.Types.DestinationTextList();
            if (valueCase_ == ValueOneofCase.DestinationTextList) {
              subBuilder.MergeFrom(DestinationTextList);
            }
            input.ReadMessage(subBuilder);
            DestinationTextList = subBuilder;
            break;
          }
          case 58: {
            global::Google.Ads.GoogleAds.V8.Common.PolicyTopicEvidence.Types.DestinationMismatch subBuilder = new global::Google.Ads.GoogleAds.V8.Common.PolicyTopicEvidence.Types.DestinationMismatch();
            if (valueCase_ == ValueOneofCase.DestinationMismatch) {
              subBuilder.MergeFrom(DestinationMismatch);
            }
            input.ReadMessage(subBuilder);
            DestinationMismatch = subBuilder;
            break;
          }
          case 66: {
            global::Google.Ads.GoogleAds.V8.Common.PolicyTopicEvidence.Types.DestinationNotWorking subBuilder = new global::Google.Ads.GoogleAds.V8.Common.PolicyTopicEvidence.Types.DestinationNotWorking();
            if (valueCase_ == ValueOneofCase.DestinationNotWorking) {
              subBuilder.MergeFrom(DestinationNotWorking);
            }
            input.ReadMessage(subBuilder);
            DestinationNotWorking = subBuilder;
            break;
          }
          case 74: {
            LanguageCode = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 26: {
            global::Google.Ads.GoogleAds.V8.Common.PolicyTopicEvidence.Types.WebsiteList subBuilder = new global::Google.Ads.GoogleAds.V8.Common.PolicyTopicEvidence.Types.WebsiteList();
            if (valueCase_ == ValueOneofCase.WebsiteList) {
              subBuilder.MergeFrom(WebsiteList);
            }
            input.ReadMessage(subBuilder);
            WebsiteList = subBuilder;
            break;
          }
          case 34: {
            global::Google.Ads.GoogleAds.V8.Common.PolicyTopicEvidence.Types.TextList subBuilder = new global::Google.Ads.GoogleAds.V8.Common.PolicyTopicEvidence.Types.TextList();
            if (valueCase_ == ValueOneofCase.TextList) {
              subBuilder.MergeFrom(TextList);
            }
            input.ReadMessage(subBuilder);
            TextList = subBuilder;
            break;
          }
          case 50: {
            global::Google.Ads.GoogleAds.V8.Common.PolicyTopicEvidence.Types.DestinationTextList subBuilder = new global::Google.Ads.GoogleAds.V8.Common.PolicyTopicEvidence.Types.DestinationTextList();
            if (valueCase_ == ValueOneofCase.DestinationTextList) {
              subBuilder.MergeFrom(DestinationTextList);
            }
            input.ReadMessage(subBuilder);
            DestinationTextList = subBuilder;
            break;
          }
          case 58: {
            global::Google.Ads.GoogleAds.V8.Common.PolicyTopicEvidence.Types.DestinationMismatch subBuilder = new global::Google.Ads.GoogleAds.V8.Common.PolicyTopicEvidence.Types.DestinationMismatch();
            if (valueCase_ == ValueOneofCase.DestinationMismatch) {
              subBuilder.MergeFrom(DestinationMismatch);
            }
            input.ReadMessage(subBuilder);
            DestinationMismatch = subBuilder;
            break;
          }
          case 66: {
            global::Google.Ads.GoogleAds.V8.Common.PolicyTopicEvidence.Types.DestinationNotWorking subBuilder = new global::Google.Ads.GoogleAds.V8.Common.PolicyTopicEvidence.Types.DestinationNotWorking();
            if (valueCase_ == ValueOneofCase.DestinationNotWorking) {
              subBuilder.MergeFrom(DestinationNotWorking);
            }
            input.ReadMessage(subBuilder);
            DestinationNotWorking = subBuilder;
            break;
          }
          case 74: {
            LanguageCode = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

    #region Nested types
    /// <summary>Container for nested types declared in the PolicyTopicEvidence message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      /// <summary>
      /// A list of fragments of text that violated a policy.
      /// </summary>
      public sealed partial class TextList : pb::IMessage<TextList>
      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          , pb::IBufferMessage
      #endif
      {
        private static readonly pb::MessageParser<TextList> _parser = new pb::MessageParser<TextList>(() => new TextList());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<TextList> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Google.Ads.GoogleAds.V8.Common.PolicyTopicEvidence.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public TextList() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public TextList(TextList other) : this() {
          texts_ = other.texts_.Clone();
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public TextList Clone() {
          return new TextList(this);
        }

        /// <summary>Field number for the "texts" field.</summary>
        public const int TextsFieldNumber = 2;
        private static readonly pb::FieldCodec<string> _repeated_texts_codec
            = pb::FieldCodec.ForString(18);
        private readonly pbc::RepeatedField<string> texts_ = new pbc::RepeatedField<string>();
        /// <summary>
        /// The fragments of text from the resource that caused the policy finding.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<string> Texts {
          get { return texts_; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as TextList);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(TextList other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if(!texts_.Equals(other.texts_)) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          hash ^= texts_.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          output.WriteRawMessage(this);
        #else
          texts_.WriteTo(output, _repeated_texts_codec);
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
          texts_.WriteTo(ref output, _repeated_texts_codec);
          if (_unknownFields != null) {
            _unknownFields.WriteTo(ref output);
          }
        }
        #endif

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          size += texts_.CalculateSize(_repeated_texts_codec);
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(TextList other) {
          if (other == null) {
            return;
          }
          texts_.Add(other.texts_);
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          input.ReadRawMessage(this);
        #else
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 18: {
                texts_.AddEntriesFrom(input, _repeated_texts_codec);
                break;
              }
            }
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
                break;
              case 18: {
                texts_.AddEntriesFrom(ref input, _repeated_texts_codec);
                break;
              }
            }
          }
        }
        #endif

      }

      /// <summary>
      /// A list of websites that caused a policy finding. Used for
      /// ONE_WEBSITE_PER_AD_GROUP policy topic, for example. In case there are more
      /// than five websites, only the top five (those that appear in resources the
      /// most) will be listed here.
      /// </summary>
      public sealed partial class WebsiteList : pb::IMessage<WebsiteList>
      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          , pb::IBufferMessage
      #endif
      {
        private static readonly pb::MessageParser<WebsiteList> _parser = new pb::MessageParser<WebsiteList>(() => new WebsiteList());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<WebsiteList> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Google.Ads.GoogleAds.V8.Common.PolicyTopicEvidence.Descriptor.NestedTypes[1]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public WebsiteList() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public WebsiteList(WebsiteList other) : this() {
          websites_ = other.websites_.Clone();
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public WebsiteList Clone() {
          return new WebsiteList(this);
        }

        /// <summary>Field number for the "websites" field.</summary>
        public const int WebsitesFieldNumber = 2;
        private static readonly pb::FieldCodec<string> _repeated_websites_codec
            = pb::FieldCodec.ForString(18);
        private readonly pbc::RepeatedField<string> websites_ = new pbc::RepeatedField<string>();
        /// <summary>
        /// Websites that caused the policy finding.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<string> Websites {
          get { return websites_; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as WebsiteList);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(WebsiteList other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if(!websites_.Equals(other.websites_)) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          hash ^= websites_.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          output.WriteRawMessage(this);
        #else
          websites_.WriteTo(output, _repeated_websites_codec);
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
          websites_.WriteTo(ref output, _repeated_websites_codec);
          if (_unknownFields != null) {
            _unknownFields.WriteTo(ref output);
          }
        }
        #endif

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          size += websites_.CalculateSize(_repeated_websites_codec);
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(WebsiteList other) {
          if (other == null) {
            return;
          }
          websites_.Add(other.websites_);
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          input.ReadRawMessage(this);
        #else
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 18: {
                websites_.AddEntriesFrom(input, _repeated_websites_codec);
                break;
              }
            }
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
                break;
              case 18: {
                websites_.AddEntriesFrom(ref input, _repeated_websites_codec);
                break;
              }
            }
          }
        }
        #endif

      }

      /// <summary>
      /// A list of strings found in a destination page that caused a policy
      /// finding.
      /// </summary>
      public sealed partial class DestinationTextList : pb::IMessage<DestinationTextList>
      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          , pb::IBufferMessage
      #endif
      {
        private static readonly pb::MessageParser<DestinationTextList> _parser = new pb::MessageParser<DestinationTextList>(() => new DestinationTextList());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<DestinationTextList> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Google.Ads.GoogleAds.V8.Common.PolicyTopicEvidence.Descriptor.NestedTypes[2]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public DestinationTextList() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public DestinationTextList(DestinationTextList other) : this() {
          destinationTexts_ = other.destinationTexts_.Clone();
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public DestinationTextList Clone() {
          return new DestinationTextList(this);
        }

        /// <summary>Field number for the "destination_texts" field.</summary>
        public const int DestinationTextsFieldNumber = 2;
        private static readonly pb::FieldCodec<string> _repeated_destinationTexts_codec
            = pb::FieldCodec.ForString(18);
        private readonly pbc::RepeatedField<string> destinationTexts_ = new pbc::RepeatedField<string>();
        /// <summary>
        /// List of text found in the resource's destination page.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<string> DestinationTexts {
          get { return destinationTexts_; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as DestinationTextList);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(DestinationTextList other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if(!destinationTexts_.Equals(other.destinationTexts_)) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          hash ^= destinationTexts_.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          output.WriteRawMessage(this);
        #else
          destinationTexts_.WriteTo(output, _repeated_destinationTexts_codec);
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
          destinationTexts_.WriteTo(ref output, _repeated_destinationTexts_codec);
          if (_unknownFields != null) {
            _unknownFields.WriteTo(ref output);
          }
        }
        #endif

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          size += destinationTexts_.CalculateSize(_repeated_destinationTexts_codec);
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(DestinationTextList other) {
          if (other == null) {
            return;
          }
          destinationTexts_.Add(other.destinationTexts_);
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          input.ReadRawMessage(this);
        #else
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 18: {
                destinationTexts_.AddEntriesFrom(input, _repeated_destinationTexts_codec);
                break;
              }
            }
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
                break;
              case 18: {
                destinationTexts_.AddEntriesFrom(ref input, _repeated_destinationTexts_codec);
                break;
              }
            }
          }
        }
        #endif

      }

      /// <summary>
      /// Evidence of mismatches between the URLs of a resource.
      /// </summary>
      public sealed partial class DestinationMismatch : pb::IMessage<DestinationMismatch>
      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          , pb::IBufferMessage
      #endif
      {
        private static readonly pb::MessageParser<DestinationMismatch> _parser = new pb::MessageParser<DestinationMismatch>(() => new DestinationMismatch());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<DestinationMismatch> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Google.Ads.GoogleAds.V8.Common.PolicyTopicEvidence.Descriptor.NestedTypes[3]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public DestinationMismatch() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public DestinationMismatch(DestinationMismatch other) : this() {
          urlTypes_ = other.urlTypes_.Clone();
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public DestinationMismatch Clone() {
          return new DestinationMismatch(this);
        }

        /// <summary>Field number for the "url_types" field.</summary>
        public const int UrlTypesFieldNumber = 1;
        private static readonly pb::FieldCodec<global::Google.Ads.GoogleAds.V8.Enums.PolicyTopicEvidenceDestinationMismatchUrlTypeEnum.Types.PolicyTopicEvidenceDestinationMismatchUrlType> _repeated_urlTypes_codec
            = pb::FieldCodec.ForEnum(10, x => (int) x, x => (global::Google.Ads.GoogleAds.V8.Enums.PolicyTopicEvidenceDestinationMismatchUrlTypeEnum.Types.PolicyTopicEvidenceDestinationMismatchUrlType) x);
        private readonly pbc::RepeatedField<global::Google.Ads.GoogleAds.V8.Enums.PolicyTopicEvidenceDestinationMismatchUrlTypeEnum.Types.PolicyTopicEvidenceDestinationMismatchUrlType> urlTypes_ = new pbc::RepeatedField<global::Google.Ads.GoogleAds.V8.Enums.PolicyTopicEvidenceDestinationMismatchUrlTypeEnum.Types.PolicyTopicEvidenceDestinationMismatchUrlType>();
        /// <summary>
        /// The set of URLs that did not match each other.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<global::Google.Ads.GoogleAds.V8.Enums.PolicyTopicEvidenceDestinationMismatchUrlTypeEnum.Types.PolicyTopicEvidenceDestinationMismatchUrlType> UrlTypes {
          get { return urlTypes_; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as DestinationMismatch);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(DestinationMismatch other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if(!urlTypes_.Equals(other.urlTypes_)) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          hash ^= urlTypes_.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          output.WriteRawMessage(this);
        #else
          urlTypes_.WriteTo(output, _repeated_urlTypes_codec);
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
          urlTypes_.WriteTo(ref output, _repeated_urlTypes_codec);
          if (_unknownFields != null) {
            _unknownFields.WriteTo(ref output);
          }
        }
        #endif

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          size += urlTypes_.CalculateSize(_repeated_urlTypes_codec);
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(DestinationMismatch other) {
          if (other == null) {
            return;
          }
          urlTypes_.Add(other.urlTypes_);
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          input.ReadRawMessage(this);
        #else
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10:
              case 8: {
                urlTypes_.AddEntriesFrom(input, _repeated_urlTypes_codec);
                break;
              }
            }
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
                break;
              case 10:
              case 8: {
                urlTypes_.AddEntriesFrom(ref input, _repeated_urlTypes_codec);
                break;
              }
            }
          }
        }
        #endif

      }

      /// <summary>
      /// Evidence details when the destination is returning an HTTP error
      /// code or isn't functional in all locations for commonly used devices.
      /// </summary>
      public sealed partial class DestinationNotWorking : pb::IMessage<DestinationNotWorking>
      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          , pb::IBufferMessage
      #endif
      {
        private static readonly pb::MessageParser<DestinationNotWorking> _parser = new pb::MessageParser<DestinationNotWorking>(() => new DestinationNotWorking());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<DestinationNotWorking> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Google.Ads.GoogleAds.V8.Common.PolicyTopicEvidence.Descriptor.NestedTypes[4]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public DestinationNotWorking() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public DestinationNotWorking(DestinationNotWorking other) : this() {
          expandedUrl_ = other.expandedUrl_;
          device_ = other.device_;
          lastCheckedDateTime_ = other.lastCheckedDateTime_;
          switch (other.ReasonCase) {
            case ReasonOneofCase.DnsErrorType:
              DnsErrorType = other.DnsErrorType;
              break;
            case ReasonOneofCase.HttpErrorCode:
              HttpErrorCode = other.HttpErrorCode;
              break;
          }

          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public DestinationNotWorking Clone() {
          return new DestinationNotWorking(this);
        }

        /// <summary>Field number for the "expanded_url" field.</summary>
        public const int ExpandedUrlFieldNumber = 7;
        private string expandedUrl_;
        /// <summary>
        /// The full URL that didn't work.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string ExpandedUrl {
          get { return expandedUrl_ ?? ""; }
          set {
            expandedUrl_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }
        /// <summary>Gets whether the "expanded_url" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasExpandedUrl {
          get { return expandedUrl_ != null; }
        }
        /// <summary>Clears the value of the "expanded_url" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearExpandedUrl() {
          expandedUrl_ = null;
        }

        /// <summary>Field number for the "device" field.</summary>
        public const int DeviceFieldNumber = 4;
        private global::Google.Ads.GoogleAds.V8.Enums.PolicyTopicEvidenceDestinationNotWorkingDeviceEnum.Types.PolicyTopicEvidenceDestinationNotWorkingDevice device_ = global::Google.Ads.GoogleAds.V8.Enums.PolicyTopicEvidenceDestinationNotWorkingDeviceEnum.Types.PolicyTopicEvidenceDestinationNotWorkingDevice.Unspecified;
        /// <summary>
        /// The type of device that failed to load the URL.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Google.Ads.GoogleAds.V8.Enums.PolicyTopicEvidenceDestinationNotWorkingDeviceEnum.Types.PolicyTopicEvidenceDestinationNotWorkingDevice Device {
          get { return device_; }
          set {
            device_ = value;
          }
        }

        /// <summary>Field number for the "last_checked_date_time" field.</summary>
        public const int LastCheckedDateTimeFieldNumber = 8;
        private string lastCheckedDateTime_;
        /// <summary>
        /// The time the URL was last checked.
        /// The format is "YYYY-MM-DD HH:MM:SS".
        /// Examples: "2018-03-05 09:15:00" or "2018-02-01 14:34:30"
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string LastCheckedDateTime {
          get { return lastCheckedDateTime_ ?? ""; }
          set {
            lastCheckedDateTime_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }
        /// <summary>Gets whether the "last_checked_date_time" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasLastCheckedDateTime {
          get { return lastCheckedDateTime_ != null; }
        }
        /// <summary>Clears the value of the "last_checked_date_time" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearLastCheckedDateTime() {
          lastCheckedDateTime_ = null;
        }

        /// <summary>Field number for the "dns_error_type" field.</summary>
        public const int DnsErrorTypeFieldNumber = 1;
        /// <summary>
        /// The type of DNS error.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Google.Ads.GoogleAds.V8.Enums.PolicyTopicEvidenceDestinationNotWorkingDnsErrorTypeEnum.Types.PolicyTopicEvidenceDestinationNotWorkingDnsErrorType DnsErrorType {
          get { return reasonCase_ == ReasonOneofCase.DnsErrorType ? (global::Google.Ads.GoogleAds.V8.Enums.PolicyTopicEvidenceDestinationNotWorkingDnsErrorTypeEnum.Types.PolicyTopicEvidenceDestinationNotWorkingDnsErrorType) reason_ : global::Google.Ads.GoogleAds.V8.Enums.PolicyTopicEvidenceDestinationNotWorkingDnsErrorTypeEnum.Types.PolicyTopicEvidenceDestinationNotWorkingDnsErrorType.Unspecified; }
          set {
            reason_ = value;
            reasonCase_ = ReasonOneofCase.DnsErrorType;
          }
        }

        /// <summary>Field number for the "http_error_code" field.</summary>
        public const int HttpErrorCodeFieldNumber = 6;
        /// <summary>
        /// The HTTP error code.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public long HttpErrorCode {
          get { return reasonCase_ == ReasonOneofCase.HttpErrorCode ? (long) reason_ : 0L; }
          set {
            reason_ = value;
            reasonCase_ = ReasonOneofCase.HttpErrorCode;
          }
        }

        private object reason_;
        /// <summary>Enum of possible cases for the "reason" oneof.</summary>
        public enum ReasonOneofCase {
          None = 0,
          DnsErrorType = 1,
          HttpErrorCode = 6,
        }
        private ReasonOneofCase reasonCase_ = ReasonOneofCase.None;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ReasonOneofCase ReasonCase {
          get { return reasonCase_; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearReason() {
          reasonCase_ = ReasonOneofCase.None;
          reason_ = null;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as DestinationNotWorking);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(DestinationNotWorking other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (ExpandedUrl != other.ExpandedUrl) return false;
          if (Device != other.Device) return false;
          if (LastCheckedDateTime != other.LastCheckedDateTime) return false;
          if (DnsErrorType != other.DnsErrorType) return false;
          if (HttpErrorCode != other.HttpErrorCode) return false;
          if (ReasonCase != other.ReasonCase) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (HasExpandedUrl) hash ^= ExpandedUrl.GetHashCode();
          if (Device != global::Google.Ads.GoogleAds.V8.Enums.PolicyTopicEvidenceDestinationNotWorkingDeviceEnum.Types.PolicyTopicEvidenceDestinationNotWorkingDevice.Unspecified) hash ^= Device.GetHashCode();
          if (HasLastCheckedDateTime) hash ^= LastCheckedDateTime.GetHashCode();
          if (reasonCase_ == ReasonOneofCase.DnsErrorType) hash ^= DnsErrorType.GetHashCode();
          if (reasonCase_ == ReasonOneofCase.HttpErrorCode) hash ^= HttpErrorCode.GetHashCode();
          hash ^= (int) reasonCase_;
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          output.WriteRawMessage(this);
        #else
          if (reasonCase_ == ReasonOneofCase.DnsErrorType) {
            output.WriteRawTag(8);
            output.WriteEnum((int) DnsErrorType);
          }
          if (Device != global::Google.Ads.GoogleAds.V8.Enums.PolicyTopicEvidenceDestinationNotWorkingDeviceEnum.Types.PolicyTopicEvidenceDestinationNotWorkingDevice.Unspecified) {
            output.WriteRawTag(32);
            output.WriteEnum((int) Device);
          }
          if (reasonCase_ == ReasonOneofCase.HttpErrorCode) {
            output.WriteRawTag(48);
            output.WriteInt64(HttpErrorCode);
          }
          if (HasExpandedUrl) {
            output.WriteRawTag(58);
            output.WriteString(ExpandedUrl);
          }
          if (HasLastCheckedDateTime) {
            output.WriteRawTag(66);
            output.WriteString(LastCheckedDateTime);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
          if (reasonCase_ == ReasonOneofCase.DnsErrorType) {
            output.WriteRawTag(8);
            output.WriteEnum((int) DnsErrorType);
          }
          if (Device != global::Google.Ads.GoogleAds.V8.Enums.PolicyTopicEvidenceDestinationNotWorkingDeviceEnum.Types.PolicyTopicEvidenceDestinationNotWorkingDevice.Unspecified) {
            output.WriteRawTag(32);
            output.WriteEnum((int) Device);
          }
          if (reasonCase_ == ReasonOneofCase.HttpErrorCode) {
            output.WriteRawTag(48);
            output.WriteInt64(HttpErrorCode);
          }
          if (HasExpandedUrl) {
            output.WriteRawTag(58);
            output.WriteString(ExpandedUrl);
          }
          if (HasLastCheckedDateTime) {
            output.WriteRawTag(66);
            output.WriteString(LastCheckedDateTime);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(ref output);
          }
        }
        #endif

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (HasExpandedUrl) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(ExpandedUrl);
          }
          if (Device != global::Google.Ads.GoogleAds.V8.Enums.PolicyTopicEvidenceDestinationNotWorkingDeviceEnum.Types.PolicyTopicEvidenceDestinationNotWorkingDevice.Unspecified) {
            size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Device);
          }
          if (HasLastCheckedDateTime) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(LastCheckedDateTime);
          }
          if (reasonCase_ == ReasonOneofCase.DnsErrorType) {
            size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) DnsErrorType);
          }
          if (reasonCase_ == ReasonOneofCase.HttpErrorCode) {
            size += 1 + pb::CodedOutputStream.ComputeInt64Size(HttpErrorCode);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(DestinationNotWorking other) {
          if (other == null) {
            return;
          }
          if (other.HasExpandedUrl) {
            ExpandedUrl = other.ExpandedUrl;
          }
          if (other.Device != global::Google.Ads.GoogleAds.V8.Enums.PolicyTopicEvidenceDestinationNotWorkingDeviceEnum.Types.PolicyTopicEvidenceDestinationNotWorkingDevice.Unspecified) {
            Device = other.Device;
          }
          if (other.HasLastCheckedDateTime) {
            LastCheckedDateTime = other.LastCheckedDateTime;
          }
          switch (other.ReasonCase) {
            case ReasonOneofCase.DnsErrorType:
              DnsErrorType = other.DnsErrorType;
              break;
            case ReasonOneofCase.HttpErrorCode:
              HttpErrorCode = other.HttpErrorCode;
              break;
          }

          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          input.ReadRawMessage(this);
        #else
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 8: {
                reason_ = input.ReadEnum();
                reasonCase_ = ReasonOneofCase.DnsErrorType;
                break;
              }
              case 32: {
                Device = (global::Google.Ads.GoogleAds.V8.Enums.PolicyTopicEvidenceDestinationNotWorkingDeviceEnum.Types.PolicyTopicEvidenceDestinationNotWorkingDevice) input.ReadEnum();
                break;
              }
              case 48: {
                HttpErrorCode = input.ReadInt64();
                break;
              }
              case 58: {
                ExpandedUrl = input.ReadString();
                break;
              }
              case 66: {
                LastCheckedDateTime = input.ReadString();
                break;
              }
            }
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
                break;
              case 8: {
                reason_ = input.ReadEnum();
                reasonCase_ = ReasonOneofCase.DnsErrorType;
                break;
              }
              case 32: {
                Device = (global::Google.Ads.GoogleAds.V8.Enums.PolicyTopicEvidenceDestinationNotWorkingDeviceEnum.Types.PolicyTopicEvidenceDestinationNotWorkingDevice) input.ReadEnum();
                break;
              }
              case 48: {
                HttpErrorCode = input.ReadInt64();
                break;
              }
              case 58: {
                ExpandedUrl = input.ReadString();
                break;
              }
              case 66: {
                LastCheckedDateTime = input.ReadString();
                break;
              }
            }
          }
        }
        #endif

      }

    }
    #endregion

  }

  /// <summary>
  /// Describes the effect on serving that a policy topic entry will have.
  /// </summary>
  public sealed partial class PolicyTopicConstraint : pb::IMessage<PolicyTopicConstraint>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<PolicyTopicConstraint> _parser = new pb::MessageParser<PolicyTopicConstraint>(() => new PolicyTopicConstraint());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PolicyTopicConstraint> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Ads.GoogleAds.V8.Common.PolicyReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PolicyTopicConstraint() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PolicyTopicConstraint(PolicyTopicConstraint other) : this() {
      switch (other.ValueCase) {
        case ValueOneofCase.CountryConstraintList:
          CountryConstraintList = other.CountryConstraintList.Clone();
          break;
        case ValueOneofCase.ResellerConstraint:
          ResellerConstraint = other.ResellerConstraint.Clone();
          break;
        case ValueOneofCase.CertificateMissingInCountryList:
          CertificateMissingInCountryList = other.CertificateMissingInCountryList.Clone();
          break;
        case ValueOneofCase.CertificateDomainMismatchInCountryList:
          CertificateDomainMismatchInCountryList = other.CertificateDomainMismatchInCountryList.Clone();
          break;
      }

      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PolicyTopicConstraint Clone() {
      return new PolicyTopicConstraint(this);
    }

    /// <summary>Field number for the "country_constraint_list" field.</summary>
    public const int CountryConstraintListFieldNumber = 1;
    /// <summary>
    /// Countries where the resource cannot serve.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Ads.GoogleAds.V8.Common.PolicyTopicConstraint.Types.CountryConstraintList CountryConstraintList {
      get { return valueCase_ == ValueOneofCase.CountryConstraintList ? (global::Google.Ads.GoogleAds.V8.Common.PolicyTopicConstraint.Types.CountryConstraintList) value_ : null; }
      set {
        value_ = value;
        valueCase_ = value == null ? ValueOneofCase.None : ValueOneofCase.CountryConstraintList;
      }
    }

    /// <summary>Field number for the "reseller_constraint" field.</summary>
    public const int ResellerConstraintFieldNumber = 2;
    /// <summary>
    /// Reseller constraint.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Ads.GoogleAds.V8.Common.PolicyTopicConstraint.Types.ResellerConstraint ResellerConstraint {
      get { return valueCase_ == ValueOneofCase.ResellerConstraint ? (global::Google.Ads.GoogleAds.V8.Common.PolicyTopicConstraint.Types.ResellerConstraint) value_ : null; }
      set {
        value_ = value;
        valueCase_ = value == null ? ValueOneofCase.None : ValueOneofCase.ResellerConstraint;
      }
    }

    /// <summary>Field number for the "certificate_missing_in_country_list" field.</summary>
    public const int CertificateMissingInCountryListFieldNumber = 3;
    /// <summary>
    /// Countries where a certificate is required for serving.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Ads.GoogleAds.V8.Common.PolicyTopicConstraint.Types.CountryConstraintList CertificateMissingInCountryList {
      get { return valueCase_ == ValueOneofCase.CertificateMissingInCountryList ? (global::Google.Ads.GoogleAds.V8.Common.PolicyTopicConstraint.Types.CountryConstraintList) value_ : null; }
      set {
        value_ = value;
        valueCase_ = value == null ? ValueOneofCase.None : ValueOneofCase.CertificateMissingInCountryList;
      }
    }

    /// <summary>Field number for the "certificate_domain_mismatch_in_country_list" field.</summary>
    public const int CertificateDomainMismatchInCountryListFieldNumber = 4;
    /// <summary>
    /// Countries where the resource's domain is not covered by the
    /// certificates associated with it.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Ads.GoogleAds.V8.Common.PolicyTopicConstraint.Types.CountryConstraintList CertificateDomainMismatchInCountryList {
      get { return valueCase_ == ValueOneofCase.CertificateDomainMismatchInCountryList ? (global::Google.Ads.GoogleAds.V8.Common.PolicyTopicConstraint.Types.CountryConstraintList) value_ : null; }
      set {
        value_ = value;
        valueCase_ = value == null ? ValueOneofCase.None : ValueOneofCase.CertificateDomainMismatchInCountryList;
      }
    }

    private object value_;
    /// <summary>Enum of possible cases for the "value" oneof.</summary>
    public enum ValueOneofCase {
      None = 0,
      CountryConstraintList = 1,
      ResellerConstraint = 2,
      CertificateMissingInCountryList = 3,
      CertificateDomainMismatchInCountryList = 4,
    }
    private ValueOneofCase valueCase_ = ValueOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ValueOneofCase ValueCase {
      get { return valueCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearValue() {
      valueCase_ = ValueOneofCase.None;
      value_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PolicyTopicConstraint);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PolicyTopicConstraint other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(CountryConstraintList, other.CountryConstraintList)) return false;
      if (!object.Equals(ResellerConstraint, other.ResellerConstraint)) return false;
      if (!object.Equals(CertificateMissingInCountryList, other.CertificateMissingInCountryList)) return false;
      if (!object.Equals(CertificateDomainMismatchInCountryList, other.CertificateDomainMismatchInCountryList)) return false;
      if (ValueCase != other.ValueCase) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (valueCase_ == ValueOneofCase.CountryConstraintList) hash ^= CountryConstraintList.GetHashCode();
      if (valueCase_ == ValueOneofCase.ResellerConstraint) hash ^= ResellerConstraint.GetHashCode();
      if (valueCase_ == ValueOneofCase.CertificateMissingInCountryList) hash ^= CertificateMissingInCountryList.GetHashCode();
      if (valueCase_ == ValueOneofCase.CertificateDomainMismatchInCountryList) hash ^= CertificateDomainMismatchInCountryList.GetHashCode();
      hash ^= (int) valueCase_;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (valueCase_ == ValueOneofCase.CountryConstraintList) {
        output.WriteRawTag(10);
        output.WriteMessage(CountryConstraintList);
      }
      if (valueCase_ == ValueOneofCase.ResellerConstraint) {
        output.WriteRawTag(18);
        output.WriteMessage(ResellerConstraint);
      }
      if (valueCase_ == ValueOneofCase.CertificateMissingInCountryList) {
        output.WriteRawTag(26);
        output.WriteMessage(CertificateMissingInCountryList);
      }
      if (valueCase_ == ValueOneofCase.CertificateDomainMismatchInCountryList) {
        output.WriteRawTag(34);
        output.WriteMessage(CertificateDomainMismatchInCountryList);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (valueCase_ == ValueOneofCase.CountryConstraintList) {
        output.WriteRawTag(10);
        output.WriteMessage(CountryConstraintList);
      }
      if (valueCase_ == ValueOneofCase.ResellerConstraint) {
        output.WriteRawTag(18);
        output.WriteMessage(ResellerConstraint);
      }
      if (valueCase_ == ValueOneofCase.CertificateMissingInCountryList) {
        output.WriteRawTag(26);
        output.WriteMessage(CertificateMissingInCountryList);
      }
      if (valueCase_ == ValueOneofCase.CertificateDomainMismatchInCountryList) {
        output.WriteRawTag(34);
        output.WriteMessage(CertificateDomainMismatchInCountryList);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (valueCase_ == ValueOneofCase.CountryConstraintList) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(CountryConstraintList);
      }
      if (valueCase_ == ValueOneofCase.ResellerConstraint) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ResellerConstraint);
      }
      if (valueCase_ == ValueOneofCase.CertificateMissingInCountryList) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(CertificateMissingInCountryList);
      }
      if (valueCase_ == ValueOneofCase.CertificateDomainMismatchInCountryList) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(CertificateDomainMismatchInCountryList);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PolicyTopicConstraint other) {
      if (other == null) {
        return;
      }
      switch (other.ValueCase) {
        case ValueOneofCase.CountryConstraintList:
          if (CountryConstraintList == null) {
            CountryConstraintList = new global::Google.Ads.GoogleAds.V8.Common.PolicyTopicConstraint.Types.CountryConstraintList();
          }
          CountryConstraintList.MergeFrom(other.CountryConstraintList);
          break;
        case ValueOneofCase.ResellerConstraint:
          if (ResellerConstraint == null) {
            ResellerConstraint = new global::Google.Ads.GoogleAds.V8.Common.PolicyTopicConstraint.Types.ResellerConstraint();
          }
          ResellerConstraint.MergeFrom(other.ResellerConstraint);
          break;
        case ValueOneofCase.CertificateMissingInCountryList:
          if (CertificateMissingInCountryList == null) {
            CertificateMissingInCountryList = new global::Google.Ads.GoogleAds.V8.Common.PolicyTopicConstraint.Types.CountryConstraintList();
          }
          CertificateMissingInCountryList.MergeFrom(other.CertificateMissingInCountryList);
          break;
        case ValueOneofCase.CertificateDomainMismatchInCountryList:
          if (CertificateDomainMismatchInCountryList == null) {
            CertificateDomainMismatchInCountryList = new global::Google.Ads.GoogleAds.V8.Common.PolicyTopicConstraint.Types.CountryConstraintList();
          }
          CertificateDomainMismatchInCountryList.MergeFrom(other.CertificateDomainMismatchInCountryList);
          break;
      }

      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            global::Google.Ads.GoogleAds.V8.Common.PolicyTopicConstraint.Types.CountryConstraintList subBuilder = new global::Google.Ads.GoogleAds.V8.Common.PolicyTopicConstraint.Types.CountryConstraintList();
            if (valueCase_ == ValueOneofCase.CountryConstraintList) {
              subBuilder.MergeFrom(CountryConstraintList);
            }
            input.ReadMessage(subBuilder);
            CountryConstraintList = subBuilder;
            break;
          }
          case 18: {
            global::Google.Ads.GoogleAds.V8.Common.PolicyTopicConstraint.Types.ResellerConstraint subBuilder = new global::Google.Ads.GoogleAds.V8.Common.PolicyTopicConstraint.Types.ResellerConstraint();
            if (valueCase_ == ValueOneofCase.ResellerConstraint) {
              subBuilder.MergeFrom(ResellerConstraint);
            }
            input.ReadMessage(subBuilder);
            ResellerConstraint = subBuilder;
            break;
          }
          case 26: {
            global::Google.Ads.GoogleAds.V8.Common.PolicyTopicConstraint.Types.CountryConstraintList subBuilder = new global::Google.Ads.GoogleAds.V8.Common.PolicyTopicConstraint.Types.CountryConstraintList();
            if (valueCase_ == ValueOneofCase.CertificateMissingInCountryList) {
              subBuilder.MergeFrom(CertificateMissingInCountryList);
            }
            input.ReadMessage(subBuilder);
            CertificateMissingInCountryList = subBuilder;
            break;
          }
          case 34: {
            global::Google.Ads.GoogleAds.V8.Common.PolicyTopicConstraint.Types.CountryConstraintList subBuilder = new global::Google.Ads.GoogleAds.V8.Common.PolicyTopicConstraint.Types.CountryConstraintList();
            if (valueCase_ == ValueOneofCase.CertificateDomainMismatchInCountryList) {
              subBuilder.MergeFrom(CertificateDomainMismatchInCountryList);
            }
            input.ReadMessage(subBuilder);
            CertificateDomainMismatchInCountryList = subBuilder;
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            global::Google.Ads.GoogleAds.V8.Common.PolicyTopicConstraint.Types.CountryConstraintList subBuilder = new global::Google.Ads.GoogleAds.V8.Common.PolicyTopicConstraint.Types.CountryConstraintList();
            if (valueCase_ == ValueOneofCase.CountryConstraintList) {
              subBuilder.MergeFrom(CountryConstraintList);
            }
            input.ReadMessage(subBuilder);
            CountryConstraintList = subBuilder;
            break;
          }
          case 18: {
            global::Google.Ads.GoogleAds.V8.Common.PolicyTopicConstraint.Types.ResellerConstraint subBuilder = new global::Google.Ads.GoogleAds.V8.Common.PolicyTopicConstraint.Types.ResellerConstraint();
            if (valueCase_ == ValueOneofCase.ResellerConstraint) {
              subBuilder.MergeFrom(ResellerConstraint);
            }
            input.ReadMessage(subBuilder);
            ResellerConstraint = subBuilder;
            break;
          }
          case 26: {
            global::Google.Ads.GoogleAds.V8.Common.PolicyTopicConstraint.Types.CountryConstraintList subBuilder = new global::Google.Ads.GoogleAds.V8.Common.PolicyTopicConstraint.Types.CountryConstraintList();
            if (valueCase_ == ValueOneofCase.CertificateMissingInCountryList) {
              subBuilder.MergeFrom(CertificateMissingInCountryList);
            }
            input.ReadMessage(subBuilder);
            CertificateMissingInCountryList = subBuilder;
            break;
          }
          case 34: {
            global::Google.Ads.GoogleAds.V8.Common.PolicyTopicConstraint.Types.CountryConstraintList subBuilder = new global::Google.Ads.GoogleAds.V8.Common.PolicyTopicConstraint.Types.CountryConstraintList();
            if (valueCase_ == ValueOneofCase.CertificateDomainMismatchInCountryList) {
              subBuilder.MergeFrom(CertificateDomainMismatchInCountryList);
            }
            input.ReadMessage(subBuilder);
            CertificateDomainMismatchInCountryList = subBuilder;
            break;
          }
        }
      }
    }
    #endif

    #region Nested types
    /// <summary>Container for nested types declared in the PolicyTopicConstraint message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      /// <summary>
      /// A list of countries where a resource's serving is constrained.
      /// </summary>
      public sealed partial class CountryConstraintList : pb::IMessage<CountryConstraintList>
      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          , pb::IBufferMessage
      #endif
      {
        private static readonly pb::MessageParser<CountryConstraintList> _parser = new pb::MessageParser<CountryConstraintList>(() => new CountryConstraintList());
        private pb::UnknownFieldSet _unknownFields;
        private int _hasBits0;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<CountryConstraintList> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Google.Ads.GoogleAds.V8.Common.PolicyTopicConstraint.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public CountryConstraintList() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public CountryConstraintList(CountryConstraintList other) : this() {
          _hasBits0 = other._hasBits0;
          totalTargetedCountries_ = other.totalTargetedCountries_;
          countries_ = other.countries_.Clone();
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public CountryConstraintList Clone() {
          return new CountryConstraintList(this);
        }

        /// <summary>Field number for the "total_targeted_countries" field.</summary>
        public const int TotalTargetedCountriesFieldNumber = 3;
        private int totalTargetedCountries_;
        /// <summary>
        /// Total number of countries targeted by the resource.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int TotalTargetedCountries {
          get { if ((_hasBits0 & 1) != 0) { return totalTargetedCountries_; } else { return 0; } }
          set {
            _hasBits0 |= 1;
            totalTargetedCountries_ = value;
          }
        }
        /// <summary>Gets whether the "total_targeted_countries" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasTotalTargetedCountries {
          get { return (_hasBits0 & 1) != 0; }
        }
        /// <summary>Clears the value of the "total_targeted_countries" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearTotalTargetedCountries() {
          _hasBits0 &= ~1;
        }

        /// <summary>Field number for the "countries" field.</summary>
        public const int CountriesFieldNumber = 2;
        private static readonly pb::FieldCodec<global::Google.Ads.GoogleAds.V8.Common.PolicyTopicConstraint.Types.CountryConstraint> _repeated_countries_codec
            = pb::FieldCodec.ForMessage(18, global::Google.Ads.GoogleAds.V8.Common.PolicyTopicConstraint.Types.CountryConstraint.Parser);
        private readonly pbc::RepeatedField<global::Google.Ads.GoogleAds.V8.Common.PolicyTopicConstraint.Types.CountryConstraint> countries_ = new pbc::RepeatedField<global::Google.Ads.GoogleAds.V8.Common.PolicyTopicConstraint.Types.CountryConstraint>();
        /// <summary>
        /// Countries in which serving is restricted.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<global::Google.Ads.GoogleAds.V8.Common.PolicyTopicConstraint.Types.CountryConstraint> Countries {
          get { return countries_; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as CountryConstraintList);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(CountryConstraintList other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (TotalTargetedCountries != other.TotalTargetedCountries) return false;
          if(!countries_.Equals(other.countries_)) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (HasTotalTargetedCountries) hash ^= TotalTargetedCountries.GetHashCode();
          hash ^= countries_.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          output.WriteRawMessage(this);
        #else
          countries_.WriteTo(output, _repeated_countries_codec);
          if (HasTotalTargetedCountries) {
            output.WriteRawTag(24);
            output.WriteInt32(TotalTargetedCountries);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
          countries_.WriteTo(ref output, _repeated_countries_codec);
          if (HasTotalTargetedCountries) {
            output.WriteRawTag(24);
            output.WriteInt32(TotalTargetedCountries);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(ref output);
          }
        }
        #endif

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (HasTotalTargetedCountries) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(TotalTargetedCountries);
          }
          size += countries_.CalculateSize(_repeated_countries_codec);
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(CountryConstraintList other) {
          if (other == null) {
            return;
          }
          if (other.HasTotalTargetedCountries) {
            TotalTargetedCountries = other.TotalTargetedCountries;
          }
          countries_.Add(other.countries_);
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          input.ReadRawMessage(this);
        #else
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 18: {
                countries_.AddEntriesFrom(input, _repeated_countries_codec);
                break;
              }
              case 24: {
                TotalTargetedCountries = input.ReadInt32();
                break;
              }
            }
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
                break;
              case 18: {
                countries_.AddEntriesFrom(ref input, _repeated_countries_codec);
                break;
              }
              case 24: {
                TotalTargetedCountries = input.ReadInt32();
                break;
              }
            }
          }
        }
        #endif

      }

      /// <summary>
      /// Indicates that a policy topic was constrained due to disapproval of the
      /// website for reseller purposes.
      /// </summary>
      public sealed partial class ResellerConstraint : pb::IMessage<ResellerConstraint>
      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          , pb::IBufferMessage
      #endif
      {
        private static readonly pb::MessageParser<ResellerConstraint> _parser = new pb::MessageParser<ResellerConstraint>(() => new ResellerConstraint());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<ResellerConstraint> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Google.Ads.GoogleAds.V8.Common.PolicyTopicConstraint.Descriptor.NestedTypes[1]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ResellerConstraint() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ResellerConstraint(ResellerConstraint other) : this() {
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ResellerConstraint Clone() {
          return new ResellerConstraint(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as ResellerConstraint);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(ResellerConstraint other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          output.WriteRawMessage(this);
        #else
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
          if (_unknownFields != null) {
            _unknownFields.WriteTo(ref output);
          }
        }
        #endif

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(ResellerConstraint other) {
          if (other == null) {
            return;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          input.ReadRawMessage(this);
        #else
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
            }
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
                break;
            }
          }
        }
        #endif

      }

      /// <summary>
      /// Indicates that a resource's ability to serve in a particular country is
      /// constrained.
      /// </summary>
      public sealed partial class CountryConstraint : pb::IMessage<CountryConstraint>
      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          , pb::IBufferMessage
      #endif
      {
        private static readonly pb::MessageParser<CountryConstraint> _parser = new pb::MessageParser<CountryConstraint>(() => new CountryConstraint());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<CountryConstraint> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Google.Ads.GoogleAds.V8.Common.PolicyTopicConstraint.Descriptor.NestedTypes[2]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public CountryConstraint() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public CountryConstraint(CountryConstraint other) : this() {
          countryCriterion_ = other.countryCriterion_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public CountryConstraint Clone() {
          return new CountryConstraint(this);
        }

        /// <summary>Field number for the "country_criterion" field.</summary>
        public const int CountryCriterionFieldNumber = 2;
        private string countryCriterion_;
        /// <summary>
        /// Geo target constant resource name of the country in which serving is
        /// constrained.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string CountryCriterion {
          get { return countryCriterion_ ?? ""; }
          set {
            countryCriterion_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }
        /// <summary>Gets whether the "country_criterion" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasCountryCriterion {
          get { return countryCriterion_ != null; }
        }
        /// <summary>Clears the value of the "country_criterion" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearCountryCriterion() {
          countryCriterion_ = null;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as CountryConstraint);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(CountryConstraint other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (CountryCriterion != other.CountryCriterion) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (HasCountryCriterion) hash ^= CountryCriterion.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          output.WriteRawMessage(this);
        #else
          if (HasCountryCriterion) {
            output.WriteRawTag(18);
            output.WriteString(CountryCriterion);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
          if (HasCountryCriterion) {
            output.WriteRawTag(18);
            output.WriteString(CountryCriterion);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(ref output);
          }
        }
        #endif

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (HasCountryCriterion) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(CountryCriterion);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(CountryConstraint other) {
          if (other == null) {
            return;
          }
          if (other.HasCountryCriterion) {
            CountryCriterion = other.CountryCriterion;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          input.ReadRawMessage(this);
        #else
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 18: {
                CountryCriterion = input.ReadString();
                break;
              }
            }
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
                break;
              case 18: {
                CountryCriterion = input.ReadString();
                break;
              }
            }
          }
        }
        #endif

      }

    }
    #endregion

  }

  #endregion

}

#endregion Designer generated code
